<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<profile xmlns="http://www.verapdf.org/ValidationProfile" flavour="ARLINGTON1_3">
	<details creator="veraPDF Consortium" created="2022-05-23T21:45:28.872+03:00">
		<name>Arlington PDF 1.3 validation profile</name>
		<description>Validation rules against PDF 1.3 Specification</description>
	</details>
	<hash></hash>
	<rules>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="1" testNumber="894"/>
			<description>AAPL_ST shall not contain entries except Color, ColorSpace, Offset, Radius, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Color' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Offset' &amp;&amp; elem != 'Radius' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AAPL_ST contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Color' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Offset' &amp;&amp; elem != 'Radius' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="17" testNumber="895"/>
			<description>Entry Color with type Array in AAPL_ST shall be object ArrayOfNumbersGeneral</description>
			<test>ColorHasTypeArray != true || Color_size == 1</test>
			<error>
				<message>Entry Color with type Array in AAPL_ST is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="8" testNumber="896"/>
			<description>Entry Color in AAPL_ST shall have type Array</description>
			<test>containsColor == false || ColorHasTypeArray == true</test>
			<error>
				<message>Entry Color in AAPL_ST is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="17" testNumber="897"/>
			<description>Entry ColorSpace with type Array in AAPL_ST shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in AAPL_ST is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="8" testNumber="898"/>
			<description>Entry ColorSpace in AAPL_ST shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in AAPL_ST is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="6" testNumber="899"/>
			<description>Entry ColorSpace with type Name in AAPL_ST shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in AAPL_ST has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="17" testNumber="900"/>
			<description>Entry Offset with type Array in AAPL_ST shall be object ArrayOf_2Numbers</description>
			<test>OffsetHasTypeArray != true || Offset_size == 1</test>
			<error>
				<message>Entry Offset with type Array in AAPL_ST is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="8" testNumber="901"/>
			<description>Entry Offset in AAPL_ST shall have type Array</description>
			<test>containsOffset == false || OffsetHasTypeArray == true</test>
			<error>
				<message>Entry Offset in AAPL_ST is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="8" testNumber="902"/>
			<description>Entry Radius in AAPL_ST shall have type Number</description>
			<test>containsRadius == false || RadiusHasTypeNumber == true</test>
			<error>
				<message>Entry Radius in AAPL_ST is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="9" testNumber="903"/>
			<description>Entry Radius with type Number in AAPL_ST shall satisfy special case: fn:Eval(@Radius &gt; 0)</description>
			<test>RadiusHasTypeNumber != true || (RadiusNumberValue &gt; 0)</test>
			<error>
				<message>Entry Radius with type Number in AAPL_ST does not satisfy special case: fn:Eval(@Radius &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="8" testNumber="904"/>
			<description>Entry Subtype in AAPL_ST shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AAPL_ST is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="6" testNumber="905"/>
			<description>Entry Subtype with type Name in AAPL_ST shall have value Shadow</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Shadow"</test>
			<error>
				<message>Entry Subtype with type Name in AAPL_ST has incorrect value %2 instead of Shadow</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="8" testNumber="906"/>
			<description>Entry Type in AAPL_ST shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AAPL_ST is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_3" clause="6" testNumber="907"/>
			<description>Entry Type with type Name in AAPL_ST shall have value Style</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Style"</test>
			<error>
				<message>Entry Type with type Name in AAPL_ST has incorrect value %2 instead of Style</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_3" clause="1" testNumber="978"/>
			<description>ActionECMAScript shall not contain entries except JS, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'JS' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionECMAScript contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'JS' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_3" clause="17" testNumber="979"/>
			<description>Entry JS with type Stream in ActionECMAScript shall be object Stream</description>
			<test>JSHasTypeStream != true || JS_size == 1</test>
			<error>
				<message>Entry JS with type Stream in ActionECMAScript is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_3" clause="8" testNumber="980"/>
			<description>Entry JS in ActionECMAScript shall have one of types: Stream, StringText</description>
			<test>containsJS == false || JSHasTypeStream == true || JSHasTypeStringText == true</test>
			<error>
				<message>Entry JS in ActionECMAScript is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_3" clause="7" testNumber="981"/>
			<description>Entry JS in ActionECMAScript is required</description>
			<test>containsJS == true</test>
			<error>
				<message>Entry JS in ActionECMAScript is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_3" clause="10" testNumber="982"/>
			<description>Entry JS with type Stream in ActionECMAScript shall be indirect</description>
			<test>JSHasTypeStream != true || isJSIndirect == true</test>
			<error>
				<message>Entry JS with type Stream in ActionECMAScript is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_3" clause="17" testNumber="983"/>
			<description>Entry Next with type Array in ActionECMAScript shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionECMAScript is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_3" clause="17" testNumber="984"/>
			<description>Entry Next with type Dictionary in ActionECMAScript shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionECMAScript is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_3" clause="8" testNumber="985"/>
			<description>Entry Next in ActionECMAScript shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionECMAScript is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_3" clause="8" testNumber="986"/>
			<description>Entry S in ActionECMAScript shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionECMAScript is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_3" clause="7" testNumber="987"/>
			<description>Entry S in ActionECMAScript is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionECMAScript is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_3" clause="6" testNumber="988"/>
			<description>Entry S with type Name in ActionECMAScript shall have value JavaScript</description>
			<test>SHasTypeName != true || SNameValue == "JavaScript"</test>
			<error>
				<message>Entry S with type Name in ActionECMAScript has incorrect value %2 instead of JavaScript</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_3" clause="8" testNumber="989"/>
			<description>Entry Type in ActionECMAScript shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionECMAScript is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_3" clause="6" testNumber="990"/>
			<description>Entry Type with type Name in ActionECMAScript shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionECMAScript has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_3" clause="1" testNumber="1077"/>
			<description>ActionGoTo shall not contain entries except D, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionGoTo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1078"/>
			<description>Entry D with type Array in ActionGoTo shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in ActionGoTo is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1079"/>
			<description>Entry D in ActionGoTo shall have one of types: Array, StringByte, Name</description>
			<test>containsD == false || DHasTypeArray == true || DHasTypeStringByte == true || DHasTypeName == true</test>
			<error>
				<message>Entry D in ActionGoTo is not one of types: Array, StringByte, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1080"/>
			<description>Entry D in ActionGoTo is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionGoTo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1081"/>
			<description>Entry Next with type Array in ActionGoTo shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionGoTo is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1082"/>
			<description>Entry Next with type Dictionary in ActionGoTo shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionGoTo is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1083"/>
			<description>Entry Next in ActionGoTo shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionGoTo is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1084"/>
			<description>Entry S in ActionGoTo shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoTo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1085"/>
			<description>Entry S in ActionGoTo is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoTo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1086"/>
			<description>Entry S with type Name in ActionGoTo shall have value GoTo</description>
			<test>SHasTypeName != true || SNameValue == "GoTo"</test>
			<error>
				<message>Entry S with type Name in ActionGoTo has incorrect value %2 instead of GoTo</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1087"/>
			<description>Entry Type in ActionGoTo shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoTo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1088"/>
			<description>Entry Type with type Name in ActionGoTo shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoTo has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="1" testNumber="1291"/>
			<description>ActionGoToR shall not contain entries except D, F, NewWindow, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionGoToR contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1292"/>
			<description>Entry D with type Array in ActionGoToR shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in ActionGoToR is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1293"/>
			<description>Entry D in ActionGoToR shall have one of types: Array, StringByte, Name</description>
			<test>containsD == false || DHasTypeArray == true || DHasTypeStringByte == true || DHasTypeName == true</test>
			<error>
				<message>Entry D in ActionGoToR is not one of types: Array, StringByte, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1294"/>
			<description>Entry D in ActionGoToR is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionGoToR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1295"/>
			<description>Entry F with type Dictionary in ActionGoToR shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionGoToR is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1296"/>
			<description>Entry F in ActionGoToR shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ActionGoToR is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1297"/>
			<description>Entry F in ActionGoToR is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in ActionGoToR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1298"/>
			<description>Entry NewWindow in ActionGoToR shall have type Boolean</description>
			<test>containsNewWindow == false || NewWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry NewWindow in ActionGoToR is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1299"/>
			<description>Entry Next with type Array in ActionGoToR shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionGoToR is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1300"/>
			<description>Entry Next with type Dictionary in ActionGoToR shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionGoToR is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1301"/>
			<description>Entry Next in ActionGoToR shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionGoToR is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1302"/>
			<description>Entry S in ActionGoToR shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoToR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1303"/>
			<description>Entry S in ActionGoToR is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoToR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1304"/>
			<description>Entry S with type Name in ActionGoToR shall have value GoToR</description>
			<test>SHasTypeName != true || SNameValue == "GoToR"</test>
			<error>
				<message>Entry S with type Name in ActionGoToR has incorrect value %2 instead of GoToR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1305"/>
			<description>Entry Type in ActionGoToR shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoToR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1306"/>
			<description>Entry Type with type Name in ActionGoToR shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoToR has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="1" testNumber="1405"/>
			<description>ActionHide shall not contain entries except H, Next, S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionHide contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1406"/>
			<description>Entry H in ActionHide shall have type Boolean</description>
			<test>containsH == false || HHasTypeBoolean == true</test>
			<error>
				<message>Entry H in ActionHide is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1407"/>
			<description>Entry Next with type Array in ActionHide shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionHide is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1408"/>
			<description>Entry Next with type Dictionary in ActionHide shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionHide is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1409"/>
			<description>Entry Next in ActionHide shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionHide is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1410"/>
			<description>Entry S in ActionHide shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionHide is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1411"/>
			<description>Entry S in ActionHide is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionHide is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1412"/>
			<description>Entry S with type Name in ActionHide shall have value Hide</description>
			<test>SHasTypeName != true || SNameValue == "Hide"</test>
			<error>
				<message>Entry S with type Name in ActionHide has incorrect value %2 instead of Hide</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1413"/>
			<description>Entry T with type Array in ActionHide shall be object ArrayOfActionHideAnnots</description>
			<test>THasTypeArray != true || T_size == 1</test>
			<error>
				<message>Entry T with type Array in ActionHide is not object ArrayOfActionHideAnnots</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1414"/>
			<description>Entry T with type Dictionary in ActionHide shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotHighlight, AnnotUnderline, AnnotStrikeOut, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotWidget, AnnotTrapNetwork</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in ActionHide is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotHighlight, AnnotUnderline, AnnotStrikeOut, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotWidget, AnnotTrapNetwork</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1415"/>
			<description>Entry T in ActionHide shall have one of types: Array, StringText, Dictionary</description>
			<test>containsT == false || THasTypeArray == true || THasTypeStringText == true || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in ActionHide is not one of types: Array, StringText, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1416"/>
			<description>Entry T in ActionHide is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in ActionHide is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="9" testNumber="1417"/>
			<description>Entry T with type StringText in ActionHide shall satisfy special case: fn:Eval(fn:IsFieldName(@T))</description>
			<test>THasTypeStringText != true || (TIsFieldName == true)</test>
			<error>
				<message>Entry T with type StringText in ActionHide does not satisfy special case: fn:Eval(fn:IsFieldName(@T))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="10" testNumber="1418"/>
			<description>Entry T with type Dictionary in ActionHide shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in ActionHide is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1419"/>
			<description>Entry Type in ActionHide shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionHide is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1420"/>
			<description>Entry Type with type Name in ActionHide shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionHide has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_3" clause="1" testNumber="1513"/>
			<description>ActionImportData shall not contain entries except F, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionImportData contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1514"/>
			<description>Entry F with type Dictionary in ActionImportData shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionImportData is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1515"/>
			<description>Entry F in ActionImportData shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ActionImportData is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1516"/>
			<description>Entry F in ActionImportData is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in ActionImportData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1517"/>
			<description>Entry Next with type Array in ActionImportData shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionImportData is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1518"/>
			<description>Entry Next with type Dictionary in ActionImportData shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionImportData is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1519"/>
			<description>Entry Next in ActionImportData shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionImportData is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1520"/>
			<description>Entry S in ActionImportData shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionImportData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1521"/>
			<description>Entry S in ActionImportData is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionImportData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1522"/>
			<description>Entry S with type Name in ActionImportData shall have value ImportData</description>
			<test>SHasTypeName != true || SNameValue == "ImportData"</test>
			<error>
				<message>Entry S with type Name in ActionImportData has incorrect value %2 instead of ImportData</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1523"/>
			<description>Entry Type in ActionImportData shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionImportData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1524"/>
			<description>Entry Type with type Name in ActionImportData shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionImportData has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="1" testNumber="1615"/>
			<description>ActionLaunch shall not contain entries except F, Mac, NewWindow, Next, S, Type, Unix, Win</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'Win').length == 0</test>
			<error>
				<message>ActionLaunch contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'Win').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1616"/>
			<description>Entry F with type Dictionary in ActionLaunch shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionLaunch is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1617"/>
			<description>Entry F in ActionLaunch shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ActionLaunch is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="11" testNumber="1618"/>
			<description>Entry F in ActionLaunch is required, when fn:IsRequired(fn:Not(fn:IsPresent(Win) || fn:IsPresent(Mac) || fn:IsPresent(Unix)))</description>
			<test>(containsF == true || (((containsWin == true) || (containsMac == true) || (containsUnix == true)) != true) == false)</test>
			<error>
				<message>Entry F in ActionLaunch is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1619"/>
			<description>Entry Mac in ActionLaunch shall have type Null</description>
			<test>containsMac == false || MacHasTypeNull == true</test>
			<error>
				<message>Entry Mac in ActionLaunch is not of type Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1620"/>
			<description>Entry NewWindow in ActionLaunch shall have type Boolean</description>
			<test>containsNewWindow == false || NewWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry NewWindow in ActionLaunch is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1621"/>
			<description>Entry Next with type Array in ActionLaunch shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionLaunch is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1622"/>
			<description>Entry Next with type Dictionary in ActionLaunch shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionLaunch is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1623"/>
			<description>Entry Next in ActionLaunch shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionLaunch is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1624"/>
			<description>Entry S in ActionLaunch shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionLaunch is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1625"/>
			<description>Entry S in ActionLaunch is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionLaunch is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1626"/>
			<description>Entry S with type Name in ActionLaunch shall have value Launch</description>
			<test>SHasTypeName != true || SNameValue == "Launch"</test>
			<error>
				<message>Entry S with type Name in ActionLaunch has incorrect value %2 instead of Launch</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1627"/>
			<description>Entry Type in ActionLaunch shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionLaunch is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1628"/>
			<description>Entry Type with type Name in ActionLaunch shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionLaunch has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1629"/>
			<description>Entry Unix in ActionLaunch shall have type Null</description>
			<test>containsUnix == false || UnixHasTypeNull == true</test>
			<error>
				<message>Entry Unix in ActionLaunch is not of type Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1630"/>
			<description>Entry Win with type Dictionary in ActionLaunch shall be object MicrosoftWindowsLaunchParam</description>
			<test>WinHasTypeDictionary != true || Win_size == 1</test>
			<error>
				<message>Entry Win with type Dictionary in ActionLaunch is not object MicrosoftWindowsLaunchParam</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1631"/>
			<description>Entry Win in ActionLaunch shall have type Dictionary</description>
			<test>containsWin == false || WinHasTypeDictionary == true</test>
			<error>
				<message>Entry Win in ActionLaunch is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="1" testNumber="1731"/>
			<description>ActionMovie shall not contain entries except Annotation, Next, Operation, S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Annotation' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Operation' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionMovie contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Annotation' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Operation' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1732"/>
			<description>Entry Annotation with type Dictionary in ActionMovie shall be object AnnotMovie</description>
			<test>AnnotationHasTypeDictionary != true || Annotation_size == 1</test>
			<error>
				<message>Entry Annotation with type Dictionary in ActionMovie is not object AnnotMovie</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1733"/>
			<description>Entry Annotation in ActionMovie shall have type Dictionary</description>
			<test>containsAnnotation == false || AnnotationHasTypeDictionary == true</test>
			<error>
				<message>Entry Annotation in ActionMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1734"/>
			<description>Entry Next with type Array in ActionMovie shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionMovie is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1735"/>
			<description>Entry Next with type Dictionary in ActionMovie shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionMovie is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1736"/>
			<description>Entry Next in ActionMovie shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionMovie is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1737"/>
			<description>Entry Operation in ActionMovie shall have type Name</description>
			<test>containsOperation == false || OperationHasTypeName == true</test>
			<error>
				<message>Entry Operation in ActionMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1738"/>
			<description>Entry Operation with type Name in ActionMovie shall have one of values: Play, Pause, Stop, Resume</description>
			<test>OperationHasTypeName != true || OperationNameValue == "Play" || OperationNameValue == "Stop" || OperationNameValue == "Pause" || OperationNameValue == "Resume"</test>
			<error>
				<message>Entry Operation with type Name in ActionMovie has incorrect value %2 instead of Play, Pause, Stop, Resume</message>
				<arguments>
					<argument>keyName</argument>
					<argument>OperationNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1739"/>
			<description>Entry S in ActionMovie shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1740"/>
			<description>Entry S in ActionMovie is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1741"/>
			<description>Entry S with type Name in ActionMovie shall have value Movie</description>
			<test>SHasTypeName != true || SNameValue == "Movie"</test>
			<error>
				<message>Entry S with type Name in ActionMovie has incorrect value %2 instead of Movie</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1742"/>
			<description>Entry T in ActionMovie shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in ActionMovie is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1743"/>
			<description>Entry Type in ActionMovie shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1744"/>
			<description>Entry Type with type Name in ActionMovie shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionMovie has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_3" clause="1" testNumber="1821"/>
			<description>ActionNOP shall not contain entries except S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionNOP contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1822"/>
			<description>Entry S in ActionNOP shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionNOP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1823"/>
			<description>Entry S in ActionNOP is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionNOP is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_3" clause="5" testNumber="1824"/>
			<description>Entry S in ActionNOP is deprecated since PDF 1.2</description>
			<test>containsS == false</test>
			<error>
				<message>Entry S in ActionNOP is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1825"/>
			<description>Entry S with type Name in ActionNOP shall have value NOP</description>
			<test>SHasTypeName != true || SNameValue == "NOP"</test>
			<error>
				<message>Entry S with type Name in ActionNOP has incorrect value %2 instead of NOP</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1826"/>
			<description>Entry Type in ActionNOP shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionNOP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_3" clause="5" testNumber="1827"/>
			<description>Entry Type in ActionNOP is deprecated since PDF 1.2</description>
			<test>containsType == false</test>
			<error>
				<message>Entry Type in ActionNOP is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1828"/>
			<description>Entry Type with type Name in ActionNOP shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionNOP has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_3" clause="1" testNumber="1880"/>
			<description>ActionNamed shall not contain entries except N, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionNamed contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1881"/>
			<description>Entry N in ActionNamed shall have type Name</description>
			<test>containsN == false || NHasTypeName == true</test>
			<error>
				<message>Entry N in ActionNamed is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1882"/>
			<description>Entry N in ActionNamed is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in ActionNamed is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1883"/>
			<description>Entry Next with type Array in ActionNamed shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionNamed is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_3" clause="17" testNumber="1884"/>
			<description>Entry Next with type Dictionary in ActionNamed shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionNamed is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1885"/>
			<description>Entry Next in ActionNamed shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionNamed is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1886"/>
			<description>Entry S in ActionNamed shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionNamed is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_3" clause="7" testNumber="1887"/>
			<description>Entry S in ActionNamed is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionNamed is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1888"/>
			<description>Entry S with type Name in ActionNamed shall have value Named</description>
			<test>SHasTypeName != true || SNameValue == "Named"</test>
			<error>
				<message>Entry S with type Name in ActionNamed has incorrect value %2 instead of Named</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_3" clause="8" testNumber="1889"/>
			<description>Entry Type in ActionNamed shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionNamed is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_3" clause="6" testNumber="1890"/>
			<description>Entry Type with type Name in ActionNamed shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionNamed has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="1" testNumber="2044"/>
			<description>ActionResetForm shall not contain entries except Fields, Flags, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Fields' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionResetForm contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Fields' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2045"/>
			<description>Entry Fields with type Array in ActionResetForm shall be object ArrayOfFieldID</description>
			<test>FieldsHasTypeArray != true || Fields_size == 1</test>
			<error>
				<message>Entry Fields with type Array in ActionResetForm is not object ArrayOfFieldID</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2046"/>
			<description>Entry Fields in ActionResetForm shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in ActionResetForm is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2047"/>
			<description>Entry Flags in ActionResetForm shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in ActionResetForm is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="6" testNumber="2048"/>
			<description>Entry Flags with type Bitmask in ActionResetForm shall have one of values: 0, 1</description>
			<test>FlagsHasTypeBitmask != true || FlagsBitmaskValue == 0 || FlagsBitmaskValue == 1</test>
			<error>
				<message>Entry Flags with type Bitmask in ActionResetForm has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FlagsBitmaskValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="9" testNumber="2049"/>
			<description>Entry Flags with type Bitmask in ActionResetForm shall satisfy special case: fn:Eval(fn:BitsClear(2 , 32))</description>
			<test>FlagsHasTypeBitmask != true || (((FlagsBitmaskValue &gt;&gt; 1 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 2 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in ActionResetForm does not satisfy special case: fn:Eval(fn:BitsClear(2 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2050"/>
			<description>Entry Next with type Array in ActionResetForm shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionResetForm is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2051"/>
			<description>Entry Next with type Dictionary in ActionResetForm shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionResetForm is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2052"/>
			<description>Entry Next in ActionResetForm shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionResetForm is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2053"/>
			<description>Entry S in ActionResetForm shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionResetForm is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="7" testNumber="2054"/>
			<description>Entry S in ActionResetForm is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionResetForm is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="6" testNumber="2055"/>
			<description>Entry S with type Name in ActionResetForm shall have value ResetForm</description>
			<test>SHasTypeName != true || SNameValue == "ResetForm"</test>
			<error>
				<message>Entry S with type Name in ActionResetForm has incorrect value %2 instead of ResetForm</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2056"/>
			<description>Entry Type in ActionResetForm shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionResetForm is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_3" clause="6" testNumber="2057"/>
			<description>Entry Type with type Name in ActionResetForm shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionResetForm has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="1" testNumber="2230"/>
			<description>ActionSetState shall not contain entries except AS, S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AS' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionSetState contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AS' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2231"/>
			<description>Entry AS in ActionSetState shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in ActionSetState is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="5" testNumber="2232"/>
			<description>Entry AS in ActionSetState is deprecated since PDF 1.2</description>
			<test>containsAS == false</test>
			<error>
				<message>Entry AS in ActionSetState is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2233"/>
			<description>Entry S in ActionSetState shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSetState is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="7" testNumber="2234"/>
			<description>Entry S in ActionSetState is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSetState is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="5" testNumber="2235"/>
			<description>Entry S in ActionSetState is deprecated since PDF 1.2</description>
			<test>containsS == false</test>
			<error>
				<message>Entry S in ActionSetState is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="6" testNumber="2236"/>
			<description>Entry S with type Name in ActionSetState shall have value SetState</description>
			<test>SHasTypeName != true || SNameValue == "SetState"</test>
			<error>
				<message>Entry S with type Name in ActionSetState has incorrect value %2 instead of SetState</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2237"/>
			<description>Entry T with type Array in ActionSetState shall be object ArrayOfAnnots</description>
			<test>THasTypeArray != true || T_size == 1</test>
			<error>
				<message>Entry T with type Array in ActionSetState is not object ArrayOfAnnots</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2238"/>
			<description>Entry T with type Dictionary in ActionSetState shall be one of objects AnnotText, AnnotLink, AnnotSound, AnnotMovie, AnnotWidget</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in ActionSetState is not one of objects AnnotText, AnnotLink, AnnotSound, AnnotMovie, AnnotWidget</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2239"/>
			<description>Entry T in ActionSetState shall have one of types: Array, Dictionary</description>
			<test>containsT == false || THasTypeArray == true || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in ActionSetState is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="7" testNumber="2240"/>
			<description>Entry T in ActionSetState is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in ActionSetState is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="5" testNumber="2241"/>
			<description>Entry T in ActionSetState is deprecated since PDF 1.2</description>
			<test>containsT == false</test>
			<error>
				<message>Entry T in ActionSetState is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="10" testNumber="2242"/>
			<description>Entry T with type Dictionary in ActionSetState shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in ActionSetState is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2243"/>
			<description>Entry Type in ActionSetState shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionSetState is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="5" testNumber="2244"/>
			<description>Entry Type in ActionSetState is deprecated since PDF 1.2</description>
			<test>containsType == false</test>
			<error>
				<message>Entry Type in ActionSetState is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_3" clause="6" testNumber="2245"/>
			<description>Entry Type with type Name in ActionSetState shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionSetState has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="1" testNumber="2344"/>
			<description>ActionSound shall not contain entries except Mix, Next, Repeat, S, Sound, Synchronous, Type, Volume</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Mix' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Repeat' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Volume').length == 0</test>
			<error>
				<message>ActionSound contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Mix' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Repeat' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Volume').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2345"/>
			<description>Entry Mix in ActionSound shall have type Boolean</description>
			<test>containsMix == false || MixHasTypeBoolean == true</test>
			<error>
				<message>Entry Mix in ActionSound is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2346"/>
			<description>Entry Next with type Array in ActionSound shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionSound is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2347"/>
			<description>Entry Next with type Dictionary in ActionSound shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionSound is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2348"/>
			<description>Entry Next in ActionSound shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionSound is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2349"/>
			<description>Entry Repeat in ActionSound shall have type Boolean</description>
			<test>containsRepeat == false || RepeatHasTypeBoolean == true</test>
			<error>
				<message>Entry Repeat in ActionSound is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2350"/>
			<description>Entry S in ActionSound shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="7" testNumber="2351"/>
			<description>Entry S in ActionSound is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="6" testNumber="2352"/>
			<description>Entry S with type Name in ActionSound shall have value Sound</description>
			<test>SHasTypeName != true || SNameValue == "Sound"</test>
			<error>
				<message>Entry S with type Name in ActionSound has incorrect value %2 instead of Sound</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2353"/>
			<description>Entry Sound with type Stream in ActionSound shall be object SoundObject</description>
			<test>SoundHasTypeStream != true || Sound_size == 1</test>
			<error>
				<message>Entry Sound with type Stream in ActionSound is not object SoundObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2354"/>
			<description>Entry Sound in ActionSound shall have type Stream</description>
			<test>containsSound == false || SoundHasTypeStream == true</test>
			<error>
				<message>Entry Sound in ActionSound is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="7" testNumber="2355"/>
			<description>Entry Sound in ActionSound is required</description>
			<test>containsSound == true</test>
			<error>
				<message>Entry Sound in ActionSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="10" testNumber="2356"/>
			<description>Entry Sound with type Stream in ActionSound shall be indirect</description>
			<test>SoundHasTypeStream != true || isSoundIndirect == true</test>
			<error>
				<message>Entry Sound with type Stream in ActionSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2357"/>
			<description>Entry Synchronous in ActionSound shall have type Boolean</description>
			<test>containsSynchronous == false || SynchronousHasTypeBoolean == true</test>
			<error>
				<message>Entry Synchronous in ActionSound is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2358"/>
			<description>Entry Type in ActionSound shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="6" testNumber="2359"/>
			<description>Entry Type with type Name in ActionSound shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionSound has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2360"/>
			<description>Entry Volume in ActionSound shall have type Number</description>
			<test>containsVolume == false || VolumeHasTypeNumber == true</test>
			<error>
				<message>Entry Volume in ActionSound is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_3" clause="14" testNumber="2361"/>
			<description>Entry Volume with type Number in ActionSound shall satisfy possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</description>
			<test>VolumeHasTypeNumber != true || (VolumeNumberValue &gt;= - 1) &amp;&amp; (VolumeNumberValue &lt;= 1)</test>
			<error>
				<message>Entry Volume with type Number in ActionSound does not satisfy possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_3" clause="1" testNumber="2465"/>
			<description>ActionSubmitForm shall not contain entries except CharSet, F, Fields, Flags, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CharSet' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>ActionSubmitForm contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CharSet' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2466"/>
			<description>Entry CharSet in ActionSubmitForm shall have type String</description>
			<test>containsCharSet == false || CharSetHasTypeString == true</test>
			<error>
				<message>Entry CharSet in ActionSubmitForm is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_3" clause="6" testNumber="2467"/>
			<description>Entry CharSet with type String in ActionSubmitForm shall have one of values: GBK, UHC, utf-16, utf-8, Shift-JIS, BigFive</description>
			<test>CharSetHasTypeString != true || CharSetStringValue == "utf-8" || CharSetStringValue == "utf-16" || CharSetStringValue == "Shift-JIS" || CharSetStringValue == "BigFive" || CharSetStringValue == "GBK" || CharSetStringValue == "UHC"</test>
			<error>
				<message>Entry CharSet with type String in ActionSubmitForm has incorrect value %2 instead of GBK, UHC, utf-16, utf-8, Shift-JIS, BigFive</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CharSetStringValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2468"/>
			<description>Entry F with type Dictionary in ActionSubmitForm shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionSubmitForm is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2469"/>
			<description>Entry F in ActionSubmitForm shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ActionSubmitForm is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_3" clause="7" testNumber="2470"/>
			<description>Entry F in ActionSubmitForm is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in ActionSubmitForm is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2471"/>
			<description>Entry Fields with type Array in ActionSubmitForm shall be object ArrayOfFieldID</description>
			<test>FieldsHasTypeArray != true || Fields_size == 1</test>
			<error>
				<message>Entry Fields with type Array in ActionSubmitForm is not object ArrayOfFieldID</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2472"/>
			<description>Entry Fields in ActionSubmitForm shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in ActionSubmitForm is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2473"/>
			<description>Entry Flags in ActionSubmitForm shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in ActionSubmitForm is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_3" clause="9" testNumber="2474"/>
			<description>Entry Flags with type Bitmask in ActionSubmitForm shall satisfy special case: fn:Eval(fn:BitClear(13) &amp;&amp; fn:BitsClear(15 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in ActionSubmitForm does not satisfy special case: fn:Eval(fn:BitClear(13) &amp;&amp; fn:BitsClear(15 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2475"/>
			<description>Entry S in ActionSubmitForm shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSubmitForm is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_3" clause="7" testNumber="2476"/>
			<description>Entry S in ActionSubmitForm is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSubmitForm is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_3" clause="6" testNumber="2477"/>
			<description>Entry S with type Name in ActionSubmitForm shall have value SubmitForm</description>
			<test>SHasTypeName != true || SNameValue == "SubmitForm"</test>
			<error>
				<message>Entry S with type Name in ActionSubmitForm has incorrect value %2 instead of SubmitForm</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="1" testNumber="2580"/>
			<description>ActionThread shall not contain entries except B, D, F, Next, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionThread contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2581"/>
			<description>Entry B with type Dictionary in ActionThread shall be object Bead</description>
			<test>BHasTypeDictionary != true || B_size == 1</test>
			<error>
				<message>Entry B with type Dictionary in ActionThread is not object Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2582"/>
			<description>Entry B in ActionThread shall have one of types: Integer, Dictionary</description>
			<test>containsB == false || BHasTypeInteger == true || BHasTypeDictionary == true</test>
			<error>
				<message>Entry B in ActionThread is not one of types: Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="14" testNumber="2583"/>
			<description>Entry B with type Integer in ActionThread shall satisfy possible value predicate: fn:Eval(@B &gt;= 0)</description>
			<test>BHasTypeInteger != true || BIntegerValue &gt;= 0</test>
			<error>
				<message>Entry B with type Integer in ActionThread does not satisfy possible value predicate: fn:Eval(@B &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="10" testNumber="2584"/>
			<description>Entry B with type Dictionary in ActionThread shall be indirect</description>
			<test>BHasTypeDictionary != true || isBIndirect == true</test>
			<error>
				<message>Entry B with type Dictionary in ActionThread is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2585"/>
			<description>Entry D with type Dictionary in ActionThread shall be object Thread</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in ActionThread is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2586"/>
			<description>Entry D in ActionThread shall have one of types: StringText, Integer, Dictionary</description>
			<test>containsD == false || DHasTypeStringText == true || DHasTypeInteger == true || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in ActionThread is not one of types: StringText, Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="7" testNumber="2587"/>
			<description>Entry D in ActionThread is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionThread is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="14" testNumber="2588"/>
			<description>Entry D with type Integer in ActionThread shall satisfy possible value predicate: fn:Eval((@D &gt;= 0) &amp;&amp; (@D &lt; fn:ArrayLength(trailer::Catalog::Threads)))</description>
			<test>DHasTypeInteger != true || (DIntegerValue &gt;= 0) &amp;&amp; (DIntegerValue &lt; trailerCatalogThreadsArraySize)</test>
			<error>
				<message>Entry D with type Integer in ActionThread does not satisfy possible value predicate: fn:Eval((@D &gt;= 0) &amp;&amp; (@D &lt; fn:ArrayLength(trailer::Catalog::Threads)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="10" testNumber="2589"/>
			<description>Entry D with type Dictionary in ActionThread shall be indirect</description>
			<test>DHasTypeDictionary != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Dictionary in ActionThread is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2590"/>
			<description>Entry F with type Dictionary in ActionThread shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionThread is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2591"/>
			<description>Entry F in ActionThread shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ActionThread is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2592"/>
			<description>Entry Next with type Array in ActionThread shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionThread is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2593"/>
			<description>Entry Next with type Dictionary in ActionThread shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionThread is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2594"/>
			<description>Entry Next in ActionThread shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionThread is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2595"/>
			<description>Entry S in ActionThread shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionThread is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="7" testNumber="2596"/>
			<description>Entry S in ActionThread is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionThread is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="6" testNumber="2597"/>
			<description>Entry S with type Name in ActionThread shall have value Thread</description>
			<test>SHasTypeName != true || SNameValue == "Thread"</test>
			<error>
				<message>Entry S with type Name in ActionThread has incorrect value %2 instead of Thread</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2598"/>
			<description>Entry Type in ActionThread shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionThread is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_3" clause="6" testNumber="2599"/>
			<description>Entry Type with type Name in ActionThread shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionThread has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_3" clause="1" testNumber="2769"/>
			<description>ActionURI shall not contain entries except IsMap, Next, S, Type, URI</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'IsMap' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI').length == 0</test>
			<error>
				<message>ActionURI contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'IsMap' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2770"/>
			<description>Entry IsMap in ActionURI shall have type Boolean</description>
			<test>containsIsMap == false || IsMapHasTypeBoolean == true</test>
			<error>
				<message>Entry IsMap in ActionURI is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2771"/>
			<description>Entry Next with type Array in ActionURI shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionURI is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2772"/>
			<description>Entry Next with type Dictionary in ActionURI shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionURI is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2773"/>
			<description>Entry Next in ActionURI shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionURI is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2774"/>
			<description>Entry S in ActionURI shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionURI is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_3" clause="7" testNumber="2775"/>
			<description>Entry S in ActionURI is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionURI is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_3" clause="6" testNumber="2776"/>
			<description>Entry S with type Name in ActionURI shall have value URI</description>
			<test>SHasTypeName != true || SNameValue == "URI"</test>
			<error>
				<message>Entry S with type Name in ActionURI has incorrect value %2 instead of URI</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2777"/>
			<description>Entry Type in ActionURI shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionURI is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_3" clause="6" testNumber="2778"/>
			<description>Entry Type with type Name in ActionURI shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionURI has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2779"/>
			<description>Entry URI in ActionURI shall have type StringAscii</description>
			<test>containsURI == false || URIHasTypeStringAscii == true</test>
			<error>
				<message>Entry URI in ActionURI is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_3" clause="7" testNumber="2780"/>
			<description>Entry URI in ActionURI is required</description>
			<test>containsURI == true</test>
			<error>
				<message>Entry URI in ActionURI is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_3" clause="1" testNumber="2896"/>
			<description>AddActionFormField shall not contain entries except C, F, K, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'F' &amp;&amp; elem != 'K' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>AddActionFormField contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'F' &amp;&amp; elem != 'K' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2897"/>
			<description>Entry C with type Dictionary in AddActionFormField shall be object ActionECMAScript</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in AddActionFormField is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2898"/>
			<description>Entry C in AddActionFormField shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in AddActionFormField is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2899"/>
			<description>Entry F with type Dictionary in AddActionFormField shall be object ActionECMAScript</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in AddActionFormField is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2900"/>
			<description>Entry F in AddActionFormField shall have type Dictionary</description>
			<test>containsF == false || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in AddActionFormField is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2901"/>
			<description>Entry K with type Dictionary in AddActionFormField shall be object ActionECMAScript</description>
			<test>KHasTypeDictionary != true || K_size == 1</test>
			<error>
				<message>Entry K with type Dictionary in AddActionFormField is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2902"/>
			<description>Entry K in AddActionFormField shall have type Dictionary</description>
			<test>containsK == false || KHasTypeDictionary == true</test>
			<error>
				<message>Entry K in AddActionFormField is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2903"/>
			<description>Entry V with type Dictionary in AddActionFormField shall be object ActionECMAScript</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in AddActionFormField is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2904"/>
			<description>Entry V in AddActionFormField shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in AddActionFormField is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_3" clause="1" testNumber="2955"/>
			<description>AddActionPageObject shall not contain entries except C, O</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'O').length == 0</test>
			<error>
				<message>AddActionPageObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'O').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2956"/>
			<description>Entry C with type Dictionary in AddActionPageObject shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in AddActionPageObject is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2957"/>
			<description>Entry C in AddActionPageObject shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in AddActionPageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="2958"/>
			<description>Entry O with type Dictionary in AddActionPageObject shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>OHasTypeDictionary != true || O_size == 1</test>
			<error>
				<message>Entry O with type Dictionary in AddActionPageObject is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="2959"/>
			<description>Entry O in AddActionPageObject shall have type Dictionary</description>
			<test>containsO == false || OHasTypeDictionary == true</test>
			<error>
				<message>Entry O in AddActionPageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_3" clause="1" testNumber="3066"/>
			<description>AddActionWidgetAnnotation shall not contain entries except Bl, D, E, Fo, U, X</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Bl' &amp;&amp; elem != 'D' &amp;&amp; elem != 'E' &amp;&amp; elem != 'Fo' &amp;&amp; elem != 'U' &amp;&amp; elem != 'X').length == 0</test>
			<error>
				<message>AddActionWidgetAnnotation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Bl' &amp;&amp; elem != 'D' &amp;&amp; elem != 'E' &amp;&amp; elem != 'Fo' &amp;&amp; elem != 'U' &amp;&amp; elem != 'X').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3067"/>
			<description>Entry Bl with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>BlHasTypeDictionary != true || Bl_size == 1</test>
			<error>
				<message>Entry Bl with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3068"/>
			<description>Entry Bl in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsBl == false || BlHasTypeDictionary == true</test>
			<error>
				<message>Entry Bl in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3069"/>
			<description>Entry D with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3070"/>
			<description>Entry D in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3071"/>
			<description>Entry E with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>EHasTypeDictionary != true || E_size == 1</test>
			<error>
				<message>Entry E with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3072"/>
			<description>Entry E in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsE == false || EHasTypeDictionary == true</test>
			<error>
				<message>Entry E in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3073"/>
			<description>Entry Fo with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>FoHasTypeDictionary != true || Fo_size == 1</test>
			<error>
				<message>Entry Fo with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3074"/>
			<description>Entry Fo in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsFo == false || FoHasTypeDictionary == true</test>
			<error>
				<message>Entry Fo in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3075"/>
			<description>Entry U with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>UHasTypeDictionary != true || U_size == 1</test>
			<error>
				<message>Entry U with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3076"/>
			<description>Entry U in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsU == false || UHasTypeDictionary == true</test>
			<error>
				<message>Entry U in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3077"/>
			<description>Entry X with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>XHasTypeDictionary != true || X_size == 1</test>
			<error>
				<message>Entry X with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3078"/>
			<description>Entry X in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsX == false || XHasTypeDictionary == true</test>
			<error>
				<message>Entry X in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_3" clause="1" testNumber="3176"/>
			<description>AlternateImage shall not contain entries except DefaultForPrinting, Image</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DefaultForPrinting' &amp;&amp; elem != 'Image').length == 0</test>
			<error>
				<message>AlternateImage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DefaultForPrinting' &amp;&amp; elem != 'Image').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3177"/>
			<description>Entry DefaultForPrinting in AlternateImage shall have type Boolean</description>
			<test>containsDefaultForPrinting == false || DefaultForPrintingHasTypeBoolean == true</test>
			<error>
				<message>Entry DefaultForPrinting in AlternateImage is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3178"/>
			<description>Entry Image with type Stream in AlternateImage shall be object XObjectImage</description>
			<test>ImageHasTypeStream != true || Image_size == 1</test>
			<error>
				<message>Entry Image with type Stream in AlternateImage is not object XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3179"/>
			<description>Entry Image in AlternateImage shall have type Stream</description>
			<test>containsImage == false || ImageHasTypeStream == true</test>
			<error>
				<message>Entry Image in AlternateImage is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_3" clause="7" testNumber="3180"/>
			<description>Entry Image in AlternateImage is required</description>
			<test>containsImage == true</test>
			<error>
				<message>Entry Image in AlternateImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_3" clause="10" testNumber="3181"/>
			<description>Entry Image with type Stream in AlternateImage shall be indirect</description>
			<test>ImageHasTypeStream != true || isImageIndirect == true</test>
			<error>
				<message>Entry Image with type Stream in AlternateImage is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="1" testNumber="3560"/>
			<description>AnnotCircle shall not contain entries except AP, AS, BS, Border, C, Contents, F, M, P, Popup, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotCircle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3561"/>
			<description>Entry AP with type Dictionary in AnnotCircle shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotCircle is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3562"/>
			<description>Entry AP in AnnotCircle shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="11" testNumber="3563"/>
			<description>Entry AP in AnnotCircle is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3564"/>
			<description>Entry AS in AnnotCircle shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotCircle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="11" testNumber="3565"/>
			<description>Entry AS in AnnotCircle is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3566"/>
			<description>Entry BS with type Dictionary in AnnotCircle shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotCircle is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3567"/>
			<description>Entry BS in AnnotCircle shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3568"/>
			<description>Entry Border with type Array in AnnotCircle shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotCircle is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3569"/>
			<description>Entry Border in AnnotCircle shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotCircle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3570"/>
			<description>Entry C with type Array in AnnotCircle shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotCircle is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3571"/>
			<description>Entry C in AnnotCircle shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotCircle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3572"/>
			<description>Entry Contents in AnnotCircle shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotCircle is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3573"/>
			<description>Entry F in AnnotCircle shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotCircle is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="9" testNumber="3574"/>
			<description>Entry F with type Bitmask in AnnotCircle shall satisfy special case: fn:Eval(fn:IsPDFVersion(1.3 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotCircle does not satisfy special case: fn:Eval(fn:IsPDFVersion(1.3 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3575"/>
			<description>Entry M in AnnotCircle shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotCircle is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3576"/>
			<description>Entry P with type Dictionary in AnnotCircle shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotCircle is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3577"/>
			<description>Entry P in AnnotCircle shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="10" testNumber="3578"/>
			<description>Entry P with type Dictionary in AnnotCircle shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotCircle is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3579"/>
			<description>Entry Popup with type Dictionary in AnnotCircle shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotCircle is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3580"/>
			<description>Entry Popup in AnnotCircle shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="10" testNumber="3581"/>
			<description>Entry Popup with type Dictionary in AnnotCircle shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotCircle is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3582"/>
			<description>Entry Rect in AnnotCircle shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotCircle is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="7" testNumber="3583"/>
			<description>Entry Rect in AnnotCircle is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3584"/>
			<description>Entry StructParent in AnnotCircle shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotCircle is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3585"/>
			<description>Entry Subtype in AnnotCircle shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotCircle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="7" testNumber="3586"/>
			<description>Entry Subtype in AnnotCircle is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="6" testNumber="3587"/>
			<description>Entry Subtype with type Name in AnnotCircle shall have value Circle</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Circle"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotCircle has incorrect value %2 instead of Circle</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3588"/>
			<description>Entry T in AnnotCircle shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotCircle is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3589"/>
			<description>Entry Type in AnnotCircle shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotCircle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_3" clause="6" testNumber="3590"/>
			<description>Entry Type with type Name in AnnotCircle shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotCircle has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="1" testNumber="3849"/>
			<description>AnnotFileAttachment shall not contain entries except AP, AS, Border, C, Contents, F, FS, M, Name, P, Popup, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotFileAttachment contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3850"/>
			<description>Entry AP with type Dictionary in AnnotFileAttachment shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotFileAttachment is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3851"/>
			<description>Entry AP in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="11" testNumber="3852"/>
			<description>Entry AP in AnnotFileAttachment is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3853"/>
			<description>Entry AS in AnnotFileAttachment shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="11" testNumber="3854"/>
			<description>Entry AS in AnnotFileAttachment is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3855"/>
			<description>Entry Border with type Array in AnnotFileAttachment shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotFileAttachment is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3856"/>
			<description>Entry Border in AnnotFileAttachment shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotFileAttachment is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3857"/>
			<description>Entry C with type Array in AnnotFileAttachment shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotFileAttachment is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3858"/>
			<description>Entry C in AnnotFileAttachment shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotFileAttachment is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3859"/>
			<description>Entry Contents in AnnotFileAttachment shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotFileAttachment is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3860"/>
			<description>Entry F in AnnotFileAttachment shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotFileAttachment is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="9" testNumber="3861"/>
			<description>Entry F with type Bitmask in AnnotFileAttachment shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotFileAttachment does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3862"/>
			<description>Entry FS with type Dictionary in AnnotFileAttachment shall be object FileSpecification</description>
			<test>FSHasTypeDictionary != true || FS_size == 1</test>
			<error>
				<message>Entry FS with type Dictionary in AnnotFileAttachment is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3863"/>
			<description>Entry FS in AnnotFileAttachment shall have one of types: String, Dictionary</description>
			<test>containsFS == false || FSHasTypeString == true || FSHasTypeDictionary == true</test>
			<error>
				<message>Entry FS in AnnotFileAttachment is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="7" testNumber="3864"/>
			<description>Entry FS in AnnotFileAttachment is required</description>
			<test>containsFS == true</test>
			<error>
				<message>Entry FS in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3865"/>
			<description>Entry M in AnnotFileAttachment shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotFileAttachment is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3866"/>
			<description>Entry Name in AnnotFileAttachment shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3867"/>
			<description>Entry P with type Dictionary in AnnotFileAttachment shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFileAttachment is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3868"/>
			<description>Entry P in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="10" testNumber="3869"/>
			<description>Entry P with type Dictionary in AnnotFileAttachment shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFileAttachment is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="17" testNumber="3870"/>
			<description>Entry Popup with type Dictionary in AnnotFileAttachment shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFileAttachment is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3871"/>
			<description>Entry Popup in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="10" testNumber="3872"/>
			<description>Entry Popup with type Dictionary in AnnotFileAttachment shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFileAttachment is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3873"/>
			<description>Entry Rect in AnnotFileAttachment shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotFileAttachment is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="7" testNumber="3874"/>
			<description>Entry Rect in AnnotFileAttachment is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3875"/>
			<description>Entry StructParent in AnnotFileAttachment shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotFileAttachment is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3876"/>
			<description>Entry Subtype in AnnotFileAttachment shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="7" testNumber="3877"/>
			<description>Entry Subtype in AnnotFileAttachment is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="6" testNumber="3878"/>
			<description>Entry Subtype with type Name in AnnotFileAttachment shall have value FileAttachment</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "FileAttachment"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotFileAttachment has incorrect value %2 instead of FileAttachment</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3879"/>
			<description>Entry T in AnnotFileAttachment shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotFileAttachment is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="8" testNumber="3880"/>
			<description>Entry Type in AnnotFileAttachment shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_3" clause="6" testNumber="3881"/>
			<description>Entry Type with type Name in AnnotFileAttachment shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotFileAttachment has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="1" testNumber="4124"/>
			<description>AnnotFreeText shall not contain entries except AP, AS, Border, C, Contents, DA, F, M, P, Popup, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotFreeText contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4125"/>
			<description>Entry AP with type Dictionary in AnnotFreeText shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotFreeText is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4126"/>
			<description>Entry AP in AnnotFreeText shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="11" testNumber="4127"/>
			<description>Entry AP in AnnotFreeText is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4128"/>
			<description>Entry AS in AnnotFreeText shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotFreeText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="11" testNumber="4129"/>
			<description>Entry AS in AnnotFreeText is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4130"/>
			<description>Entry Border with type Array in AnnotFreeText shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotFreeText is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4131"/>
			<description>Entry Border in AnnotFreeText shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotFreeText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4132"/>
			<description>Entry C with type Array in AnnotFreeText shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotFreeText is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4133"/>
			<description>Entry C in AnnotFreeText shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotFreeText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4134"/>
			<description>Entry Contents in AnnotFreeText shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotFreeText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4135"/>
			<description>Entry DA in AnnotFreeText shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in AnnotFreeText is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="7" testNumber="4136"/>
			<description>Entry DA in AnnotFreeText is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4137"/>
			<description>Entry F in AnnotFreeText shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotFreeText is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="9" testNumber="4138"/>
			<description>Entry F with type Bitmask in AnnotFreeText shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotFreeText does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4139"/>
			<description>Entry M in AnnotFreeText shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotFreeText is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4140"/>
			<description>Entry P with type Dictionary in AnnotFreeText shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFreeText is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4141"/>
			<description>Entry P in AnnotFreeText shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="10" testNumber="4142"/>
			<description>Entry P with type Dictionary in AnnotFreeText shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFreeText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4143"/>
			<description>Entry Popup with type Dictionary in AnnotFreeText shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFreeText is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4144"/>
			<description>Entry Popup in AnnotFreeText shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="10" testNumber="4145"/>
			<description>Entry Popup with type Dictionary in AnnotFreeText shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFreeText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4146"/>
			<description>Entry Rect in AnnotFreeText shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotFreeText is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="7" testNumber="4147"/>
			<description>Entry Rect in AnnotFreeText is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4148"/>
			<description>Entry StructParent in AnnotFreeText shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotFreeText is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4149"/>
			<description>Entry Subtype in AnnotFreeText shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotFreeText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="7" testNumber="4150"/>
			<description>Entry Subtype in AnnotFreeText is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="6" testNumber="4151"/>
			<description>Entry Subtype with type Name in AnnotFreeText shall have value FreeText</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "FreeText"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotFreeText has incorrect value %2 instead of FreeText</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4152"/>
			<description>Entry T in AnnotFreeText shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotFreeText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4153"/>
			<description>Entry Type in AnnotFreeText shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotFreeText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_3" clause="6" testNumber="4154"/>
			<description>Entry Type with type Name in AnnotFreeText shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotFreeText has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="1" testNumber="4434"/>
			<description>AnnotHighlight shall not contain entries except AP, AS, Border, C, Contents, F, M, P, Popup, QuadPoints, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotHighlight contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4435"/>
			<description>Entry AP with type Dictionary in AnnotHighlight shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotHighlight is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4436"/>
			<description>Entry AP in AnnotHighlight shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="11" testNumber="4437"/>
			<description>Entry AP in AnnotHighlight is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4438"/>
			<description>Entry AS in AnnotHighlight shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotHighlight is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="11" testNumber="4439"/>
			<description>Entry AS in AnnotHighlight is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4440"/>
			<description>Entry Border with type Array in AnnotHighlight shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotHighlight is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4441"/>
			<description>Entry Border in AnnotHighlight shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotHighlight is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4442"/>
			<description>Entry C with type Array in AnnotHighlight shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotHighlight is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4443"/>
			<description>Entry C in AnnotHighlight shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotHighlight is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4444"/>
			<description>Entry Contents in AnnotHighlight shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotHighlight is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4445"/>
			<description>Entry F in AnnotHighlight shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotHighlight is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="9" testNumber="4446"/>
			<description>Entry F with type Bitmask in AnnotHighlight shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotHighlight does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4447"/>
			<description>Entry M in AnnotHighlight shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotHighlight is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4448"/>
			<description>Entry P with type Dictionary in AnnotHighlight shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotHighlight is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4449"/>
			<description>Entry P in AnnotHighlight shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="10" testNumber="4450"/>
			<description>Entry P with type Dictionary in AnnotHighlight shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotHighlight is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4451"/>
			<description>Entry Popup with type Dictionary in AnnotHighlight shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotHighlight is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4452"/>
			<description>Entry Popup in AnnotHighlight shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="10" testNumber="4453"/>
			<description>Entry Popup with type Dictionary in AnnotHighlight shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotHighlight is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4454"/>
			<description>Entry QuadPoints with type Array in AnnotHighlight shall be object ArrayOfQuadPoints</description>
			<test>QuadPointsHasTypeArray != true || QuadPoints_size == 1</test>
			<error>
				<message>Entry QuadPoints with type Array in AnnotHighlight is not object ArrayOfQuadPoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4455"/>
			<description>Entry QuadPoints in AnnotHighlight shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotHighlight is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="7" testNumber="4456"/>
			<description>Entry QuadPoints in AnnotHighlight is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4457"/>
			<description>Entry Rect in AnnotHighlight shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotHighlight is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="7" testNumber="4458"/>
			<description>Entry Rect in AnnotHighlight is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4459"/>
			<description>Entry StructParent in AnnotHighlight shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotHighlight is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4460"/>
			<description>Entry Subtype in AnnotHighlight shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotHighlight is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="7" testNumber="4461"/>
			<description>Entry Subtype in AnnotHighlight is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="6" testNumber="4462"/>
			<description>Entry Subtype with type Name in AnnotHighlight shall have value Highlight</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Highlight"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotHighlight has incorrect value %2 instead of Highlight</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4463"/>
			<description>Entry T in AnnotHighlight shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotHighlight is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4464"/>
			<description>Entry Type in AnnotHighlight shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotHighlight is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_3" clause="6" testNumber="4465"/>
			<description>Entry Type with type Name in AnnotHighlight shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotHighlight has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="1" testNumber="4703"/>
			<description>AnnotInk shall not contain entries except AP, AS, BS, Border, C, Contents, F, InkList, M, P, Popup, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'InkList' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotInk contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'InkList' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4704"/>
			<description>Entry AP with type Dictionary in AnnotInk shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotInk is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4705"/>
			<description>Entry AP in AnnotInk shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="11" testNumber="4706"/>
			<description>Entry AP in AnnotInk is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4707"/>
			<description>Entry AS in AnnotInk shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotInk is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="11" testNumber="4708"/>
			<description>Entry AS in AnnotInk is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4709"/>
			<description>Entry BS with type Dictionary in AnnotInk shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotInk is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4710"/>
			<description>Entry BS in AnnotInk shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4711"/>
			<description>Entry Border with type Array in AnnotInk shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotInk is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4712"/>
			<description>Entry Border in AnnotInk shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotInk is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4713"/>
			<description>Entry C with type Array in AnnotInk shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotInk is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4714"/>
			<description>Entry C in AnnotInk shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotInk is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4715"/>
			<description>Entry Contents in AnnotInk shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotInk is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4716"/>
			<description>Entry F in AnnotInk shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotInk is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="9" testNumber="4717"/>
			<description>Entry F with type Bitmask in AnnotInk shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotInk does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4718"/>
			<description>Entry InkList with type Array in AnnotInk shall be object ArrayOfArraysInkList</description>
			<test>InkListHasTypeArray != true || InkList_size == 1</test>
			<error>
				<message>Entry InkList with type Array in AnnotInk is not object ArrayOfArraysInkList</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4719"/>
			<description>Entry InkList in AnnotInk shall have type Array</description>
			<test>containsInkList == false || InkListHasTypeArray == true</test>
			<error>
				<message>Entry InkList in AnnotInk is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="7" testNumber="4720"/>
			<description>Entry InkList in AnnotInk is required</description>
			<test>containsInkList == true</test>
			<error>
				<message>Entry InkList in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4721"/>
			<description>Entry M in AnnotInk shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotInk is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4722"/>
			<description>Entry P with type Dictionary in AnnotInk shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotInk is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4723"/>
			<description>Entry P in AnnotInk shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="10" testNumber="4724"/>
			<description>Entry P with type Dictionary in AnnotInk shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotInk is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4725"/>
			<description>Entry Popup with type Dictionary in AnnotInk shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotInk is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4726"/>
			<description>Entry Popup in AnnotInk shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="10" testNumber="4727"/>
			<description>Entry Popup with type Dictionary in AnnotInk shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotInk is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4728"/>
			<description>Entry Rect in AnnotInk shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotInk is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="7" testNumber="4729"/>
			<description>Entry Rect in AnnotInk is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4730"/>
			<description>Entry StructParent in AnnotInk shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotInk is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4731"/>
			<description>Entry Subtype in AnnotInk shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotInk is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="7" testNumber="4732"/>
			<description>Entry Subtype in AnnotInk is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="6" testNumber="4733"/>
			<description>Entry Subtype with type Name in AnnotInk shall have value Ink</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Ink"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotInk has incorrect value %2 instead of Ink</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4734"/>
			<description>Entry T in AnnotInk shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotInk is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4735"/>
			<description>Entry Type in AnnotInk shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotInk is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_3" clause="6" testNumber="4736"/>
			<description>Entry Type with type Name in AnnotInk shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotInk has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="1" testNumber="4986"/>
			<description>AnnotLine shall not contain entries except AP, AS, BS, Border, C, Contents, F, L, M, P, Popup, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'L' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotLine contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'L' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4987"/>
			<description>Entry AP with type Dictionary in AnnotLine shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotLine is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4988"/>
			<description>Entry AP in AnnotLine shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="11" testNumber="4989"/>
			<description>Entry AP in AnnotLine is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4990"/>
			<description>Entry AS in AnnotLine shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="11" testNumber="4991"/>
			<description>Entry AS in AnnotLine is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4992"/>
			<description>Entry BS with type Dictionary in AnnotLine shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotLine is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4993"/>
			<description>Entry BS in AnnotLine shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4994"/>
			<description>Entry Border with type Array in AnnotLine shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotLine is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4995"/>
			<description>Entry Border in AnnotLine shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="17" testNumber="4996"/>
			<description>Entry C with type Array in AnnotLine shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotLine is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4997"/>
			<description>Entry C in AnnotLine shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4998"/>
			<description>Entry Contents in AnnotLine shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="4999"/>
			<description>Entry F in AnnotLine shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotLine is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="9" testNumber="5000"/>
			<description>Entry F with type Bitmask in AnnotLine shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotLine does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5001"/>
			<description>Entry L with type Array in AnnotLine shall be object ArrayOf_4Numbers</description>
			<test>LHasTypeArray != true || L_size == 1</test>
			<error>
				<message>Entry L with type Array in AnnotLine is not object ArrayOf_4Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5002"/>
			<description>Entry L in AnnotLine shall have type Array</description>
			<test>containsL == false || LHasTypeArray == true</test>
			<error>
				<message>Entry L in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="7" testNumber="5003"/>
			<description>Entry L in AnnotLine is required</description>
			<test>containsL == true</test>
			<error>
				<message>Entry L in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5004"/>
			<description>Entry M in AnnotLine shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotLine is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5005"/>
			<description>Entry P with type Dictionary in AnnotLine shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLine is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5006"/>
			<description>Entry P in AnnotLine shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="10" testNumber="5007"/>
			<description>Entry P with type Dictionary in AnnotLine shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5008"/>
			<description>Entry Popup with type Dictionary in AnnotLine shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotLine is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5009"/>
			<description>Entry Popup in AnnotLine shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="10" testNumber="5010"/>
			<description>Entry Popup with type Dictionary in AnnotLine shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5011"/>
			<description>Entry Rect in AnnotLine shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotLine is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="7" testNumber="5012"/>
			<description>Entry Rect in AnnotLine is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5013"/>
			<description>Entry StructParent in AnnotLine shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotLine is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5014"/>
			<description>Entry Subtype in AnnotLine shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="7" testNumber="5015"/>
			<description>Entry Subtype in AnnotLine is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="6" testNumber="5016"/>
			<description>Entry Subtype with type Name in AnnotLine shall have value Line</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Line"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotLine has incorrect value %2 instead of Line</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5017"/>
			<description>Entry T in AnnotLine shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5018"/>
			<description>Entry Type in AnnotLine shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_3" clause="6" testNumber="5019"/>
			<description>Entry Type with type Name in AnnotLine shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotLine has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="1" testNumber="5380"/>
			<description>AnnotLink shall not contain entries except A, AP, AS, Border, C, Contents, Dest, F, H, M, P, PA, Rect, StructParent, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotLink contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5381"/>
			<description>Entry A with type Dictionary in AnnotLink shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotLink is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5382"/>
			<description>Entry A in AnnotLink shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5383"/>
			<description>Entry AP with type Dictionary in AnnotLink shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotLink is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5384"/>
			<description>Entry AP in AnnotLink shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5385"/>
			<description>Entry AS in AnnotLink shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="11" testNumber="5386"/>
			<description>Entry AS in AnnotLink is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotLink is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5387"/>
			<description>Entry Border with type Array in AnnotLink shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotLink is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5388"/>
			<description>Entry Border in AnnotLink shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotLink is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5389"/>
			<description>Entry C with type Array in AnnotLink shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotLink is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5390"/>
			<description>Entry C in AnnotLink shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotLink is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5391"/>
			<description>Entry Contents in AnnotLink shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotLink is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5392"/>
			<description>Entry Dest with type Array in AnnotLink shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DestHasTypeArray != true || Dest_size == 1</test>
			<error>
				<message>Entry Dest with type Array in AnnotLink is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5393"/>
			<description>Entry Dest in AnnotLink shall have one of types: Array, StringByte, Name</description>
			<test>containsDest == false || DestHasTypeArray == true || DestHasTypeStringByte == true || DestHasTypeName == true</test>
			<error>
				<message>Entry Dest in AnnotLink is not one of types: Array, StringByte, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5394"/>
			<description>Entry F in AnnotLink shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotLink is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="9" testNumber="5395"/>
			<description>Entry F with type Bitmask in AnnotLink shall satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(2.0 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; ((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotLink does not satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(2.0 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5396"/>
			<description>Entry H in AnnotLink shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="6" testNumber="5397"/>
			<description>Entry H with type Name in AnnotLink shall have one of values: P, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P"</test>
			<error>
				<message>Entry H with type Name in AnnotLink has incorrect value %2 instead of P, I, N, O</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5398"/>
			<description>Entry M in AnnotLink shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotLink is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5399"/>
			<description>Entry P with type Dictionary in AnnotLink shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLink is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5400"/>
			<description>Entry P in AnnotLink shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="10" testNumber="5401"/>
			<description>Entry P with type Dictionary in AnnotLink shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLink is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5402"/>
			<description>Entry PA with type Dictionary in AnnotLink shall be object ActionURI</description>
			<test>PAHasTypeDictionary != true || PA_size == 1</test>
			<error>
				<message>Entry PA with type Dictionary in AnnotLink is not object ActionURI</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5403"/>
			<description>Entry PA in AnnotLink shall have type Dictionary</description>
			<test>containsPA == false || PAHasTypeDictionary == true</test>
			<error>
				<message>Entry PA in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5404"/>
			<description>Entry Rect in AnnotLink shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotLink is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="7" testNumber="5405"/>
			<description>Entry Rect in AnnotLink is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotLink is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5406"/>
			<description>Entry StructParent in AnnotLink shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotLink is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5407"/>
			<description>Entry Subtype in AnnotLink shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="7" testNumber="5408"/>
			<description>Entry Subtype in AnnotLink is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotLink is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="6" testNumber="5409"/>
			<description>Entry Subtype with type Name in AnnotLink shall have value Link</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Link"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotLink has incorrect value %2 instead of Link</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5410"/>
			<description>Entry Type in AnnotLink shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_3" clause="6" testNumber="5411"/>
			<description>Entry Type with type Name in AnnotLink shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotLink has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="1" testNumber="5637"/>
			<description>AnnotMovie shall not contain entries except A, AP, AS, Border, C, Contents, F, M, Movie, P, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Movie' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotMovie contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Movie' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5638"/>
			<description>Entry A with type Dictionary in AnnotMovie shall be object MovieActivation</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotMovie is not object MovieActivation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5639"/>
			<description>Entry A in AnnotMovie shall have one of types: Boolean, Dictionary</description>
			<test>containsA == false || AHasTypeBoolean == true || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotMovie is not one of types: Boolean, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5640"/>
			<description>Entry AP with type Dictionary in AnnotMovie shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotMovie is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5641"/>
			<description>Entry AP in AnnotMovie shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="11" testNumber="5642"/>
			<description>Entry AP in AnnotMovie is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5643"/>
			<description>Entry AS in AnnotMovie shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="11" testNumber="5644"/>
			<description>Entry AS in AnnotMovie is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5645"/>
			<description>Entry Border with type Array in AnnotMovie shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotMovie is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5646"/>
			<description>Entry Border in AnnotMovie shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotMovie is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5647"/>
			<description>Entry C with type Array in AnnotMovie shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotMovie is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5648"/>
			<description>Entry C in AnnotMovie shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotMovie is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5649"/>
			<description>Entry Contents in AnnotMovie shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotMovie is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5650"/>
			<description>Entry F in AnnotMovie shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotMovie is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="9" testNumber="5651"/>
			<description>Entry F with type Bitmask in AnnotMovie shall satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; ((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotMovie does not satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5652"/>
			<description>Entry M in AnnotMovie shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotMovie is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5653"/>
			<description>Entry Movie with type Dictionary in AnnotMovie shall be object Movie</description>
			<test>MovieHasTypeDictionary != true || Movie_size == 1</test>
			<error>
				<message>Entry Movie with type Dictionary in AnnotMovie is not object Movie</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5654"/>
			<description>Entry Movie in AnnotMovie shall have type Dictionary</description>
			<test>containsMovie == false || MovieHasTypeDictionary == true</test>
			<error>
				<message>Entry Movie in AnnotMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="7" testNumber="5655"/>
			<description>Entry Movie in AnnotMovie is required</description>
			<test>containsMovie == true</test>
			<error>
				<message>Entry Movie in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="17" testNumber="5656"/>
			<description>Entry P with type Dictionary in AnnotMovie shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotMovie is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5657"/>
			<description>Entry P in AnnotMovie shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="10" testNumber="5658"/>
			<description>Entry P with type Dictionary in AnnotMovie shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotMovie is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5659"/>
			<description>Entry Rect in AnnotMovie shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotMovie is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="7" testNumber="5660"/>
			<description>Entry Rect in AnnotMovie is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5661"/>
			<description>Entry StructParent in AnnotMovie shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotMovie is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5662"/>
			<description>Entry Subtype in AnnotMovie shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="7" testNumber="5663"/>
			<description>Entry Subtype in AnnotMovie is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="6" testNumber="5664"/>
			<description>Entry Subtype with type Name in AnnotMovie shall have value Movie</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Movie"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotMovie has incorrect value %2 instead of Movie</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5665"/>
			<description>Entry T in AnnotMovie shall have type String</description>
			<test>containsT == false || THasTypeString == true</test>
			<error>
				<message>Entry T in AnnotMovie is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="5666"/>
			<description>Entry Type in AnnotMovie shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_3" clause="6" testNumber="5667"/>
			<description>Entry Type with type Name in AnnotMovie shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotMovie has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="1" testNumber="6335"/>
			<description>AnnotPopup shall not contain entries except AP, AS, Border, C, Contents, F, M, Open, P, Parent, Rect, StructParent, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotPopup contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="17" testNumber="6336"/>
			<description>Entry AP with type Dictionary in AnnotPopup shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotPopup is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6337"/>
			<description>Entry AP in AnnotPopup shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotPopup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6338"/>
			<description>Entry AS in AnnotPopup shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotPopup is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="11" testNumber="6339"/>
			<description>Entry AS in AnnotPopup is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotPopup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="17" testNumber="6340"/>
			<description>Entry Border with type Array in AnnotPopup shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotPopup is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6341"/>
			<description>Entry Border in AnnotPopup shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotPopup is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="17" testNumber="6342"/>
			<description>Entry C with type Array in AnnotPopup shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotPopup is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6343"/>
			<description>Entry C in AnnotPopup shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotPopup is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6344"/>
			<description>Entry Contents in AnnotPopup shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotPopup is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6345"/>
			<description>Entry F in AnnotPopup shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotPopup is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="9" testNumber="6346"/>
			<description>Entry F with type Bitmask in AnnotPopup shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotPopup does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6347"/>
			<description>Entry M in AnnotPopup shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotPopup is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6348"/>
			<description>Entry Open in AnnotPopup shall have type Boolean</description>
			<test>containsOpen == false || OpenHasTypeBoolean == true</test>
			<error>
				<message>Entry Open in AnnotPopup is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="17" testNumber="6349"/>
			<description>Entry P with type Dictionary in AnnotPopup shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPopup is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6350"/>
			<description>Entry P in AnnotPopup shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotPopup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="10" testNumber="6351"/>
			<description>Entry P with type Dictionary in AnnotPopup shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPopup is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="17" testNumber="6352"/>
			<description>Entry Parent with type Dictionary in AnnotPopup shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotHighlight, AnnotUnderline, AnnotStrikeOut, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotWidget</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotPopup is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotHighlight, AnnotUnderline, AnnotStrikeOut, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotWidget</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6353"/>
			<description>Entry Parent in AnnotPopup shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotPopup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6354"/>
			<description>Entry Rect in AnnotPopup shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotPopup is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="7" testNumber="6355"/>
			<description>Entry Rect in AnnotPopup is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotPopup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6356"/>
			<description>Entry StructParent in AnnotPopup shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotPopup is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6357"/>
			<description>Entry Subtype in AnnotPopup shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotPopup is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="7" testNumber="6358"/>
			<description>Entry Subtype in AnnotPopup is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotPopup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="6" testNumber="6359"/>
			<description>Entry Subtype with type Name in AnnotPopup shall have value Popup</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Popup"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotPopup has incorrect value %2 instead of Popup</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="8" testNumber="6360"/>
			<description>Entry Type in AnnotPopup shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotPopup is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_3" clause="6" testNumber="6361"/>
			<description>Entry Type with type Name in AnnotPopup shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotPopup has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="1" testNumber="7163"/>
			<description>AnnotSound shall not contain entries except AP, AS, Border, C, Contents, F, M, Name, P, Popup, Rect, Sound, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotSound contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7164"/>
			<description>Entry AP with type Dictionary in AnnotSound shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotSound is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7165"/>
			<description>Entry AP in AnnotSound shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="11" testNumber="7166"/>
			<description>Entry AP in AnnotSound is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7167"/>
			<description>Entry AS in AnnotSound shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="11" testNumber="7168"/>
			<description>Entry AS in AnnotSound is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7169"/>
			<description>Entry Border with type Array in AnnotSound shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotSound is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7170"/>
			<description>Entry Border in AnnotSound shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotSound is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7171"/>
			<description>Entry C with type Array in AnnotSound shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotSound is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7172"/>
			<description>Entry C in AnnotSound shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotSound is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7173"/>
			<description>Entry Contents in AnnotSound shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotSound is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7174"/>
			<description>Entry F in AnnotSound shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotSound is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="9" testNumber="7175"/>
			<description>Entry F with type Bitmask in AnnotSound shall satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; ((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotSound does not satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7176"/>
			<description>Entry M in AnnotSound shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotSound is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7177"/>
			<description>Entry Name in AnnotSound shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7178"/>
			<description>Entry P with type Dictionary in AnnotSound shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSound is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7179"/>
			<description>Entry P in AnnotSound shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="10" testNumber="7180"/>
			<description>Entry P with type Dictionary in AnnotSound shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7181"/>
			<description>Entry Popup with type Dictionary in AnnotSound shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSound is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7182"/>
			<description>Entry Popup in AnnotSound shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="10" testNumber="7183"/>
			<description>Entry Popup with type Dictionary in AnnotSound shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7184"/>
			<description>Entry Rect in AnnotSound shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotSound is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="7" testNumber="7185"/>
			<description>Entry Rect in AnnotSound is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7186"/>
			<description>Entry Sound with type Stream in AnnotSound shall be object SoundObject</description>
			<test>SoundHasTypeStream != true || Sound_size == 1</test>
			<error>
				<message>Entry Sound with type Stream in AnnotSound is not object SoundObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7187"/>
			<description>Entry Sound in AnnotSound shall have type Stream</description>
			<test>containsSound == false || SoundHasTypeStream == true</test>
			<error>
				<message>Entry Sound in AnnotSound is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="7" testNumber="7188"/>
			<description>Entry Sound in AnnotSound is required</description>
			<test>containsSound == true</test>
			<error>
				<message>Entry Sound in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="10" testNumber="7189"/>
			<description>Entry Sound with type Stream in AnnotSound shall be indirect</description>
			<test>SoundHasTypeStream != true || isSoundIndirect == true</test>
			<error>
				<message>Entry Sound with type Stream in AnnotSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7190"/>
			<description>Entry StructParent in AnnotSound shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotSound is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7191"/>
			<description>Entry Subtype in AnnotSound shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="7" testNumber="7192"/>
			<description>Entry Subtype in AnnotSound is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="6" testNumber="7193"/>
			<description>Entry Subtype with type Name in AnnotSound shall have value Sound</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Sound"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotSound has incorrect value %2 instead of Sound</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7194"/>
			<description>Entry T in AnnotSound shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotSound is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7195"/>
			<description>Entry Type in AnnotSound shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_3" clause="6" testNumber="7196"/>
			<description>Entry Type with type Name in AnnotSound shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotSound has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="1" testNumber="7444"/>
			<description>AnnotSquare shall not contain entries except AP, AS, BS, Border, C, Contents, F, M, P, Popup, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotSquare contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7445"/>
			<description>Entry AP with type Dictionary in AnnotSquare shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotSquare is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7446"/>
			<description>Entry AP in AnnotSquare shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="11" testNumber="7447"/>
			<description>Entry AP in AnnotSquare is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7448"/>
			<description>Entry AS in AnnotSquare shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotSquare is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="11" testNumber="7449"/>
			<description>Entry AS in AnnotSquare is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7450"/>
			<description>Entry BS with type Dictionary in AnnotSquare shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotSquare is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7451"/>
			<description>Entry BS in AnnotSquare shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7452"/>
			<description>Entry Border with type Array in AnnotSquare shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotSquare is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7453"/>
			<description>Entry Border in AnnotSquare shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotSquare is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7454"/>
			<description>Entry C with type Array in AnnotSquare shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotSquare is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7455"/>
			<description>Entry C in AnnotSquare shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotSquare is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7456"/>
			<description>Entry Contents in AnnotSquare shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotSquare is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7457"/>
			<description>Entry F in AnnotSquare shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotSquare is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="9" testNumber="7458"/>
			<description>Entry F with type Bitmask in AnnotSquare shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotSquare does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7459"/>
			<description>Entry M in AnnotSquare shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotSquare is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7460"/>
			<description>Entry P with type Dictionary in AnnotSquare shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSquare is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7461"/>
			<description>Entry P in AnnotSquare shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="10" testNumber="7462"/>
			<description>Entry P with type Dictionary in AnnotSquare shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSquare is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7463"/>
			<description>Entry Popup with type Dictionary in AnnotSquare shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSquare is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7464"/>
			<description>Entry Popup in AnnotSquare shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="10" testNumber="7465"/>
			<description>Entry Popup with type Dictionary in AnnotSquare shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSquare is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7466"/>
			<description>Entry Rect in AnnotSquare shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotSquare is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="7" testNumber="7467"/>
			<description>Entry Rect in AnnotSquare is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7468"/>
			<description>Entry StructParent in AnnotSquare shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotSquare is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7469"/>
			<description>Entry Subtype in AnnotSquare shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotSquare is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="7" testNumber="7470"/>
			<description>Entry Subtype in AnnotSquare is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="6" testNumber="7471"/>
			<description>Entry Subtype with type Name in AnnotSquare shall have value Square</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Square"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotSquare has incorrect value %2 instead of Square</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7472"/>
			<description>Entry T in AnnotSquare shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotSquare is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7473"/>
			<description>Entry Type in AnnotSquare shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotSquare is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_3" clause="6" testNumber="7474"/>
			<description>Entry Type with type Name in AnnotSquare shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotSquare has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="1" testNumber="7962"/>
			<description>AnnotStamp shall not contain entries except AP, AS, Border, C, Contents, F, M, Name, P, Popup, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotStamp contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7963"/>
			<description>Entry AP with type Dictionary in AnnotStamp shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotStamp is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7964"/>
			<description>Entry AP in AnnotStamp shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="11" testNumber="7965"/>
			<description>Entry AP in AnnotStamp is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7966"/>
			<description>Entry AS in AnnotStamp shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="11" testNumber="7967"/>
			<description>Entry AS in AnnotStamp is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7968"/>
			<description>Entry Border with type Array in AnnotStamp shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotStamp is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7969"/>
			<description>Entry Border in AnnotStamp shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7970"/>
			<description>Entry C with type Array in AnnotStamp shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotStamp is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7971"/>
			<description>Entry C in AnnotStamp shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7972"/>
			<description>Entry Contents in AnnotStamp shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotStamp is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7973"/>
			<description>Entry F in AnnotStamp shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotStamp is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="9" testNumber="7974"/>
			<description>Entry F with type Bitmask in AnnotStamp shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotStamp does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7975"/>
			<description>Entry M in AnnotStamp shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotStamp is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7976"/>
			<description>Entry Name in AnnotStamp shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="9" testNumber="7977"/>
			<description>Entry Name with type Name in AnnotStamp shall satisfy special case: fn:Not(fn:IsRequired(fn:IsPresent(IT) &amp;&amp; fn:SinceVersion(2.0 , (@IT != Stamp))))</description>
			<test>NameHasTypeName != true || (((containsName == true || ((containsIT == true) &amp;&amp; true) == false)) != true)</test>
			<error>
				<message>Entry Name with type Name in AnnotStamp does not satisfy special case: fn:Not(fn:IsRequired(fn:IsPresent(IT) &amp;&amp; fn:SinceVersion(2.0 , (@IT != Stamp))))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7978"/>
			<description>Entry P with type Dictionary in AnnotStamp shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStamp is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7979"/>
			<description>Entry P in AnnotStamp shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="10" testNumber="7980"/>
			<description>Entry P with type Dictionary in AnnotStamp shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStamp is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="17" testNumber="7981"/>
			<description>Entry Popup with type Dictionary in AnnotStamp shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStamp is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7982"/>
			<description>Entry Popup in AnnotStamp shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="10" testNumber="7983"/>
			<description>Entry Popup with type Dictionary in AnnotStamp shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStamp is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7984"/>
			<description>Entry Rect in AnnotStamp shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotStamp is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="7" testNumber="7985"/>
			<description>Entry Rect in AnnotStamp is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7986"/>
			<description>Entry StructParent in AnnotStamp shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotStamp is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7987"/>
			<description>Entry Subtype in AnnotStamp shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="7" testNumber="7988"/>
			<description>Entry Subtype in AnnotStamp is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="6" testNumber="7989"/>
			<description>Entry Subtype with type Name in AnnotStamp shall have value Stamp</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Stamp"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotStamp has incorrect value %2 instead of Stamp</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7990"/>
			<description>Entry T in AnnotStamp shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotStamp is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="7991"/>
			<description>Entry Type in AnnotStamp shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_3" clause="6" testNumber="7992"/>
			<description>Entry Type with type Name in AnnotStamp shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotStamp has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="1" testNumber="8224"/>
			<description>AnnotStrikeOut shall not contain entries except AP, AS, Border, C, Contents, F, M, P, Popup, QuadPoints, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotStrikeOut contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8225"/>
			<description>Entry AP with type Dictionary in AnnotStrikeOut shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotStrikeOut is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8226"/>
			<description>Entry AP in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="11" testNumber="8227"/>
			<description>Entry AP in AnnotStrikeOut is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8228"/>
			<description>Entry AS in AnnotStrikeOut shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotStrikeOut is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="11" testNumber="8229"/>
			<description>Entry AS in AnnotStrikeOut is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8230"/>
			<description>Entry Border with type Array in AnnotStrikeOut shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotStrikeOut is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8231"/>
			<description>Entry Border in AnnotStrikeOut shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotStrikeOut is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8232"/>
			<description>Entry C with type Array in AnnotStrikeOut shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotStrikeOut is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8233"/>
			<description>Entry C in AnnotStrikeOut shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotStrikeOut is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8234"/>
			<description>Entry Contents in AnnotStrikeOut shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotStrikeOut is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8235"/>
			<description>Entry F in AnnotStrikeOut shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotStrikeOut is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="9" testNumber="8236"/>
			<description>Entry F with type Bitmask in AnnotStrikeOut shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotStrikeOut does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8237"/>
			<description>Entry M in AnnotStrikeOut shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotStrikeOut is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8238"/>
			<description>Entry P with type Dictionary in AnnotStrikeOut shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStrikeOut is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8239"/>
			<description>Entry P in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="10" testNumber="8240"/>
			<description>Entry P with type Dictionary in AnnotStrikeOut shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStrikeOut is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8241"/>
			<description>Entry Popup with type Dictionary in AnnotStrikeOut shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStrikeOut is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8242"/>
			<description>Entry Popup in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="10" testNumber="8243"/>
			<description>Entry Popup with type Dictionary in AnnotStrikeOut shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStrikeOut is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8244"/>
			<description>Entry QuadPoints with type Array in AnnotStrikeOut shall be object ArrayOfQuadPoints</description>
			<test>QuadPointsHasTypeArray != true || QuadPoints_size == 1</test>
			<error>
				<message>Entry QuadPoints with type Array in AnnotStrikeOut is not object ArrayOfQuadPoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8245"/>
			<description>Entry QuadPoints in AnnotStrikeOut shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotStrikeOut is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="7" testNumber="8246"/>
			<description>Entry QuadPoints in AnnotStrikeOut is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8247"/>
			<description>Entry Rect in AnnotStrikeOut shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotStrikeOut is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="7" testNumber="8248"/>
			<description>Entry Rect in AnnotStrikeOut is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8249"/>
			<description>Entry StructParent in AnnotStrikeOut shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotStrikeOut is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8250"/>
			<description>Entry Subtype in AnnotStrikeOut shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotStrikeOut is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="7" testNumber="8251"/>
			<description>Entry Subtype in AnnotStrikeOut is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="6" testNumber="8252"/>
			<description>Entry Subtype with type Name in AnnotStrikeOut shall have value StrikeOut</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "StrikeOut"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotStrikeOut has incorrect value %2 instead of StrikeOut</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8253"/>
			<description>Entry T in AnnotStrikeOut shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotStrikeOut is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8254"/>
			<description>Entry Type in AnnotStrikeOut shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotStrikeOut is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_3" clause="6" testNumber="8255"/>
			<description>Entry Type with type Name in AnnotStrikeOut shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotStrikeOut has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="1" testNumber="8552"/>
			<description>AnnotText shall not contain entries except AP, AS, Border, C, Contents, F, M, Name, Open, P, Popup, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotText contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8553"/>
			<description>Entry AP with type Dictionary in AnnotText shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotText is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8554"/>
			<description>Entry AP in AnnotText shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="11" testNumber="8555"/>
			<description>Entry AP in AnnotText is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8556"/>
			<description>Entry AS in AnnotText shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="11" testNumber="8557"/>
			<description>Entry AS in AnnotText is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8558"/>
			<description>Entry Border with type Array in AnnotText shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotText is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8559"/>
			<description>Entry Border in AnnotText shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8560"/>
			<description>Entry C with type Array in AnnotText shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotText is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8561"/>
			<description>Entry C in AnnotText shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8562"/>
			<description>Entry Contents in AnnotText shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8563"/>
			<description>Entry F in AnnotText shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotText is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="9" testNumber="8564"/>
			<description>Entry F with type Bitmask in AnnotText shall satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; ((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotText does not satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8565"/>
			<description>Entry M in AnnotText shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotText is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8566"/>
			<description>Entry Name in AnnotText shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="6" testNumber="8567"/>
			<description>Entry Name with type Name in AnnotText shall have one of values: Comment, Help, Note, Insert, Key, NewParagraph, Paragraph</description>
			<test>NameHasTypeName != true || NameNameValue == "Comment" || NameNameValue == "Key" || NameNameValue == "Note" || NameNameValue == "Help" || NameNameValue == "NewParagraph" || NameNameValue == "Paragraph" || NameNameValue == "Insert"</test>
			<error>
				<message>Entry Name with type Name in AnnotText has incorrect value %2 instead of Comment, Help, Note, Insert, Key, NewParagraph, Paragraph</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8568"/>
			<description>Entry Open in AnnotText shall have type Boolean</description>
			<test>containsOpen == false || OpenHasTypeBoolean == true</test>
			<error>
				<message>Entry Open in AnnotText is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8569"/>
			<description>Entry P with type Dictionary in AnnotText shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotText is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8570"/>
			<description>Entry P in AnnotText shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="10" testNumber="8571"/>
			<description>Entry P with type Dictionary in AnnotText shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8572"/>
			<description>Entry Popup with type Dictionary in AnnotText shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotText is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8573"/>
			<description>Entry Popup in AnnotText shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="10" testNumber="8574"/>
			<description>Entry Popup with type Dictionary in AnnotText shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8575"/>
			<description>Entry Rect in AnnotText shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotText is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="7" testNumber="8576"/>
			<description>Entry Rect in AnnotText is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8577"/>
			<description>Entry StructParent in AnnotText shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotText is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8578"/>
			<description>Entry Subtype in AnnotText shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="7" testNumber="8579"/>
			<description>Entry Subtype in AnnotText is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="6" testNumber="8580"/>
			<description>Entry Subtype with type Name in AnnotText shall have value Text</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Text"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotText has incorrect value %2 instead of Text</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8581"/>
			<description>Entry T in AnnotText shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8582"/>
			<description>Entry Type in AnnotText shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_3" clause="6" testNumber="8583"/>
			<description>Entry Type with type Name in AnnotText shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotText has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="1" testNumber="8841"/>
			<description>AnnotTrapNetwork shall not contain entries except AP, AS, AnnotStates, Border, C, Contents, F, FontFauxing, M, P, Rect, StructParent, Subtype, Type, Version</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'AnnotStates' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FontFauxing' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version').length == 0</test>
			<error>
				<message>AnnotTrapNetwork contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'AnnotStates' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FontFauxing' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8842"/>
			<description>Entry AP with type Dictionary in AnnotTrapNetwork shall be object AppearanceTrapNet</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotTrapNetwork is not object AppearanceTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8843"/>
			<description>Entry AP in AnnotTrapNetwork shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotTrapNetwork is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="7" testNumber="8844"/>
			<description>Entry AP in AnnotTrapNetwork is required</description>
			<test>containsAP == true</test>
			<error>
				<message>Entry AP in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8845"/>
			<description>Entry AS in AnnotTrapNetwork shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotTrapNetwork is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="7" testNumber="8846"/>
			<description>Entry AS in AnnotTrapNetwork is required</description>
			<test>containsAS == true</test>
			<error>
				<message>Entry AS in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8847"/>
			<description>Entry AnnotStates with type Array in AnnotTrapNetwork shall be object ArrayOfAnnotStates</description>
			<test>AnnotStatesHasTypeArray != true || AnnotStates_size == 1</test>
			<error>
				<message>Entry AnnotStates with type Array in AnnotTrapNetwork is not object ArrayOfAnnotStates</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8848"/>
			<description>Entry AnnotStates in AnnotTrapNetwork shall have type Array</description>
			<test>containsAnnotStates == false || AnnotStatesHasTypeArray == true</test>
			<error>
				<message>Entry AnnotStates in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="11" testNumber="8849"/>
			<description>Entry AnnotStates in AnnotTrapNetwork is required, when fn:IsRequired(fn:IsPresent(Version) &amp;&amp; fn:Not(fn:IsPresent(LastModified)))</description>
			<test>(containsAnnotStates == true || ((containsVersion == true) &amp;&amp; ((containsLastModified == true)) != true) == false)</test>
			<error>
				<message>Entry AnnotStates in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8850"/>
			<description>Entry Border with type Array in AnnotTrapNetwork shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotTrapNetwork is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8851"/>
			<description>Entry Border in AnnotTrapNetwork shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8852"/>
			<description>Entry C with type Array in AnnotTrapNetwork shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotTrapNetwork is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8853"/>
			<description>Entry C in AnnotTrapNetwork shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8854"/>
			<description>Entry Contents in AnnotTrapNetwork shall have type String</description>
			<test>containsContents == false || ContentsHasTypeString == true</test>
			<error>
				<message>Entry Contents in AnnotTrapNetwork is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8855"/>
			<description>Entry F in AnnotTrapNetwork shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotTrapNetwork is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="7" testNumber="8856"/>
			<description>Entry F in AnnotTrapNetwork is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="9" testNumber="8857"/>
			<description>Entry F with type Bitmask in AnnotTrapNetwork shall satisfy special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitSet(3) &amp;&amp; fn:BitsClear(4 , 6) &amp;&amp; fn:BitSet(7) &amp;&amp; fn:BitsClear(8 , 32))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 0 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 1 &amp; 1) == 0) &amp;&amp; (FBitmaskValue &gt;&gt; 2 &amp; 1) == 1 &amp;&amp; ((FBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 5 &amp; 1) == 0) &amp;&amp; (FBitmaskValue &gt;&gt; 6 &amp; 1) == 1 &amp;&amp; ((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotTrapNetwork does not satisfy special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitSet(3) &amp;&amp; fn:BitsClear(4 , 6) &amp;&amp; fn:BitSet(7) &amp;&amp; fn:BitsClear(8 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8858"/>
			<description>Entry FontFauxing with type Array in AnnotTrapNetwork shall be object ArrayOfFonts</description>
			<test>FontFauxingHasTypeArray != true || FontFauxing_size == 1</test>
			<error>
				<message>Entry FontFauxing with type Array in AnnotTrapNetwork is not object ArrayOfFonts</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8859"/>
			<description>Entry FontFauxing in AnnotTrapNetwork shall have type Array</description>
			<test>containsFontFauxing == false || FontFauxingHasTypeArray == true</test>
			<error>
				<message>Entry FontFauxing in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8860"/>
			<description>Entry M in AnnotTrapNetwork shall have one of types: Date, String</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeString == true</test>
			<error>
				<message>Entry M in AnnotTrapNetwork is not one of types: Date, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8861"/>
			<description>Entry P with type Dictionary in AnnotTrapNetwork shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotTrapNetwork is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8862"/>
			<description>Entry P in AnnotTrapNetwork shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotTrapNetwork is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="10" testNumber="8863"/>
			<description>Entry P with type Dictionary in AnnotTrapNetwork shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotTrapNetwork is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8864"/>
			<description>Entry Rect in AnnotTrapNetwork shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotTrapNetwork is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="7" testNumber="8865"/>
			<description>Entry Rect in AnnotTrapNetwork is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8866"/>
			<description>Entry StructParent in AnnotTrapNetwork shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotTrapNetwork is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8867"/>
			<description>Entry Subtype in AnnotTrapNetwork shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotTrapNetwork is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="7" testNumber="8868"/>
			<description>Entry Subtype in AnnotTrapNetwork is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="6" testNumber="8869"/>
			<description>Entry Subtype with type Name in AnnotTrapNetwork shall have value TrapNet</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "TrapNet"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotTrapNetwork has incorrect value %2 instead of TrapNet</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8870"/>
			<description>Entry Type in AnnotTrapNetwork shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotTrapNetwork is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="6" testNumber="8871"/>
			<description>Entry Type with type Name in AnnotTrapNetwork shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotTrapNetwork has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="17" testNumber="8872"/>
			<description>Entry Version with type Array in AnnotTrapNetwork shall be object ArrayOfTrapNetVersionObjects</description>
			<test>VersionHasTypeArray != true || Version_size == 1</test>
			<error>
				<message>Entry Version with type Array in AnnotTrapNetwork is not object ArrayOfTrapNetVersionObjects</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="8" testNumber="8873"/>
			<description>Entry Version in AnnotTrapNetwork shall have type Array</description>
			<test>containsVersion == false || VersionHasTypeArray == true</test>
			<error>
				<message>Entry Version in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_3" clause="11" testNumber="8874"/>
			<description>Entry Version in AnnotTrapNetwork is required, when fn:IsRequired(fn:IsPresent(AnnotStates) &amp;&amp; fn:Not(fn:IsPresent(LastModified)))</description>
			<test>(containsVersion == true || ((containsAnnotStates == true) &amp;&amp; ((containsLastModified == true)) != true) == false)</test>
			<error>
				<message>Entry Version in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="1" testNumber="9079"/>
			<description>AnnotUnderline shall not contain entries except AP, AS, Border, C, Contents, F, M, P, Popup, QuadPoints, Rect, StructParent, Subtype, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotUnderline contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9080"/>
			<description>Entry AP with type Dictionary in AnnotUnderline shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotUnderline is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9081"/>
			<description>Entry AP in AnnotUnderline shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="11" testNumber="9082"/>
			<description>Entry AP in AnnotUnderline is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9083"/>
			<description>Entry AS in AnnotUnderline shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotUnderline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="11" testNumber="9084"/>
			<description>Entry AS in AnnotUnderline is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9085"/>
			<description>Entry Border with type Array in AnnotUnderline shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotUnderline is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9086"/>
			<description>Entry Border in AnnotUnderline shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotUnderline is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9087"/>
			<description>Entry C with type Array in AnnotUnderline shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotUnderline is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9088"/>
			<description>Entry C in AnnotUnderline shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotUnderline is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9089"/>
			<description>Entry Contents in AnnotUnderline shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotUnderline is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9090"/>
			<description>Entry F in AnnotUnderline shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotUnderline is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="9" testNumber="9091"/>
			<description>Entry F with type Bitmask in AnnotUnderline shall satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotUnderline does not satisfy special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9092"/>
			<description>Entry M in AnnotUnderline shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotUnderline is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9093"/>
			<description>Entry P with type Dictionary in AnnotUnderline shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotUnderline is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9094"/>
			<description>Entry P in AnnotUnderline shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="10" testNumber="9095"/>
			<description>Entry P with type Dictionary in AnnotUnderline shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotUnderline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9096"/>
			<description>Entry Popup with type Dictionary in AnnotUnderline shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotUnderline is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9097"/>
			<description>Entry Popup in AnnotUnderline shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="10" testNumber="9098"/>
			<description>Entry Popup with type Dictionary in AnnotUnderline shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotUnderline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9099"/>
			<description>Entry QuadPoints with type Array in AnnotUnderline shall be object ArrayOfQuadPoints</description>
			<test>QuadPointsHasTypeArray != true || QuadPoints_size == 1</test>
			<error>
				<message>Entry QuadPoints with type Array in AnnotUnderline is not object ArrayOfQuadPoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9100"/>
			<description>Entry QuadPoints in AnnotUnderline shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotUnderline is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="7" testNumber="9101"/>
			<description>Entry QuadPoints in AnnotUnderline is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9102"/>
			<description>Entry Rect in AnnotUnderline shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotUnderline is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="7" testNumber="9103"/>
			<description>Entry Rect in AnnotUnderline is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9104"/>
			<description>Entry StructParent in AnnotUnderline shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotUnderline is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9105"/>
			<description>Entry Subtype in AnnotUnderline shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotUnderline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="7" testNumber="9106"/>
			<description>Entry Subtype in AnnotUnderline is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="6" testNumber="9107"/>
			<description>Entry Subtype with type Name in AnnotUnderline shall have value Underline</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Underline"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotUnderline has incorrect value %2 instead of Underline</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9108"/>
			<description>Entry T in AnnotUnderline shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotUnderline is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9109"/>
			<description>Entry Type in AnnotUnderline shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotUnderline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_3" clause="6" testNumber="9110"/>
			<description>Entry Type with type Name in AnnotUnderline shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotUnderline has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="1" testNumber="9486"/>
			<description>AnnotWidget shall not contain entries except A, AA, AP, AS, BS, Border, C, Contents, F, Ff, H, Kids, M, MK, P, Parent, Rect, StructParent, Subtype, T, TM, TU, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotWidget contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'M' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9487"/>
			<description>Entry A with type Dictionary in AnnotWidget shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotWidget is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9488"/>
			<description>Entry A in AnnotWidget shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9489"/>
			<description>Entry AA with type Dictionary in AnnotWidget shall be object AddActionWidgetAnnotation</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in AnnotWidget is not object AddActionWidgetAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9490"/>
			<description>Entry AA in AnnotWidget shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9491"/>
			<description>Entry AP with type Dictionary in AnnotWidget shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotWidget is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9492"/>
			<description>Entry AP in AnnotWidget shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="11" testNumber="9493"/>
			<description>Entry AP in AnnotWidget is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotWidget is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9494"/>
			<description>Entry AS in AnnotWidget shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotWidget is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="11" testNumber="9495"/>
			<description>Entry AS in AnnotWidget is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotWidget is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9496"/>
			<description>Entry BS with type Dictionary in AnnotWidget shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotWidget is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9497"/>
			<description>Entry BS in AnnotWidget shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9498"/>
			<description>Entry Border with type Array in AnnotWidget shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotWidget is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9499"/>
			<description>Entry Border in AnnotWidget shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotWidget is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9500"/>
			<description>Entry C with type Array in AnnotWidget shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotWidget is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9501"/>
			<description>Entry C in AnnotWidget shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotWidget is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9502"/>
			<description>Entry Contents in AnnotWidget shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9503"/>
			<description>Entry F in AnnotWidget shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotWidget is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="9" testNumber="9504"/>
			<description>Entry F with type Bitmask in AnnotWidget shall satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; ((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotWidget does not satisfy special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9505"/>
			<description>Entry Ff in AnnotWidget shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in AnnotWidget is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9506"/>
			<description>Entry H in AnnotWidget shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotWidget is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="6" testNumber="9507"/>
			<description>Entry H with type Name in AnnotWidget shall have one of values: P, T, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P" || HNameValue == "T"</test>
			<error>
				<message>Entry H with type Name in AnnotWidget has incorrect value %2 instead of P, T, I, N, O</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9508"/>
			<description>Entry Kids with type Array in AnnotWidget shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in AnnotWidget is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9509"/>
			<description>Entry Kids in AnnotWidget shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in AnnotWidget is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9510"/>
			<description>Entry M in AnnotWidget shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotWidget is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9511"/>
			<description>Entry MK with type Dictionary in AnnotWidget shall be object AppearanceCharacteristics</description>
			<test>MKHasTypeDictionary != true || MK_size == 1</test>
			<error>
				<message>Entry MK with type Dictionary in AnnotWidget is not object AppearanceCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9512"/>
			<description>Entry MK in AnnotWidget shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9513"/>
			<description>Entry P with type Dictionary in AnnotWidget shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidget is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9514"/>
			<description>Entry P in AnnotWidget shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="10" testNumber="9515"/>
			<description>Entry P with type Dictionary in AnnotWidget shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidget is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9516"/>
			<description>Entry Parent with type Dictionary in AnnotWidget shall be object Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotWidget is not object Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9517"/>
			<description>Entry Parent in AnnotWidget shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9518"/>
			<description>Entry Rect in AnnotWidget shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotWidget is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="7" testNumber="9519"/>
			<description>Entry Rect in AnnotWidget is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotWidget is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9520"/>
			<description>Entry StructParent in AnnotWidget shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotWidget is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9521"/>
			<description>Entry Subtype in AnnotWidget shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotWidget is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="7" testNumber="9522"/>
			<description>Entry Subtype in AnnotWidget is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotWidget is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="6" testNumber="9523"/>
			<description>Entry Subtype with type Name in AnnotWidget shall have value Widget</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Widget"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotWidget has incorrect value %2 instead of Widget</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9524"/>
			<description>Entry T in AnnotWidget shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9525"/>
			<description>Entry TM in AnnotWidget shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9526"/>
			<description>Entry TU in AnnotWidget shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9527"/>
			<description>Entry Type in AnnotWidget shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotWidget is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_3" clause="6" testNumber="9528"/>
			<description>Entry Type with type Name in AnnotWidget shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotWidget has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="1" testNumber="9783"/>
			<description>Appearance shall not contain entries except D, N, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R').length == 0</test>
			<error>
				<message>Appearance contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9784"/>
			<description>Entry D with type Stream in Appearance shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>DHasTypeStream != true || D_size == 1</test>
			<error>
				<message>Entry D with type Stream in Appearance is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9785"/>
			<description>Entry D with type Dictionary in Appearance shall be object AppearanceSubDict</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in Appearance is not object AppearanceSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9786"/>
			<description>Entry D in Appearance shall have one of types: Stream, Dictionary</description>
			<test>containsD == false || DHasTypeStream == true || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in Appearance is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="10" testNumber="9787"/>
			<description>Entry D with type Stream in Appearance shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in Appearance is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9788"/>
			<description>Entry N with type Stream in Appearance shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>NHasTypeStream != true || N_size == 1</test>
			<error>
				<message>Entry N with type Stream in Appearance is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9789"/>
			<description>Entry N with type Dictionary in Appearance shall be object AppearanceSubDict</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in Appearance is not object AppearanceSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9790"/>
			<description>Entry N in Appearance shall have one of types: Stream, Dictionary</description>
			<test>containsN == false || NHasTypeStream == true || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in Appearance is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="7" testNumber="9791"/>
			<description>Entry N in Appearance is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in Appearance is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="10" testNumber="9792"/>
			<description>Entry N with type Stream in Appearance shall be indirect</description>
			<test>NHasTypeStream != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Stream in Appearance is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9793"/>
			<description>Entry R with type Stream in Appearance shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>RHasTypeStream != true || R_size == 1</test>
			<error>
				<message>Entry R with type Stream in Appearance is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9794"/>
			<description>Entry R with type Dictionary in Appearance shall be object AppearanceSubDict</description>
			<test>RHasTypeDictionary != true || R_size == 1</test>
			<error>
				<message>Entry R with type Dictionary in Appearance is not object AppearanceSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9795"/>
			<description>Entry R in Appearance shall have one of types: Stream, Dictionary</description>
			<test>containsR == false || RHasTypeStream == true || RHasTypeDictionary == true</test>
			<error>
				<message>Entry R in Appearance is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_3" clause="10" testNumber="9796"/>
			<description>Entry R with type Stream in Appearance shall be indirect</description>
			<test>RHasTypeStream != true || isRIndirect == true</test>
			<error>
				<message>Entry R with type Stream in Appearance is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="1" testNumber="9887"/>
			<description>AppearanceCharacteristics shall not contain entries except AC, BC, BG, CA, I, IF, IX, R, RC, RI, TP</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AC' &amp;&amp; elem != 'BC' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'I' &amp;&amp; elem != 'IF' &amp;&amp; elem != 'IX' &amp;&amp; elem != 'R' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'TP').length == 0</test>
			<error>
				<message>AppearanceCharacteristics contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AC' &amp;&amp; elem != 'BC' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'I' &amp;&amp; elem != 'IF' &amp;&amp; elem != 'IX' &amp;&amp; elem != 'R' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'TP').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9888"/>
			<description>Entry AC in AppearanceCharacteristics shall have type StringText</description>
			<test>containsAC == false || ACHasTypeStringText == true</test>
			<error>
				<message>Entry AC in AppearanceCharacteristics is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9889"/>
			<description>Entry BC with type Array in AppearanceCharacteristics shall be object ArrayOfNumbersGeneral</description>
			<test>BCHasTypeArray != true || BC_size == 1</test>
			<error>
				<message>Entry BC with type Array in AppearanceCharacteristics is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9890"/>
			<description>Entry BC in AppearanceCharacteristics shall have type Array</description>
			<test>containsBC == false || BCHasTypeArray == true</test>
			<error>
				<message>Entry BC in AppearanceCharacteristics is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9891"/>
			<description>Entry BG with type Array in AppearanceCharacteristics shall be object ArrayOfNumbersGeneral</description>
			<test>BGHasTypeArray != true || BG_size == 1</test>
			<error>
				<message>Entry BG with type Array in AppearanceCharacteristics is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9892"/>
			<description>Entry BG in AppearanceCharacteristics shall have type Array</description>
			<test>containsBG == false || BGHasTypeArray == true</test>
			<error>
				<message>Entry BG in AppearanceCharacteristics is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9893"/>
			<description>Entry CA in AppearanceCharacteristics shall have type StringText</description>
			<test>containsCA == false || CAHasTypeStringText == true</test>
			<error>
				<message>Entry CA in AppearanceCharacteristics is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9894"/>
			<description>Entry I with type Stream in AppearanceCharacteristics shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>IHasTypeStream != true || I_size == 1</test>
			<error>
				<message>Entry I with type Stream in AppearanceCharacteristics is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9895"/>
			<description>Entry I in AppearanceCharacteristics shall have type Stream</description>
			<test>containsI == false || IHasTypeStream == true</test>
			<error>
				<message>Entry I in AppearanceCharacteristics is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="10" testNumber="9896"/>
			<description>Entry I with type Stream in AppearanceCharacteristics shall be indirect</description>
			<test>IHasTypeStream != true || isIIndirect == true</test>
			<error>
				<message>Entry I with type Stream in AppearanceCharacteristics is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9897"/>
			<description>Entry IF with type Dictionary in AppearanceCharacteristics shall be object IconFit</description>
			<test>IFHasTypeDictionary != true || IF_size == 1</test>
			<error>
				<message>Entry IF with type Dictionary in AppearanceCharacteristics is not object IconFit</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9898"/>
			<description>Entry IF in AppearanceCharacteristics shall have type Dictionary</description>
			<test>containsIF == false || IFHasTypeDictionary == true</test>
			<error>
				<message>Entry IF in AppearanceCharacteristics is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9899"/>
			<description>Entry IX with type Stream in AppearanceCharacteristics shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>IXHasTypeStream != true || IX_size == 1</test>
			<error>
				<message>Entry IX with type Stream in AppearanceCharacteristics is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9900"/>
			<description>Entry IX in AppearanceCharacteristics shall have type Stream</description>
			<test>containsIX == false || IXHasTypeStream == true</test>
			<error>
				<message>Entry IX in AppearanceCharacteristics is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="10" testNumber="9901"/>
			<description>Entry IX with type Stream in AppearanceCharacteristics shall be indirect</description>
			<test>IXHasTypeStream != true || isIXIndirect == true</test>
			<error>
				<message>Entry IX with type Stream in AppearanceCharacteristics is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9902"/>
			<description>Entry R in AppearanceCharacteristics shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in AppearanceCharacteristics is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9903"/>
			<description>Entry RC in AppearanceCharacteristics shall have type StringText</description>
			<test>containsRC == false || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AppearanceCharacteristics is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="17" testNumber="9904"/>
			<description>Entry RI with type Stream in AppearanceCharacteristics shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>RIHasTypeStream != true || RI_size == 1</test>
			<error>
				<message>Entry RI with type Stream in AppearanceCharacteristics is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9905"/>
			<description>Entry RI in AppearanceCharacteristics shall have type Stream</description>
			<test>containsRI == false || RIHasTypeStream == true</test>
			<error>
				<message>Entry RI in AppearanceCharacteristics is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="10" testNumber="9906"/>
			<description>Entry RI with type Stream in AppearanceCharacteristics shall be indirect</description>
			<test>RIHasTypeStream != true || isRIIndirect == true</test>
			<error>
				<message>Entry RI with type Stream in AppearanceCharacteristics is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="9907"/>
			<description>Entry TP in AppearanceCharacteristics shall have type Integer</description>
			<test>containsTP == false || TPHasTypeInteger == true</test>
			<error>
				<message>Entry TP in AppearanceCharacteristics is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_3" clause="6" testNumber="9908"/>
			<description>Entry TP with type Integer in AppearanceCharacteristics shall have one of values: 0, 1, 2, 3, 4, 5, 6</description>
			<test>TPHasTypeInteger != true || TPIntegerValue == 0 || TPIntegerValue == 1 || TPIntegerValue == 2 || TPIntegerValue == 3 || TPIntegerValue == 4 || TPIntegerValue == 5 || TPIntegerValue == 6</test>
			<error>
				<message>Entry TP with type Integer in AppearanceCharacteristics has incorrect value %2 instead of 0, 1, 2, 3, 4, 5, 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TPIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceSubDictEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10104"/>
			<description>Entry with type Stream in AppearanceSubDict shall be object XObjectFormType1</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in AppearanceSubDict is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceSubDictEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10105"/>
			<description>Entry in AppearanceSubDict shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in AppearanceSubDict is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceSubDictEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10106"/>
			<description>Entry with type Stream in AppearanceSubDict shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in AppearanceSubDict is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="1" testNumber="10122"/>
			<description>AppearanceTrapNet shall not contain entries except D, N, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R').length == 0</test>
			<error>
				<message>AppearanceTrapNet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'N' &amp;&amp; elem != 'R').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10123"/>
			<description>Entry D with type Stream in AppearanceTrapNet shall be object XObjectFormTrapNet</description>
			<test>DHasTypeStream != true || D_size == 1</test>
			<error>
				<message>Entry D with type Stream in AppearanceTrapNet is not object XObjectFormTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10124"/>
			<description>Entry D with type Dictionary in AppearanceTrapNet shall be object AppearanceTrapNetSubDict</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in AppearanceTrapNet is not object AppearanceTrapNetSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10125"/>
			<description>Entry D in AppearanceTrapNet shall have one of types: Stream, Dictionary</description>
			<test>containsD == false || DHasTypeStream == true || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in AppearanceTrapNet is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10126"/>
			<description>Entry D with type Stream in AppearanceTrapNet shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in AppearanceTrapNet is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10127"/>
			<description>Entry N with type Stream in AppearanceTrapNet shall be object XObjectFormTrapNet</description>
			<test>NHasTypeStream != true || N_size == 1</test>
			<error>
				<message>Entry N with type Stream in AppearanceTrapNet is not object XObjectFormTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10128"/>
			<description>Entry N with type Dictionary in AppearanceTrapNet shall be object AppearanceTrapNetSubDict</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in AppearanceTrapNet is not object AppearanceTrapNetSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10129"/>
			<description>Entry N in AppearanceTrapNet shall have one of types: Stream, Dictionary</description>
			<test>containsN == false || NHasTypeStream == true || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in AppearanceTrapNet is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="10130"/>
			<description>Entry N in AppearanceTrapNet is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in AppearanceTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10131"/>
			<description>Entry N with type Stream in AppearanceTrapNet shall be indirect</description>
			<test>NHasTypeStream != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Stream in AppearanceTrapNet is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10132"/>
			<description>Entry R with type Stream in AppearanceTrapNet shall be object XObjectFormTrapNet</description>
			<test>RHasTypeStream != true || R_size == 1</test>
			<error>
				<message>Entry R with type Stream in AppearanceTrapNet is not object XObjectFormTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10133"/>
			<description>Entry R with type Dictionary in AppearanceTrapNet shall be object AppearanceTrapNetSubDict</description>
			<test>RHasTypeDictionary != true || R_size == 1</test>
			<error>
				<message>Entry R with type Dictionary in AppearanceTrapNet is not object AppearanceTrapNetSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10134"/>
			<description>Entry R in AppearanceTrapNet shall have one of types: Stream, Dictionary</description>
			<test>containsR == false || RHasTypeStream == true || RHasTypeDictionary == true</test>
			<error>
				<message>Entry R in AppearanceTrapNet is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10135"/>
			<description>Entry R with type Stream in AppearanceTrapNet shall be indirect</description>
			<test>RHasTypeStream != true || isRIndirect == true</test>
			<error>
				<message>Entry R with type Stream in AppearanceTrapNet is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNetSubDictEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10206"/>
			<description>Entry with type Stream in AppearanceTrapNetSubDict shall be object XObjectFormTrapNet</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in AppearanceTrapNetSubDict is not object XObjectFormTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNetSubDictEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10207"/>
			<description>Entry in AppearanceTrapNetSubDict shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in AppearanceTrapNetSubDict is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNetSubDictEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10208"/>
			<description>Entry with type Stream in AppearanceTrapNetSubDict shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in AppearanceTrapNetSubDict is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="2" testNumber="10309"/>
			<description>ArrayOf4Functions shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf4Functions contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10310"/>
			<description>Entry 0 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry0HasTypeStream != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10311"/>
			<description>Entry 0 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10312"/>
			<description>Entry 0 in ArrayOf4Functions shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeStream == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOf4Functions is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10313"/>
			<description>Entry 0 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry0HasTypeStream != true || isentry0Indirect == true</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOf4Functions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10314"/>
			<description>Entry 1 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry1HasTypeStream != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10315"/>
			<description>Entry 1 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10316"/>
			<description>Entry 1 in ArrayOf4Functions shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in ArrayOf4Functions is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10317"/>
			<description>Entry 1 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in ArrayOf4Functions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10318"/>
			<description>Entry 2 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry2HasTypeStream != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10319"/>
			<description>Entry 2 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry2HasTypeDictionary != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10320"/>
			<description>Entry 2 in ArrayOf4Functions shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 2 || entry2HasTypeStream == true || entry2HasTypeDictionary == true</test>
			<error>
				<message>Entry 2 in ArrayOf4Functions is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10321"/>
			<description>Entry 2 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry2HasTypeStream != true || isentry2Indirect == true</test>
			<error>
				<message>Entry 2 with type Stream in ArrayOf4Functions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10322"/>
			<description>Entry 3 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10323"/>
			<description>Entry 3 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry3HasTypeDictionary != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10324"/>
			<description>Entry 3 in ArrayOf4Functions shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 3 || entry3HasTypeStream == true || entry3HasTypeDictionary == true</test>
			<error>
				<message>Entry 3 in ArrayOf4Functions is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10325"/>
			<description>Entry 3 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in ArrayOf4Functions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10415"/>
			<description>Entry with type Dictionary in ArrayOfActionHideAnnots shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotHighlight, AnnotUnderline, AnnotStrikeOut, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotWidget, AnnotTrapNetwork</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfActionHideAnnots is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotHighlight, AnnotUnderline, AnnotStrikeOut, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotWidget, AnnotTrapNetwork</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10416"/>
			<description>Entry in ArrayOfActionHideAnnots shall have one of types: StringText, Dictionary</description>
			<test>HasTypeStringText == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfActionHideAnnots is not one of types: StringText, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_3" clause="9" testNumber="10417"/>
			<description>Entry with type StringText in ArrayOfActionHideAnnots shall satisfy special case: fn:Eval(fn:IsFieldName(@*))</description>
			<test>HasTypeStringText != true || (IsFieldName == true)</test>
			<error>
				<message>Entry %1 with type StringText in ArrayOfActionHideAnnots does not satisfy special case: fn:Eval(fn:IsFieldName(@*))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10418"/>
			<description>Entry with type Dictionary in ArrayOfActionHideAnnots shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfActionHideAnnots is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10441"/>
			<description>Entry with type Dictionary in ArrayOfActions shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfActions is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10442"/>
			<description>Entry in ArrayOfActions shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfActions is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotStatesEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10453"/>
			<description>Entry in ArrayOfAnnotStates shall have one of types: Name, Null</description>
			<test>HasTypeName == true || HasTypeNull == true</test>
			<error>
				<message>Entry %1 in ArrayOfAnnotStates is not one of types: Name, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10465"/>
			<description>Entry with type Dictionary in ArrayOfAnnots shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotHighlight, AnnotUnderline, AnnotStrikeOut, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotWidget, AnnotTrapNetwork</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfAnnots is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotHighlight, AnnotUnderline, AnnotStrikeOut, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotWidget, AnnotTrapNetwork</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10466"/>
			<description>Entry in ArrayOfAnnots shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfAnnots is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysInkListEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10477"/>
			<description>Entry with type Array in ArrayOfArraysInkList shall be object ArrayOfNumbersGeneral</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfArraysInkList is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysInkListEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10478"/>
			<description>Entry in ArrayOfArraysInkList shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ArrayOfArraysInkList is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysURLStringsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10508"/>
			<description>Entry with type Array in ArrayOfArraysURLStrings shall be object ArrayOfURLStrings</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfArraysURLStrings is not object ArrayOfURLStrings</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysURLStringsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10509"/>
			<description>Entry in ArrayOfArraysURLStrings shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ArrayOfArraysURLStrings is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeObjectsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10526"/>
			<description>Entry with type Dictionary in ArrayOfAttributeObjects shall be object StructureAttributesDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfAttributeObjects is not object StructureAttributesDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeObjectsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10527"/>
			<description>Entry in ArrayOfAttributeObjects shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfAttributeObjects is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_3" clause="4" testNumber="10538"/>
			<description>ArrayOfAttributeRevisionsSubArray shall contain at least 1 element</description>
			<test>size &gt;= 1</test>
			<error>
				<message>ArrayOfAttributeRevisionsSubArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10539"/>
			<description>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray shall be object Stream</description>
			<test>entry0HasTypeStream != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10540"/>
			<description>Entry 0 with type Dictionary in ArrayOfAttributeRevisionsSubArray shall be object StructureAttributesDict</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfAttributeRevisionsSubArray is not object StructureAttributesDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10541"/>
			<description>Entry 0 in ArrayOfAttributeRevisionsSubArray shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeStream == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOfAttributeRevisionsSubArray is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10542"/>
			<description>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray shall be indirect</description>
			<test>entry0HasTypeStream != true || isentry0Indirect == true</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10543"/>
			<description>Entry 1 in ArrayOfAttributeRevisionsSubArray shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfAttributeRevisionsSubArray is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="10544"/>
			<description>Entry 1 with type Integer in ArrayOfAttributeRevisionsSubArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfAttributeRevisionsSubArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10586"/>
			<description>Entry with type Dictionary in ArrayOfBeads shall be one of objects BeadFirst, Bead</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfBeads is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10587"/>
			<description>Entry in ArrayOfBeads shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfBeads is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10588"/>
			<description>Entry with type Dictionary in ArrayOfBeads shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfBeads is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsW2Entry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10624"/>
			<description>Entry with type Array in ArrayOfCIDGlyphMetricsW2 shall be object ArrayOfNumbersGeneral</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfCIDGlyphMetricsW2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsW2Entry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10625"/>
			<description>Entry in ArrayOfCIDGlyphMetricsW2 shall have one of types: Array, Number, Integer</description>
			<test>HasTypeArray == true || HasTypeNumber == true || HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfCIDGlyphMetricsW2 is not one of types: Array, Number, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsW2Entry">
			<id specification="ISO_32000_1_3" clause="9" testNumber="10626"/>
			<description>Entry with type Array in ArrayOfCIDGlyphMetricsW2 shall satisfy special case: fn:Eval((fn:ArrayLength(*) mod 3) == 0)</description>
			<test>HasTypeArray != true || ((ArraySize % 3) == 0)</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfCIDGlyphMetricsW2 does not satisfy special case: fn:Eval((fn:ArrayLength(*) mod 3) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsWEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10644"/>
			<description>Entry with type Array in ArrayOfCIDGlyphMetricsW shall be object ArrayOfNumbersGeneral</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfCIDGlyphMetricsW is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsWEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10645"/>
			<description>Entry in ArrayOfCIDGlyphMetricsW shall have one of types: Array, Number, Integer</description>
			<test>HasTypeArray == true || HasTypeNumber == true || HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfCIDGlyphMetricsW is not one of types: Array, Number, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_3" clause="4" testNumber="10656"/>
			<description>ArrayOfClassNamesRevisionsSubArray shall contain at least 1 element</description>
			<test>size &gt;= 1</test>
			<error>
				<message>ArrayOfClassNamesRevisionsSubArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10657"/>
			<description>Entry 0 in ArrayOfClassNamesRevisionsSubArray shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOfClassNamesRevisionsSubArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10658"/>
			<description>Entry 1 in ArrayOfClassNamesRevisionsSubArray shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfClassNamesRevisionsSubArray is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="10659"/>
			<description>Entry 1 with type Integer in ArrayOfClassNamesRevisionsSubArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfClassNamesRevisionsSubArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCompressionFilterNamesEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10686"/>
			<description>Entry in ArrayOfCompressionFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfCompressionFilterNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCompressionFilterNamesEntry">
			<id specification="ISO_32000_1_3" clause="6" testNumber="10687"/>
			<description>Entry with type Name in ArrayOfCompressionFilterNames shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>HasTypeName != true || NameValue == "ASCIIHexDecode" || NameValue == "ASCII85Decode" || NameValue == "LZWDecode" || NameValue == "FlateDecode" || NameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfCompressionFilterNames has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDashPatternsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10714"/>
			<description>Entry in ArrayOfDashPatterns shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in ArrayOfDashPatterns is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDecodeParamsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10726"/>
			<description>Entry with type Dictionary in ArrayOfDecodeParams shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfDecodeParams is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDecodeParamsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10727"/>
			<description>Entry in ArrayOfDecodeParams shall have one of types: Null, Dictionary</description>
			<test>HasTypeNull == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfDecodeParams is not one of types: Null, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDescendantFonts">
			<id specification="ISO_32000_1_3" clause="2" testNumber="10741"/>
			<description>ArrayOfDescendantFonts shall contain exactly 1 element</description>
			<test>size == 1</test>
			<error>
				<message>ArrayOfDescendantFonts contains %1 element(s) instead of 1</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDescendantFonts">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10742"/>
			<description>Entry 0 with type Dictionary in ArrayOfDescendantFonts shall be one of objects FontCIDType0, FontCIDType2</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfDescendantFonts is not one of objects FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDescendantFonts">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10743"/>
			<description>Entry 0 in ArrayOfDescendantFonts shall have type Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOfDescendantFonts is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDifferencesEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10765"/>
			<description>Entry in ArrayOfDifferences shall have one of types: Integer, Name</description>
			<test>HasTypeInteger == true || HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfDifferences is not one of types: Integer, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_3" clause="2" testNumber="10782"/>
			<description>ArrayOfDuration shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfDuration contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10783"/>
			<description>Entry 0 in ArrayOfDuration shall have one of types: StringByte, Integer</description>
			<test>size &lt;= 0 || entry0HasTypeStringByte == true || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOfDuration is not one of types: StringByte, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_3" clause="14" testNumber="10784"/>
			<description>Entry 0 with type StringByte in ArrayOfDuration shall satisfy possible value predicate: fn:Eval(fn:StringLength(0) == 8)</description>
			<test>entry0HasTypeStringByte != true || entry0StringSize == 8</test>
			<error>
				<message>Entry 0 with type StringByte in ArrayOfDuration does not satisfy possible value predicate: fn:Eval(fn:StringLength(0) == 8)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_3" clause="14" testNumber="10785"/>
			<description>Entry 0 with type Integer in ArrayOfDuration shall satisfy possible value predicate: fn:Eval(@0 &gt; 0)</description>
			<test>entry0HasTypeInteger != true || entry0IntegerValue &gt; 0</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfDuration does not satisfy possible value predicate: fn:Eval(@0 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10786"/>
			<description>Entry 1 in ArrayOfDuration shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfDuration is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_3" clause="14" testNumber="10787"/>
			<description>Entry 1 with type Integer in ArrayOfDuration shall satisfy possible value predicate: fn:Eval(@1 &gt; 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt; 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfDuration does not satisfy possible value predicate: fn:Eval(@1 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldIDEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10830"/>
			<description>Entry with type Dictionary in ArrayOfFieldID shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfFieldID is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldIDEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10831"/>
			<description>Entry in ArrayOfFieldID shall have one of types: StringText, Dictionary</description>
			<test>HasTypeStringText == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfFieldID is not one of types: StringText, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10844"/>
			<description>Entry with type Dictionary in ArrayOfFields shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidget</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfFields is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidget</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10845"/>
			<description>Entry in ArrayOfFields shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfFields is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFilterNamesEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10864"/>
			<description>Entry in ArrayOfFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfFilterNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFilterNamesEntry">
			<id specification="ISO_32000_1_3" clause="6" testNumber="10865"/>
			<description>Entry with type Name in ArrayOfFilterNames shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>HasTypeName != true || NameValue == "ASCIIHexDecode" || NameValue == "ASCII85Decode" || NameValue == "LZWDecode" || NameValue == "FlateDecode" || NameValue == "RunLengthDecode" || NameValue == "CCITTFaxDecode" || NameValue == "DCTDecode"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfFilterNames has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_3" clause="2" testNumber="10876"/>
			<description>ArrayOfFontAndSize shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfFontAndSize contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10877"/>
			<description>Entry 0 with type Dictionary in ArrayOfFontAndSize shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfFontAndSize is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10878"/>
			<description>Entry 0 in ArrayOfFontAndSize shall have type Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOfFontAndSize is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10879"/>
			<description>Entry 0 with type Dictionary in ArrayOfFontAndSize shall be indirect</description>
			<test>entry0HasTypeDictionary != true || isentry0Indirect == true</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfFontAndSize is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10880"/>
			<description>Entry 1 in ArrayOfFontAndSize shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfFontAndSize is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10906"/>
			<description>Entry with type Dictionary in ArrayOfFonts shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfFonts is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10907"/>
			<description>Entry in ArrayOfFonts shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfFonts is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10921"/>
			<description>Entry with type Stream in ArrayOfFunctions shall be one of objects FunctionType0, FunctionType4</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfFunctions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10922"/>
			<description>Entry with type Dictionary in ArrayOfFunctions shall be one of objects FunctionType2, FunctionType3</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfFunctions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10923"/>
			<description>Entry in ArrayOfFunctions shall have one of types: Stream, Dictionary</description>
			<test>HasTypeStream == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfFunctions is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="10924"/>
			<description>Entry with type Stream in ArrayOfFunctions shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfFunctions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_3" clause="2" testNumber="10945"/>
			<description>ArrayOfGSPDashPatterns shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfGSPDashPatterns contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10946"/>
			<description>Entry 0 with type Array in ArrayOfGSPDashPatterns shall be object ArrayOfDashPatterns</description>
			<test>entry0HasTypeArray != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Array in ArrayOfGSPDashPatterns is not object ArrayOfDashPatterns</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10947"/>
			<description>Entry 0 in ArrayOfGSPDashPatterns shall have type Array</description>
			<test>size &lt;= 0 || entry0HasTypeArray == true</test>
			<error>
				<message>Entry 0 in ArrayOfGSPDashPatterns is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10948"/>
			<description>Entry 1 in ArrayOfGSPDashPatterns shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfGSPDashPatterns is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfImageAlternatesEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="10969"/>
			<description>Entry with type Dictionary in ArrayOfImageAlternates shall be object AlternateImage</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfImageAlternates is not object AlternateImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfImageAlternatesEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10970"/>
			<description>Entry in ArrayOfImageAlternates shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfImageAlternates is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIntegersGeneralEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="10992"/>
			<description>Entry in ArrayOfIntegersGeneral shall have type Integer</description>
			<test>HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfIntegersGeneral is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11021"/>
			<description>Entry in ArrayOfNamesForProcSet shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfNamesForProcSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="ISO_32000_1_3" clause="6" testNumber="11022"/>
			<description>Entry with type Name in ArrayOfNamesForProcSet shall have one of values: ImageI, PDF, ImageC, ImageB, Text</description>
			<test>HasTypeName != true || NameValue == "PDF" || NameValue == "Text" || NameValue == "ImageB" || NameValue == "ImageC" || NameValue == "ImageI"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfNamesForProcSet has incorrect value %2 instead of ImageI, PDF, ImageC, ImageB, Text</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesGeneralEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11037"/>
			<description>Entry in ArrayOfNamesGeneral shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfNamesGeneral is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNumbersGeneralEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11070"/>
			<description>Entry in ArrayOfNumbersGeneral shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in ArrayOfNumbersGeneral is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_3" clause="2" testNumber="11138"/>
			<description>ArrayOfOPI13Color shall contain exactly 5 elements</description>
			<test>size == 5</test>
			<error>
				<message>ArrayOfOPI13Color contains %1 element(s) instead of 5</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11139"/>
			<description>Entry 0 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOfOPI13Color is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_3" clause="14" testNumber="11140"/>
			<description>Entry 0 with type Number in ArrayOfOPI13Color shall satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</description>
			<test>entry0HasTypeNumber != true || (entry0NumberValue &gt;= 0) &amp;&amp; (entry0NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 0 with type Number in ArrayOfOPI13Color does not satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11141"/>
			<description>Entry 1 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfOPI13Color is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_3" clause="14" testNumber="11142"/>
			<description>Entry 1 with type Number in ArrayOfOPI13Color shall satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOfOPI13Color does not satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11143"/>
			<description>Entry 2 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOfOPI13Color is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_3" clause="14" testNumber="11144"/>
			<description>Entry 2 with type Number in ArrayOfOPI13Color shall satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOfOPI13Color does not satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11145"/>
			<description>Entry 3 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOfOPI13Color is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_3" clause="14" testNumber="11146"/>
			<description>Entry 3 with type Number in ArrayOfOPI13Color shall satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</description>
			<test>entry3HasTypeNumber != true || (entry3NumberValue &gt;= 0) &amp;&amp; (entry3NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 3 with type Number in ArrayOfOPI13Color does not satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11147"/>
			<description>Entry 4 in ArrayOfOPI13Color shall have type StringByte</description>
			<test>size &lt;= 4 || entry4HasTypeStringByte == true</test>
			<error>
				<message>Entry 4 in ArrayOfOPI13Color is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2Inks">
			<id specification="ISO_32000_1_3" clause="3" testNumber="11201"/>
			<description>ArrayOfOPI2Inks shall contain 1 + 2*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 1</test>
			<error>
				<message>ArrayOfOPI2Inks contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2Inks">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11202"/>
			<description>Entry 0 in ArrayOfOPI2Inks shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOfOPI2Inks is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2Inks">
			<id specification="ISO_32000_1_3" clause="6" testNumber="11203"/>
			<description>Entry 0 with type Name in ArrayOfOPI2Inks shall have value monochrome</description>
			<test>entry0HasTypeName != true || entry0NameValue == "monochrome"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOfOPI2Inks has incorrect value %2 instead of monochrome</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_3" clause="2" testNumber="11223"/>
			<description>ArrayOfOPI2InksSubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfOPI2InksSubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11224"/>
			<description>Entry 0 in ArrayOfOPI2InksSubArray shall have type String</description>
			<test>size &lt;= 0 || entry0HasTypeString == true</test>
			<error>
				<message>Entry 0 in ArrayOfOPI2InksSubArray is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11225"/>
			<description>Entry 1 in ArrayOfOPI2InksSubArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfOPI2InksSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="11226"/>
			<description>Entry 1 with type Number in ArrayOfOPI2InksSubArray shall satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOfOPI2InksSubArray does not satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11303"/>
			<description>Entry with type Dictionary in ArrayOfPageTreeNodeKids shall be one of objects PageTreeNode, PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfPageTreeNodeKids is not one of objects PageTreeNode, PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11304"/>
			<description>Entry in ArrayOfPageTreeNodeKids shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfPageTreeNodeKids is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11315"/>
			<description>Entry with type Dictionary in ArrayOfPages shall be object PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfPages is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11316"/>
			<description>Entry in ArrayOfPages shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfPages is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="11317"/>
			<description>Entry with type Dictionary in ArrayOfPages shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfPages is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_3" clause="9" testNumber="11318"/>
			<description>Entry with type Dictionary in ArrayOfPages shall satisfy special case: fn:Eval(fn:IsPresent(*::SeparationInfo))</description>
			<test>HasTypeDictionary != true || ((containsAnySeparationInfo == true))</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfPages does not satisfy special case: fn:Eval(fn:IsPresent(*::SeparationInfo))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPoints">
			<id specification="ISO_32000_1_3" clause="3" testNumber="11346"/>
			<description>ArrayOfQuadPoints shall contain 8*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 8 == 0</test>
			<error>
				<message>ArrayOfQuadPoints contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_3" clause="2" testNumber="11352"/>
			<description>ArrayOfQuadPointsSubArray shall contain exactly 8 elements</description>
			<test>size == 8</test>
			<error>
				<message>ArrayOfQuadPointsSubArray contains %1 element(s) instead of 8</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11353"/>
			<description>Entry 0 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11354"/>
			<description>Entry 1 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11355"/>
			<description>Entry 2 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11356"/>
			<description>Entry 3 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11357"/>
			<description>Entry 4 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11358"/>
			<description>Entry 5 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11359"/>
			<description>Entry 6 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11360"/>
			<description>Entry 7 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSourceInformationEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11471"/>
			<description>Entry with type Dictionary in ArrayOfSourceInformation shall be object SourceInformation</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfSourceInformation is not object SourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSourceInformationEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11472"/>
			<description>Entry in ArrayOfSourceInformation shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfSourceInformation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11492"/>
			<description>Entry with type Stream in ArrayOfStreamsGeneral shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfStreamsGeneral is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11493"/>
			<description>Entry in ArrayOfStreamsGeneral shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in ArrayOfStreamsGeneral is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="11494"/>
			<description>Entry with type Stream in ArrayOfStreamsGeneral shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfStreamsGeneral is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStringsByteEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11512"/>
			<description>Entry in ArrayOfStringsByte shall have type StringByte</description>
			<test>HasTypeStringByte == true</test>
			<error>
				<message>Entry %1 in ArrayOfStringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStringsTextEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11519"/>
			<description>Entry in ArrayOfStringsText shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %1 in ArrayOfStringsText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11525"/>
			<description>Entry with type Dictionary in ArrayOfStructElem shall be object StructElem</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfStructElem is not object StructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11526"/>
			<description>Entry in ArrayOfStructElem shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfStructElem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="11527"/>
			<description>Entry with type Dictionary in ArrayOfStructElem shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfStructElem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemKidsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11543"/>
			<description>Entry with type Dictionary in ArrayOfStructElemKids shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfStructElemKids is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemKidsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11544"/>
			<description>Entry in ArrayOfStructElemKids shall have one of types: Integer, Dictionary</description>
			<test>HasTypeInteger == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfStructElemKids is not one of types: Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTags">
			<id specification="ISO_32000_1_3" clause="3" testNumber="11560"/>
			<description>ArrayOfTags shall contain 2*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>ArrayOfTags contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTagsSubArray">
			<id specification="ISO_32000_1_3" clause="2" testNumber="11569"/>
			<description>ArrayOfTagsSubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfTagsSubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTagsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11570"/>
			<description>Entry 0 in ArrayOfTagsSubArray shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOfTagsSubArray is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTagsSubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11571"/>
			<description>Entry 1 in ArrayOfTagsSubArray shall have type StringAscii</description>
			<test>size &lt;= 1 || entry1HasTypeStringAscii == true</test>
			<error>
				<message>Entry 1 in ArrayOfTagsSubArray is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfThreadsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11591"/>
			<description>Entry with type Dictionary in ArrayOfThreads shall be object Thread</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfThreads is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfThreadsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11592"/>
			<description>Entry in ArrayOfThreads shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfThreads is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11603"/>
			<description>Entry with type Array in ArrayOfTrapNetVersionObjects shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfTrapNetVersionObjects is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11604"/>
			<description>Entry with type Stream in ArrayOfTrapNetVersionObjects shall be one of objects PatternType1, ShadingType4, ShadingType5, ShadingType6, ShadingType7, Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfTrapNetVersionObjects is not one of objects PatternType1, ShadingType4, ShadingType5, ShadingType6, ShadingType7, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11605"/>
			<description>Entry with type Dictionary in ArrayOfTrapNetVersionObjects shall be one of objects OPIVersion13Dict, OPIVersion20Dict, GraphicsStateParameter, PatternType2, ShadingType1, ShadingType2, ShadingType3, XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough, FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfTrapNetVersionObjects is not one of objects OPIVersion13Dict, OPIVersion20Dict, GraphicsStateParameter, PatternType2, ShadingType1, ShadingType2, ShadingType3, XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough, FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11606"/>
			<description>Entry in ArrayOfTrapNetVersionObjects shall have one of types: Array, Stream, Dictionary</description>
			<test>HasTypeArray == true || HasTypeStream == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfTrapNetVersionObjects is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="11607"/>
			<description>Entry with type Array in ArrayOfTrapNetVersionObjects shall be indirect</description>
			<test>HasTypeArray != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfTrapNetVersionObjects is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="11608"/>
			<description>Entry with type Stream in ArrayOfTrapNetVersionObjects shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfTrapNetVersionObjects is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="11609"/>
			<description>Entry with type Dictionary in ArrayOfTrapNetVersionObjects shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfTrapNetVersionObjects is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapRegionsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11645"/>
			<description>Entry with type Dictionary in ArrayOfTrapRegions shall be object TrapRegion</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfTrapRegions is not object TrapRegion</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapRegionsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11646"/>
			<description>Entry in ArrayOfTrapRegions shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfTrapRegions is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapRegionsEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="11647"/>
			<description>Entry with type Dictionary in ArrayOfTrapRegions shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfTrapRegions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfURLStringsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11663"/>
			<description>Entry in ArrayOfURLStrings shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %1 in ArrayOfURLStrings is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureCommandsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11689"/>
			<description>Entry with type Dictionary in ArrayOfWebCaptureCommands shall be object WebCaptureCommand</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfWebCaptureCommands is not object WebCaptureCommand</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureCommandsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11690"/>
			<description>Entry in ArrayOfWebCaptureCommands shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfWebCaptureCommands is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureCommandsEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="11691"/>
			<description>Entry with type Dictionary in ArrayOfWebCaptureCommands shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfWebCaptureCommands is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureImagesEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11707"/>
			<description>Entry with type Stream in ArrayOfWebCaptureImages shall be object XObjectImage</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfWebCaptureImages is not object XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureImagesEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11708"/>
			<description>Entry in ArrayOfWebCaptureImages shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in ArrayOfWebCaptureImages is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureImagesEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="11709"/>
			<description>Entry with type Stream in ArrayOfWebCaptureImages shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfWebCaptureImages is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCapturePagesEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="11725"/>
			<description>Entry with type Dictionary in ArrayOfWebCapturePages shall be object PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfWebCapturePages is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCapturePagesEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11726"/>
			<description>Entry in ArrayOfWebCapturePages shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfWebCapturePages is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCapturePagesEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="11727"/>
			<description>Entry with type Dictionary in ArrayOfWebCapturePages shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfWebCapturePages is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Booleans">
			<id specification="ISO_32000_1_3" clause="2" testNumber="11835"/>
			<description>ArrayOf_2Booleans shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2Booleans contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Booleans">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11836"/>
			<description>Entry 0 in ArrayOf_2Booleans shall have type Boolean</description>
			<test>size &lt;= 0 || entry0HasTypeBoolean == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2Booleans is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Booleans">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11837"/>
			<description>Entry 1 in ArrayOf_2Booleans shall have type Boolean</description>
			<test>size &lt;= 1 || entry1HasTypeBoolean == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2Booleans is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_3" clause="2" testNumber="11859"/>
			<description>ArrayOf_2DashNumbers shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2DashNumbers contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11860"/>
			<description>Entry 0 in ArrayOf_2DashNumbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2DashNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11861"/>
			<description>Entry 1 in ArrayOf_2DashNumbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2DashNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Integers">
			<id specification="ISO_32000_1_3" clause="2" testNumber="11880"/>
			<description>ArrayOf_2Integers shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2Integers contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Integers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11881"/>
			<description>Entry 0 in ArrayOf_2Integers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Integers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11882"/>
			<description>Entry 1 in ArrayOf_2Integers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Numbers">
			<id specification="ISO_32000_1_3" clause="2" testNumber="11926"/>
			<description>ArrayOf_2Numbers shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2Numbers contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11927"/>
			<description>Entry 0 in ArrayOf_2Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11928"/>
			<description>Entry 1 in ArrayOf_2Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_3" clause="2" testNumber="11950"/>
			<description>ArrayOf_2StringsByte shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2StringsByte contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11951"/>
			<description>Entry 0 in ArrayOf_2StringsByte shall have type StringByte</description>
			<test>size &lt;= 0 || entry0HasTypeStringByte == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2StringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11952"/>
			<description>Entry 1 in ArrayOf_2StringsByte shall have type StringByte</description>
			<test>size &lt;= 1 || entry1HasTypeStringByte == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2StringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_3" clause="2" testNumber="11991"/>
			<description>ArrayOf_3Integers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_3Integers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11992"/>
			<description>Entry 0 in ArrayOf_3Integers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_3" clause="14" testNumber="11993"/>
			<description>Entry 0 with type Integer in ArrayOf_3Integers shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeInteger != true || entry0IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOf_3Integers does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11994"/>
			<description>Entry 1 in ArrayOf_3Integers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_3" clause="14" testNumber="11995"/>
			<description>Entry 1 with type Integer in ArrayOf_3Integers shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOf_3Integers does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="11996"/>
			<description>Entry 2 in ArrayOf_3Integers shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_3" clause="14" testNumber="11997"/>
			<description>Entry 2 with type Integer in ArrayOf_3Integers shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeInteger != true || entry2IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Integer in ArrayOf_3Integers does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_3" clause="4" testNumber="12130"/>
			<description>ArrayOf_4AnnotBorderCharacteristics shall contain at least 3 elements</description>
			<test>size &gt;= 3</test>
			<error>
				<message>ArrayOf_4AnnotBorderCharacteristics contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12131"/>
			<description>Entry 0 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4AnnotBorderCharacteristics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_3" clause="14" testNumber="12132"/>
			<description>Entry 0 with type Number in ArrayOf_4AnnotBorderCharacteristics shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4AnnotBorderCharacteristics does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12133"/>
			<description>Entry 1 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4AnnotBorderCharacteristics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_3" clause="14" testNumber="12134"/>
			<description>Entry 1 with type Number in ArrayOf_4AnnotBorderCharacteristics shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4AnnotBorderCharacteristics does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12135"/>
			<description>Entry 2 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4AnnotBorderCharacteristics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_3" clause="14" testNumber="12136"/>
			<description>Entry 2 with type Number in ArrayOf_4AnnotBorderCharacteristics shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4AnnotBorderCharacteristics does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_3" clause="17" testNumber="12137"/>
			<description>Entry 3 with type Array in ArrayOf_4AnnotBorderCharacteristics shall be object ArrayOf_2DashNumbers</description>
			<test>entry3HasTypeArray != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Array in ArrayOf_4AnnotBorderCharacteristics is not object ArrayOf_2DashNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12138"/>
			<description>Entry 3 in ArrayOf_4AnnotBorderCharacteristics shall have type Array</description>
			<test>size &lt;= 3 || entry3HasTypeArray == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4AnnotBorderCharacteristics is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_3" clause="2" testNumber="12315"/>
			<description>ArrayOf_4Integers shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4Integers contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12316"/>
			<description>Entry 0 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12317"/>
			<description>Entry 1 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12318"/>
			<description>Entry 2 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12319"/>
			<description>Entry 3 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 3 || entry3HasTypeInteger == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_3" clause="2" testNumber="12350"/>
			<description>ArrayOf_4Numbers shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4Numbers contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12351"/>
			<description>Entry 0 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12352"/>
			<description>Entry 1 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12353"/>
			<description>Entry 2 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12354"/>
			<description>Entry 3 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12398"/>
			<description>Entry 0 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_3" clause="14" testNumber="12399"/>
			<description>Entry 0 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</description>
			<test>entry0HasTypeNumber != true || (entry0NumberValue &gt;= 0) &amp;&amp; (entry0NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12400"/>
			<description>Entry 1 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_3" clause="14" testNumber="12401"/>
			<description>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_3" clause="9" testNumber="12402"/>
			<description>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy special case: fn:Eval(fn:IsPresent(2))</description>
			<test>entry1HasTypeNumber != true || ((contains2 == true))</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy special case: fn:Eval(fn:IsPresent(2))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12403"/>
			<description>Entry 2 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_3" clause="14" testNumber="12404"/>
			<description>Entry 2 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12405"/>
			<description>Entry 3 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_3" clause="14" testNumber="12406"/>
			<description>Entry 3 with type Number in ArrayOf_4NumbersColorAnnotation shall satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</description>
			<test>entry3HasTypeNumber != true || (entry3NumberValue &gt;= 0) &amp;&amp; (entry3NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 3 with type Number in ArrayOf_4NumbersColorAnnotation does not satisfy possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_3" clause="2" testNumber="12452"/>
			<description>ArrayOf_6Numbers shall contain exactly 6 elements</description>
			<test>size == 6</test>
			<error>
				<message>ArrayOf_6Numbers contains %1 element(s) instead of 6</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12453"/>
			<description>Entry 0 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12454"/>
			<description>Entry 1 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12455"/>
			<description>Entry 2 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12456"/>
			<description>Entry 3 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12457"/>
			<description>Entry 4 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12458"/>
			<description>Entry 5 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_3" clause="2" testNumber="12503"/>
			<description>ArrayOf_8Numbers shall contain exactly 8 elements</description>
			<test>size == 8</test>
			<error>
				<message>ArrayOf_8Numbers contains %1 element(s) instead of 8</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12504"/>
			<description>Entry 0 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12505"/>
			<description>Entry 1 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12506"/>
			<description>Entry 2 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12507"/>
			<description>Entry 3 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12508"/>
			<description>Entry 4 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12509"/>
			<description>Entry 5 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12510"/>
			<description>Entry 6 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12511"/>
			<description>Entry 7 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_3" clause="2" testNumber="12577"/>
			<description>ArrayOf_9Numbers shall contain exactly 9 elements</description>
			<test>size == 9</test>
			<error>
				<message>ArrayOf_9Numbers contains %1 element(s) instead of 9</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12578"/>
			<description>Entry 0 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12579"/>
			<description>Entry 1 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12580"/>
			<description>Entry 2 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12581"/>
			<description>Entry 3 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12582"/>
			<description>Entry 4 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12583"/>
			<description>Entry 5 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12584"/>
			<description>Entry 6 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12585"/>
			<description>Entry 7 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12586"/>
			<description>Entry 8 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 8 || entry8HasTypeNumber == true</test>
			<error>
				<message>Entry 8 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_ArrayOfNumbersEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="12637"/>
			<description>Entry with type Array in ArrayOf_ArrayOfNumbers shall be object ArrayOfNumbersGeneral</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOf_ArrayOfNumbers is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_ArrayOfNumbersEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12638"/>
			<description>Entry in ArrayOf_ArrayOfNumbers shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ArrayOf_ArrayOfNumbers is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="1" testNumber="12711"/>
			<description>Bead shall not contain entries except N, P, R, T, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>Bead contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="17" testNumber="12712"/>
			<description>Entry N with type Dictionary in Bead shall be one of objects BeadFirst, Bead</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in Bead is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12713"/>
			<description>Entry N in Bead shall have type Dictionary</description>
			<test>containsN == false || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="7" testNumber="12714"/>
			<description>Entry N in Bead is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="10" testNumber="12715"/>
			<description>Entry N with type Dictionary in Bead shall be indirect</description>
			<test>NHasTypeDictionary != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="17" testNumber="12716"/>
			<description>Entry P with type Dictionary in Bead shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in Bead is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12717"/>
			<description>Entry P in Bead shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="7" testNumber="12718"/>
			<description>Entry P in Bead is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="10" testNumber="12719"/>
			<description>Entry P with type Dictionary in Bead shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12720"/>
			<description>Entry R in Bead shall have type Rectangle</description>
			<test>containsR == false || RHasTypeRectangle == true</test>
			<error>
				<message>Entry R in Bead is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="7" testNumber="12721"/>
			<description>Entry R in Bead is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="17" testNumber="12722"/>
			<description>Entry T with type Dictionary in Bead shall be object Thread</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in Bead is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12723"/>
			<description>Entry T in Bead shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="10" testNumber="12724"/>
			<description>Entry T with type Dictionary in Bead shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12725"/>
			<description>Entry Type in Bead shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Bead is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="6" testNumber="12726"/>
			<description>Entry Type with type Name in Bead shall have value Bead</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Bead"</test>
			<error>
				<message>Entry Type with type Name in Bead has incorrect value %2 instead of Bead</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="17" testNumber="12727"/>
			<description>Entry V with type Dictionary in Bead shall be one of objects BeadFirst, Bead</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in Bead is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12728"/>
			<description>Entry V in Bead shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="7" testNumber="12729"/>
			<description>Entry V in Bead is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_3" clause="10" testNumber="12730"/>
			<description>Entry V with type Dictionary in Bead shall be indirect</description>
			<test>VHasTypeDictionary != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="1" testNumber="12873"/>
			<description>BeadFirst shall not contain entries except N, P, R, T, Type, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>BeadFirst contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="17" testNumber="12874"/>
			<description>Entry N with type Dictionary in BeadFirst shall be one of objects BeadFirst, Bead</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in BeadFirst is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12875"/>
			<description>Entry N in BeadFirst shall have type Dictionary</description>
			<test>containsN == false || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="7" testNumber="12876"/>
			<description>Entry N in BeadFirst is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="10" testNumber="12877"/>
			<description>Entry N with type Dictionary in BeadFirst shall be indirect</description>
			<test>NHasTypeDictionary != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="17" testNumber="12878"/>
			<description>Entry P with type Dictionary in BeadFirst shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in BeadFirst is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12879"/>
			<description>Entry P in BeadFirst shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="7" testNumber="12880"/>
			<description>Entry P in BeadFirst is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="10" testNumber="12881"/>
			<description>Entry P with type Dictionary in BeadFirst shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12882"/>
			<description>Entry R in BeadFirst shall have type Rectangle</description>
			<test>containsR == false || RHasTypeRectangle == true</test>
			<error>
				<message>Entry R in BeadFirst is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="7" testNumber="12883"/>
			<description>Entry R in BeadFirst is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="17" testNumber="12884"/>
			<description>Entry T with type Dictionary in BeadFirst shall be object Thread</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in BeadFirst is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12885"/>
			<description>Entry T in BeadFirst shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="7" testNumber="12886"/>
			<description>Entry T in BeadFirst is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="10" testNumber="12887"/>
			<description>Entry T with type Dictionary in BeadFirst shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12888"/>
			<description>Entry Type in BeadFirst shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in BeadFirst is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="6" testNumber="12889"/>
			<description>Entry Type with type Name in BeadFirst shall have value Bead</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Bead"</test>
			<error>
				<message>Entry Type with type Name in BeadFirst has incorrect value %2 instead of Bead</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="17" testNumber="12890"/>
			<description>Entry V with type Dictionary in BeadFirst shall be one of objects BeadFirst, Bead</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in BeadFirst is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="8" testNumber="12891"/>
			<description>Entry V in BeadFirst shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="7" testNumber="12892"/>
			<description>Entry V in BeadFirst is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_3" clause="10" testNumber="12893"/>
			<description>Entry V with type Dictionary in BeadFirst shall be indirect</description>
			<test>VHasTypeDictionary != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_3" clause="2" testNumber="13013"/>
			<description>BlackpointArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>BlackpointArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13014"/>
			<description>Entry 0 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in BlackpointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="13015"/>
			<description>Entry 0 with type Number in BlackpointArray shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in BlackpointArray does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13016"/>
			<description>Entry 1 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in BlackpointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="13017"/>
			<description>Entry 1 with type Number in BlackpointArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in BlackpointArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13018"/>
			<description>Entry 2 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in BlackpointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="13019"/>
			<description>Entry 2 with type Number in BlackpointArray shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in BlackpointArray does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_3" clause="1" testNumber="13084"/>
			<description>BorderStyle shall not contain entries except D, S, Type, W</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W').length == 0</test>
			<error>
				<message>BorderStyle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13085"/>
			<description>Entry D with type Array in BorderStyle shall be object ArrayOfDashPatterns</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in BorderStyle is not object ArrayOfDashPatterns</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13086"/>
			<description>Entry D in BorderStyle shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in BorderStyle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13087"/>
			<description>Entry S in BorderStyle shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in BorderStyle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_3" clause="6" testNumber="13088"/>
			<description>Entry S with type Name in BorderStyle shall have one of values: B, S, D, U, I</description>
			<test>SHasTypeName != true || SNameValue == "S" || SNameValue == "B" || SNameValue == "D" || SNameValue == "I" || SNameValue == "U"</test>
			<error>
				<message>Entry S with type Name in BorderStyle has incorrect value %2 instead of B, S, D, U, I</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13089"/>
			<description>Entry Type in BorderStyle shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in BorderStyle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_3" clause="6" testNumber="13090"/>
			<description>Entry Type with type Name in BorderStyle shall have value Border</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Border"</test>
			<error>
				<message>Entry Type with type Name in BorderStyle has incorrect value %2 instead of Border</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13091"/>
			<description>Entry W in BorderStyle shall have type Number</description>
			<test>containsW == false || WHasTypeNumber == true</test>
			<error>
				<message>Entry W in BorderStyle is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_3" clause="14" testNumber="13092"/>
			<description>Entry W with type Number in BorderStyle shall satisfy possible value predicate: fn:Eval(@W &gt;= 0.0)</description>
			<test>WHasTypeNumber != true || WNumberValue &gt;= 0.0</test>
			<error>
				<message>Entry W with type Number in BorderStyle does not satisfy possible value predicate: fn:Eval(@W &gt;= 0.0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="1" testNumber="13251"/>
			<description>CIDFontDescriptorMetrics shall not contain entries except Ascent, AvgWidth, CapHeight, CharSet, Descent, Flags, FontBBox, FontName, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>CIDFontDescriptorMetrics contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13252"/>
			<description>Entry Ascent in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13253"/>
			<description>Entry Ascent in CIDFontDescriptorMetrics is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13254"/>
			<description>Entry AvgWidth in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13255"/>
			<description>Entry CapHeight in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13256"/>
			<description>Entry CharSet in CIDFontDescriptorMetrics shall have type String</description>
			<test>containsCharSet == false || CharSetHasTypeString == true</test>
			<error>
				<message>Entry CharSet in CIDFontDescriptorMetrics is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13257"/>
			<description>Entry Descent in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13258"/>
			<description>Entry Descent in CIDFontDescriptorMetrics is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="14" testNumber="13259"/>
			<description>Entry Descent with type Number in CIDFontDescriptorMetrics shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in CIDFontDescriptorMetrics does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13260"/>
			<description>Entry Flags in CIDFontDescriptorMetrics shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in CIDFontDescriptorMetrics is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13261"/>
			<description>Entry Flags in CIDFontDescriptorMetrics is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="9" testNumber="13262"/>
			<description>Entry Flags with type Bitmask in CIDFontDescriptorMetrics shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in CIDFontDescriptorMetrics does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13263"/>
			<description>Entry FontBBox in CIDFontDescriptorMetrics shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in CIDFontDescriptorMetrics is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13264"/>
			<description>Entry FontBBox in CIDFontDescriptorMetrics is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13265"/>
			<description>Entry FontName in CIDFontDescriptorMetrics shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in CIDFontDescriptorMetrics is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13266"/>
			<description>Entry FontName in CIDFontDescriptorMetrics is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13267"/>
			<description>Entry ItalicAngle in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13268"/>
			<description>Entry ItalicAngle in CIDFontDescriptorMetrics is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13269"/>
			<description>Entry Leading in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13270"/>
			<description>Entry MaxWidth in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13271"/>
			<description>Entry MissingWidth in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13272"/>
			<description>Entry StemH in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13273"/>
			<description>Entry StemV in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13274"/>
			<description>Entry StemV in CIDFontDescriptorMetrics is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13275"/>
			<description>Entry Type in CIDFontDescriptorMetrics shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CIDFontDescriptorMetrics is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13276"/>
			<description>Entry Type in CIDFontDescriptorMetrics is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="6" testNumber="13277"/>
			<description>Entry Type with type Name in CIDFontDescriptorMetrics shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in CIDFontDescriptorMetrics has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13278"/>
			<description>Entry XHeight in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_3" clause="1" testNumber="13426"/>
			<description>CIDSystemInfo shall not contain entries except Ordering, Registry, Supplement</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ordering' &amp;&amp; elem != 'Registry' &amp;&amp; elem != 'Supplement').length == 0</test>
			<error>
				<message>CIDSystemInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ordering' &amp;&amp; elem != 'Registry' &amp;&amp; elem != 'Supplement').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13427"/>
			<description>Entry Ordering in CIDSystemInfo shall have type StringAscii</description>
			<test>containsOrdering == false || OrderingHasTypeStringAscii == true</test>
			<error>
				<message>Entry Ordering in CIDSystemInfo is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13428"/>
			<description>Entry Ordering in CIDSystemInfo is required</description>
			<test>containsOrdering == true</test>
			<error>
				<message>Entry Ordering in CIDSystemInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13429"/>
			<description>Entry Registry in CIDSystemInfo shall have type StringAscii</description>
			<test>containsRegistry == false || RegistryHasTypeStringAscii == true</test>
			<error>
				<message>Entry Registry in CIDSystemInfo is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13430"/>
			<description>Entry Registry in CIDSystemInfo is required</description>
			<test>containsRegistry == true</test>
			<error>
				<message>Entry Registry in CIDSystemInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13431"/>
			<description>Entry Supplement in CIDSystemInfo shall have type Integer</description>
			<test>containsSupplement == false || SupplementHasTypeInteger == true</test>
			<error>
				<message>Entry Supplement in CIDSystemInfo is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13432"/>
			<description>Entry Supplement in CIDSystemInfo is required</description>
			<test>containsSupplement == true</test>
			<error>
				<message>Entry Supplement in CIDSystemInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="1" testNumber="13503"/>
			<description>CMapStream shall not contain entries except CIDSystemInfo, CMapName, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Type, UseCMap, WMode</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CMapName' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UseCMap' &amp;&amp; elem != 'WMode').length == 0</test>
			<error>
				<message>CMapStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CMapName' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UseCMap' &amp;&amp; elem != 'WMode').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13504"/>
			<description>Entry CIDSystemInfo with type Dictionary in CMapStream shall be object CIDSystemInfo</description>
			<test>CIDSystemInfoHasTypeDictionary != true || CIDSystemInfo_size == 1</test>
			<error>
				<message>Entry CIDSystemInfo with type Dictionary in CMapStream is not object CIDSystemInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13505"/>
			<description>Entry CIDSystemInfo in CMapStream shall have type Dictionary</description>
			<test>containsCIDSystemInfo == false || CIDSystemInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CIDSystemInfo in CMapStream is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13506"/>
			<description>Entry CIDSystemInfo in CMapStream is required</description>
			<test>containsCIDSystemInfo == true</test>
			<error>
				<message>Entry CIDSystemInfo in CMapStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13507"/>
			<description>Entry CMapName in CMapStream shall have type Name</description>
			<test>containsCMapName == false || CMapNameHasTypeName == true</test>
			<error>
				<message>Entry CMapName in CMapStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13508"/>
			<description>Entry CMapName in CMapStream is required</description>
			<test>containsCMapName == true</test>
			<error>
				<message>Entry CMapName in CMapStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13509"/>
			<description>Entry DecodeParms with type Array in CMapStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in CMapStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13510"/>
			<description>Entry DecodeParms with type Dictionary in CMapStream shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in CMapStream is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13511"/>
			<description>Entry DecodeParms in CMapStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in CMapStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="13512"/>
			<description>Entry DecodeParms with type Array in CMapStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in CMapStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13513"/>
			<description>Entry F with type Dictionary in CMapStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in CMapStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13514"/>
			<description>Entry F in CMapStream shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in CMapStream is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13515"/>
			<description>Entry FDecodeParms with type Array in CMapStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in CMapStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13516"/>
			<description>Entry FDecodeParms with type Dictionary in CMapStream shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in CMapStream is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13517"/>
			<description>Entry FDecodeParms in CMapStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in CMapStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="13518"/>
			<description>Entry FDecodeParms with type Array in CMapStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in CMapStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13519"/>
			<description>Entry FFilter with type Array in CMapStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in CMapStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13520"/>
			<description>Entry FFilter in CMapStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in CMapStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="13521"/>
			<description>Entry FFilter with type Array in CMapStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in CMapStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="13522"/>
			<description>Entry FFilter with type Name in CMapStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in CMapStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13523"/>
			<description>Entry Filter with type Array in CMapStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in CMapStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13524"/>
			<description>Entry Filter in CMapStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in CMapStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="13525"/>
			<description>Entry Filter with type Array in CMapStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in CMapStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="13526"/>
			<description>Entry Filter with type Name in CMapStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in CMapStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13527"/>
			<description>Entry Length in CMapStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in CMapStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13528"/>
			<description>Entry Length in CMapStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in CMapStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13529"/>
			<description>Entry Type in CMapStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CMapStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13530"/>
			<description>Entry Type in CMapStream is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in CMapStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="13531"/>
			<description>Entry Type with type Name in CMapStream shall have value CMap</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CMap"</test>
			<error>
				<message>Entry Type with type Name in CMapStream has incorrect value %2 instead of CMap</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13532"/>
			<description>Entry UseCMap with type Stream in CMapStream shall be object Stream</description>
			<test>UseCMapHasTypeStream != true || UseCMap_size == 1</test>
			<error>
				<message>Entry UseCMap with type Stream in CMapStream is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13533"/>
			<description>Entry UseCMap in CMapStream shall have one of types: Stream, Name</description>
			<test>containsUseCMap == false || UseCMapHasTypeStream == true || UseCMapHasTypeName == true</test>
			<error>
				<message>Entry UseCMap in CMapStream is not one of types: Stream, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="10" testNumber="13534"/>
			<description>Entry UseCMap with type Stream in CMapStream shall be indirect</description>
			<test>UseCMapHasTypeStream != true || isUseCMapIndirect == true</test>
			<error>
				<message>Entry UseCMap with type Stream in CMapStream is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="13535"/>
			<description>Entry UseCMap with type Name in CMapStream shall have one of values: GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</description>
			<test>UseCMapHasTypeName != true || UseCMapNameValue == "GB-EUC-H" || UseCMapNameValue == "GB-EUC-V" || UseCMapNameValue == "GBpc-EUC-H" || UseCMapNameValue == "GBpc-EUC-V" || UseCMapNameValue == "GBK-EUC-H" || UseCMapNameValue == "GBK-EUC-V" || UseCMapNameValue == "GBKp-EUC-H" || UseCMapNameValue == "GBKp-EUC-V" || UseCMapNameValue == "GBK2K-H" || UseCMapNameValue == "GBK2K-V" || UseCMapNameValue == "UniGB-UCS2-H" || UseCMapNameValue == "UniGB-UCS2-V" || UseCMapNameValue == "UniGB-UTF16-H" || UseCMapNameValue == "UniGB-UTF16-V" || UseCMapNameValue == "B5pc-H" || UseCMapNameValue == "B5pc-V" || UseCMapNameValue == "HKscs-B5-H" || UseCMapNameValue == "HKscs-B5-V" || UseCMapNameValue == "ETen-B5-H" || UseCMapNameValue == "ETen-B5-V" || UseCMapNameValue == "ETenms-B5-H" || UseCMapNameValue == "ETenms-B5-V" || UseCMapNameValue == "CNS-EUC-H" || UseCMapNameValue == "CNS-EUC-V" || UseCMapNameValue == "UniCNS-UCS2-H" || UseCMapNameValue == "UniCNS-UCS2-V" || UseCMapNameValue == "UniCNS-UTF16-H" || UseCMapNameValue == "UniCNS-UTF16-V" || UseCMapNameValue == "83pv-RKSJ-H" || UseCMapNameValue == "90ms-RKSJ-H" || UseCMapNameValue == "90ms-RKSJ-V" || UseCMapNameValue == "90msp-RKSJ-H" || UseCMapNameValue == "90msp-RKSJ-V" || UseCMapNameValue == "90pv-RKSJ-H" || UseCMapNameValue == "Add-RKSJ-H" || UseCMapNameValue == "Add-RKSJ-V" || UseCMapNameValue == "EUC-H" || UseCMapNameValue == "EUC-V" || UseCMapNameValue == "Ext-RKSJ-H" || UseCMapNameValue == "Ext-RKSJ-V" || UseCMapNameValue == "H" || UseCMapNameValue == "V" || UseCMapNameValue == "UniJIS-UCS2-H" || UseCMapNameValue == "UniJIS-UCS2-V" || UseCMapNameValue == "UniJIS-UCS2-HW-H" || UseCMapNameValue == "UniJIS-UCS2-HW-V" || UseCMapNameValue == "UniJIS-UTF16-H" || UseCMapNameValue == "UniJIS-UTF16-V" || UseCMapNameValue == "KSC-EUC-H" || UseCMapNameValue == "KSC-EUC-V" || UseCMapNameValue == "KSCms-UHC-H" || UseCMapNameValue == "KSCms-UHC-V" || UseCMapNameValue == "KSCms-UHC-HW-H" || UseCMapNameValue == "KSCms-UHC-HW-V" || UseCMapNameValue == "KSCpc-EUC-H" || UseCMapNameValue == "UniKS-UCS2-H" || UseCMapNameValue == "UniKS-UCS2-V" || UseCMapNameValue == "UniKS-UTF16-H" || UseCMapNameValue == "UniKS-UTF16-V" || UseCMapNameValue == "Identity-H" || UseCMapNameValue == "Identity-V"</test>
			<error>
				<message>Entry UseCMap with type Name in CMapStream has incorrect value %2 instead of GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</message>
				<arguments>
					<argument>keyName</argument>
					<argument>UseCMapNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13536"/>
			<description>Entry WMode in CMapStream shall have type Integer</description>
			<test>containsWMode == false || WModeHasTypeInteger == true</test>
			<error>
				<message>Entry WMode in CMapStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="13537"/>
			<description>Entry WMode with type Integer in CMapStream shall have one of values: 0, 1</description>
			<test>WModeHasTypeInteger != true || WModeIntegerValue == 1 || WModeIntegerValue == 0</test>
			<error>
				<message>Entry WMode with type Integer in CMapStream has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>WModeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_3" clause="2" testNumber="13731"/>
			<description>CalGrayColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>CalGrayColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13732"/>
			<description>Entry 0 in CalGrayColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in CalGrayColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_3" clause="6" testNumber="13733"/>
			<description>Entry 0 with type Name in CalGrayColorSpace shall have value CalGray</description>
			<test>entry0HasTypeName != true || entry0NameValue == "CalGray"</test>
			<error>
				<message>Entry 0 with type Name in CalGrayColorSpace has incorrect value %2 instead of CalGray</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13734"/>
			<description>Entry 1 with type Dictionary in CalGrayColorSpace shall be object CalGrayDict</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in CalGrayColorSpace is not object CalGrayDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13735"/>
			<description>Entry 1 in CalGrayColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in CalGrayColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_3" clause="1" testNumber="13777"/>
			<description>CalGrayDict shall not contain entries except BlackPoint, Gamma, WhitePoint</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'WhitePoint').length == 0</test>
			<error>
				<message>CalGrayDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'WhitePoint').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13778"/>
			<description>Entry BlackPoint with type Array in CalGrayDict shall be object BlackpointArray</description>
			<test>BlackPointHasTypeArray != true || BlackPoint_size == 1</test>
			<error>
				<message>Entry BlackPoint with type Array in CalGrayDict is not object BlackpointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13779"/>
			<description>Entry BlackPoint in CalGrayDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in CalGrayDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13780"/>
			<description>Entry Gamma in CalGrayDict shall have type Number</description>
			<test>containsGamma == false || GammaHasTypeNumber == true</test>
			<error>
				<message>Entry Gamma in CalGrayDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_3" clause="14" testNumber="13781"/>
			<description>Entry Gamma with type Number in CalGrayDict shall satisfy possible value predicate: fn:Eval(@Gamma &gt; 0)</description>
			<test>GammaHasTypeNumber != true || GammaNumberValue &gt; 0</test>
			<error>
				<message>Entry Gamma with type Number in CalGrayDict does not satisfy possible value predicate: fn:Eval(@Gamma &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13782"/>
			<description>Entry WhitePoint with type Array in CalGrayDict shall be object WhitepointArray</description>
			<test>WhitePointHasTypeArray != true || WhitePoint_size == 1</test>
			<error>
				<message>Entry WhitePoint with type Array in CalGrayDict is not object WhitepointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13783"/>
			<description>Entry WhitePoint in CalGrayDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in CalGrayDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13784"/>
			<description>Entry WhitePoint in CalGrayDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in CalGrayDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_3" clause="2" testNumber="13835"/>
			<description>CalRGBColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>CalRGBColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13836"/>
			<description>Entry 0 in CalRGBColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in CalRGBColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_3" clause="6" testNumber="13837"/>
			<description>Entry 0 with type Name in CalRGBColorSpace shall have value CalRGB</description>
			<test>entry0HasTypeName != true || entry0NameValue == "CalRGB"</test>
			<error>
				<message>Entry 0 with type Name in CalRGBColorSpace has incorrect value %2 instead of CalRGB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13838"/>
			<description>Entry 1 with type Dictionary in CalRGBColorSpace shall be object CalRGBDict</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in CalRGBColorSpace is not object CalRGBDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13839"/>
			<description>Entry 1 in CalRGBColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in CalRGBColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_3" clause="1" testNumber="13885"/>
			<description>CalRGBDict shall not contain entries except BlackPoint, Gamma, Matrix, WhitePoint</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'WhitePoint').length == 0</test>
			<error>
				<message>CalRGBDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'WhitePoint').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13886"/>
			<description>Entry BlackPoint with type Array in CalRGBDict shall be object BlackpointArray</description>
			<test>BlackPointHasTypeArray != true || BlackPoint_size == 1</test>
			<error>
				<message>Entry BlackPoint with type Array in CalRGBDict is not object BlackpointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13887"/>
			<description>Entry BlackPoint in CalRGBDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13888"/>
			<description>Entry Gamma with type Array in CalRGBDict shall be object GammaArray</description>
			<test>GammaHasTypeArray != true || Gamma_size == 1</test>
			<error>
				<message>Entry Gamma with type Array in CalRGBDict is not object GammaArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13889"/>
			<description>Entry Gamma in CalRGBDict shall have type Array</description>
			<test>containsGamma == false || GammaHasTypeArray == true</test>
			<error>
				<message>Entry Gamma in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13890"/>
			<description>Entry Matrix with type Array in CalRGBDict shall be object ArrayOf_9Numbers</description>
			<test>MatrixHasTypeArray != true || Matrix_size == 1</test>
			<error>
				<message>Entry Matrix with type Array in CalRGBDict is not object ArrayOf_9Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13891"/>
			<description>Entry Matrix in CalRGBDict shall have type Array</description>
			<test>containsMatrix == false || MatrixHasTypeArray == true</test>
			<error>
				<message>Entry Matrix in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="13892"/>
			<description>Entry WhitePoint with type Array in CalRGBDict shall be object WhitepointArray</description>
			<test>WhitePointHasTypeArray != true || WhitePoint_size == 1</test>
			<error>
				<message>Entry WhitePoint with type Array in CalRGBDict is not object WhitepointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="13893"/>
			<description>Entry WhitePoint in CalRGBDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="13894"/>
			<description>Entry WhitePoint in CalRGBDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in CalRGBDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="1" testNumber="14021"/>
			<description>Catalog shall not contain entries except AcroForm, Dests, Names, NeedsRendering, OpenAction, Outlines, PageLabels, PageLayout, PageMode, Pages, SpiderInfo, StructTreeRoot, Threads, Type, URI, ViewerPreferences</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AcroForm' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'Names' &amp;&amp; elem != 'NeedsRendering' &amp;&amp; elem != 'OpenAction' &amp;&amp; elem != 'Outlines' &amp;&amp; elem != 'PageLabels' &amp;&amp; elem != 'PageLayout' &amp;&amp; elem != 'PageMode' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'SpiderInfo' &amp;&amp; elem != 'StructTreeRoot' &amp;&amp; elem != 'Threads' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'ViewerPreferences').length == 0</test>
			<error>
				<message>Catalog contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AcroForm' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'Names' &amp;&amp; elem != 'NeedsRendering' &amp;&amp; elem != 'OpenAction' &amp;&amp; elem != 'Outlines' &amp;&amp; elem != 'PageLabels' &amp;&amp; elem != 'PageLayout' &amp;&amp; elem != 'PageMode' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'SpiderInfo' &amp;&amp; elem != 'StructTreeRoot' &amp;&amp; elem != 'Threads' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'ViewerPreferences').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14022"/>
			<description>Entry AcroForm with type Dictionary in Catalog shall be object InteractiveForm</description>
			<test>AcroFormHasTypeDictionary != true || AcroForm_size == 1</test>
			<error>
				<message>Entry AcroForm with type Dictionary in Catalog is not object InteractiveForm</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14023"/>
			<description>Entry AcroForm in Catalog shall have type Dictionary</description>
			<test>containsAcroForm == false || AcroFormHasTypeDictionary == true</test>
			<error>
				<message>Entry AcroForm in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14024"/>
			<description>Entry Dests with type Dictionary in Catalog shall be object DestsMap</description>
			<test>DestsHasTypeDictionary != true || Dests_size == 1</test>
			<error>
				<message>Entry Dests with type Dictionary in Catalog is not object DestsMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14025"/>
			<description>Entry Dests in Catalog shall have type Dictionary</description>
			<test>containsDests == false || DestsHasTypeDictionary == true</test>
			<error>
				<message>Entry Dests in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="12" testNumber="14026"/>
			<description>If entry Dests with type Dictionary in Catalog satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>DestsHasTypeDictionary != true || (isDestsIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Dests with type Dictionary in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14027"/>
			<description>Entry Names with type Dictionary in Catalog shall be object Name</description>
			<test>NamesHasTypeDictionary != true || Names_size == 1</test>
			<error>
				<message>Entry Names with type Dictionary in Catalog is not object Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14028"/>
			<description>Entry Names in Catalog shall have type Dictionary</description>
			<test>containsNames == false || NamesHasTypeDictionary == true</test>
			<error>
				<message>Entry Names in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14029"/>
			<description>Entry NeedsRendering in Catalog shall have type Boolean</description>
			<test>containsNeedsRendering == false || NeedsRenderingHasTypeBoolean == true</test>
			<error>
				<message>Entry NeedsRendering in Catalog is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14030"/>
			<description>Entry OpenAction with type Array in Catalog shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>OpenActionHasTypeArray != true || OpenAction_size == 1</test>
			<error>
				<message>Entry OpenAction with type Array in Catalog is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14031"/>
			<description>Entry OpenAction with type Dictionary in Catalog shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>OpenActionHasTypeDictionary != true || OpenAction_size == 1</test>
			<error>
				<message>Entry OpenAction with type Dictionary in Catalog is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14032"/>
			<description>Entry OpenAction in Catalog shall have one of types: Array, Dictionary</description>
			<test>containsOpenAction == false || OpenActionHasTypeArray == true || OpenActionHasTypeDictionary == true</test>
			<error>
				<message>Entry OpenAction in Catalog is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14033"/>
			<description>Entry Outlines with type Dictionary in Catalog shall be object Outline</description>
			<test>OutlinesHasTypeDictionary != true || Outlines_size == 1</test>
			<error>
				<message>Entry Outlines with type Dictionary in Catalog is not object Outline</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14034"/>
			<description>Entry Outlines in Catalog shall have type Dictionary</description>
			<test>containsOutlines == false || OutlinesHasTypeDictionary == true</test>
			<error>
				<message>Entry Outlines in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="12" testNumber="14035"/>
			<description>If entry Outlines with type Dictionary in Catalog satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>OutlinesHasTypeDictionary != true || (isOutlinesIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Outlines with type Dictionary in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14036"/>
			<description>Entry PageLabels with type NumberTree in Catalog shall be object CatalogNumberTreePageLabels</description>
			<test>PageLabelsHasTypeNumberTree != true || PageLabels_size == 1</test>
			<error>
				<message>Entry PageLabels with type NumberTree in Catalog is not object CatalogNumberTreePageLabels</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14037"/>
			<description>Entry PageLabels in Catalog shall have type NumberTree</description>
			<test>containsPageLabels == false || PageLabelsHasTypeNumberTree == true</test>
			<error>
				<message>Entry PageLabels in Catalog is not of type NumberTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14038"/>
			<description>Entry PageLayout in Catalog shall have type Name</description>
			<test>containsPageLayout == false || PageLayoutHasTypeName == true</test>
			<error>
				<message>Entry PageLayout in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="6" testNumber="14039"/>
			<description>Entry PageLayout with type Name in Catalog shall have one of values: SinglePage, TwoColumnLeft, OneColumn, TwoPageRight, TwoPageLeft, TwoColumnRight</description>
			<test>PageLayoutHasTypeName != true || PageLayoutNameValue == "SinglePage" || PageLayoutNameValue == "OneColumn" || PageLayoutNameValue == "TwoColumnLeft" || PageLayoutNameValue == "TwoColumnRight" || PageLayoutNameValue == "TwoPageLeft" || PageLayoutNameValue == "TwoPageRight"</test>
			<error>
				<message>Entry PageLayout with type Name in Catalog has incorrect value %2 instead of SinglePage, TwoColumnLeft, OneColumn, TwoPageRight, TwoPageLeft, TwoColumnRight</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PageLayoutNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14040"/>
			<description>Entry PageMode in Catalog shall have type Name</description>
			<test>containsPageMode == false || PageModeHasTypeName == true</test>
			<error>
				<message>Entry PageMode in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="6" testNumber="14041"/>
			<description>Entry PageMode with type Name in Catalog shall have one of values: UseOutlines, UseThumbs, UseOC, UseAttachments, UseNone, FullScreen</description>
			<test>PageModeHasTypeName != true || PageModeNameValue == "UseNone" || PageModeNameValue == "UseOutlines" || PageModeNameValue == "UseThumbs" || PageModeNameValue == "FullScreen" || PageModeNameValue == "UseOC" || PageModeNameValue == "UseAttachments"</test>
			<error>
				<message>Entry PageMode with type Name in Catalog has incorrect value %2 instead of UseOutlines, UseThumbs, UseOC, UseAttachments, UseNone, FullScreen</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PageModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14042"/>
			<description>Entry Pages with type Dictionary in Catalog shall be object PageTreeNodeRoot</description>
			<test>PagesHasTypeDictionary != true || Pages_size == 1</test>
			<error>
				<message>Entry Pages with type Dictionary in Catalog is not object PageTreeNodeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14043"/>
			<description>Entry Pages in Catalog shall have type Dictionary</description>
			<test>containsPages == false || PagesHasTypeDictionary == true</test>
			<error>
				<message>Entry Pages in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="7" testNumber="14044"/>
			<description>Entry Pages in Catalog is required</description>
			<test>containsPages == true</test>
			<error>
				<message>Entry Pages in Catalog is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="10" testNumber="14045"/>
			<description>Entry Pages with type Dictionary in Catalog shall be indirect</description>
			<test>PagesHasTypeDictionary != true || isPagesIndirect == true</test>
			<error>
				<message>Entry Pages with type Dictionary in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14046"/>
			<description>Entry SpiderInfo with type Dictionary in Catalog shall be object WebCaptureInfo</description>
			<test>SpiderInfoHasTypeDictionary != true || SpiderInfo_size == 1</test>
			<error>
				<message>Entry SpiderInfo with type Dictionary in Catalog is not object WebCaptureInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14047"/>
			<description>Entry SpiderInfo in Catalog shall have type Dictionary</description>
			<test>containsSpiderInfo == false || SpiderInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry SpiderInfo in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14048"/>
			<description>Entry StructTreeRoot with type Dictionary in Catalog shall be object StructTreeRoot</description>
			<test>StructTreeRootHasTypeDictionary != true || StructTreeRoot_size == 1</test>
			<error>
				<message>Entry StructTreeRoot with type Dictionary in Catalog is not object StructTreeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14049"/>
			<description>Entry StructTreeRoot in Catalog shall have type Dictionary</description>
			<test>containsStructTreeRoot == false || StructTreeRootHasTypeDictionary == true</test>
			<error>
				<message>Entry StructTreeRoot in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14050"/>
			<description>Entry Threads with type Array in Catalog shall be object ArrayOfThreads</description>
			<test>ThreadsHasTypeArray != true || Threads_size == 1</test>
			<error>
				<message>Entry Threads with type Array in Catalog is not object ArrayOfThreads</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14051"/>
			<description>Entry Threads in Catalog shall have type Array</description>
			<test>containsThreads == false || ThreadsHasTypeArray == true</test>
			<error>
				<message>Entry Threads in Catalog is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="12" testNumber="14052"/>
			<description>If entry Threads with type Array in Catalog satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>ThreadsHasTypeArray != true || (isThreadsIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Threads with type Array in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14053"/>
			<description>Entry Type in Catalog shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="7" testNumber="14054"/>
			<description>Entry Type in Catalog is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in Catalog is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="6" testNumber="14055"/>
			<description>Entry Type with type Name in Catalog shall have value Catalog</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Catalog"</test>
			<error>
				<message>Entry Type with type Name in Catalog has incorrect value %2 instead of Catalog</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14056"/>
			<description>Entry URI with type Dictionary in Catalog shall be object URI</description>
			<test>URIHasTypeDictionary != true || URI_size == 1</test>
			<error>
				<message>Entry URI with type Dictionary in Catalog is not object URI</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14057"/>
			<description>Entry URI in Catalog shall have type Dictionary</description>
			<test>containsURI == false || URIHasTypeDictionary == true</test>
			<error>
				<message>Entry URI in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14058"/>
			<description>Entry ViewerPreferences with type Dictionary in Catalog shall be object ViewerPreferences</description>
			<test>ViewerPreferencesHasTypeDictionary != true || ViewerPreferences_size == 1</test>
			<error>
				<message>Entry ViewerPreferences with type Dictionary in Catalog is not object ViewerPreferences</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14059"/>
			<description>Entry ViewerPreferences in Catalog shall have type Dictionary</description>
			<test>containsViewerPreferences == false || ViewerPreferencesHasTypeDictionary == true</test>
			<error>
				<message>Entry ViewerPreferences in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalogNumberTreePageLabels">
			<id specification="ISO_32000_1_3" clause="18" testNumber="14374"/>
			<description>Entry * in CatalogNumberTreePageLabels shall be object CatalogNumberTreePageLabelsEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in CatalogNumberTreePageLabels is not object CatalogNumberTreePageLabelsEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalogNumberTreePageLabelsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14380"/>
			<description>Entry with type Dictionary in CatalogNumberTreePageLabels shall be object PageLabel</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in CatalogNumberTreePageLabels is not object PageLabel</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalogNumberTreePageLabelsEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14381"/>
			<description>Entry in CatalogNumberTreePageLabels shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in CatalogNumberTreePageLabels is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14466"/>
			<description>Entry with type Stream in CharProcMap shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in CharProcMap is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14467"/>
			<description>Entry in CharProcMap shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in CharProcMap is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="14468"/>
			<description>Entry with type Stream in CharProcMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in CharProcMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AClassMapEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14484"/>
			<description>Entry with type Array in ClassMap shall be object ArrayOfAttributeObjects</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ClassMap is not object ArrayOfAttributeObjects</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AClassMapEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14485"/>
			<description>Entry with type Dictionary in ClassMap shall be object StructureAttributesDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ClassMap is not object StructureAttributesDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AClassMapEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14486"/>
			<description>Entry in ClassMap shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ClassMap is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14724"/>
			<description>Entry DefaultCMYK with type Array in ColorSpaceMap shall be one of objects ICCBasedColorSpace, DeviceNColorSpace</description>
			<test>DefaultCMYKHasTypeArray != true || DefaultCMYK_size == 1</test>
			<error>
				<message>Entry DefaultCMYK with type Array in ColorSpaceMap is not one of objects ICCBasedColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14725"/>
			<description>Entry DefaultCMYK in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultCMYK == false || DefaultCMYKHasTypeArray == true</test>
			<error>
				<message>Entry DefaultCMYK in ColorSpaceMap is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14726"/>
			<description>Entry DefaultGray with type Array in ColorSpaceMap shall be one of objects CalGrayColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>DefaultGrayHasTypeArray != true || DefaultGray_size == 1</test>
			<error>
				<message>Entry DefaultGray with type Array in ColorSpaceMap is not one of objects CalGrayColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14727"/>
			<description>Entry DefaultGray in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultGray == false || DefaultGrayHasTypeArray == true</test>
			<error>
				<message>Entry DefaultGray in ColorSpaceMap is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14728"/>
			<description>Entry DefaultRGB with type Array in ColorSpaceMap shall be one of objects CalRGBColorSpace, ICCBasedColorSpace, DeviceNColorSpace</description>
			<test>DefaultRGBHasTypeArray != true || DefaultRGB_size == 1</test>
			<error>
				<message>Entry DefaultRGB with type Array in ColorSpaceMap is not one of objects CalRGBColorSpace, ICCBasedColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14729"/>
			<description>Entry DefaultRGB in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultRGB == false || DefaultRGBHasTypeArray == true</test>
			<error>
				<message>Entry DefaultRGB in ColorSpaceMap is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14769"/>
			<description>Entry with type Array in ColorSpaceMap shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ColorSpaceMap is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14770"/>
			<description>Entry in ColorSpaceMap shall have one of types: Array, Name</description>
			<test>HasTypeArray == true || HasTypeName == true</test>
			<error>
				<message>Entry %1 in ColorSpaceMap is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_3" clause="6" testNumber="14771"/>
			<description>Entry with type Name in ColorSpaceMap shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>HasTypeName != true || NameValue == "DeviceCMYK" || NameValue == "DeviceRGB" || NameValue == "DeviceGray"</test>
			<error>
				<message>Entry %1 with type Name in ColorSpaceMap has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorantsDictEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="14787"/>
			<description>Entry with type Array in ColorantsDict shall be object SeparationColorSpace</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ColorantsDict is not object SeparationColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorantsDictEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="14788"/>
			<description>Entry in ColorantsDict shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ColorantsDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15114"/>
			<description>Entry LastModified in Data shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in Data is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_3" clause="7" testNumber="15115"/>
			<description>Entry LastModified in Data is required</description>
			<test>containsLastModified == true</test>
			<error>
				<message>Entry LastModified in Data is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15116"/>
			<description>Entry Private with type Array in Data shall be object _UniversalArray</description>
			<test>PrivateHasTypeArray != true || Private_size == 1</test>
			<error>
				<message>Entry Private with type Array in Data is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15117"/>
			<description>Entry Private with type Stream in Data shall be object Stream</description>
			<test>PrivateHasTypeStream != true || Private_size == 1</test>
			<error>
				<message>Entry Private with type Stream in Data is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15118"/>
			<description>Entry Private with type Dictionary in Data shall be object _UniversalDictionary</description>
			<test>PrivateHasTypeDictionary != true || Private_size == 1</test>
			<error>
				<message>Entry Private with type Dictionary in Data is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15119"/>
			<description>Entry Private in Data shall have one of types: Array, Stream, Boolean, Number, String, Integer, Name, Dictionary</description>
			<test>containsPrivate == false || PrivateHasTypeArray == true || PrivateHasTypeStream == true || PrivateHasTypeBoolean == true || PrivateHasTypeNumber == true || PrivateHasTypeString == true || PrivateHasTypeInteger == true || PrivateHasTypeName == true || PrivateHasTypeDictionary == true</test>
			<error>
				<message>Entry Private in Data is not one of types: Array, Stream, Boolean, Number, String, Integer, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_3" clause="10" testNumber="15120"/>
			<description>Entry Private with type Stream in Data shall be indirect</description>
			<test>PrivateHasTypeStream != true || isPrivateIndirect == true</test>
			<error>
				<message>Entry Private with type Stream in Data is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15156"/>
			<description>Entry with type Array in Data shall be object _UniversalArray</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in Data is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15157"/>
			<description>Entry with type Stream in Data shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in Data is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15158"/>
			<description>Entry with type Dictionary in Data shall be object _UniversalDictionary</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in Data is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15159"/>
			<description>Entry in Data shall have one of types: Array, Stream, Boolean, Number, String, Integer, Name, Dictionary</description>
			<test>HasTypeArray == true || HasTypeStream == true || HasTypeBoolean == true || HasTypeNumber == true || HasTypeString == true || HasTypeInteger == true || HasTypeName == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in Data is not one of types: Array, Stream, Boolean, Number, String, Integer, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="15160"/>
			<description>Entry with type Stream in Data shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in Data is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_3" clause="2" testNumber="15204"/>
			<description>Dest0Array shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>Dest0Array contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15205"/>
			<description>Entry 0 with type Dictionary in Dest0Array shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in Dest0Array is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15206"/>
			<description>Entry 0 in Dest0Array shall have one of types: Number, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in Dest0Array is not one of types: Number, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_3" clause="14" testNumber="15207"/>
			<description>Entry 0 with type Number in Dest0Array shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest0Array does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15208"/>
			<description>Entry 1 in Dest0Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest0Array is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_3" clause="6" testNumber="15209"/>
			<description>Entry 1 with type Name in Dest0Array shall have one of values: Fit, FitB</description>
			<test>entry1HasTypeName != true || entry1NameValue == "Fit" || entry1NameValue == "FitB"</test>
			<error>
				<message>Entry 1 with type Name in Dest0Array has incorrect value %2 instead of Fit, FitB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_3" clause="2" testNumber="15268"/>
			<description>Dest1Array shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>Dest1Array contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15269"/>
			<description>Entry 0 with type Dictionary in Dest1Array shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in Dest1Array is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15270"/>
			<description>Entry 0 in Dest1Array shall have one of types: Number, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in Dest1Array is not one of types: Number, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_3" clause="14" testNumber="15271"/>
			<description>Entry 0 with type Number in Dest1Array shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest1Array does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15272"/>
			<description>Entry 1 in Dest1Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest1Array is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_3" clause="6" testNumber="15273"/>
			<description>Entry 1 with type Name in Dest1Array shall have one of values: FitV, FitH, FitBH, FitBV</description>
			<test>entry1HasTypeName != true || entry1NameValue == "FitH" || entry1NameValue == "FitV" || entry1NameValue == "FitBH" || entry1NameValue == "FitBV"</test>
			<error>
				<message>Entry 1 with type Name in Dest1Array has incorrect value %2 instead of FitV, FitH, FitBH, FitBV</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15274"/>
			<description>Entry 2 in Dest1Array shall have one of types: Number, Null</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true || entry2HasTypeNull == true</test>
			<error>
				<message>Entry 2 in Dest1Array is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_3" clause="2" testNumber="15348"/>
			<description>Dest4Array shall contain exactly 6 elements</description>
			<test>size == 6</test>
			<error>
				<message>Dest4Array contains %1 element(s) instead of 6</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15349"/>
			<description>Entry 0 with type Dictionary in Dest4Array shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in Dest4Array is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15350"/>
			<description>Entry 0 in Dest4Array shall have one of types: Number, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in Dest4Array is not one of types: Number, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_3" clause="14" testNumber="15351"/>
			<description>Entry 0 with type Number in Dest4Array shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest4Array does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15352"/>
			<description>Entry 1 in Dest4Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest4Array is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_3" clause="6" testNumber="15353"/>
			<description>Entry 1 with type Name in Dest4Array shall have value FitR</description>
			<test>entry1HasTypeName != true || entry1NameValue == "FitR"</test>
			<error>
				<message>Entry 1 with type Name in Dest4Array has incorrect value %2 instead of FitR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15354"/>
			<description>Entry 2 in Dest4Array shall have one of types: Number, Null</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true || entry2HasTypeNull == true</test>
			<error>
				<message>Entry 2 in Dest4Array is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15355"/>
			<description>Entry 3 in Dest4Array shall have one of types: Number, Null</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true || entry3HasTypeNull == true</test>
			<error>
				<message>Entry 3 in Dest4Array is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15356"/>
			<description>Entry 4 in Dest4Array shall have one of types: Number, Null</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true || entry4HasTypeNull == true</test>
			<error>
				<message>Entry 4 in Dest4Array is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15357"/>
			<description>Entry 5 in Dest4Array shall have one of types: Number, Null</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true || entry5HasTypeNull == true</test>
			<error>
				<message>Entry 5 in Dest4Array is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_3" clause="1" testNumber="15427"/>
			<description>DestDict shall not contain entries except D</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D').length == 0</test>
			<error>
				<message>DestDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15428"/>
			<description>Entry D with type Array in DestDict shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in DestDict is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15429"/>
			<description>Entry D in DestDict shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in DestDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="15430"/>
			<description>Entry D in DestDict is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in DestDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_3" clause="2" testNumber="15490"/>
			<description>DestXYZArray shall contain exactly 5 elements</description>
			<test>size == 5</test>
			<error>
				<message>DestXYZArray contains %1 element(s) instead of 5</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15491"/>
			<description>Entry 0 with type Dictionary in DestXYZArray shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in DestXYZArray is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15492"/>
			<description>Entry 0 in DestXYZArray shall have one of types: Number, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in DestXYZArray is not one of types: Number, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="15493"/>
			<description>Entry 0 with type Number in DestXYZArray shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in DestXYZArray does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15494"/>
			<description>Entry 1 in DestXYZArray shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in DestXYZArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_3" clause="6" testNumber="15495"/>
			<description>Entry 1 with type Name in DestXYZArray shall have value XYZ</description>
			<test>entry1HasTypeName != true || entry1NameValue == "XYZ"</test>
			<error>
				<message>Entry 1 with type Name in DestXYZArray has incorrect value %2 instead of XYZ</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15496"/>
			<description>Entry 2 in DestXYZArray shall have one of types: Number, Null</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true || entry2HasTypeNull == true</test>
			<error>
				<message>Entry 2 in DestXYZArray is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15497"/>
			<description>Entry 3 in DestXYZArray shall have one of types: Number, Null</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true || entry3HasTypeNull == true</test>
			<error>
				<message>Entry 3 in DestXYZArray is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15498"/>
			<description>Entry 4 in DestXYZArray shall have one of types: Number, Null</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true || entry4HasTypeNull == true</test>
			<error>
				<message>Entry 4 in DestXYZArray is not one of types: Number, Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15560"/>
			<description>Entry with type Array in DestsMap shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in DestsMap is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15561"/>
			<description>Entry with type Dictionary in DestsMap shall be object DestDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in DestsMap is not object DestDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15562"/>
			<description>Entry in DestsMap shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in DestsMap is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="4" testNumber="15604"/>
			<description>DeviceNColorSpace shall contain at least 4 elements</description>
			<test>size &gt;= 4</test>
			<error>
				<message>DeviceNColorSpace contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15605"/>
			<description>Entry 0 in DeviceNColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in DeviceNColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="6" testNumber="15606"/>
			<description>Entry 0 with type Name in DeviceNColorSpace shall have value DeviceN</description>
			<test>entry0HasTypeName != true || entry0NameValue == "DeviceN"</test>
			<error>
				<message>Entry 0 with type Name in DeviceNColorSpace has incorrect value %2 instead of DeviceN</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15607"/>
			<description>Entry 1 with type Array in DeviceNColorSpace shall be object ArrayOfNamesGeneral</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in DeviceNColorSpace is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15608"/>
			<description>Entry 1 in DeviceNColorSpace shall have type Array</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true</test>
			<error>
				<message>Entry 1 in DeviceNColorSpace is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15609"/>
			<description>Entry 2 with type Array in DeviceNColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</description>
			<test>entry2HasTypeArray != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Array in DeviceNColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15610"/>
			<description>Entry 2 in DeviceNColorSpace shall have one of types: Array, Name</description>
			<test>size &lt;= 2 || entry2HasTypeArray == true || entry2HasTypeName == true</test>
			<error>
				<message>Entry 2 in DeviceNColorSpace is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="6" testNumber="15611"/>
			<description>Entry 2 with type Name in DeviceNColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry2HasTypeName != true || entry2NameValue == "DeviceCMYK" || entry2NameValue == "DeviceRGB" || entry2NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 2 with type Name in DeviceNColorSpace has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15612"/>
			<description>Entry 3 with type Stream in DeviceNColorSpace shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in DeviceNColorSpace is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15613"/>
			<description>Entry 3 with type Dictionary in DeviceNColorSpace shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry3HasTypeDictionary != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Dictionary in DeviceNColorSpace is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15614"/>
			<description>Entry 3 in DeviceNColorSpace shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 3 || entry3HasTypeStream == true || entry3HasTypeDictionary == true</test>
			<error>
				<message>Entry 3 in DeviceNColorSpace is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="10" testNumber="15615"/>
			<description>Entry 3 with type Stream in DeviceNColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in DeviceNColorSpace is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15616"/>
			<description>Entry 4 with type Dictionary in DeviceNColorSpace shall be object DeviceNDict</description>
			<test>entry4HasTypeDictionary != true || entry4_size == 1</test>
			<error>
				<message>Entry 4 with type Dictionary in DeviceNColorSpace is not object DeviceNDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15617"/>
			<description>Entry 4 in DeviceNColorSpace shall have type Dictionary</description>
			<test>size &lt;= 4 || entry4HasTypeDictionary == true</test>
			<error>
				<message>Entry 4 in DeviceNColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_3" clause="1" testNumber="15688"/>
			<description>DeviceNDict shall not contain entries except Colorants</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Colorants').length == 0</test>
			<error>
				<message>DeviceNDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Colorants').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15689"/>
			<description>Entry Colorants with type Dictionary in DeviceNDict shall be object ColorantsDict</description>
			<test>ColorantsHasTypeDictionary != true || Colorants_size == 1</test>
			<error>
				<message>Entry Colorants with type Dictionary in DeviceNDict is not object ColorantsDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15690"/>
			<description>Entry Colorants in DeviceNDict shall have type Dictionary</description>
			<test>containsColorants == false || ColorantsHasTypeDictionary == true</test>
			<error>
				<message>Entry Colorants in DeviceNDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_3" clause="11" testNumber="15691"/>
			<description>Entry Colorants in DeviceNDict is required, when fn:IsRequired(fn:SinceVersion(1.6 , (@Subtype == NChannel)) &amp;&amp; fn:HasSpotColorants(parent::1))</description>
			<test>(containsColorants == true || (true &amp;&amp; (parent1EntriesString != null &amp;&amp; parent1EntriesString.split('&amp;').filter(elem =&gt; elem != "Cyan" &amp;&amp; elem != "Magenta" &amp;&amp; elem != "Yellow" &amp;&amp; elem != "Black").length &gt; 0)) == false)</test>
			<error>
				<message>Entry Colorants in DeviceNDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15826"/>
			<description>Entry Author in DocInfo shall have type StringText</description>
			<test>containsAuthor == false || AuthorHasTypeStringText == true</test>
			<error>
				<message>Entry Author in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15827"/>
			<description>Entry CreationDate in DocInfo shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in DocInfo is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15828"/>
			<description>Entry Creator in DocInfo shall have type StringText</description>
			<test>containsCreator == false || CreatorHasTypeStringText == true</test>
			<error>
				<message>Entry Creator in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15829"/>
			<description>Entry Keywords in DocInfo shall have type StringText</description>
			<test>containsKeywords == false || KeywordsHasTypeStringText == true</test>
			<error>
				<message>Entry Keywords in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15830"/>
			<description>Entry ModDate in DocInfo shall have type Date</description>
			<test>containsModDate == false || ModDateHasTypeDate == true</test>
			<error>
				<message>Entry ModDate in DocInfo is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15831"/>
			<description>Entry Producer in DocInfo shall have type StringText</description>
			<test>containsProducer == false || ProducerHasTypeStringText == true</test>
			<error>
				<message>Entry Producer in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15832"/>
			<description>Entry Subject in DocInfo shall have type StringText</description>
			<test>containsSubject == false || SubjectHasTypeStringText == true</test>
			<error>
				<message>Entry Subject in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15833"/>
			<description>Entry Title in DocInfo shall have type StringText</description>
			<test>containsTitle == false || TitleHasTypeStringText == true</test>
			<error>
				<message>Entry Title in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15834"/>
			<description>Entry Trapped in DocInfo shall have type Name</description>
			<test>containsTrapped == false || TrappedHasTypeName == true</test>
			<error>
				<message>Entry Trapped in DocInfo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_3" clause="6" testNumber="15835"/>
			<description>Entry Trapped with type Name in DocInfo shall have one of values: Unknown, True, False</description>
			<test>TrappedHasTypeName != true || TrappedNameValue == "True" || TrappedNameValue == "False" || TrappedNameValue == "Unknown"</test>
			<error>
				<message>Entry Trapped with type Name in DocInfo has incorrect value %2 instead of Unknown, True, False</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TrappedNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfoEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15888"/>
			<description>Entry in DocInfo shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %1 in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="1" testNumber="15922"/>
			<description>DocTimeStamp shall not contain entries except ADBE_Build, ByteRange, Cert, Changes, ContactInfo, Contents, Filter, Location, M, Name, R, Reason, SubFilter, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ADBE_Build' &amp;&amp; elem != 'ByteRange' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>DocTimeStamp contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ADBE_Build' &amp;&amp; elem != 'ByteRange' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15923"/>
			<description>Entry ADBE_Build in DocTimeStamp shall have type String</description>
			<test>containsADBE_Build == false || ADBE_BuildHasTypeString == true</test>
			<error>
				<message>Entry ADBE_Build in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15924"/>
			<description>Entry ByteRange with type Array in DocTimeStamp shall be object ArrayOfIntegersGeneral</description>
			<test>ByteRangeHasTypeArray != true || ByteRange_size == 1</test>
			<error>
				<message>Entry ByteRange with type Array in DocTimeStamp is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15925"/>
			<description>Entry ByteRange in DocTimeStamp shall have type Array</description>
			<test>containsByteRange == false || ByteRangeHasTypeArray == true</test>
			<error>
				<message>Entry ByteRange in DocTimeStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15926"/>
			<description>Entry Cert with type Array in DocTimeStamp shall be object ArrayOfStringsByte</description>
			<test>CertHasTypeArray != true || Cert_size == 1</test>
			<error>
				<message>Entry Cert with type Array in DocTimeStamp is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15927"/>
			<description>Entry Cert in DocTimeStamp shall have one of types: Array, StringByte</description>
			<test>containsCert == false || CertHasTypeArray == true || CertHasTypeStringByte == true</test>
			<error>
				<message>Entry Cert in DocTimeStamp is not one of types: Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="17" testNumber="15928"/>
			<description>Entry Changes with type Array in DocTimeStamp shall be object ArrayOf_3Integers</description>
			<test>ChangesHasTypeArray != true || Changes_size == 1</test>
			<error>
				<message>Entry Changes with type Array in DocTimeStamp is not object ArrayOf_3Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15929"/>
			<description>Entry Changes in DocTimeStamp shall have type Array</description>
			<test>containsChanges == false || ChangesHasTypeArray == true</test>
			<error>
				<message>Entry Changes in DocTimeStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15930"/>
			<description>Entry ContactInfo in DocTimeStamp shall have type String</description>
			<test>containsContactInfo == false || ContactInfoHasTypeString == true</test>
			<error>
				<message>Entry ContactInfo in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15931"/>
			<description>Entry Contents in DocTimeStamp shall have type StringByte</description>
			<test>containsContents == false || ContentsHasTypeStringByte == true</test>
			<error>
				<message>Entry Contents in DocTimeStamp is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="7" testNumber="15932"/>
			<description>Entry Contents in DocTimeStamp is required</description>
			<test>containsContents == true</test>
			<error>
				<message>Entry Contents in DocTimeStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15933"/>
			<description>Entry Filter in DocTimeStamp shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in DocTimeStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="7" testNumber="15934"/>
			<description>Entry Filter in DocTimeStamp is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in DocTimeStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15935"/>
			<description>Entry Location in DocTimeStamp shall have type String</description>
			<test>containsLocation == false || LocationHasTypeString == true</test>
			<error>
				<message>Entry Location in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15936"/>
			<description>Entry M in DocTimeStamp shall have type Date</description>
			<test>containsM == false || MHasTypeDate == true</test>
			<error>
				<message>Entry M in DocTimeStamp is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15937"/>
			<description>Entry Name in DocTimeStamp shall have type String</description>
			<test>containsName == false || NameHasTypeString == true</test>
			<error>
				<message>Entry Name in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15938"/>
			<description>Entry R in DocTimeStamp shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in DocTimeStamp is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15939"/>
			<description>Entry Reason in DocTimeStamp shall have type String</description>
			<test>containsReason == false || ReasonHasTypeString == true</test>
			<error>
				<message>Entry Reason in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15940"/>
			<description>Entry SubFilter in DocTimeStamp shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in DocTimeStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="6" testNumber="15941"/>
			<description>Entry SubFilter with type Name in DocTimeStamp shall have value ETSI.RFC3161</description>
			<test>SubFilterHasTypeName != true || SubFilterNameValue == "ETSI.RFC3161"</test>
			<error>
				<message>Entry SubFilter with type Name in DocTimeStamp has incorrect value %2 instead of ETSI.RFC3161</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="8" testNumber="15942"/>
			<description>Entry Type in DocTimeStamp shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in DocTimeStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="7" testNumber="15943"/>
			<description>Entry Type in DocTimeStamp is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in DocTimeStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_3" clause="6" testNumber="15944"/>
			<description>Entry Type with type Name in DocTimeStamp shall have value DocTimeStamp</description>
			<test>TypeHasTypeName != true || TypeNameValue == "DocTimeStamp"</test>
			<error>
				<message>Entry Type with type Name in DocTimeStamp has incorrect value %2 instead of DocTimeStamp</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_3" clause="1" testNumber="16091"/>
			<description>EmbeddedFileParameter shall not contain entries except CheckSum, CreationDate, Mac, ModDate, Size</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CheckSum' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'Size').length == 0</test>
			<error>
				<message>EmbeddedFileParameter contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CheckSum' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'Size').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16092"/>
			<description>Entry CheckSum in EmbeddedFileParameter shall have type String</description>
			<test>containsCheckSum == false || CheckSumHasTypeString == true</test>
			<error>
				<message>Entry CheckSum in EmbeddedFileParameter is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_3" clause="9" testNumber="16093"/>
			<description>Entry CheckSum with type String in EmbeddedFileParameter shall satisfy special case: fn:Eval(fn:StringLength(CheckSum) == 16)</description>
			<test>CheckSumHasTypeString != true || (CheckSumStringSize == 16)</test>
			<error>
				<message>Entry CheckSum with type String in EmbeddedFileParameter does not satisfy special case: fn:Eval(fn:StringLength(CheckSum) == 16)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16094"/>
			<description>Entry CreationDate in EmbeddedFileParameter shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in EmbeddedFileParameter is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16095"/>
			<description>Entry Mac with type Dictionary in EmbeddedFileParameter shall be object Mac</description>
			<test>MacHasTypeDictionary != true || Mac_size == 1</test>
			<error>
				<message>Entry Mac with type Dictionary in EmbeddedFileParameter is not object Mac</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16096"/>
			<description>Entry Mac in EmbeddedFileParameter shall have type Dictionary</description>
			<test>containsMac == false || MacHasTypeDictionary == true</test>
			<error>
				<message>Entry Mac in EmbeddedFileParameter is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16097"/>
			<description>Entry ModDate in EmbeddedFileParameter shall have type Date</description>
			<test>containsModDate == false || ModDateHasTypeDate == true</test>
			<error>
				<message>Entry ModDate in EmbeddedFileParameter is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_3" clause="11" testNumber="16098"/>
			<description>Entry ModDate in EmbeddedFileParameter is required, when fn:IsRequired(fn:SinceVersion(2.0 , fn:IsAssociatedFile()))</description>
			<test>(containsModDate == true || (true) == false)</test>
			<error>
				<message>Entry ModDate in EmbeddedFileParameter is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16099"/>
			<description>Entry Size in EmbeddedFileParameter shall have type Integer</description>
			<test>containsSize == false || SizeHasTypeInteger == true</test>
			<error>
				<message>Entry Size in EmbeddedFileParameter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_3" clause="14" testNumber="16100"/>
			<description>Entry Size with type Integer in EmbeddedFileParameter shall satisfy possible value predicate: fn:Eval(@Size &gt;= 0)</description>
			<test>SizeHasTypeInteger != true || SizeIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Size with type Integer in EmbeddedFileParameter does not satisfy possible value predicate: fn:Eval(@Size &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="1" testNumber="16151"/>
			<description>EmbeddedFileStream shall not contain entries except DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Params, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>EmbeddedFileStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16152"/>
			<description>Entry DecodeParms with type Array in EmbeddedFileStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in EmbeddedFileStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16153"/>
			<description>Entry DecodeParms with type Dictionary in EmbeddedFileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in EmbeddedFileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16154"/>
			<description>Entry DecodeParms in EmbeddedFileStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in EmbeddedFileStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="16155"/>
			<description>Entry DecodeParms with type Array in EmbeddedFileStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in EmbeddedFileStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16156"/>
			<description>Entry F with type Dictionary in EmbeddedFileStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in EmbeddedFileStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16157"/>
			<description>Entry F in EmbeddedFileStream shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in EmbeddedFileStream is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16158"/>
			<description>Entry FDecodeParms with type Array in EmbeddedFileStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in EmbeddedFileStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16159"/>
			<description>Entry FDecodeParms with type Dictionary in EmbeddedFileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in EmbeddedFileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16160"/>
			<description>Entry FDecodeParms in EmbeddedFileStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in EmbeddedFileStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="16161"/>
			<description>Entry FDecodeParms with type Array in EmbeddedFileStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in EmbeddedFileStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16162"/>
			<description>Entry FFilter with type Array in EmbeddedFileStream shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in EmbeddedFileStream is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16163"/>
			<description>Entry FFilter in EmbeddedFileStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in EmbeddedFileStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="16164"/>
			<description>Entry FFilter with type Array in EmbeddedFileStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in EmbeddedFileStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="16165"/>
			<description>Entry FFilter with type Name in EmbeddedFileStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry FFilter with type Name in EmbeddedFileStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16166"/>
			<description>Entry Filter with type Array in EmbeddedFileStream shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in EmbeddedFileStream is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16167"/>
			<description>Entry Filter in EmbeddedFileStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in EmbeddedFileStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="16168"/>
			<description>Entry Filter with type Array in EmbeddedFileStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in EmbeddedFileStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="16169"/>
			<description>Entry Filter with type Name in EmbeddedFileStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry Filter with type Name in EmbeddedFileStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16170"/>
			<description>Entry Length in EmbeddedFileStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in EmbeddedFileStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="7" testNumber="16171"/>
			<description>Entry Length in EmbeddedFileStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in EmbeddedFileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16172"/>
			<description>Entry Params with type Dictionary in EmbeddedFileStream shall be object EmbeddedFileParameter</description>
			<test>ParamsHasTypeDictionary != true || Params_size == 1</test>
			<error>
				<message>Entry Params with type Dictionary in EmbeddedFileStream is not object EmbeddedFileParameter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16173"/>
			<description>Entry Params in EmbeddedFileStream shall have type Dictionary</description>
			<test>containsParams == false || ParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry Params in EmbeddedFileStream is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="11" testNumber="16174"/>
			<description>Entry Params in EmbeddedFileStream is required, when fn:IsRequired(fn:SinceVersion(2.0 , fn:IsAssociatedFile()))</description>
			<test>(containsParams == true || (true) == false)</test>
			<error>
				<message>Entry Params in EmbeddedFileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16175"/>
			<description>Entry Subtype in EmbeddedFileStream shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in EmbeddedFileStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="11" testNumber="16176"/>
			<description>Entry Subtype in EmbeddedFileStream is required, when fn:IsRequired(fn:SinceVersion(2.0 , fn:IsAssociatedFile()))</description>
			<test>(containsSubtype == true || (true) == false)</test>
			<error>
				<message>Entry Subtype in EmbeddedFileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16177"/>
			<description>Entry Type in EmbeddedFileStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in EmbeddedFileStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="16178"/>
			<description>Entry Type with type Name in EmbeddedFileStream shall have value EmbeddedFile</description>
			<test>TypeHasTypeName != true || TypeNameValue == "EmbeddedFile"</test>
			<error>
				<message>Entry Type with type Name in EmbeddedFileStream has incorrect value %2 instead of EmbeddedFile</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_3" clause="1" testNumber="16348"/>
			<description>Encoding shall not contain entries except BaseEncoding, Differences, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseEncoding' &amp;&amp; elem != 'Differences' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>Encoding contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseEncoding' &amp;&amp; elem != 'Differences' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16349"/>
			<description>Entry BaseEncoding in Encoding shall have type Name</description>
			<test>containsBaseEncoding == false || BaseEncodingHasTypeName == true</test>
			<error>
				<message>Entry BaseEncoding in Encoding is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_3" clause="6" testNumber="16350"/>
			<description>Entry BaseEncoding with type Name in Encoding shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>BaseEncodingHasTypeName != true || BaseEncodingNameValue == "MacRomanEncoding" || BaseEncodingNameValue == "MacExpertEncoding" || BaseEncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry BaseEncoding with type Name in Encoding has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BaseEncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16351"/>
			<description>Entry Differences with type Array in Encoding shall be object ArrayOfDifferences</description>
			<test>DifferencesHasTypeArray != true || Differences_size == 1</test>
			<error>
				<message>Entry Differences with type Array in Encoding is not object ArrayOfDifferences</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16352"/>
			<description>Entry Differences in Encoding shall have type Array</description>
			<test>containsDifferences == false || DifferencesHasTypeArray == true</test>
			<error>
				<message>Entry Differences in Encoding is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16353"/>
			<description>Entry Type in Encoding shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Encoding is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_3" clause="6" testNumber="16354"/>
			<description>Entry Type with type Name in Encoding shall have value Encoding</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Encoding"</test>
			<error>
				<message>Entry Type with type Name in Encoding has incorrect value %2 instead of Encoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="1" testNumber="16412"/>
			<description>EncryptionPublicKey shall not contain entries except Filter, P, Recipients, SubFilter, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>EncryptionPublicKey contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16413"/>
			<description>Entry Filter in EncryptionPublicKey shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in EncryptionPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="7" testNumber="16414"/>
			<description>Entry Filter in EncryptionPublicKey is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in EncryptionPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="6" testNumber="16415"/>
			<description>Entry Filter with type Name in EncryptionPublicKey shall have one of values: Adobe.PubSec, AdobePPKLite</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Adobe.PubSec" || FilterNameValue == "AdobePPKLite"</test>
			<error>
				<message>Entry Filter with type Name in EncryptionPublicKey has incorrect value %2 instead of Adobe.PubSec, AdobePPKLite</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16416"/>
			<description>Entry P in EncryptionPublicKey shall have type Bitmask</description>
			<test>containsP == false || PHasTypeBitmask == true</test>
			<error>
				<message>Entry P in EncryptionPublicKey is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="9" testNumber="16417"/>
			<description>Entry P with type Bitmask in EncryptionPublicKey shall satisfy special case: fn:Eval(fn:BitsClear(13 , 32))</description>
			<test>PHasTypeBitmask != true || (((PBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry P with type Bitmask in EncryptionPublicKey does not satisfy special case: fn:Eval(fn:BitsClear(13 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16418"/>
			<description>Entry Recipients with type Array in EncryptionPublicKey shall be object ArrayOfStringsByte</description>
			<test>RecipientsHasTypeArray != true || Recipients_size == 1</test>
			<error>
				<message>Entry Recipients with type Array in EncryptionPublicKey is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16419"/>
			<description>Entry Recipients in EncryptionPublicKey shall have type Array</description>
			<test>containsRecipients == false || RecipientsHasTypeArray == true</test>
			<error>
				<message>Entry Recipients in EncryptionPublicKey is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="11" testNumber="16420"/>
			<description>Entry Recipients in EncryptionPublicKey is required, when fn:IsRequired((@SubFilter == adbe.pkcs7.s3) || (@SubFilter == adbe.pkcs7.s4))</description>
			<test>(containsRecipients == true || ((SubFilterNameValue == "adbe.pkcs7.s3") || (SubFilterNameValue == "adbe.pkcs7.s4")) == false)</test>
			<error>
				<message>Entry Recipients in EncryptionPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16421"/>
			<description>Entry SubFilter in EncryptionPublicKey shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in EncryptionPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="6" testNumber="16422"/>
			<description>Entry SubFilter with type Name in EncryptionPublicKey shall have value adbe.pkcs7.s3</description>
			<test>SubFilterHasTypeName != true || SubFilterNameValue == "adbe.pkcs7.s3"</test>
			<error>
				<message>Entry SubFilter with type Name in EncryptionPublicKey has incorrect value %2 instead of adbe.pkcs7.s3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16423"/>
			<description>Entry V in EncryptionPublicKey shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in EncryptionPublicKey is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="7" testNumber="16424"/>
			<description>Entry V in EncryptionPublicKey is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in EncryptionPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="19" testNumber="16425"/>
			<description>Entry V with type Integer in EncryptionPublicKey shouldn't have deprecated value 0</description>
			<test>VIntegerValue != 0</test>
			<error>
				<message>Entry V with type Integer in EncryptionPublicKey has deprecated value 0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_3" clause="13" testNumber="16426"/>
			<description>Entry V with type Integer in EncryptionPublicKey shall have one of values: 0, 1</description>
			<test>VHasTypeInteger != true || VIntegerValue == 0 || VIntegerValue == 1</test>
			<error>
				<message>Entry V with type Integer in EncryptionPublicKey has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="1" testNumber="16605"/>
			<description>EncryptionStandard shall not contain entries except EFF, Filter, O, OE, P, Perms, R, SubFilter, U, UE, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'EFF' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'O' &amp;&amp; elem != 'OE' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'R' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UE' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>EncryptionStandard contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'EFF' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'O' &amp;&amp; elem != 'OE' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'R' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UE' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16606"/>
			<description>Entry EFF in EncryptionStandard shall have type Name</description>
			<test>containsEFF == false || EFFHasTypeName == true</test>
			<error>
				<message>Entry EFF in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16607"/>
			<description>Entry Filter in EncryptionStandard shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="7" testNumber="16608"/>
			<description>Entry Filter in EncryptionStandard is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="6" testNumber="16609"/>
			<description>Entry Filter with type Name in EncryptionStandard shall have value Standard</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Standard"</test>
			<error>
				<message>Entry Filter with type Name in EncryptionStandard has incorrect value %2 instead of Standard</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16610"/>
			<description>Entry O in EncryptionStandard shall have type StringByte</description>
			<test>containsO == false || OHasTypeStringByte == true</test>
			<error>
				<message>Entry O in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="7" testNumber="16611"/>
			<description>Entry O in EncryptionStandard is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16612"/>
			<description>Entry OE in EncryptionStandard shall have type StringByte</description>
			<test>containsOE == false || OEHasTypeStringByte == true</test>
			<error>
				<message>Entry OE in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="11" testNumber="16613"/>
			<description>Entry OE in EncryptionStandard is required, when fn:IsRequired((@R == 5) || (@R == 6))</description>
			<test>(containsOE == true || ((RIntegerValue == 5) || (RIntegerValue == 6)) == false)</test>
			<error>
				<message>Entry OE in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16614"/>
			<description>Entry P in EncryptionStandard shall have type Bitmask</description>
			<test>containsP == false || PHasTypeBitmask == true</test>
			<error>
				<message>Entry P in EncryptionStandard is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="7" testNumber="16615"/>
			<description>Entry P in EncryptionStandard is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="9" testNumber="16616"/>
			<description>Entry P with type Bitmask in EncryptionStandard shall satisfy special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitsSet(7 , 8) &amp;&amp; fn:SinceVersion(2.0 , fn:BitSet(10)) &amp;&amp; (fn:SinceVersion(2.0 , fn:Extension(ISO_TS_32004 , fn:BitsSet(14 , 32))) || fn:BitsSet(13 , 32)))</description>
			<test>PHasTypeBitmask != true || (((PBitmaskValue &gt;&gt; 0 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 1 &amp; 1) == 0) &amp;&amp; ((PBitmaskValue &gt;&gt; 6 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 7 &amp; 1) == 1) &amp;&amp; true &amp;&amp; (true || ((PBitmaskValue &gt;&gt; 12 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 13 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 14 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 15 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 16 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 17 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 18 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 19 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 20 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 21 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 22 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 23 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 24 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 25 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 26 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 27 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 28 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 29 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 30 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 31 &amp; 1) == 1)))</test>
			<error>
				<message>Entry P with type Bitmask in EncryptionStandard does not satisfy special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitsSet(7 , 8) &amp;&amp; fn:SinceVersion(2.0 , fn:BitSet(10)) &amp;&amp; (fn:SinceVersion(2.0 , fn:Extension(ISO_TS_32004 , fn:BitsSet(14 , 32))) || fn:BitsSet(13 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16617"/>
			<description>Entry Perms in EncryptionStandard shall have type StringByte</description>
			<test>containsPerms == false || PermsHasTypeStringByte == true</test>
			<error>
				<message>Entry Perms in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="11" testNumber="16618"/>
			<description>Entry Perms in EncryptionStandard is required, when fn:IsRequired((@R == 5) || (@R == 6))</description>
			<test>(containsPerms == true || ((RIntegerValue == 5) || (RIntegerValue == 6)) == false)</test>
			<error>
				<message>Entry Perms in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16619"/>
			<description>Entry R in EncryptionStandard shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in EncryptionStandard is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="7" testNumber="16620"/>
			<description>Entry R in EncryptionStandard is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="15" testNumber="16621"/>
			<description>Entry R in EncryptionStandard shall have Integer value 2, if this object satisfies condition @V &lt; 2</description>
			<test>((VIntegerValue &lt; 2) == false || RIntegerValue == 2)</test>
			<error>
				<message>Entry R in EncryptionStandard does not have value 2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="15" testNumber="16622"/>
			<description>Entry R in EncryptionStandard shall have Integer value 3, if this object satisfies condition (@V == 2) || (@V == 3)</description>
			<test>(((VIntegerValue == 2) || (VIntegerValue == 3)) == false || RIntegerValue == 3)</test>
			<error>
				<message>Entry R in EncryptionStandard does not have value 3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="15" testNumber="16623"/>
			<description>Entry R in EncryptionStandard shall have Integer value 4, if this object satisfies condition @V == 4</description>
			<test>((VIntegerValue == 4) == false || RIntegerValue == 4)</test>
			<error>
				<message>Entry R in EncryptionStandard does not have value 4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="13" testNumber="16624"/>
			<description>Entry R with type Integer in EncryptionStandard shall have one of values: 2, 3, 4</description>
			<test>RHasTypeInteger != true || RIntegerValue == 2 || RIntegerValue == 3 || RIntegerValue == 4</test>
			<error>
				<message>Entry R with type Integer in EncryptionStandard has incorrect value %2 instead of 2, 3, 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16625"/>
			<description>Entry SubFilter in EncryptionStandard shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16626"/>
			<description>Entry U in EncryptionStandard shall have type StringByte</description>
			<test>containsU == false || UHasTypeStringByte == true</test>
			<error>
				<message>Entry U in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="7" testNumber="16627"/>
			<description>Entry U in EncryptionStandard is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16628"/>
			<description>Entry UE in EncryptionStandard shall have type StringByte</description>
			<test>containsUE == false || UEHasTypeStringByte == true</test>
			<error>
				<message>Entry UE in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="11" testNumber="16629"/>
			<description>Entry UE in EncryptionStandard is required, when fn:IsRequired((@R == 5) || (@R == 6))</description>
			<test>(containsUE == true || ((RIntegerValue == 5) || (RIntegerValue == 6)) == false)</test>
			<error>
				<message>Entry UE in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16630"/>
			<description>Entry V in EncryptionStandard shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in EncryptionStandard is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="7" testNumber="16631"/>
			<description>Entry V in EncryptionStandard is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="19" testNumber="16632"/>
			<description>Entry V with type Integer in EncryptionStandard shouldn't have deprecated value 0</description>
			<test>VIntegerValue != 0</test>
			<error>
				<message>Entry V with type Integer in EncryptionStandard has deprecated value 0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_3" clause="13" testNumber="16633"/>
			<description>Entry V with type Integer in EncryptionStandard shall have one of values: 0, 1</description>
			<test>VHasTypeInteger != true || VIntegerValue == 0 || VIntegerValue == 1</test>
			<error>
				<message>Entry V with type Integer in EncryptionStandard has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFDDictEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16890"/>
			<description>Entry with type Dictionary in FDDict shall be object CIDFontDescriptorMetrics</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in FDDict is not object CIDFontDescriptorMetrics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFDDictEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16891"/>
			<description>Entry in FDDict shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in FDDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_3" clause="1" testNumber="16910"/>
			<description>Field shall not contain entries except AA, Ff, Kids, Parent, T, TM, TU</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU').length == 0</test>
			<error>
				<message>Field contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16911"/>
			<description>Entry AA with type Dictionary in Field shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in Field is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16912"/>
			<description>Entry AA in Field shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in Field is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16913"/>
			<description>Entry Ff in Field shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in Field is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_3" clause="9" testNumber="16914"/>
			<description>Entry Ff with type Bitmask in Field shall satisfy special case: fn:Eval(fn:BitsClear(4 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in Field does not satisfy special case: fn:Eval(fn:BitsClear(4 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16915"/>
			<description>Entry Kids with type Array in Field shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in Field is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16916"/>
			<description>Entry Kids in Field shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in Field is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_3" clause="17" testNumber="16917"/>
			<description>Entry Parent with type Dictionary in Field shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in Field is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16918"/>
			<description>Entry Parent in Field shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in Field is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16919"/>
			<description>Entry T in Field shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in Field is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16920"/>
			<description>Entry TM in Field shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in Field is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_3" clause="8" testNumber="16921"/>
			<description>Entry TU in Field shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in Field is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="1" testNumber="16999"/>
			<description>FieldBtnCheckbox shall not contain entries except AA, DA, DV, FT, Ff, Kids, Parent, Q, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldBtnCheckbox contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17000"/>
			<description>Entry AA with type Dictionary in FieldBtnCheckbox shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldBtnCheckbox is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17001"/>
			<description>Entry AA in FieldBtnCheckbox shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldBtnCheckbox is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17002"/>
			<description>Entry DA in FieldBtnCheckbox shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldBtnCheckbox is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="7" testNumber="17003"/>
			<description>Entry DA in FieldBtnCheckbox is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldBtnCheckbox is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17004"/>
			<description>Entry DV in FieldBtnCheckbox shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in FieldBtnCheckbox is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17005"/>
			<description>Entry FT in FieldBtnCheckbox shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldBtnCheckbox is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="7" testNumber="17006"/>
			<description>Entry FT in FieldBtnCheckbox is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldBtnCheckbox is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="6" testNumber="17007"/>
			<description>Entry FT with type Name in FieldBtnCheckbox shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in FieldBtnCheckbox has incorrect value %2 instead of Btn</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17008"/>
			<description>Entry Ff in FieldBtnCheckbox shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldBtnCheckbox is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="9" testNumber="17009"/>
			<description>Entry Ff with type Bitmask in FieldBtnCheckbox shall satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitsClear(16 , 25) &amp;&amp; fn:BitsClear(27 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldBtnCheckbox does not satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitsClear(16 , 25) &amp;&amp; fn:BitsClear(27 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17010"/>
			<description>Entry Kids with type Array in FieldBtnCheckbox shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldBtnCheckbox is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17011"/>
			<description>Entry Kids in FieldBtnCheckbox shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldBtnCheckbox is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17012"/>
			<description>Entry Parent with type Dictionary in FieldBtnCheckbox shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldBtnCheckbox is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17013"/>
			<description>Entry Parent in FieldBtnCheckbox shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldBtnCheckbox is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17014"/>
			<description>Entry Q in FieldBtnCheckbox shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldBtnCheckbox is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="6" testNumber="17015"/>
			<description>Entry Q with type Integer in FieldBtnCheckbox shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldBtnCheckbox has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17016"/>
			<description>Entry T in FieldBtnCheckbox shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldBtnCheckbox is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17017"/>
			<description>Entry TM in FieldBtnCheckbox shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldBtnCheckbox is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17018"/>
			<description>Entry TU in FieldBtnCheckbox shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldBtnCheckbox is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17019"/>
			<description>Entry V in FieldBtnCheckbox shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldBtnCheckbox is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="1" testNumber="17168"/>
			<description>FieldBtnPush shall not contain entries except AA, DA, DV, FT, Ff, Kids, Parent, Q, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldBtnPush contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17169"/>
			<description>Entry AA with type Dictionary in FieldBtnPush shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldBtnPush is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17170"/>
			<description>Entry AA in FieldBtnPush shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldBtnPush is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17171"/>
			<description>Entry DA in FieldBtnPush shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldBtnPush is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="7" testNumber="17172"/>
			<description>Entry DA in FieldBtnPush is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldBtnPush is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17173"/>
			<description>Entry DV in FieldBtnPush shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in FieldBtnPush is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17174"/>
			<description>Entry FT in FieldBtnPush shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldBtnPush is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="7" testNumber="17175"/>
			<description>Entry FT in FieldBtnPush is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldBtnPush is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="6" testNumber="17176"/>
			<description>Entry FT with type Name in FieldBtnPush shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in FieldBtnPush has incorrect value %2 instead of Btn</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17177"/>
			<description>Entry Ff in FieldBtnPush shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldBtnPush is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="9" testNumber="17178"/>
			<description>Entry Ff with type Bitmask in FieldBtnPush shall satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitClear(16) &amp;&amp; fn:BitSet(17) &amp;&amp; fn:BitsClear(18 , 25) &amp;&amp; fn:BitsClear(27 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 1 &amp;&amp; ((FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldBtnPush does not satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitClear(16) &amp;&amp; fn:BitSet(17) &amp;&amp; fn:BitsClear(18 , 25) &amp;&amp; fn:BitsClear(27 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17179"/>
			<description>Entry Kids with type Array in FieldBtnPush shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldBtnPush is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17180"/>
			<description>Entry Kids in FieldBtnPush shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldBtnPush is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17181"/>
			<description>Entry Parent with type Dictionary in FieldBtnPush shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldBtnPush is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17182"/>
			<description>Entry Parent in FieldBtnPush shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldBtnPush is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17183"/>
			<description>Entry Q in FieldBtnPush shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldBtnPush is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="6" testNumber="17184"/>
			<description>Entry Q with type Integer in FieldBtnPush shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldBtnPush has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17185"/>
			<description>Entry T in FieldBtnPush shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldBtnPush is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17186"/>
			<description>Entry TM in FieldBtnPush shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldBtnPush is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17187"/>
			<description>Entry TU in FieldBtnPush shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldBtnPush is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17188"/>
			<description>Entry V in FieldBtnPush shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldBtnPush is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="1" testNumber="17327"/>
			<description>FieldBtnRadio shall not contain entries except AA, DA, DV, FT, Ff, Kids, Parent, Q, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldBtnRadio contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17328"/>
			<description>Entry AA with type Dictionary in FieldBtnRadio shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldBtnRadio is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17329"/>
			<description>Entry AA in FieldBtnRadio shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldBtnRadio is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17330"/>
			<description>Entry DA in FieldBtnRadio shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldBtnRadio is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="7" testNumber="17331"/>
			<description>Entry DA in FieldBtnRadio is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldBtnRadio is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17332"/>
			<description>Entry DV in FieldBtnRadio shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in FieldBtnRadio is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17333"/>
			<description>Entry FT in FieldBtnRadio shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldBtnRadio is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="7" testNumber="17334"/>
			<description>Entry FT in FieldBtnRadio is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldBtnRadio is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="6" testNumber="17335"/>
			<description>Entry FT with type Name in FieldBtnRadio shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in FieldBtnRadio has incorrect value %2 instead of Btn</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17336"/>
			<description>Entry Ff in FieldBtnRadio shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldBtnRadio is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="9" testNumber="17337"/>
			<description>Entry Ff with type Bitmask in FieldBtnRadio shall satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitSet(16) &amp;&amp; fn:BitsClear(17 , 25) &amp;&amp; fn:BitsClear(27 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 1 &amp;&amp; ((FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldBtnRadio does not satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitSet(16) &amp;&amp; fn:BitsClear(17 , 25) &amp;&amp; fn:BitsClear(27 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17338"/>
			<description>Entry Kids with type Array in FieldBtnRadio shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldBtnRadio is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17339"/>
			<description>Entry Kids in FieldBtnRadio shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldBtnRadio is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17340"/>
			<description>Entry Parent with type Dictionary in FieldBtnRadio shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldBtnRadio is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17341"/>
			<description>Entry Parent in FieldBtnRadio shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldBtnRadio is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17342"/>
			<description>Entry Q in FieldBtnRadio shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldBtnRadio is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="6" testNumber="17343"/>
			<description>Entry Q with type Integer in FieldBtnRadio shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldBtnRadio has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17344"/>
			<description>Entry T in FieldBtnRadio shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldBtnRadio is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17345"/>
			<description>Entry TM in FieldBtnRadio shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldBtnRadio is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17346"/>
			<description>Entry TU in FieldBtnRadio shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldBtnRadio is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17347"/>
			<description>Entry V in FieldBtnRadio shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldBtnRadio is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="1" testNumber="17499"/>
			<description>FieldChoice shall not contain entries except AA, DA, DV, FT, Ff, Kids, Parent, Q, T, TI, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TI' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldChoice contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TI' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17500"/>
			<description>Entry AA with type Dictionary in FieldChoice shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldChoice is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17501"/>
			<description>Entry AA in FieldChoice shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldChoice is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17502"/>
			<description>Entry DA in FieldChoice shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldChoice is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="7" testNumber="17503"/>
			<description>Entry DA in FieldChoice is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldChoice is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17504"/>
			<description>Entry DV with type Array in FieldChoice shall be object ArrayOfStringsText</description>
			<test>DVHasTypeArray != true || DV_size == 1</test>
			<error>
				<message>Entry DV with type Array in FieldChoice is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17505"/>
			<description>Entry DV in FieldChoice shall have one of types: Array, StringText</description>
			<test>containsDV == false || DVHasTypeArray == true || DVHasTypeStringText == true</test>
			<error>
				<message>Entry DV in FieldChoice is not one of types: Array, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17506"/>
			<description>Entry FT in FieldChoice shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldChoice is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="7" testNumber="17507"/>
			<description>Entry FT in FieldChoice is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldChoice is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="6" testNumber="17508"/>
			<description>Entry FT with type Name in FieldChoice shall have value Ch</description>
			<test>FTHasTypeName != true || FTNameValue == "Ch"</test>
			<error>
				<message>Entry FT with type Name in FieldChoice has incorrect value %2 instead of Ch</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17509"/>
			<description>Entry Ff in FieldChoice shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldChoice is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="9" testNumber="17510"/>
			<description>Entry Ff with type Bitmask in FieldChoice shall satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitClear(21) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(22 , 23)) &amp;&amp; fn:BitsClear(24 , 26) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitClear(27)) &amp;&amp; fn:BitsClear(28 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; ((FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; ((FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldChoice does not satisfy special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitClear(21) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(22 , 23)) &amp;&amp; fn:BitsClear(24 , 26) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitClear(27)) &amp;&amp; fn:BitsClear(28 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17511"/>
			<description>Entry Kids with type Array in FieldChoice shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldChoice is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17512"/>
			<description>Entry Kids in FieldChoice shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldChoice is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17513"/>
			<description>Entry Parent with type Dictionary in FieldChoice shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldChoice is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17514"/>
			<description>Entry Parent in FieldChoice shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldChoice is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17515"/>
			<description>Entry Q in FieldChoice shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldChoice is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="6" testNumber="17516"/>
			<description>Entry Q with type Integer in FieldChoice shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldChoice has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17517"/>
			<description>Entry T in FieldChoice shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldChoice is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17518"/>
			<description>Entry TI in FieldChoice shall have type Integer</description>
			<test>containsTI == false || TIHasTypeInteger == true</test>
			<error>
				<message>Entry TI in FieldChoice is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17519"/>
			<description>Entry TM in FieldChoice shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldChoice is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17520"/>
			<description>Entry TU in FieldChoice shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldChoice is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17521"/>
			<description>Entry V with type Array in FieldChoice shall be object ArrayOfStringsText</description>
			<test>VHasTypeArray != true || V_size == 1</test>
			<error>
				<message>Entry V with type Array in FieldChoice is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17522"/>
			<description>Entry V in FieldChoice shall have one of types: Array, StringText</description>
			<test>containsV == false || VHasTypeArray == true || VHasTypeStringText == true</test>
			<error>
				<message>Entry V in FieldChoice is not one of types: Array, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="1" testNumber="17733"/>
			<description>FieldSig shall not contain entries except AA, DA, DV, FT, Ff, Kids, Parent, Q, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldSig contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17734"/>
			<description>Entry AA with type Dictionary in FieldSig shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldSig is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17735"/>
			<description>Entry AA in FieldSig shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17736"/>
			<description>Entry DA in FieldSig shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldSig is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17737"/>
			<description>Entry DV with type Dictionary in FieldSig shall be one of objects Signature, DocTimeStamp</description>
			<test>DVHasTypeDictionary != true || DV_size == 1</test>
			<error>
				<message>Entry DV with type Dictionary in FieldSig is not one of objects Signature, DocTimeStamp</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17738"/>
			<description>Entry DV in FieldSig shall have type Dictionary</description>
			<test>containsDV == false || DVHasTypeDictionary == true</test>
			<error>
				<message>Entry DV in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17739"/>
			<description>Entry FT in FieldSig shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldSig is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="7" testNumber="17740"/>
			<description>Entry FT in FieldSig is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldSig is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="6" testNumber="17741"/>
			<description>Entry FT with type Name in FieldSig shall have value Sig</description>
			<test>FTHasTypeName != true || FTNameValue == "Sig"</test>
			<error>
				<message>Entry FT with type Name in FieldSig has incorrect value %2 instead of Sig</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17742"/>
			<description>Entry Ff in FieldSig shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldSig is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="9" testNumber="17743"/>
			<description>Entry Ff with type Bitmask in FieldSig shall satisfy special case: fn:Eval(fn:BitsClear(4 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldSig does not satisfy special case: fn:Eval(fn:BitsClear(4 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17744"/>
			<description>Entry Kids with type Array in FieldSig shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldSig is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17745"/>
			<description>Entry Kids in FieldSig shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldSig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17746"/>
			<description>Entry Parent with type Dictionary in FieldSig shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldSig is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17747"/>
			<description>Entry Parent in FieldSig shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17748"/>
			<description>Entry Q in FieldSig shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldSig is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="6" testNumber="17749"/>
			<description>Entry Q with type Integer in FieldSig shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldSig has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17750"/>
			<description>Entry T in FieldSig shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldSig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17751"/>
			<description>Entry TM in FieldSig shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldSig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17752"/>
			<description>Entry TU in FieldSig shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldSig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17753"/>
			<description>Entry V with type Dictionary in FieldSig shall be one of objects Signature, DocTimeStamp</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in FieldSig is not one of objects Signature, DocTimeStamp</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17754"/>
			<description>Entry V in FieldSig shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="1" testNumber="17928"/>
			<description>FieldTx shall not contain entries except AA, DA, DV, FT, Ff, Kids, MaxLen, Parent, Q, T, TM, TU, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MaxLen' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldTx contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MaxLen' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17929"/>
			<description>Entry AA with type Dictionary in FieldTx shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldTx is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17930"/>
			<description>Entry AA in FieldTx shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldTx is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17931"/>
			<description>Entry DA in FieldTx shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldTx is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="7" testNumber="17932"/>
			<description>Entry DA in FieldTx is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldTx is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17933"/>
			<description>Entry DV with type Stream in FieldTx shall be object Stream</description>
			<test>DVHasTypeStream != true || DV_size == 1</test>
			<error>
				<message>Entry DV with type Stream in FieldTx is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17934"/>
			<description>Entry DV in FieldTx shall have one of types: Stream, StringText</description>
			<test>containsDV == false || DVHasTypeStream == true || DVHasTypeStringText == true</test>
			<error>
				<message>Entry DV in FieldTx is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="10" testNumber="17935"/>
			<description>Entry DV with type Stream in FieldTx shall be indirect</description>
			<test>DVHasTypeStream != true || isDVIndirect == true</test>
			<error>
				<message>Entry DV with type Stream in FieldTx is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17936"/>
			<description>Entry FT in FieldTx shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldTx is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="7" testNumber="17937"/>
			<description>Entry FT in FieldTx is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldTx is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="6" testNumber="17938"/>
			<description>Entry FT with type Name in FieldTx shall have value Tx</description>
			<test>FTHasTypeName != true || FTNameValue == "Tx"</test>
			<error>
				<message>Entry FT with type Name in FieldTx has incorrect value %2 instead of Tx</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17939"/>
			<description>Entry Ff in FieldTx shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldTx is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="9" testNumber="17940"/>
			<description>Entry Ff with type Bitmask in FieldTx shall satisfy special case: fn:Eval(fn:BitsClear(15 , 20) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitClear(21)) &amp;&amp; fn:BitClear(22) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(23 , 24)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(25 , 26)) &amp;&amp; fn:BitsClear(27 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; ((FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldTx does not satisfy special case: fn:Eval(fn:BitsClear(15 , 20) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitClear(21)) &amp;&amp; fn:BitClear(22) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(23 , 24)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(25 , 26)) &amp;&amp; fn:BitsClear(27 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17941"/>
			<description>Entry Kids with type Array in FieldTx shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldTx is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17942"/>
			<description>Entry Kids in FieldTx shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldTx is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17943"/>
			<description>Entry MaxLen in FieldTx shall have type Integer</description>
			<test>containsMaxLen == false || MaxLenHasTypeInteger == true</test>
			<error>
				<message>Entry MaxLen in FieldTx is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="9" testNumber="17944"/>
			<description>Entry MaxLen with type Integer in FieldTx shall satisfy special case: fn:Eval(@MaxLen &gt;= 0)</description>
			<test>MaxLenHasTypeInteger != true || (MaxLenIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry MaxLen with type Integer in FieldTx does not satisfy special case: fn:Eval(@MaxLen &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17945"/>
			<description>Entry Parent with type Dictionary in FieldTx shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldTx is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17946"/>
			<description>Entry Parent in FieldTx shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldTx is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17947"/>
			<description>Entry Q in FieldTx shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldTx is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="6" testNumber="17948"/>
			<description>Entry Q with type Integer in FieldTx shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldTx has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17949"/>
			<description>Entry T in FieldTx shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldTx is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17950"/>
			<description>Entry TM in FieldTx shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldTx is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17951"/>
			<description>Entry TU in FieldTx shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldTx is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="17" testNumber="17952"/>
			<description>Entry V with type Stream in FieldTx shall be object Stream</description>
			<test>VHasTypeStream != true || V_size == 1</test>
			<error>
				<message>Entry V with type Stream in FieldTx is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="8" testNumber="17953"/>
			<description>Entry V in FieldTx shall have one of types: Stream, StringText</description>
			<test>containsV == false || VHasTypeStream == true || VHasTypeStringText == true</test>
			<error>
				<message>Entry V in FieldTx is not one of types: Stream, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_3" clause="10" testNumber="17954"/>
			<description>Entry V with type Stream in FieldTx shall be indirect</description>
			<test>VHasTypeStream != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Stream in FieldTx is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_3" clause="1" testNumber="18106"/>
			<description>FileSpecEF shall not contain entries except F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F').length == 0</test>
			<error>
				<message>FileSpecEF contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18107"/>
			<description>Entry F with type Stream in FileSpecEF shall be object EmbeddedFileStream</description>
			<test>FHasTypeStream != true || F_size == 1</test>
			<error>
				<message>Entry F with type Stream in FileSpecEF is not object EmbeddedFileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18108"/>
			<description>Entry F in FileSpecEF shall have type Stream</description>
			<test>containsF == false || FHasTypeStream == true</test>
			<error>
				<message>Entry F in FileSpecEF is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_3" clause="10" testNumber="18109"/>
			<description>Entry F with type Stream in FileSpecEF shall be indirect</description>
			<test>FHasTypeStream != true || isFIndirect == true</test>
			<error>
				<message>Entry F with type Stream in FileSpecEF is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_3" clause="1" testNumber="18136"/>
			<description>FileSpecRF shall not contain entries except F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F').length == 0</test>
			<error>
				<message>FileSpecRF contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18137"/>
			<description>Entry F with type Array in FileSpecRF shall be object RelatedFilesArray</description>
			<test>FHasTypeArray != true || F_size == 1</test>
			<error>
				<message>Entry F with type Array in FileSpecRF is not object RelatedFilesArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18138"/>
			<description>Entry F in FileSpecRF shall have type Array</description>
			<test>containsF == false || FHasTypeArray == true</test>
			<error>
				<message>Entry F in FileSpecRF is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_3" clause="10" testNumber="18139"/>
			<description>Entry F with type Array in FileSpecRF shall be indirect</description>
			<test>FHasTypeArray != true || isFIndirect == true</test>
			<error>
				<message>Entry F with type Array in FileSpecRF is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_3" clause="9" testNumber="18140"/>
			<description>Entry F with type Array in FileSpecRF shall satisfy special case: fn:Eval((fn:ArrayLength(F) mod 2) == 0)</description>
			<test>FHasTypeArray != true || ((FArraySize % 2) == 0)</test>
			<error>
				<message>Entry F with type Array in FileSpecRF does not satisfy special case: fn:Eval((fn:ArrayLength(F) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="1" testNumber="18199"/>
			<description>FileSpecification shall not contain entries except DOS, EF, F, FS, ID, Mac, RF, Type, Unix, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DOS' &amp;&amp; elem != 'EF' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'RF' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FileSpecification contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DOS' &amp;&amp; elem != 'EF' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'RF' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18200"/>
			<description>Entry DOS in FileSpecification shall have type StringByte</description>
			<test>containsDOS == false || DOSHasTypeStringByte == true</test>
			<error>
				<message>Entry DOS in FileSpecification is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18201"/>
			<description>Entry EF with type Dictionary in FileSpecification shall be object FileSpecEF</description>
			<test>EFHasTypeDictionary != true || EF_size == 1</test>
			<error>
				<message>Entry EF with type Dictionary in FileSpecification is not object FileSpecEF</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18202"/>
			<description>Entry EF in FileSpecification shall have type Dictionary</description>
			<test>containsEF == false || EFHasTypeDictionary == true</test>
			<error>
				<message>Entry EF in FileSpecification is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="11" testNumber="18203"/>
			<description>Entry EF in FileSpecification is required, when fn:IsRequired(fn:IsPresent(RF))</description>
			<test>(containsEF == true || ((containsRF == true)) == false)</test>
			<error>
				<message>Entry EF in FileSpecification is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18204"/>
			<description>Entry F in FileSpecification shall have type String</description>
			<test>containsF == false || FHasTypeString == true</test>
			<error>
				<message>Entry F in FileSpecification is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="11" testNumber="18205"/>
			<description>Entry F in FileSpecification is required, when fn:IsRequired(fn:Not(fn:IsPresent(DOS)) &amp;&amp; fn:Not(fn:IsPresent(Mac)) &amp;&amp; fn:Not(fn:IsPresent(Unix)))</description>
			<test>(containsF == true || (((containsDOS == true)) != true &amp;&amp; ((containsMac == true)) != true &amp;&amp; ((containsUnix == true)) != true) == false)</test>
			<error>
				<message>Entry F in FileSpecification is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18206"/>
			<description>Entry FS in FileSpecification shall have type Name</description>
			<test>containsFS == false || FSHasTypeName == true</test>
			<error>
				<message>Entry FS in FileSpecification is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18207"/>
			<description>Entry ID with type Array in FileSpecification shall be object ArrayOf_2StringsByte</description>
			<test>entryIDHasTypeArray != true || entryID_size == 1</test>
			<error>
				<message>Entry ID with type Array in FileSpecification is not object ArrayOf_2StringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18208"/>
			<description>Entry ID in FileSpecification shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in FileSpecification is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18209"/>
			<description>Entry Mac in FileSpecification shall have type StringByte</description>
			<test>containsMac == false || MacHasTypeStringByte == true</test>
			<error>
				<message>Entry Mac in FileSpecification is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18210"/>
			<description>Entry RF with type Dictionary in FileSpecification shall be object FileSpecRF</description>
			<test>RFHasTypeDictionary != true || RF_size == 1</test>
			<error>
				<message>Entry RF with type Dictionary in FileSpecification is not object FileSpecRF</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18211"/>
			<description>Entry RF in FileSpecification shall have type Dictionary</description>
			<test>containsRF == false || RFHasTypeDictionary == true</test>
			<error>
				<message>Entry RF in FileSpecification is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18212"/>
			<description>Entry Type in FileSpecification shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FileSpecification is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="11" testNumber="18213"/>
			<description>Entry Type in FileSpecification is required, when fn:IsRequired(fn:IsPresent(EF) || fn:IsPresent(EP) || fn:IsPresent(RF))</description>
			<test>(containsType == true || ((containsEF == true) || (containsEP == true) || (containsRF == true)) == false)</test>
			<error>
				<message>Entry Type in FileSpecification is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="6" testNumber="18214"/>
			<description>Entry Type with type Name in FileSpecification shall have value Filespec</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Filespec"</test>
			<error>
				<message>Entry Type with type Name in FileSpecification has incorrect value %2 instead of Filespec</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18215"/>
			<description>Entry Unix in FileSpecification shall have type StringByte</description>
			<test>containsUnix == false || UnixHasTypeStringByte == true</test>
			<error>
				<message>Entry Unix in FileSpecification is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18216"/>
			<description>Entry V in FileSpecification shall have type Boolean</description>
			<test>containsV == false || VHasTypeBoolean == true</test>
			<error>
				<message>Entry V in FileSpecification is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="1" testNumber="18383"/>
			<description>FileTrailer shall not contain entries except Encrypt, ID, Info, Prev, Root, Size</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Encrypt' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'Size').length == 0</test>
			<error>
				<message>FileTrailer contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Encrypt' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'Size').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18384"/>
			<description>Entry Encrypt with type Dictionary in FileTrailer shall be one of objects EncryptionStandard, EncryptionPublicKey</description>
			<test>EncryptHasTypeDictionary != true || Encrypt_size == 1</test>
			<error>
				<message>Entry Encrypt with type Dictionary in FileTrailer is not one of objects EncryptionStandard, EncryptionPublicKey</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18385"/>
			<description>Entry Encrypt in FileTrailer shall have type Dictionary</description>
			<test>containsEncrypt == false || EncryptHasTypeDictionary == true</test>
			<error>
				<message>Entry Encrypt in FileTrailer is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18386"/>
			<description>Entry ID with type Array in FileTrailer shall be object TrailerIDArray</description>
			<test>entryIDHasTypeArray != true || entryID_size == 1</test>
			<error>
				<message>Entry ID with type Array in FileTrailer is not object TrailerIDArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18387"/>
			<description>Entry ID in FileTrailer shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in FileTrailer is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="11" testNumber="18388"/>
			<description>Entry ID in FileTrailer is required, when fn:IsRequired(fn:IsPresent(Encrypt))</description>
			<test>(containsID == true || ((containsEncrypt == true)) == false)</test>
			<error>
				<message>Entry ID in FileTrailer is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="16" testNumber="18389"/>
			<description>If entry ID with type Array in FileTrailer satisfies condition fn:MustBeDirect(fn:IsPresent(Encrypt)), it shall be direct</description>
			<test>entryIDHasTypeArray != true || (isentryIDIndirect == false || ((containsEncrypt == true)) == false)</test>
			<error>
				<message>Entry ID with type Array in FileTrailer is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18390"/>
			<description>Entry Info with type Dictionary in FileTrailer shall be object DocInfo</description>
			<test>InfoHasTypeDictionary != true || Info_size == 1</test>
			<error>
				<message>Entry Info with type Dictionary in FileTrailer is not object DocInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18391"/>
			<description>Entry Info in FileTrailer shall have type Dictionary</description>
			<test>containsInfo == false || InfoHasTypeDictionary == true</test>
			<error>
				<message>Entry Info in FileTrailer is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="12" testNumber="18392"/>
			<description>If entry Info with type Dictionary in FileTrailer satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>InfoHasTypeDictionary != true || (isInfoIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Info with type Dictionary in FileTrailer is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18393"/>
			<description>Entry Prev in FileTrailer shall have type Integer</description>
			<test>containsPrev == false || PrevHasTypeInteger == true</test>
			<error>
				<message>Entry Prev in FileTrailer is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="16" testNumber="18394"/>
			<description>If entry Prev with type Integer in FileTrailer satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>PrevHasTypeInteger != true || (isPrevIndirect == false)</test>
			<error>
				<message>Entry Prev with type Integer in FileTrailer is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="14" testNumber="18395"/>
			<description>Entry Prev with type Integer in FileTrailer shall satisfy possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</description>
			<test>PrevHasTypeInteger != true || (PrevIntegerValue &gt;= 0) &amp;&amp; (PrevIntegerValue &lt;= fileSize)</test>
			<error>
				<message>Entry Prev with type Integer in FileTrailer does not satisfy possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18396"/>
			<description>Entry Root with type Dictionary in FileTrailer shall be object Catalog</description>
			<test>RootHasTypeDictionary != true || Root_size == 1</test>
			<error>
				<message>Entry Root with type Dictionary in FileTrailer is not object Catalog</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18397"/>
			<description>Entry Root in FileTrailer shall have type Dictionary</description>
			<test>containsRoot == false || RootHasTypeDictionary == true</test>
			<error>
				<message>Entry Root in FileTrailer is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="7" testNumber="18398"/>
			<description>Entry Root in FileTrailer is required</description>
			<test>containsRoot == true</test>
			<error>
				<message>Entry Root in FileTrailer is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="10" testNumber="18399"/>
			<description>Entry Root with type Dictionary in FileTrailer shall be indirect</description>
			<test>RootHasTypeDictionary != true || isRootIndirect == true</test>
			<error>
				<message>Entry Root with type Dictionary in FileTrailer is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18400"/>
			<description>Entry Size in FileTrailer shall have type Integer</description>
			<test>containsSize == false || SizeHasTypeInteger == true</test>
			<error>
				<message>Entry Size in FileTrailer is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="7" testNumber="18401"/>
			<description>Entry Size in FileTrailer is required</description>
			<test>containsSize == true</test>
			<error>
				<message>Entry Size in FileTrailer is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="16" testNumber="18402"/>
			<description>If entry Size with type Integer in FileTrailer satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>SizeHasTypeInteger != true || (isSizeIndirect == false)</test>
			<error>
				<message>Entry Size with type Integer in FileTrailer is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_3" clause="14" testNumber="18403"/>
			<description>Entry Size with type Integer in FileTrailer shall satisfy possible value predicate: fn:Eval(@Size &gt; 0)</description>
			<test>SizeHasTypeInteger != true || SizeIntegerValue &gt; 0</test>
			<error>
				<message>Entry Size with type Integer in FileTrailer does not satisfy possible value predicate: fn:Eval(@Size &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_3" clause="1" testNumber="18560"/>
			<description>FilterCCITTFaxDecode shall not contain entries except BlackIs1, Blackls1, Columns, DamagedRowsBeforeError, EncodedByteAlign, EndOfBlock, EndOfLine, K, Rows</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackIs1' &amp;&amp; elem != 'Blackls1' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'DamagedRowsBeforeError' &amp;&amp; elem != 'EncodedByteAlign' &amp;&amp; elem != 'EndOfBlock' &amp;&amp; elem != 'EndOfLine' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Rows').length == 0</test>
			<error>
				<message>FilterCCITTFaxDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackIs1' &amp;&amp; elem != 'Blackls1' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'DamagedRowsBeforeError' &amp;&amp; elem != 'EncodedByteAlign' &amp;&amp; elem != 'EndOfBlock' &amp;&amp; elem != 'EndOfLine' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Rows').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18561"/>
			<description>Entry BlackIs1 in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsBlackIs1 == false || BlackIs1HasTypeBoolean == true</test>
			<error>
				<message>Entry BlackIs1 in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18562"/>
			<description>Entry Blackls1 in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsBlackls1 == false || Blackls1HasTypeBoolean == true</test>
			<error>
				<message>Entry Blackls1 in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18563"/>
			<description>Entry Columns in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_3" clause="14" testNumber="18564"/>
			<description>Entry Columns with type Integer in FilterCCITTFaxDecode shall satisfy possible value predicate: fn:Eval(@Columns &gt;= 0)</description>
			<test>ColumnsHasTypeInteger != true || ColumnsIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Columns with type Integer in FilterCCITTFaxDecode does not satisfy possible value predicate: fn:Eval(@Columns &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18565"/>
			<description>Entry DamagedRowsBeforeError in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsDamagedRowsBeforeError == false || DamagedRowsBeforeErrorHasTypeInteger == true</test>
			<error>
				<message>Entry DamagedRowsBeforeError in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_3" clause="14" testNumber="18566"/>
			<description>Entry DamagedRowsBeforeError with type Integer in FilterCCITTFaxDecode shall satisfy possible value predicate: fn:Eval(@DamagedRowsBeforeError &gt;= 0)</description>
			<test>DamagedRowsBeforeErrorHasTypeInteger != true || DamagedRowsBeforeErrorIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DamagedRowsBeforeError with type Integer in FilterCCITTFaxDecode does not satisfy possible value predicate: fn:Eval(@DamagedRowsBeforeError &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18567"/>
			<description>Entry EncodedByteAlign in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEncodedByteAlign == false || EncodedByteAlignHasTypeBoolean == true</test>
			<error>
				<message>Entry EncodedByteAlign in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18568"/>
			<description>Entry EndOfBlock in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEndOfBlock == false || EndOfBlockHasTypeBoolean == true</test>
			<error>
				<message>Entry EndOfBlock in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18569"/>
			<description>Entry EndOfLine in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEndOfLine == false || EndOfLineHasTypeBoolean == true</test>
			<error>
				<message>Entry EndOfLine in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18570"/>
			<description>Entry K in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsK == false || KHasTypeInteger == true</test>
			<error>
				<message>Entry K in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18571"/>
			<description>Entry Rows in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsRows == false || RowsHasTypeInteger == true</test>
			<error>
				<message>Entry Rows in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_3" clause="14" testNumber="18572"/>
			<description>Entry Rows with type Integer in FilterCCITTFaxDecode shall satisfy possible value predicate: fn:Eval(@Rows &gt;= 0)</description>
			<test>RowsHasTypeInteger != true || RowsIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Rows with type Integer in FilterCCITTFaxDecode does not satisfy possible value predicate: fn:Eval(@Rows &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_3" clause="1" testNumber="18667"/>
			<description>FilterDCTDecode shall not contain entries except ColorTransform</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorTransform').length == 0</test>
			<error>
				<message>FilterDCTDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorTransform').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18668"/>
			<description>Entry ColorTransform in FilterDCTDecode shall have type Integer</description>
			<test>containsColorTransform == false || ColorTransformHasTypeInteger == true</test>
			<error>
				<message>Entry ColorTransform in FilterDCTDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_3" clause="6" testNumber="18669"/>
			<description>Entry ColorTransform with type Integer in FilterDCTDecode shall have one of values: 0, 1</description>
			<test>ColorTransformHasTypeInteger != true || ColorTransformIntegerValue == 0 || ColorTransformIntegerValue == 1</test>
			<error>
				<message>Entry ColorTransform with type Integer in FilterDCTDecode has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorTransformIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_3" clause="1" testNumber="18693"/>
			<description>FilterFlateDecode shall not contain entries except BitsPerComponent, Colors, Columns, Predictor</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'Predictor').length == 0</test>
			<error>
				<message>FilterFlateDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'Predictor').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18694"/>
			<description>Entry BitsPerComponent in FilterFlateDecode shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in FilterFlateDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_3" clause="6" testNumber="18695"/>
			<description>Entry BitsPerComponent with type Integer in FilterFlateDecode shall have one of values: 1, 2, 4, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in FilterFlateDecode has incorrect value %2 instead of 1, 2, 4, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18696"/>
			<description>Entry Colors in FilterFlateDecode shall have type Integer</description>
			<test>containsColors == false || ColorsHasTypeInteger == true</test>
			<error>
				<message>Entry Colors in FilterFlateDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_3" clause="14" testNumber="18697"/>
			<description>Entry Colors with type Integer in FilterFlateDecode shall satisfy possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</description>
			<test>ColorsHasTypeInteger != true || (ColorsIntegerValue &gt;= 1) &amp;&amp; true</test>
			<error>
				<message>Entry Colors with type Integer in FilterFlateDecode does not satisfy possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18698"/>
			<description>Entry Columns in FilterFlateDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterFlateDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18699"/>
			<description>Entry Predictor in FilterFlateDecode shall have type Integer</description>
			<test>containsPredictor == false || PredictorHasTypeInteger == true</test>
			<error>
				<message>Entry Predictor in FilterFlateDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_3" clause="6" testNumber="18700"/>
			<description>Entry Predictor with type Integer in FilterFlateDecode shall have one of values: 11, 1, 12, 2, 13, 14, 15, 10</description>
			<test>PredictorHasTypeInteger != true || PredictorIntegerValue == 1 || PredictorIntegerValue == 2 || PredictorIntegerValue == 10 || PredictorIntegerValue == 11 || PredictorIntegerValue == 12 || PredictorIntegerValue == 13 || PredictorIntegerValue == 14 || PredictorIntegerValue == 15</test>
			<error>
				<message>Entry Predictor with type Integer in FilterFlateDecode has incorrect value %2 instead of 11, 1, 12, 2, 13, 14, 15, 10</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PredictorIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_3" clause="1" testNumber="18791"/>
			<description>FilterLZWDecode shall not contain entries except BitsPerComponent, Colors, Columns, EarlyChange, Predictor</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'EarlyChange' &amp;&amp; elem != 'Predictor').length == 0</test>
			<error>
				<message>FilterLZWDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'EarlyChange' &amp;&amp; elem != 'Predictor').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18792"/>
			<description>Entry BitsPerComponent in FilterLZWDecode shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_3" clause="6" testNumber="18793"/>
			<description>Entry BitsPerComponent with type Integer in FilterLZWDecode shall have one of values: 1, 2, 4, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in FilterLZWDecode has incorrect value %2 instead of 1, 2, 4, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18794"/>
			<description>Entry Colors in FilterLZWDecode shall have type Integer</description>
			<test>containsColors == false || ColorsHasTypeInteger == true</test>
			<error>
				<message>Entry Colors in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_3" clause="14" testNumber="18795"/>
			<description>Entry Colors with type Integer in FilterLZWDecode shall satisfy possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</description>
			<test>ColorsHasTypeInteger != true || (ColorsIntegerValue &gt;= 1) &amp;&amp; true</test>
			<error>
				<message>Entry Colors with type Integer in FilterLZWDecode does not satisfy possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18796"/>
			<description>Entry Columns in FilterLZWDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18797"/>
			<description>Entry EarlyChange in FilterLZWDecode shall have type Integer</description>
			<test>containsEarlyChange == false || EarlyChangeHasTypeInteger == true</test>
			<error>
				<message>Entry EarlyChange in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_3" clause="6" testNumber="18798"/>
			<description>Entry EarlyChange with type Integer in FilterLZWDecode shall have one of values: 0, 1</description>
			<test>EarlyChangeHasTypeInteger != true || EarlyChangeIntegerValue == 0 || EarlyChangeIntegerValue == 1</test>
			<error>
				<message>Entry EarlyChange with type Integer in FilterLZWDecode has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EarlyChangeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18799"/>
			<description>Entry Predictor in FilterLZWDecode shall have type Integer</description>
			<test>containsPredictor == false || PredictorHasTypeInteger == true</test>
			<error>
				<message>Entry Predictor in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_3" clause="6" testNumber="18800"/>
			<description>Entry Predictor with type Integer in FilterLZWDecode shall have one of values: 11, 1, 12, 2, 13, 14, 15, 10</description>
			<test>PredictorHasTypeInteger != true || PredictorIntegerValue == 1 || PredictorIntegerValue == 2 || PredictorIntegerValue == 10 || PredictorIntegerValue == 11 || PredictorIntegerValue == 12 || PredictorIntegerValue == 13 || PredictorIntegerValue == 14 || PredictorIntegerValue == 15</test>
			<error>
				<message>Entry Predictor with type Integer in FilterLZWDecode has incorrect value %2 instead of 11, 1, 12, 2, 13, 14, 15, 10</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PredictorIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="1" testNumber="18978"/>
			<description>FontCIDType0 shall not contain entries except BaseFont, CIDSystemInfo, CIDToGIDMap, DW, DW2, FontDescriptor, Subtype, ToUnicode, Type, W, W2</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2').length == 0</test>
			<error>
				<message>FontCIDType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18979"/>
			<description>Entry BaseFont in FontCIDType0 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="18980"/>
			<description>Entry BaseFont in FontCIDType0 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18981"/>
			<description>Entry CIDSystemInfo with type Dictionary in FontCIDType0 shall be object CIDSystemInfo</description>
			<test>CIDSystemInfoHasTypeDictionary != true || CIDSystemInfo_size == 1</test>
			<error>
				<message>Entry CIDSystemInfo with type Dictionary in FontCIDType0 is not object CIDSystemInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18982"/>
			<description>Entry CIDSystemInfo in FontCIDType0 shall have type Dictionary</description>
			<test>containsCIDSystemInfo == false || CIDSystemInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType0 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="18983"/>
			<description>Entry CIDSystemInfo in FontCIDType0 is required</description>
			<test>containsCIDSystemInfo == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18984"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType0 shall be object Stream</description>
			<test>CIDToGIDMapHasTypeStream != true || CIDToGIDMap_size == 1</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType0 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18985"/>
			<description>Entry CIDToGIDMap in FontCIDType0 shall have one of types: Stream, Name</description>
			<test>containsCIDToGIDMap == false || CIDToGIDMapHasTypeStream == true || CIDToGIDMapHasTypeName == true</test>
			<error>
				<message>Entry CIDToGIDMap in FontCIDType0 is not one of types: Stream, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="10" testNumber="18986"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType0 shall be indirect</description>
			<test>CIDToGIDMapHasTypeStream != true || isCIDToGIDMapIndirect == true</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="18987"/>
			<description>Entry CIDToGIDMap with type Name in FontCIDType0 shall have value Identity</description>
			<test>CIDToGIDMapHasTypeName != true || CIDToGIDMapNameValue == "Identity"</test>
			<error>
				<message>Entry CIDToGIDMap with type Name in FontCIDType0 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CIDToGIDMapNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18988"/>
			<description>Entry DW in FontCIDType0 shall have type Number</description>
			<test>containsDW == false || DWHasTypeNumber == true</test>
			<error>
				<message>Entry DW in FontCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18989"/>
			<description>Entry DW2 with type Array in FontCIDType0 shall be object ArrayOf_2Numbers</description>
			<test>DW2HasTypeArray != true || DW2_size == 1</test>
			<error>
				<message>Entry DW2 with type Array in FontCIDType0 is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18990"/>
			<description>Entry DW2 in FontCIDType0 shall have type Array</description>
			<test>containsDW2 == false || DW2HasTypeArray == true</test>
			<error>
				<message>Entry DW2 in FontCIDType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18991"/>
			<description>Entry FontDescriptor with type Dictionary in FontCIDType0 shall be object FontDescriptorCIDType0</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType0 is not object FontDescriptorCIDType0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18992"/>
			<description>Entry FontDescriptor in FontCIDType0 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType0 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="18993"/>
			<description>Entry FontDescriptor in FontCIDType0 is required</description>
			<test>containsFontDescriptor == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="12" testNumber="18994"/>
			<description>If entry FontDescriptor with type Dictionary in FontCIDType0 satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18995"/>
			<description>Entry Subtype in FontCIDType0 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="18996"/>
			<description>Entry Subtype in FontCIDType0 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="18997"/>
			<description>Entry Subtype with type Name in FontCIDType0 shall have value CIDFontType0</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "CIDFontType0"</test>
			<error>
				<message>Entry Subtype with type Name in FontCIDType0 has incorrect value %2 instead of CIDFontType0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="18998"/>
			<description>Entry ToUnicode with type Stream in FontCIDType0 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType0 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="18999"/>
			<description>Entry ToUnicode in FontCIDType0 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontCIDType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="10" testNumber="19000"/>
			<description>Entry ToUnicode with type Stream in FontCIDType0 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19001"/>
			<description>Entry Type in FontCIDType0 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19002"/>
			<description>Entry Type in FontCIDType0 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="19003"/>
			<description>Entry Type with type Name in FontCIDType0 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontCIDType0 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19004"/>
			<description>Entry W with type Array in FontCIDType0 shall be object ArrayOfCIDGlyphMetricsW</description>
			<test>WHasTypeArray != true || W_size == 1</test>
			<error>
				<message>Entry W with type Array in FontCIDType0 is not object ArrayOfCIDGlyphMetricsW</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19005"/>
			<description>Entry W in FontCIDType0 shall have type Array</description>
			<test>containsW == false || WHasTypeArray == true</test>
			<error>
				<message>Entry W in FontCIDType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19006"/>
			<description>Entry W2 with type Array in FontCIDType0 shall be object ArrayOfCIDGlyphMetricsW2</description>
			<test>W2HasTypeArray != true || W2_size == 1</test>
			<error>
				<message>Entry W2 with type Array in FontCIDType0 is not object ArrayOfCIDGlyphMetricsW2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19007"/>
			<description>Entry W2 in FontCIDType0 shall have type Array</description>
			<test>containsW2 == false || W2HasTypeArray == true</test>
			<error>
				<message>Entry W2 in FontCIDType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="1" testNumber="19189"/>
			<description>FontCIDType2 shall not contain entries except BaseFont, CIDSystemInfo, CIDToGIDMap, DW, DW2, FontDescriptor, Subtype, ToUnicode, Type, W, W2</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2').length == 0</test>
			<error>
				<message>FontCIDType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19190"/>
			<description>Entry BaseFont in FontCIDType2 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19191"/>
			<description>Entry BaseFont in FontCIDType2 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19192"/>
			<description>Entry CIDSystemInfo with type Dictionary in FontCIDType2 shall be object CIDSystemInfo</description>
			<test>CIDSystemInfoHasTypeDictionary != true || CIDSystemInfo_size == 1</test>
			<error>
				<message>Entry CIDSystemInfo with type Dictionary in FontCIDType2 is not object CIDSystemInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19193"/>
			<description>Entry CIDSystemInfo in FontCIDType2 shall have type Dictionary</description>
			<test>containsCIDSystemInfo == false || CIDSystemInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19194"/>
			<description>Entry CIDSystemInfo in FontCIDType2 is required</description>
			<test>containsCIDSystemInfo == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19195"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType2 shall be object Stream</description>
			<test>CIDToGIDMapHasTypeStream != true || CIDToGIDMap_size == 1</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType2 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19196"/>
			<description>Entry CIDToGIDMap in FontCIDType2 shall have one of types: Stream, Name</description>
			<test>containsCIDToGIDMap == false || CIDToGIDMapHasTypeStream == true || CIDToGIDMapHasTypeName == true</test>
			<error>
				<message>Entry CIDToGIDMap in FontCIDType2 is not one of types: Stream, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="11" testNumber="19197"/>
			<description>Entry CIDToGIDMap in FontCIDType2 is required, when fn:IsRequired(fn:SinceVersion(2.0) &amp;&amp; fn:IsPresent(FontDescriptor::FontFile2))</description>
			<test>(containsCIDToGIDMap == true || (false &amp;&amp; (containsFontDescriptorFontFile2 == true)) == false)</test>
			<error>
				<message>Entry CIDToGIDMap in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="10" testNumber="19198"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType2 shall be indirect</description>
			<test>CIDToGIDMapHasTypeStream != true || isCIDToGIDMapIndirect == true</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="6" testNumber="19199"/>
			<description>Entry CIDToGIDMap with type Name in FontCIDType2 shall have value Identity</description>
			<test>CIDToGIDMapHasTypeName != true || CIDToGIDMapNameValue == "Identity"</test>
			<error>
				<message>Entry CIDToGIDMap with type Name in FontCIDType2 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CIDToGIDMapNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19200"/>
			<description>Entry DW in FontCIDType2 shall have type Number</description>
			<test>containsDW == false || DWHasTypeNumber == true</test>
			<error>
				<message>Entry DW in FontCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19201"/>
			<description>Entry DW2 with type Array in FontCIDType2 shall be object ArrayOf_2Numbers</description>
			<test>DW2HasTypeArray != true || DW2_size == 1</test>
			<error>
				<message>Entry DW2 with type Array in FontCIDType2 is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19202"/>
			<description>Entry DW2 in FontCIDType2 shall have type Array</description>
			<test>containsDW2 == false || DW2HasTypeArray == true</test>
			<error>
				<message>Entry DW2 in FontCIDType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19203"/>
			<description>Entry FontDescriptor with type Dictionary in FontCIDType2 shall be object FontDescriptorCIDType2</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType2 is not object FontDescriptorCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19204"/>
			<description>Entry FontDescriptor in FontCIDType2 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19205"/>
			<description>Entry FontDescriptor in FontCIDType2 is required</description>
			<test>containsFontDescriptor == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="12" testNumber="19206"/>
			<description>If entry FontDescriptor with type Dictionary in FontCIDType2 satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19207"/>
			<description>Entry Subtype in FontCIDType2 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19208"/>
			<description>Entry Subtype in FontCIDType2 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="6" testNumber="19209"/>
			<description>Entry Subtype with type Name in FontCIDType2 shall have value CIDFontType2</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "CIDFontType2"</test>
			<error>
				<message>Entry Subtype with type Name in FontCIDType2 has incorrect value %2 instead of CIDFontType2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19210"/>
			<description>Entry ToUnicode with type Stream in FontCIDType2 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType2 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19211"/>
			<description>Entry ToUnicode in FontCIDType2 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontCIDType2 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="10" testNumber="19212"/>
			<description>Entry ToUnicode with type Stream in FontCIDType2 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19213"/>
			<description>Entry Type in FontCIDType2 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19214"/>
			<description>Entry Type in FontCIDType2 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="6" testNumber="19215"/>
			<description>Entry Type with type Name in FontCIDType2 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontCIDType2 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19216"/>
			<description>Entry W with type Array in FontCIDType2 shall be object ArrayOfCIDGlyphMetricsW</description>
			<test>WHasTypeArray != true || W_size == 1</test>
			<error>
				<message>Entry W with type Array in FontCIDType2 is not object ArrayOfCIDGlyphMetricsW</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19217"/>
			<description>Entry W in FontCIDType2 shall have type Array</description>
			<test>containsW == false || WHasTypeArray == true</test>
			<error>
				<message>Entry W in FontCIDType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19218"/>
			<description>Entry W2 with type Array in FontCIDType2 shall be object ArrayOfCIDGlyphMetricsW2</description>
			<test>W2HasTypeArray != true || W2_size == 1</test>
			<error>
				<message>Entry W2 with type Array in FontCIDType2 is not object ArrayOfCIDGlyphMetricsW2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19219"/>
			<description>Entry W2 in FontCIDType2 shall have type Array</description>
			<test>containsW2 == false || W2HasTypeArray == true</test>
			<error>
				<message>Entry W2 in FontCIDType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="1" testNumber="19418"/>
			<description>FontDescriptorCIDType0 shall not contain entries except Ascent, AvgWidth, CIDSet, CapHeight, Descent, FD, Flags, FontBBox, FontFile, FontFile3, FontName, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Style, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>FontDescriptorCIDType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19419"/>
			<description>Entry Ascent in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19420"/>
			<description>Entry Ascent in FontDescriptorCIDType0 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19421"/>
			<description>Entry AvgWidth in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19422"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType0 shall be object Stream</description>
			<test>CIDSetHasTypeStream != true || CIDSet_size == 1</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType0 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19423"/>
			<description>Entry CIDSet in FontDescriptorCIDType0 shall have type Stream</description>
			<test>containsCIDSet == false || CIDSetHasTypeStream == true</test>
			<error>
				<message>Entry CIDSet in FontDescriptorCIDType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="10" testNumber="19424"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType0 shall be indirect</description>
			<test>CIDSetHasTypeStream != true || isCIDSetIndirect == true</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19425"/>
			<description>Entry CapHeight in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19426"/>
			<description>Entry Descent in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19427"/>
			<description>Entry Descent in FontDescriptorCIDType0 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="14" testNumber="19428"/>
			<description>Entry Descent with type Number in FontDescriptorCIDType0 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorCIDType0 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19429"/>
			<description>Entry FD with type Dictionary in FontDescriptorCIDType0 shall be object FDDict</description>
			<test>FDHasTypeDictionary != true || FD_size == 1</test>
			<error>
				<message>Entry FD with type Dictionary in FontDescriptorCIDType0 is not object FDDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19430"/>
			<description>Entry FD in FontDescriptorCIDType0 shall have type Dictionary</description>
			<test>containsFD == false || FDHasTypeDictionary == true</test>
			<error>
				<message>Entry FD in FontDescriptorCIDType0 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19431"/>
			<description>Entry Flags in FontDescriptorCIDType0 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType0 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19432"/>
			<description>Entry Flags in FontDescriptorCIDType0 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="19433"/>
			<description>Entry Flags with type Bitmask in FontDescriptorCIDType0 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorCIDType0 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19434"/>
			<description>Entry FontBBox in FontDescriptorCIDType0 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType0 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19435"/>
			<description>Entry FontBBox in FontDescriptorCIDType0 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19436"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType0 shall be object FontFile</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType0 is not object FontFile</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19437"/>
			<description>Entry FontFile in FontDescriptorCIDType0 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorCIDType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="10" testNumber="19438"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType0 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="19439"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType0 shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile3)))</description>
			<test>FontFileHasTypeStream != true || (((containsFontFile3 == true)) != true)</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType0 does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile3)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19440"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorCIDType0 shall be object FontFile3CIDType0</description>
			<test>FontFile3HasTypeStream != true || FontFile3_size == 1</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorCIDType0 is not object FontFile3CIDType0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19441"/>
			<description>Entry FontFile3 in FontDescriptorCIDType0 shall have type Stream</description>
			<test>containsFontFile3 == false || FontFile3HasTypeStream == true</test>
			<error>
				<message>Entry FontFile3 in FontDescriptorCIDType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="10" testNumber="19442"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorCIDType0 shall be indirect</description>
			<test>FontFile3HasTypeStream != true || isFontFile3Indirect == true</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="19443"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorCIDType0 shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</description>
			<test>FontFile3HasTypeStream != true || (((containsFontFile == true)) != true)</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorCIDType0 does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19444"/>
			<description>Entry FontName in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19445"/>
			<description>Entry FontName in FontDescriptorCIDType0 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="19446"/>
			<description>Entry FontName with type Name in FontDescriptorCIDType0 shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorCIDType0 does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19447"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19448"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType0 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19449"/>
			<description>Entry Leading in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19450"/>
			<description>Entry MaxWidth in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19451"/>
			<description>Entry MissingWidth in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19452"/>
			<description>Entry StemH in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19453"/>
			<description>Entry StemV in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19454"/>
			<description>Entry StemV in FontDescriptorCIDType0 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19455"/>
			<description>Entry Style with type Dictionary in FontDescriptorCIDType0 shall be object StyleDict</description>
			<test>StyleHasTypeDictionary != true || Style_size == 1</test>
			<error>
				<message>Entry Style with type Dictionary in FontDescriptorCIDType0 is not object StyleDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19456"/>
			<description>Entry Style in FontDescriptorCIDType0 shall have type Dictionary</description>
			<test>containsStyle == false || StyleHasTypeDictionary == true</test>
			<error>
				<message>Entry Style in FontDescriptorCIDType0 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19457"/>
			<description>Entry Type in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19458"/>
			<description>Entry Type in FontDescriptorCIDType0 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="19459"/>
			<description>Entry Type with type Name in FontDescriptorCIDType0 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorCIDType0 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19460"/>
			<description>Entry XHeight in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="1" testNumber="19743"/>
			<description>FontDescriptorCIDType2 shall not contain entries except Ascent, AvgWidth, CIDSet, CapHeight, Descent, FD, Flags, FontBBox, FontFile, FontFile2, FontName, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Style, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>FontDescriptorCIDType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19744"/>
			<description>Entry Ascent in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19745"/>
			<description>Entry Ascent in FontDescriptorCIDType2 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19746"/>
			<description>Entry AvgWidth in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19747"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType2 shall be object Stream</description>
			<test>CIDSetHasTypeStream != true || CIDSet_size == 1</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType2 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19748"/>
			<description>Entry CIDSet in FontDescriptorCIDType2 shall have type Stream</description>
			<test>containsCIDSet == false || CIDSetHasTypeStream == true</test>
			<error>
				<message>Entry CIDSet in FontDescriptorCIDType2 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="10" testNumber="19749"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType2 shall be indirect</description>
			<test>CIDSetHasTypeStream != true || isCIDSetIndirect == true</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19750"/>
			<description>Entry CapHeight in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19751"/>
			<description>Entry Descent in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19752"/>
			<description>Entry Descent in FontDescriptorCIDType2 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="14" testNumber="19753"/>
			<description>Entry Descent with type Number in FontDescriptorCIDType2 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorCIDType2 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19754"/>
			<description>Entry FD with type Dictionary in FontDescriptorCIDType2 shall be object FDDict</description>
			<test>FDHasTypeDictionary != true || FD_size == 1</test>
			<error>
				<message>Entry FD with type Dictionary in FontDescriptorCIDType2 is not object FDDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19755"/>
			<description>Entry FD in FontDescriptorCIDType2 shall have type Dictionary</description>
			<test>containsFD == false || FDHasTypeDictionary == true</test>
			<error>
				<message>Entry FD in FontDescriptorCIDType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19756"/>
			<description>Entry Flags in FontDescriptorCIDType2 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType2 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19757"/>
			<description>Entry Flags in FontDescriptorCIDType2 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="19758"/>
			<description>Entry Flags with type Bitmask in FontDescriptorCIDType2 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorCIDType2 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19759"/>
			<description>Entry FontBBox in FontDescriptorCIDType2 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType2 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19760"/>
			<description>Entry FontBBox in FontDescriptorCIDType2 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19761"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType2 shall be object FontFile</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType2 is not object FontFile</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19762"/>
			<description>Entry FontFile in FontDescriptorCIDType2 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorCIDType2 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="10" testNumber="19763"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType2 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="19764"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType2 shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)))</description>
			<test>FontFileHasTypeStream != true || (((containsFontFile2 == true)) != true)</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType2 does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19765"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorCIDType2 shall be object FontFile2</description>
			<test>FontFile2HasTypeStream != true || FontFile2_size == 1</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorCIDType2 is not object FontFile2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19766"/>
			<description>Entry FontFile2 in FontDescriptorCIDType2 shall have type Stream</description>
			<test>containsFontFile2 == false || FontFile2HasTypeStream == true</test>
			<error>
				<message>Entry FontFile2 in FontDescriptorCIDType2 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="10" testNumber="19767"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorCIDType2 shall be indirect</description>
			<test>FontFile2HasTypeStream != true || isFontFile2Indirect == true</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="19768"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorCIDType2 shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</description>
			<test>FontFile2HasTypeStream != true || (((containsFontFile == true)) != true)</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorCIDType2 does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19769"/>
			<description>Entry FontName in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19770"/>
			<description>Entry FontName in FontDescriptorCIDType2 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="19771"/>
			<description>Entry FontName with type Name in FontDescriptorCIDType2 shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorCIDType2 does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19772"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19773"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType2 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19774"/>
			<description>Entry Leading in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19775"/>
			<description>Entry MaxWidth in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19776"/>
			<description>Entry MissingWidth in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19777"/>
			<description>Entry StemH in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19778"/>
			<description>Entry StemV in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19779"/>
			<description>Entry StemV in FontDescriptorCIDType2 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="19780"/>
			<description>Entry Style with type Dictionary in FontDescriptorCIDType2 shall be object StyleDict</description>
			<test>StyleHasTypeDictionary != true || Style_size == 1</test>
			<error>
				<message>Entry Style with type Dictionary in FontDescriptorCIDType2 is not object StyleDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19781"/>
			<description>Entry Style in FontDescriptorCIDType2 shall have type Dictionary</description>
			<test>containsStyle == false || StyleHasTypeDictionary == true</test>
			<error>
				<message>Entry Style in FontDescriptorCIDType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19782"/>
			<description>Entry Type in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="19783"/>
			<description>Entry Type in FontDescriptorCIDType2 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="6" testNumber="19784"/>
			<description>Entry Type with type Name in FontDescriptorCIDType2 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorCIDType2 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="19785"/>
			<description>Entry XHeight in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="1" testNumber="20121"/>
			<description>FontDescriptorTrueType shall not contain entries except Ascent, AvgWidth, CapHeight, Descent, Flags, FontBBox, FontFile, FontFile2, FontName, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>FontDescriptorTrueType contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20122"/>
			<description>Entry Ascent in FontDescriptorTrueType shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20123"/>
			<description>Entry Ascent in FontDescriptorTrueType is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20124"/>
			<description>Entry AvgWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20125"/>
			<description>Entry CapHeight in FontDescriptorTrueType shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20126"/>
			<description>Entry Descent in FontDescriptorTrueType shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20127"/>
			<description>Entry Descent in FontDescriptorTrueType is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="14" testNumber="20128"/>
			<description>Entry Descent with type Number in FontDescriptorTrueType shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorTrueType does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20129"/>
			<description>Entry Flags in FontDescriptorTrueType shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorTrueType is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20130"/>
			<description>Entry Flags in FontDescriptorTrueType is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20131"/>
			<description>Entry Flags with type Bitmask in FontDescriptorTrueType shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorTrueType does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20132"/>
			<description>Entry FontBBox in FontDescriptorTrueType shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorTrueType is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20133"/>
			<description>Entry FontBBox in FontDescriptorTrueType is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="17" testNumber="20134"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall be object FontFileType1</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType is not object FontFileType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20135"/>
			<description>Entry FontFile in FontDescriptorTrueType shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorTrueType is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="10" testNumber="20136"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20137"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)))</description>
			<test>FontFileHasTypeStream != true || (((containsFontFile2 == true)) != true)</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="17" testNumber="20138"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorTrueType shall be object FontFile2</description>
			<test>FontFile2HasTypeStream != true || FontFile2_size == 1</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorTrueType is not object FontFile2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20139"/>
			<description>Entry FontFile2 in FontDescriptorTrueType shall have type Stream</description>
			<test>containsFontFile2 == false || FontFile2HasTypeStream == true</test>
			<error>
				<message>Entry FontFile2 in FontDescriptorTrueType is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="10" testNumber="20140"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorTrueType shall be indirect</description>
			<test>FontFile2HasTypeStream != true || isFontFile2Indirect == true</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20141"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorTrueType shall satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</description>
			<test>FontFile2HasTypeStream != true || (((containsFontFile == true)) != true)</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorTrueType does not satisfy special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20142"/>
			<description>Entry FontName in FontDescriptorTrueType shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20143"/>
			<description>Entry FontName in FontDescriptorTrueType is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20144"/>
			<description>Entry FontName with type Name in FontDescriptorTrueType shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorTrueType does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20145"/>
			<description>Entry ItalicAngle in FontDescriptorTrueType shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20146"/>
			<description>Entry ItalicAngle in FontDescriptorTrueType is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20147"/>
			<description>Entry Leading in FontDescriptorTrueType shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20148"/>
			<description>Entry MaxWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20149"/>
			<description>Entry MissingWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20150"/>
			<description>Entry StemH in FontDescriptorTrueType shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20151"/>
			<description>Entry StemV in FontDescriptorTrueType shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20152"/>
			<description>Entry StemV in FontDescriptorTrueType is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20153"/>
			<description>Entry Type in FontDescriptorTrueType shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20154"/>
			<description>Entry Type in FontDescriptorTrueType is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="6" testNumber="20155"/>
			<description>Entry Type with type Name in FontDescriptorTrueType shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorTrueType has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20156"/>
			<description>Entry XHeight in FontDescriptorTrueType shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="1" testNumber="20455"/>
			<description>FontDescriptorType1 shall not contain entries except Ascent, AvgWidth, CapHeight, CharSet, Descent, Flags, FontBBox, FontFile, FontFile3, FontName, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>FontDescriptorType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20456"/>
			<description>Entry Ascent in FontDescriptorType1 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20457"/>
			<description>Entry Ascent in FontDescriptorType1 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20458"/>
			<description>Entry AvgWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20459"/>
			<description>Entry CapHeight in FontDescriptorType1 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20460"/>
			<description>Entry CharSet in FontDescriptorType1 shall have one of types: StringAscii, StringByte</description>
			<test>containsCharSet == false || CharSetHasTypeStringAscii == true || CharSetHasTypeStringByte == true</test>
			<error>
				<message>Entry CharSet in FontDescriptorType1 is not one of types: StringAscii, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20461"/>
			<description>Entry Descent in FontDescriptorType1 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20462"/>
			<description>Entry Descent in FontDescriptorType1 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="14" testNumber="20463"/>
			<description>Entry Descent with type Number in FontDescriptorType1 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorType1 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20464"/>
			<description>Entry Flags in FontDescriptorType1 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType1 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20465"/>
			<description>Entry Flags in FontDescriptorType1 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20466"/>
			<description>Entry Flags with type Bitmask in FontDescriptorType1 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorType1 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20467"/>
			<description>Entry FontBBox in FontDescriptorType1 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20468"/>
			<description>Entry FontBBox in FontDescriptorType1 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="20469"/>
			<description>Entry FontFile with type Stream in FontDescriptorType1 shall be object FontFileType1</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorType1 is not object FontFileType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20470"/>
			<description>Entry FontFile in FontDescriptorType1 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorType1 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="10" testNumber="20471"/>
			<description>Entry FontFile with type Stream in FontDescriptorType1 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="20472"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorType1 shall be object FontFile3Type1</description>
			<test>FontFile3HasTypeStream != true || FontFile3_size == 1</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorType1 is not object FontFile3Type1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20473"/>
			<description>Entry FontFile3 in FontDescriptorType1 shall have type Stream</description>
			<test>containsFontFile3 == false || FontFile3HasTypeStream == true</test>
			<error>
				<message>Entry FontFile3 in FontDescriptorType1 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="10" testNumber="20474"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorType1 shall be indirect</description>
			<test>FontFile3HasTypeStream != true || isFontFile3Indirect == true</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20475"/>
			<description>Entry FontName in FontDescriptorType1 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20476"/>
			<description>Entry FontName in FontDescriptorType1 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20477"/>
			<description>Entry FontName with type Name in FontDescriptorType1 shall satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorType1 does not satisfy special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20478"/>
			<description>Entry ItalicAngle in FontDescriptorType1 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20479"/>
			<description>Entry ItalicAngle in FontDescriptorType1 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20480"/>
			<description>Entry Leading in FontDescriptorType1 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20481"/>
			<description>Entry MaxWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20482"/>
			<description>Entry MissingWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20483"/>
			<description>Entry StemH in FontDescriptorType1 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20484"/>
			<description>Entry StemV in FontDescriptorType1 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20485"/>
			<description>Entry StemV in FontDescriptorType1 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20486"/>
			<description>Entry Type in FontDescriptorType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20487"/>
			<description>Entry Type in FontDescriptorType1 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="20488"/>
			<description>Entry Type with type Name in FontDescriptorType1 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorType1 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20489"/>
			<description>Entry XHeight in FontDescriptorType1 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="1" testNumber="20754"/>
			<description>FontDescriptorType3 shall not contain entries except Ascent, AvgWidth, CapHeight, Descent, Flags, FontBBox, FontName, ItalicAngle, Leading, MaxWidth, MissingWidth, StemH, StemV, Type, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>FontDescriptorType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20755"/>
			<description>Entry Ascent in FontDescriptorType3 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20756"/>
			<description>Entry AvgWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20757"/>
			<description>Entry CapHeight in FontDescriptorType3 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20758"/>
			<description>Entry Descent in FontDescriptorType3 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="14" testNumber="20759"/>
			<description>Entry Descent with type Number in FontDescriptorType3 shall satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorType3 does not satisfy possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20760"/>
			<description>Entry Flags in FontDescriptorType3 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType3 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20761"/>
			<description>Entry Flags in FontDescriptorType3 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20762"/>
			<description>Entry Flags with type Bitmask in FontDescriptorType3 shall satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorType3 does not satisfy special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20763"/>
			<description>Entry FontBBox in FontDescriptorType3 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType3 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20764"/>
			<description>Entry FontName in FontDescriptorType3 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20765"/>
			<description>Entry FontName with type Name in FontDescriptorType3 shall satisfy special case: fn:Eval(@FontName == parent::@Name)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentNameNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorType3 does not satisfy special case: fn:Eval(@FontName == parent::@Name)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20766"/>
			<description>Entry ItalicAngle in FontDescriptorType3 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20767"/>
			<description>Entry ItalicAngle in FontDescriptorType3 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20768"/>
			<description>Entry Leading in FontDescriptorType3 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20769"/>
			<description>Entry MaxWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20770"/>
			<description>Entry MissingWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20771"/>
			<description>Entry StemH in FontDescriptorType3 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20772"/>
			<description>Entry StemV in FontDescriptorType3 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20773"/>
			<description>Entry Type in FontDescriptorType3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20774"/>
			<description>Entry Type in FontDescriptorType3 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="6" testNumber="20775"/>
			<description>Entry Type with type Name in FontDescriptorType3 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorType3 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20776"/>
			<description>Entry XHeight in FontDescriptorType3 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="1" testNumber="20921"/>
			<description>FontFile shall not contain entries except DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>FontFile contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="17" testNumber="20922"/>
			<description>Entry DecodeParms with type Array in FontFile shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="17" testNumber="20923"/>
			<description>Entry DecodeParms with type Dictionary in FontFile shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20924"/>
			<description>Entry DecodeParms in FontFile shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20925"/>
			<description>Entry DecodeParms with type Array in FontFile shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="17" testNumber="20926"/>
			<description>Entry F with type Dictionary in FontFile shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFile is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20927"/>
			<description>Entry F in FontFile shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FontFile is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="17" testNumber="20928"/>
			<description>Entry FDecodeParms with type Array in FontFile shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="17" testNumber="20929"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20930"/>
			<description>Entry FDecodeParms in FontFile shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20931"/>
			<description>Entry FDecodeParms with type Array in FontFile shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="17" testNumber="20932"/>
			<description>Entry FFilter with type Array in FontFile shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFile is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20933"/>
			<description>Entry FFilter in FontFile shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFile is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20934"/>
			<description>Entry FFilter with type Array in FontFile shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="6" testNumber="20935"/>
			<description>Entry FFilter with type Name in FontFile shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="17" testNumber="20936"/>
			<description>Entry Filter with type Array in FontFile shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFile is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20937"/>
			<description>Entry Filter in FontFile shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFile is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20938"/>
			<description>Entry Filter with type Array in FontFile shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="6" testNumber="20939"/>
			<description>Entry Filter with type Name in FontFile shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in FontFile has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20940"/>
			<description>Entry Length in FontFile shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="7" testNumber="20941"/>
			<description>Entry Length in FontFile is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20942"/>
			<description>Entry Length1 in FontFile shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20943"/>
			<description>Entry Length1 with type Integer in FontFile shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20944"/>
			<description>Entry Length2 in FontFile shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20945"/>
			<description>Entry Length2 with type Integer in FontFile shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20946"/>
			<description>Entry Length3 in FontFile shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="9" testNumber="20947"/>
			<description>Entry Length3 with type Integer in FontFile shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="8" testNumber="20948"/>
			<description>Entry Subtype in FontFile shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_3" clause="6" testNumber="20949"/>
			<description>Entry Subtype with type Name in FontFile shall have one of values: OpenType, CIDFontType0C, Type1C</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1C" || SubtypeNameValue == "CIDFontType0C" || SubtypeNameValue == "OpenType"</test>
			<error>
				<message>Entry Subtype with type Name in FontFile has incorrect value %2 instead of OpenType, CIDFontType0C, Type1C</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="1" testNumber="21132"/>
			<description>FontFile2 shall not contain entries except DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>FontFile2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21133"/>
			<description>Entry DecodeParms with type Array in FontFile2 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile2 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21134"/>
			<description>Entry DecodeParms with type Dictionary in FontFile2 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile2 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21135"/>
			<description>Entry DecodeParms in FontFile2 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile2 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21136"/>
			<description>Entry DecodeParms with type Array in FontFile2 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile2 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21137"/>
			<description>Entry F with type Dictionary in FontFile2 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFile2 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21138"/>
			<description>Entry F in FontFile2 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FontFile2 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21139"/>
			<description>Entry FDecodeParms with type Array in FontFile2 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile2 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21140"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile2 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile2 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21141"/>
			<description>Entry FDecodeParms in FontFile2 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile2 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21142"/>
			<description>Entry FDecodeParms with type Array in FontFile2 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile2 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21143"/>
			<description>Entry FFilter with type Array in FontFile2 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFile2 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21144"/>
			<description>Entry FFilter in FontFile2 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFile2 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21145"/>
			<description>Entry FFilter with type Array in FontFile2 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile2 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="6" testNumber="21146"/>
			<description>Entry FFilter with type Name in FontFile2 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile2 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21147"/>
			<description>Entry Filter with type Array in FontFile2 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFile2 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21148"/>
			<description>Entry Filter in FontFile2 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFile2 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21149"/>
			<description>Entry Filter with type Array in FontFile2 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile2 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="6" testNumber="21150"/>
			<description>Entry Filter with type Name in FontFile2 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in FontFile2 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21151"/>
			<description>Entry Length in FontFile2 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="21152"/>
			<description>Entry Length in FontFile2 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21153"/>
			<description>Entry Length1 in FontFile2 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="11" testNumber="21154"/>
			<description>Entry Length1 in FontFile2 is required, when fn:IsRequired(parent::parent::@Subtype== TrueType)</description>
			<test>(containsLength1 == true || (parentparentSubtypeNameValue == "TrueType") == false)</test>
			<error>
				<message>Entry Length1 in FontFile2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21155"/>
			<description>Entry Length1 with type Integer in FontFile2 shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile2 does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21156"/>
			<description>Entry Length2 in FontFile2 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21157"/>
			<description>Entry Length2 with type Integer in FontFile2 shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile2 does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21158"/>
			<description>Entry Length3 in FontFile2 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21159"/>
			<description>Entry Length3 with type Integer in FontFile2 shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile2 does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21160"/>
			<description>Entry Subtype in FontFile2 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="1" testNumber="21343"/>
			<description>FontFile3CIDType0 shall not contain entries except DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>FontFile3CIDType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21344"/>
			<description>Entry DecodeParms with type Array in FontFile3CIDType0 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3CIDType0 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21345"/>
			<description>Entry DecodeParms with type Dictionary in FontFile3CIDType0 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile3CIDType0 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21346"/>
			<description>Entry DecodeParms in FontFile3CIDType0 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile3CIDType0 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21347"/>
			<description>Entry DecodeParms with type Array in FontFile3CIDType0 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3CIDType0 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21348"/>
			<description>Entry F with type Dictionary in FontFile3CIDType0 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFile3CIDType0 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21349"/>
			<description>Entry F in FontFile3CIDType0 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FontFile3CIDType0 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21350"/>
			<description>Entry FDecodeParms with type Array in FontFile3CIDType0 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3CIDType0 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21351"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile3CIDType0 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile3CIDType0 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21352"/>
			<description>Entry FDecodeParms in FontFile3CIDType0 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile3CIDType0 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21353"/>
			<description>Entry FDecodeParms with type Array in FontFile3CIDType0 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3CIDType0 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21354"/>
			<description>Entry FFilter with type Array in FontFile3CIDType0 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3CIDType0 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21355"/>
			<description>Entry FFilter in FontFile3CIDType0 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFile3CIDType0 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21356"/>
			<description>Entry FFilter with type Array in FontFile3CIDType0 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3CIDType0 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="21357"/>
			<description>Entry FFilter with type Name in FontFile3CIDType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile3CIDType0 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21358"/>
			<description>Entry Filter with type Array in FontFile3CIDType0 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFile3CIDType0 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21359"/>
			<description>Entry Filter in FontFile3CIDType0 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFile3CIDType0 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21360"/>
			<description>Entry Filter with type Array in FontFile3CIDType0 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile3CIDType0 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="21361"/>
			<description>Entry Filter with type Name in FontFile3CIDType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in FontFile3CIDType0 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21362"/>
			<description>Entry Length in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="21363"/>
			<description>Entry Length in FontFile3CIDType0 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile3CIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21364"/>
			<description>Entry Length1 in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21365"/>
			<description>Entry Length1 with type Integer in FontFile3CIDType0 shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile3CIDType0 does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21366"/>
			<description>Entry Length2 in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21367"/>
			<description>Entry Length2 with type Integer in FontFile3CIDType0 shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile3CIDType0 does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21368"/>
			<description>Entry Length3 in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21369"/>
			<description>Entry Length3 with type Integer in FontFile3CIDType0 shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile3CIDType0 does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21370"/>
			<description>Entry Subtype in FontFile3CIDType0 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile3CIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="21371"/>
			<description>Entry Subtype with type Name in FontFile3CIDType0 shall have value CIDFontType0C</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "CIDFontType0C"</test>
			<error>
				<message>Entry Subtype with type Name in FontFile3CIDType0 has incorrect value %2 instead of CIDFontType0C</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="1" testNumber="21535"/>
			<description>FontFile3Type1 shall not contain entries except DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>FontFile3Type1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21536"/>
			<description>Entry DecodeParms with type Array in FontFile3Type1 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3Type1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21537"/>
			<description>Entry DecodeParms with type Dictionary in FontFile3Type1 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile3Type1 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21538"/>
			<description>Entry DecodeParms in FontFile3Type1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile3Type1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21539"/>
			<description>Entry DecodeParms with type Array in FontFile3Type1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3Type1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21540"/>
			<description>Entry F with type Dictionary in FontFile3Type1 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFile3Type1 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21541"/>
			<description>Entry F in FontFile3Type1 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FontFile3Type1 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21542"/>
			<description>Entry FDecodeParms with type Array in FontFile3Type1 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3Type1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21543"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile3Type1 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile3Type1 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21544"/>
			<description>Entry FDecodeParms in FontFile3Type1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile3Type1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21545"/>
			<description>Entry FDecodeParms with type Array in FontFile3Type1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3Type1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21546"/>
			<description>Entry FFilter with type Array in FontFile3Type1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3Type1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21547"/>
			<description>Entry FFilter in FontFile3Type1 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFile3Type1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21548"/>
			<description>Entry FFilter with type Array in FontFile3Type1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3Type1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="21549"/>
			<description>Entry FFilter with type Name in FontFile3Type1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile3Type1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21550"/>
			<description>Entry Filter with type Array in FontFile3Type1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFile3Type1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21551"/>
			<description>Entry Filter in FontFile3Type1 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFile3Type1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21552"/>
			<description>Entry Filter with type Array in FontFile3Type1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile3Type1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="21553"/>
			<description>Entry Filter with type Name in FontFile3Type1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in FontFile3Type1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21554"/>
			<description>Entry Length in FontFile3Type1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="21555"/>
			<description>Entry Length in FontFile3Type1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile3Type1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21556"/>
			<description>Entry Length1 in FontFile3Type1 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21557"/>
			<description>Entry Length1 with type Integer in FontFile3Type1 shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile3Type1 does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21558"/>
			<description>Entry Length2 in FontFile3Type1 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21559"/>
			<description>Entry Length2 with type Integer in FontFile3Type1 shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile3Type1 does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21560"/>
			<description>Entry Length3 in FontFile3Type1 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21561"/>
			<description>Entry Length3 with type Integer in FontFile3Type1 shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile3Type1 does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21562"/>
			<description>Entry Subtype in FontFile3Type1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile3Type1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="21563"/>
			<description>Entry Subtype in FontFile3Type1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontFile3Type1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="21564"/>
			<description>Entry Subtype with type Name in FontFile3Type1 shall have one of values: OpenType, CIDFontType0C, Type1C</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1C" || SubtypeNameValue == "CIDFontType0C" || SubtypeNameValue == "OpenType"</test>
			<error>
				<message>Entry Subtype with type Name in FontFile3Type1 has incorrect value %2 instead of OpenType, CIDFontType0C, Type1C</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="1" testNumber="21756"/>
			<description>FontFileType1 shall not contain entries except DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Length1, Length2, Length3, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>FontFileType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21757"/>
			<description>Entry DecodeParms with type Array in FontFileType1 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFileType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21758"/>
			<description>Entry DecodeParms with type Dictionary in FontFileType1 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFileType1 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21759"/>
			<description>Entry DecodeParms in FontFileType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFileType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21760"/>
			<description>Entry DecodeParms with type Array in FontFileType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFileType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21761"/>
			<description>Entry F with type Dictionary in FontFileType1 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFileType1 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21762"/>
			<description>Entry F in FontFileType1 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FontFileType1 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21763"/>
			<description>Entry FDecodeParms with type Array in FontFileType1 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFileType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21764"/>
			<description>Entry FDecodeParms with type Dictionary in FontFileType1 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFileType1 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21765"/>
			<description>Entry FDecodeParms in FontFileType1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFileType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21766"/>
			<description>Entry FDecodeParms with type Array in FontFileType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFileType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21767"/>
			<description>Entry FFilter with type Array in FontFileType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFileType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21768"/>
			<description>Entry FFilter in FontFileType1 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FontFileType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21769"/>
			<description>Entry FFilter with type Array in FontFileType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFileType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="21770"/>
			<description>Entry FFilter with type Name in FontFileType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in FontFileType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21771"/>
			<description>Entry Filter with type Array in FontFileType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFileType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21772"/>
			<description>Entry Filter in FontFileType1 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FontFileType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21773"/>
			<description>Entry Filter with type Array in FontFileType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFileType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="21774"/>
			<description>Entry Filter with type Name in FontFileType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in FontFileType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21775"/>
			<description>Entry Length in FontFileType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="21776"/>
			<description>Entry Length in FontFileType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21777"/>
			<description>Entry Length1 in FontFileType1 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="21778"/>
			<description>Entry Length1 in FontFileType1 is required</description>
			<test>containsLength1 == true</test>
			<error>
				<message>Entry Length1 in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21779"/>
			<description>Entry Length1 with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21780"/>
			<description>Entry Length2 in FontFileType1 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="21781"/>
			<description>Entry Length2 in FontFileType1 is required</description>
			<test>containsLength2 == true</test>
			<error>
				<message>Entry Length2 in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21782"/>
			<description>Entry Length2 with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21783"/>
			<description>Entry Length3 in FontFileType1 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="21784"/>
			<description>Entry Length3 in FontFileType1 is required</description>
			<test>containsLength3 == true</test>
			<error>
				<message>Entry Length3 in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="21785"/>
			<description>Entry Length3 with type Integer in FontFileType1 shall satisfy special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFileType1 does not satisfy special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21786"/>
			<description>Entry Subtype in FontFileType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFileType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMapEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="21956"/>
			<description>Entry with type Dictionary in FontMap shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in FontMap is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMapEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="21957"/>
			<description>Entry in FontMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in FontMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="1" testNumber="22046"/>
			<description>FontMultipleMaster shall not contain entries except BaseFont, Encoding, FirstChar, FontDescriptor, LastChar, Name, Subtype, ToUnicode, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').length == 0</test>
			<error>
				<message>FontMultipleMaster contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22047"/>
			<description>Entry BaseFont in FontMultipleMaster shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22048"/>
			<description>Entry BaseFont in FontMultipleMaster is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22049"/>
			<description>Entry Encoding with type Dictionary in FontMultipleMaster shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontMultipleMaster is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22050"/>
			<description>Entry Encoding in FontMultipleMaster shall have one of types: Name, Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontMultipleMaster is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22051"/>
			<description>Entry Encoding with type Name in FontMultipleMaster shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontMultipleMaster has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22052"/>
			<description>Entry FirstChar in FontMultipleMaster shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontMultipleMaster is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22053"/>
			<description>Entry FirstChar in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFirstChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FirstChar in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22054"/>
			<description>Entry FontDescriptor with type Dictionary in FontMultipleMaster shall be object FontDescriptorType1</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontMultipleMaster is not object FontDescriptorType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22055"/>
			<description>Entry FontDescriptor in FontMultipleMaster shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontMultipleMaster is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22056"/>
			<description>Entry FontDescriptor in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFontDescriptor == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="10" testNumber="22057"/>
			<description>Entry FontDescriptor with type Dictionary in FontMultipleMaster shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontMultipleMaster is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22058"/>
			<description>Entry LastChar in FontMultipleMaster shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontMultipleMaster is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22059"/>
			<description>Entry LastChar in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsLastChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry LastChar in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22060"/>
			<description>Entry Name in FontMultipleMaster shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22061"/>
			<description>Entry Name in FontMultipleMaster is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22062"/>
			<description>Entry Subtype in FontMultipleMaster shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22063"/>
			<description>Entry Subtype in FontMultipleMaster is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22064"/>
			<description>Entry Subtype with type Name in FontMultipleMaster shall have value MMType1</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "MMType1"</test>
			<error>
				<message>Entry Subtype with type Name in FontMultipleMaster has incorrect value %2 instead of MMType1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22065"/>
			<description>Entry ToUnicode with type Stream in FontMultipleMaster shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontMultipleMaster is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22066"/>
			<description>Entry ToUnicode in FontMultipleMaster shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontMultipleMaster is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="10" testNumber="22067"/>
			<description>Entry ToUnicode with type Stream in FontMultipleMaster shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontMultipleMaster is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22068"/>
			<description>Entry Type in FontMultipleMaster shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22069"/>
			<description>Entry Type in FontMultipleMaster is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22070"/>
			<description>Entry Type with type Name in FontMultipleMaster shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontMultipleMaster has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22071"/>
			<description>Entry Widths with type Array in FontMultipleMaster shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontMultipleMaster is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22072"/>
			<description>Entry Widths in FontMultipleMaster shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontMultipleMaster is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22073"/>
			<description>Entry Widths in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsWidths == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry Widths in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="1" testNumber="22292"/>
			<description>FontTrueType shall not contain entries except BaseFont, Encoding, FirstChar, FontDescriptor, LastChar, Name, Subtype, ToUnicode, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').length == 0</test>
			<error>
				<message>FontTrueType contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22293"/>
			<description>Entry BaseFont in FontTrueType shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22294"/>
			<description>Entry BaseFont in FontTrueType is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22295"/>
			<description>Entry Encoding with type Dictionary in FontTrueType shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontTrueType is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22296"/>
			<description>Entry Encoding in FontTrueType shall have one of types: Name, Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontTrueType is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22297"/>
			<description>Entry Encoding with type Name in FontTrueType shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontTrueType has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22298"/>
			<description>Entry FirstChar in FontTrueType shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontTrueType is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22299"/>
			<description>Entry FirstChar in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFirstChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FirstChar in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22300"/>
			<description>Entry FontDescriptor with type Dictionary in FontTrueType shall be object FontDescriptorTrueType</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontTrueType is not object FontDescriptorTrueType</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22301"/>
			<description>Entry FontDescriptor in FontTrueType shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontTrueType is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22302"/>
			<description>Entry FontDescriptor in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFontDescriptor == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="10" testNumber="22303"/>
			<description>Entry FontDescriptor with type Dictionary in FontTrueType shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22304"/>
			<description>Entry LastChar in FontTrueType shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontTrueType is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22305"/>
			<description>Entry LastChar in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsLastChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry LastChar in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22306"/>
			<description>Entry Name in FontTrueType shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22307"/>
			<description>Entry Name in FontTrueType is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22308"/>
			<description>Entry Subtype in FontTrueType shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22309"/>
			<description>Entry Subtype in FontTrueType is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22310"/>
			<description>Entry Subtype with type Name in FontTrueType shall have value TrueType</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "TrueType"</test>
			<error>
				<message>Entry Subtype with type Name in FontTrueType has incorrect value %2 instead of TrueType</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22311"/>
			<description>Entry ToUnicode with type Stream in FontTrueType shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontTrueType is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22312"/>
			<description>Entry ToUnicode in FontTrueType shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontTrueType is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="10" testNumber="22313"/>
			<description>Entry ToUnicode with type Stream in FontTrueType shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22314"/>
			<description>Entry Type in FontTrueType shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22315"/>
			<description>Entry Type in FontTrueType is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22316"/>
			<description>Entry Type with type Name in FontTrueType shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontTrueType has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22317"/>
			<description>Entry Widths with type Array in FontTrueType shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontTrueType is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22318"/>
			<description>Entry Widths in FontTrueType shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontTrueType is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22319"/>
			<description>Entry Widths in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsWidths == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry Widths in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="1" testNumber="22480"/>
			<description>FontType0 shall not contain entries except BaseFont, DescendantFonts, Encoding, Subtype, ToUnicode, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'DescendantFonts' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>FontType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'DescendantFonts' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22481"/>
			<description>Entry BaseFont in FontType0 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22482"/>
			<description>Entry BaseFont in FontType0 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22483"/>
			<description>Entry DescendantFonts with type Array in FontType0 shall be object ArrayOfDescendantFonts</description>
			<test>DescendantFontsHasTypeArray != true || DescendantFonts_size == 1</test>
			<error>
				<message>Entry DescendantFonts with type Array in FontType0 is not object ArrayOfDescendantFonts</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22484"/>
			<description>Entry DescendantFonts in FontType0 shall have type Array</description>
			<test>containsDescendantFonts == false || DescendantFontsHasTypeArray == true</test>
			<error>
				<message>Entry DescendantFonts in FontType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22485"/>
			<description>Entry DescendantFonts in FontType0 is required</description>
			<test>containsDescendantFonts == true</test>
			<error>
				<message>Entry DescendantFonts in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22486"/>
			<description>Entry Encoding with type Stream in FontType0 shall be object CMapStream</description>
			<test>EncodingHasTypeStream != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Stream in FontType0 is not object CMapStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22487"/>
			<description>Entry Encoding in FontType0 shall have one of types: Stream, Name</description>
			<test>containsEncoding == false || EncodingHasTypeStream == true || EncodingHasTypeName == true</test>
			<error>
				<message>Entry Encoding in FontType0 is not one of types: Stream, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22488"/>
			<description>Entry Encoding in FontType0 is required</description>
			<test>containsEncoding == true</test>
			<error>
				<message>Entry Encoding in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="10" testNumber="22489"/>
			<description>Entry Encoding with type Stream in FontType0 shall be indirect</description>
			<test>EncodingHasTypeStream != true || isEncodingIndirect == true</test>
			<error>
				<message>Entry Encoding with type Stream in FontType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22490"/>
			<description>Entry Encoding with type Name in FontType0 shall have one of values: GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "GB-EUC-H" || EncodingNameValue == "GB-EUC-V" || EncodingNameValue == "GBpc-EUC-H" || EncodingNameValue == "GBpc-EUC-V" || EncodingNameValue == "GBK-EUC-H" || EncodingNameValue == "GBK-EUC-V" || EncodingNameValue == "GBKp-EUC-H" || EncodingNameValue == "GBKp-EUC-V" || EncodingNameValue == "GBK2K-H" || EncodingNameValue == "GBK2K-V" || EncodingNameValue == "UniGB-UCS2-H" || EncodingNameValue == "UniGB-UCS2-V" || EncodingNameValue == "UniGB-UTF16-H" || EncodingNameValue == "UniGB-UTF16-V" || EncodingNameValue == "B5pc-H" || EncodingNameValue == "B5pc-V" || EncodingNameValue == "HKscs-B5-H" || EncodingNameValue == "HKscs-B5-V" || EncodingNameValue == "ETen-B5-H" || EncodingNameValue == "ETen-B5-V" || EncodingNameValue == "ETenms-B5-H" || EncodingNameValue == "ETenms-B5-V" || EncodingNameValue == "CNS-EUC-H" || EncodingNameValue == "CNS-EUC-V" || EncodingNameValue == "UniCNS-UCS2-H" || EncodingNameValue == "UniCNS-UCS2-V" || EncodingNameValue == "UniCNS-UTF16-H" || EncodingNameValue == "UniCNS-UTF16-V" || EncodingNameValue == "83pv-RKSJ-H" || EncodingNameValue == "90ms-RKSJ-H" || EncodingNameValue == "90ms-RKSJ-V" || EncodingNameValue == "90msp-RKSJ-H" || EncodingNameValue == "90msp-RKSJ-V" || EncodingNameValue == "90pv-RKSJ-H" || EncodingNameValue == "Add-RKSJ-H" || EncodingNameValue == "Add-RKSJ-V" || EncodingNameValue == "EUC-H" || EncodingNameValue == "EUC-V" || EncodingNameValue == "Ext-RKSJ-H" || EncodingNameValue == "Ext-RKSJ-V" || EncodingNameValue == "H" || EncodingNameValue == "V" || EncodingNameValue == "UniJIS-UCS2-H" || EncodingNameValue == "UniJIS-UCS2-V" || EncodingNameValue == "UniJIS-UCS2-HW-H" || EncodingNameValue == "UniJIS-UCS2-HW-V" || EncodingNameValue == "UniJIS-UTF16-H" || EncodingNameValue == "UniJIS-UTF16-V" || EncodingNameValue == "KSC-EUC-H" || EncodingNameValue == "KSC-EUC-V" || EncodingNameValue == "KSCms-UHC-H" || EncodingNameValue == "KSCms-UHC-V" || EncodingNameValue == "KSCms-UHC-HW-H" || EncodingNameValue == "KSCms-UHC-HW-V" || EncodingNameValue == "KSCpc-EUC-H" || EncodingNameValue == "UniKS-UCS2-H" || EncodingNameValue == "UniKS-UCS2-V" || EncodingNameValue == "UniKS-UTF16-H" || EncodingNameValue == "UniKS-UTF16-V" || EncodingNameValue == "Identity-H" || EncodingNameValue == "Identity-V"</test>
			<error>
				<message>Entry Encoding with type Name in FontType0 has incorrect value %2 instead of GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22491"/>
			<description>Entry Subtype in FontType0 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22492"/>
			<description>Entry Subtype in FontType0 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22493"/>
			<description>Entry Subtype with type Name in FontType0 shall have value Type0</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type0"</test>
			<error>
				<message>Entry Subtype with type Name in FontType0 has incorrect value %2 instead of Type0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22494"/>
			<description>Entry ToUnicode with type Stream in FontType0 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType0 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22495"/>
			<description>Entry ToUnicode in FontType0 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="10" testNumber="22496"/>
			<description>Entry ToUnicode with type Stream in FontType0 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22497"/>
			<description>Entry Type in FontType0 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22498"/>
			<description>Entry Type in FontType0 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22499"/>
			<description>Entry Type with type Name in FontType0 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType0 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="1" testNumber="22681"/>
			<description>FontType1 shall not contain entries except BaseFont, Encoding, FirstChar, FontDescriptor, LastChar, Name, Subtype, ToUnicode, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').length == 0</test>
			<error>
				<message>FontType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22682"/>
			<description>Entry BaseFont in FontType1 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22683"/>
			<description>Entry BaseFont in FontType1 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22684"/>
			<description>Entry Encoding with type Dictionary in FontType1 shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontType1 is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22685"/>
			<description>Entry Encoding in FontType1 shall have one of types: Name, Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontType1 is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22686"/>
			<description>Entry Encoding with type Name in FontType1 shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontType1 has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22687"/>
			<description>Entry FirstChar in FontType1 shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22688"/>
			<description>Entry FirstChar in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFirstChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FirstChar in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22689"/>
			<description>Entry FontDescriptor with type Dictionary in FontType1 shall be object FontDescriptorType1</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType1 is not object FontDescriptorType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22690"/>
			<description>Entry FontDescriptor in FontType1 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22691"/>
			<description>Entry FontDescriptor in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFontDescriptor == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="12" testNumber="22692"/>
			<description>If entry FontDescriptor with type Dictionary in FontType1 satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22693"/>
			<description>Entry LastChar in FontType1 shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22694"/>
			<description>Entry LastChar in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsLastChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry LastChar in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22695"/>
			<description>Entry Name in FontType1 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22696"/>
			<description>Entry Name in FontType1 is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22697"/>
			<description>Entry Subtype in FontType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22698"/>
			<description>Entry Subtype in FontType1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22699"/>
			<description>Entry Subtype with type Name in FontType1 shall have value Type1</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1"</test>
			<error>
				<message>Entry Subtype with type Name in FontType1 has incorrect value %2 instead of Type1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22700"/>
			<description>Entry ToUnicode with type Stream in FontType1 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType1 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22701"/>
			<description>Entry ToUnicode in FontType1 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontType1 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="10" testNumber="22702"/>
			<description>Entry ToUnicode with type Stream in FontType1 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22703"/>
			<description>Entry Type in FontType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22704"/>
			<description>Entry Type in FontType1 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22705"/>
			<description>Entry Type with type Name in FontType1 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType1 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22706"/>
			<description>Entry Widths with type Array in FontType1 shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontType1 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22707"/>
			<description>Entry Widths in FontType1 shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22708"/>
			<description>Entry Widths in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsWidths == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry Widths in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="22709"/>
			<description>Entry Widths with type Array in FontType1 shall satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</description>
			<test>WidthsHasTypeArray != true || (WidthsArraySize == (1 + (LastCharIntegerValue - FirstCharIntegerValue)))</test>
			<error>
				<message>Entry Widths with type Array in FontType1 does not satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="1" testNumber="22953"/>
			<description>FontType3 shall not contain entries except CharProcs, Encoding, FirstChar, FontBBox, FontDescriptor, FontMatrix, LastChar, Name, Resources, Subtype, ToUnicode, Type, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CharProcs' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FontMatrix' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').length == 0</test>
			<error>
				<message>FontType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CharProcs' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FontMatrix' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Widths').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22954"/>
			<description>Entry CharProcs with type Dictionary in FontType3 shall be object CharProcMap</description>
			<test>CharProcsHasTypeDictionary != true || CharProcs_size == 1</test>
			<error>
				<message>Entry CharProcs with type Dictionary in FontType3 is not object CharProcMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22955"/>
			<description>Entry CharProcs in FontType3 shall have type Dictionary</description>
			<test>containsCharProcs == false || CharProcsHasTypeDictionary == true</test>
			<error>
				<message>Entry CharProcs in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22956"/>
			<description>Entry CharProcs in FontType3 is required</description>
			<test>containsCharProcs == true</test>
			<error>
				<message>Entry CharProcs in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22957"/>
			<description>Entry Encoding with type Dictionary in FontType3 shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontType3 is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22958"/>
			<description>Entry Encoding in FontType3 shall have type Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22959"/>
			<description>Entry Encoding in FontType3 is required</description>
			<test>containsEncoding == true</test>
			<error>
				<message>Entry Encoding in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22960"/>
			<description>Entry FirstChar in FontType3 shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22961"/>
			<description>Entry FirstChar in FontType3 is required</description>
			<test>containsFirstChar == true</test>
			<error>
				<message>Entry FirstChar in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22962"/>
			<description>Entry FontBBox in FontType3 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontType3 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22963"/>
			<description>Entry FontBBox in FontType3 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22964"/>
			<description>Entry FontDescriptor with type Dictionary in FontType3 shall be object FontDescriptorType3</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType3 is not object FontDescriptorType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22965"/>
			<description>Entry FontDescriptor in FontType3 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22966"/>
			<description>Entry FontDescriptor in FontType3 is required, when fn:IsRequired(fn:IsPDFTagged())</description>
			<test>(containsFontDescriptor == true || (isPDFTagged) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="12" testNumber="22967"/>
			<description>If entry FontDescriptor with type Dictionary in FontType3 satisfies condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22968"/>
			<description>Entry FontMatrix in FontType3 shall have type Matrix</description>
			<test>containsFontMatrix == false || FontMatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry FontMatrix in FontType3 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22969"/>
			<description>Entry FontMatrix in FontType3 is required</description>
			<test>containsFontMatrix == true</test>
			<error>
				<message>Entry FontMatrix in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22970"/>
			<description>Entry LastChar in FontType3 shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22971"/>
			<description>Entry LastChar in FontType3 is required</description>
			<test>containsLastChar == true</test>
			<error>
				<message>Entry LastChar in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22972"/>
			<description>Entry Name in FontType3 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="11" testNumber="22973"/>
			<description>Entry Name in FontType3 is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22974"/>
			<description>Entry Resources with type Dictionary in FontType3 shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in FontType3 is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22975"/>
			<description>Entry Resources in FontType3 shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22976"/>
			<description>Entry Subtype in FontType3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22977"/>
			<description>Entry Subtype in FontType3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22978"/>
			<description>Entry Subtype with type Name in FontType3 shall have value Type3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type3"</test>
			<error>
				<message>Entry Subtype with type Name in FontType3 has incorrect value %2 instead of Type3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22979"/>
			<description>Entry ToUnicode with type Stream in FontType3 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType3 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22980"/>
			<description>Entry ToUnicode in FontType3 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontType3 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="10" testNumber="22981"/>
			<description>Entry ToUnicode with type Stream in FontType3 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22982"/>
			<description>Entry Type in FontType3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22983"/>
			<description>Entry Type in FontType3 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="6" testNumber="22984"/>
			<description>Entry Type with type Name in FontType3 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType3 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="22985"/>
			<description>Entry Widths with type Array in FontType3 shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="22986"/>
			<description>Entry Widths in FontType3 shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="22987"/>
			<description>Entry Widths in FontType3 is required</description>
			<test>containsWidths == true</test>
			<error>
				<message>Entry Widths in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_3" clause="9" testNumber="22988"/>
			<description>Entry Widths with type Array in FontType3 shall satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</description>
			<test>WidthsHasTypeArray != true || (WidthsArraySize == (1 + (LastCharIntegerValue - FirstCharIntegerValue)))</test>
			<error>
				<message>Entry Widths with type Array in FontType3 does not satisfy special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="1" testNumber="23196"/>
			<description>FunctionType0 shall not contain entries except BitsPerSample, Decode, DecodeParms, Domain, Encode, F, FDecodeParms, FFilter, Filter, FunctionType, Length, Order, Range, Size</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerSample' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Order' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'Size').length == 0</test>
			<error>
				<message>FunctionType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerSample' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Order' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'Size').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23197"/>
			<description>Entry BitsPerSample in FunctionType0 shall have type Integer</description>
			<test>containsBitsPerSample == false || BitsPerSampleHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerSample in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23198"/>
			<description>Entry BitsPerSample in FunctionType0 is required</description>
			<test>containsBitsPerSample == true</test>
			<error>
				<message>Entry BitsPerSample in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="23199"/>
			<description>Entry BitsPerSample with type Integer in FunctionType0 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerSampleHasTypeInteger != true || BitsPerSampleIntegerValue == 1 || BitsPerSampleIntegerValue == 2 || BitsPerSampleIntegerValue == 4 || BitsPerSampleIntegerValue == 8 || BitsPerSampleIntegerValue == 12 || BitsPerSampleIntegerValue == 16 || BitsPerSampleIntegerValue == 24 || BitsPerSampleIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerSample with type Integer in FunctionType0 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerSampleIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23200"/>
			<description>Entry Decode with type Array in FunctionType0 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in FunctionType0 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23201"/>
			<description>Entry Decode in FunctionType0 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23202"/>
			<description>Entry Decode with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(Decode) == fn:ArrayLength(Range))</description>
			<test>DecodeHasTypeArray != true || (DecodeArraySize == RangeArraySize)</test>
			<error>
				<message>Entry Decode with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(Decode) == fn:ArrayLength(Range))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23203"/>
			<description>Entry DecodeParms with type Array in FunctionType0 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType0 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23204"/>
			<description>Entry DecodeParms with type Dictionary in FunctionType0 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FunctionType0 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23205"/>
			<description>Entry DecodeParms in FunctionType0 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FunctionType0 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23206"/>
			<description>Entry DecodeParms with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23207"/>
			<description>Entry Domain with type Array in FunctionType0 shall be object ArrayOfNumbersGeneral</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in FunctionType0 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23208"/>
			<description>Entry Domain in FunctionType0 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23209"/>
			<description>Entry Domain in FunctionType0 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23210"/>
			<description>Entry Domain with type Array in FunctionType0 shall satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType0 does not satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23211"/>
			<description>Entry Encode with type Array in FunctionType0 shall be object ArrayOfNumbersGeneral</description>
			<test>EncodeHasTypeArray != true || Encode_size == 1</test>
			<error>
				<message>Entry Encode with type Array in FunctionType0 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23212"/>
			<description>Entry Encode in FunctionType0 shall have type Array</description>
			<test>containsEncode == false || EncodeHasTypeArray == true</test>
			<error>
				<message>Entry Encode in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23213"/>
			<description>Entry Encode with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(Encode) == (2 * fn:ArrayLength(Size)))</description>
			<test>EncodeHasTypeArray != true || (EncodeArraySize == (2 * SizeArraySize))</test>
			<error>
				<message>Entry Encode with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(Encode) == (2 * fn:ArrayLength(Size)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23214"/>
			<description>Entry F with type Dictionary in FunctionType0 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FunctionType0 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23215"/>
			<description>Entry F in FunctionType0 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FunctionType0 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23216"/>
			<description>Entry FDecodeParms with type Array in FunctionType0 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType0 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23217"/>
			<description>Entry FDecodeParms with type Dictionary in FunctionType0 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FunctionType0 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23218"/>
			<description>Entry FDecodeParms in FunctionType0 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FunctionType0 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23219"/>
			<description>Entry FDecodeParms with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23220"/>
			<description>Entry FFilter with type Array in FunctionType0 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType0 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23221"/>
			<description>Entry FFilter in FunctionType0 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FunctionType0 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23222"/>
			<description>Entry FFilter with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="23223"/>
			<description>Entry FFilter with type Name in FunctionType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in FunctionType0 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23224"/>
			<description>Entry Filter with type Array in FunctionType0 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FunctionType0 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23225"/>
			<description>Entry Filter in FunctionType0 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FunctionType0 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23226"/>
			<description>Entry Filter with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="23227"/>
			<description>Entry Filter with type Name in FunctionType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in FunctionType0 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23228"/>
			<description>Entry FunctionType in FunctionType0 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23229"/>
			<description>Entry FunctionType in FunctionType0 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="23230"/>
			<description>Entry FunctionType with type Integer in FunctionType0 shall have value 0</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 0</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType0 has incorrect value %2 instead of 0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23231"/>
			<description>Entry Length in FunctionType0 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23232"/>
			<description>Entry Length in FunctionType0 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23233"/>
			<description>Entry Order in FunctionType0 shall have type Integer</description>
			<test>containsOrder == false || OrderHasTypeInteger == true</test>
			<error>
				<message>Entry Order in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="6" testNumber="23234"/>
			<description>Entry Order with type Integer in FunctionType0 shall have one of values: 1, 3</description>
			<test>OrderHasTypeInteger != true || OrderIntegerValue == 1 || OrderIntegerValue == 3</test>
			<error>
				<message>Entry Order with type Integer in FunctionType0 has incorrect value %2 instead of 1, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>OrderIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23235"/>
			<description>Entry Range with type Array in FunctionType0 shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in FunctionType0 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23236"/>
			<description>Entry Range in FunctionType0 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23237"/>
			<description>Entry Range in FunctionType0 is required</description>
			<test>containsRange == true</test>
			<error>
				<message>Entry Range in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23238"/>
			<description>Entry Range with type Array in FunctionType0 shall satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType0 does not satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23239"/>
			<description>Entry Size with type Array in FunctionType0 shall be object ArrayOfIntegersGeneral</description>
			<test>SizeHasTypeArray != true || Size_size == 1</test>
			<error>
				<message>Entry Size with type Array in FunctionType0 is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23240"/>
			<description>Entry Size in FunctionType0 shall have type Array</description>
			<test>containsSize == false || SizeHasTypeArray == true</test>
			<error>
				<message>Entry Size in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23241"/>
			<description>Entry Size in FunctionType0 is required</description>
			<test>containsSize == true</test>
			<error>
				<message>Entry Size in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23242"/>
			<description>Entry Size with type Array in FunctionType0 shall satisfy special case: fn:Eval(fn:ArrayLength(Domain) == (2 * fn:ArrayLength(Size)))</description>
			<test>SizeHasTypeArray != true || (DomainArraySize == (2 * SizeArraySize))</test>
			<error>
				<message>Entry Size with type Array in FunctionType0 does not satisfy special case: fn:Eval(fn:ArrayLength(Domain) == (2 * fn:ArrayLength(Size)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="1" testNumber="23486"/>
			<description>FunctionType2 shall not contain entries except C0, C1, Domain, FunctionType, N, Range</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C0' &amp;&amp; elem != 'C1' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Range').length == 0</test>
			<error>
				<message>FunctionType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C0' &amp;&amp; elem != 'C1' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Range').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23487"/>
			<description>Entry C0 with type Array in FunctionType2 shall be object ArrayOfNumbersGeneral</description>
			<test>C0HasTypeArray != true || C0_size == 1</test>
			<error>
				<message>Entry C0 with type Array in FunctionType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23488"/>
			<description>Entry C0 in FunctionType2 shall have type Array</description>
			<test>containsC0 == false || C0HasTypeArray == true</test>
			<error>
				<message>Entry C0 in FunctionType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23489"/>
			<description>Entry C0 with type Array in FunctionType2 shall satisfy special case: fn:Eval(fn:ArrayLength(C0) == fn:ArrayLength(C1))</description>
			<test>C0HasTypeArray != true || (C0ArraySize == C1ArraySize)</test>
			<error>
				<message>Entry C0 with type Array in FunctionType2 does not satisfy special case: fn:Eval(fn:ArrayLength(C0) == fn:ArrayLength(C1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23490"/>
			<description>Entry C1 with type Array in FunctionType2 shall be object ArrayOfNumbersGeneral</description>
			<test>C1HasTypeArray != true || C1_size == 1</test>
			<error>
				<message>Entry C1 with type Array in FunctionType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23491"/>
			<description>Entry C1 in FunctionType2 shall have type Array</description>
			<test>containsC1 == false || C1HasTypeArray == true</test>
			<error>
				<message>Entry C1 in FunctionType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23492"/>
			<description>Entry C1 with type Array in FunctionType2 shall satisfy special case: fn:Eval(fn:ArrayLength(C1) == fn:ArrayLength(C0))</description>
			<test>C1HasTypeArray != true || (C1ArraySize == C0ArraySize)</test>
			<error>
				<message>Entry C1 with type Array in FunctionType2 does not satisfy special case: fn:Eval(fn:ArrayLength(C1) == fn:ArrayLength(C0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23493"/>
			<description>Entry Domain with type Array in FunctionType2 shall be object ArrayOfNumbersGeneral</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in FunctionType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23494"/>
			<description>Entry Domain in FunctionType2 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23495"/>
			<description>Entry Domain in FunctionType2 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23496"/>
			<description>Entry Domain with type Array in FunctionType2 shall satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType2 does not satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23497"/>
			<description>Entry FunctionType in FunctionType2 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23498"/>
			<description>Entry FunctionType in FunctionType2 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="6" testNumber="23499"/>
			<description>Entry FunctionType with type Integer in FunctionType2 shall have value 2</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 2</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType2 has incorrect value %2 instead of 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23500"/>
			<description>Entry N in FunctionType2 shall have type Number</description>
			<test>containsN == false || NHasTypeNumber == true</test>
			<error>
				<message>Entry N in FunctionType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23501"/>
			<description>Entry N in FunctionType2 is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in FunctionType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23502"/>
			<description>Entry Range with type Array in FunctionType2 shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in FunctionType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23503"/>
			<description>Entry Range in FunctionType2 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23504"/>
			<description>Entry Range with type Array in FunctionType2 shall satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType2 does not satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="1" testNumber="23600"/>
			<description>FunctionType3 shall not contain entries except Bounds, Domain, Encode, FunctionType, Functions, Range</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Bounds' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Functions' &amp;&amp; elem != 'Range').length == 0</test>
			<error>
				<message>FunctionType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Bounds' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Functions' &amp;&amp; elem != 'Range').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23601"/>
			<description>Entry Bounds with type Array in FunctionType3 shall be object ArrayOfNumbersGeneral</description>
			<test>BoundsHasTypeArray != true || Bounds_size == 1</test>
			<error>
				<message>Entry Bounds with type Array in FunctionType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23602"/>
			<description>Entry Bounds in FunctionType3 shall have type Array</description>
			<test>containsBounds == false || BoundsHasTypeArray == true</test>
			<error>
				<message>Entry Bounds in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23603"/>
			<description>Entry Bounds in FunctionType3 is required</description>
			<test>containsBounds == true</test>
			<error>
				<message>Entry Bounds in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23604"/>
			<description>Entry Bounds with type Array in FunctionType3 shall satisfy special case: fn:Eval(fn:ArrayLength(Bounds) == (fn:ArrayLength(Functions) - 1))</description>
			<test>BoundsHasTypeArray != true || (BoundsArraySize == (FunctionsArraySize - 1))</test>
			<error>
				<message>Entry Bounds with type Array in FunctionType3 does not satisfy special case: fn:Eval(fn:ArrayLength(Bounds) == (fn:ArrayLength(Functions) - 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23605"/>
			<description>Entry Domain with type Array in FunctionType3 shall be object ArrayOfNumbersGeneral</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in FunctionType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23606"/>
			<description>Entry Domain in FunctionType3 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23607"/>
			<description>Entry Domain in FunctionType3 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23608"/>
			<description>Entry Domain with type Array in FunctionType3 shall satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType3 does not satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23609"/>
			<description>Entry Encode with type Array in FunctionType3 shall be object ArrayOfNumbersGeneral</description>
			<test>EncodeHasTypeArray != true || Encode_size == 1</test>
			<error>
				<message>Entry Encode with type Array in FunctionType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23610"/>
			<description>Entry Encode in FunctionType3 shall have type Array</description>
			<test>containsEncode == false || EncodeHasTypeArray == true</test>
			<error>
				<message>Entry Encode in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23611"/>
			<description>Entry Encode in FunctionType3 is required</description>
			<test>containsEncode == true</test>
			<error>
				<message>Entry Encode in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23612"/>
			<description>Entry Encode with type Array in FunctionType3 shall satisfy special case: fn:Eval((fn:ArrayLength(Encode) mod 2) == 0)</description>
			<test>EncodeHasTypeArray != true || ((EncodeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Encode with type Array in FunctionType3 does not satisfy special case: fn:Eval((fn:ArrayLength(Encode) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23613"/>
			<description>Entry FunctionType in FunctionType3 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23614"/>
			<description>Entry FunctionType in FunctionType3 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="6" testNumber="23615"/>
			<description>Entry FunctionType with type Integer in FunctionType3 shall have value 3</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 3</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType3 has incorrect value %2 instead of 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23616"/>
			<description>Entry Functions with type Array in FunctionType3 shall be object ArrayOfFunctions</description>
			<test>FunctionsHasTypeArray != true || Functions_size == 1</test>
			<error>
				<message>Entry Functions with type Array in FunctionType3 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23617"/>
			<description>Entry Functions in FunctionType3 shall have type Array</description>
			<test>containsFunctions == false || FunctionsHasTypeArray == true</test>
			<error>
				<message>Entry Functions in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23618"/>
			<description>Entry Functions in FunctionType3 is required</description>
			<test>containsFunctions == true</test>
			<error>
				<message>Entry Functions in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23619"/>
			<description>Entry Functions with type Array in FunctionType3 shall satisfy special case: fn:Eval(fn:ArrayLength(Functions) == (fn:ArrayLength(Bounds) + 1))</description>
			<test>FunctionsHasTypeArray != true || (FunctionsArraySize == (BoundsArraySize + 1))</test>
			<error>
				<message>Entry Functions with type Array in FunctionType3 does not satisfy special case: fn:Eval(fn:ArrayLength(Functions) == (fn:ArrayLength(Bounds) + 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23620"/>
			<description>Entry Range with type Array in FunctionType3 shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in FunctionType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23621"/>
			<description>Entry Range in FunctionType3 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23622"/>
			<description>Entry Range with type Array in FunctionType3 shall satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType3 does not satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="1" testNumber="23738"/>
			<description>FunctionType4 shall not contain entries except DecodeParms, Domain, F, FDecodeParms, FFilter, Filter, FunctionType, Length, Range</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Range').length == 0</test>
			<error>
				<message>FunctionType4 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Range').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23739"/>
			<description>Entry DecodeParms with type Array in FunctionType4 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType4 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23740"/>
			<description>Entry DecodeParms with type Dictionary in FunctionType4 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FunctionType4 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23741"/>
			<description>Entry DecodeParms in FunctionType4 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FunctionType4 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23742"/>
			<description>Entry DecodeParms with type Array in FunctionType4 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType4 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23743"/>
			<description>Entry Domain with type Array in FunctionType4 shall be object ArrayOfNumbersGeneral</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in FunctionType4 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23744"/>
			<description>Entry Domain in FunctionType4 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType4 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23745"/>
			<description>Entry Domain in FunctionType4 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23746"/>
			<description>Entry Domain with type Array in FunctionType4 shall satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType4 does not satisfy special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23747"/>
			<description>Entry F with type Dictionary in FunctionType4 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FunctionType4 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23748"/>
			<description>Entry F in FunctionType4 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in FunctionType4 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23749"/>
			<description>Entry FDecodeParms with type Array in FunctionType4 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType4 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23750"/>
			<description>Entry FDecodeParms with type Dictionary in FunctionType4 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FunctionType4 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23751"/>
			<description>Entry FDecodeParms in FunctionType4 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FunctionType4 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23752"/>
			<description>Entry FDecodeParms with type Array in FunctionType4 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType4 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23753"/>
			<description>Entry FFilter with type Array in FunctionType4 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType4 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23754"/>
			<description>Entry FFilter in FunctionType4 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in FunctionType4 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23755"/>
			<description>Entry FFilter with type Array in FunctionType4 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType4 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="6" testNumber="23756"/>
			<description>Entry FFilter with type Name in FunctionType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in FunctionType4 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23757"/>
			<description>Entry Filter with type Array in FunctionType4 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FunctionType4 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23758"/>
			<description>Entry Filter in FunctionType4 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in FunctionType4 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23759"/>
			<description>Entry Filter with type Array in FunctionType4 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FunctionType4 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="6" testNumber="23760"/>
			<description>Entry Filter with type Name in FunctionType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in FunctionType4 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23761"/>
			<description>Entry FunctionType in FunctionType4 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23762"/>
			<description>Entry FunctionType in FunctionType4 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="6" testNumber="23763"/>
			<description>Entry FunctionType with type Integer in FunctionType4 shall have value 4</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 4</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType4 has incorrect value %2 instead of 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23764"/>
			<description>Entry Length in FunctionType4 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FunctionType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23765"/>
			<description>Entry Length in FunctionType4 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FunctionType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="23766"/>
			<description>Entry Range with type Array in FunctionType4 shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in FunctionType4 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23767"/>
			<description>Entry Range in FunctionType4 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType4 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="7" testNumber="23768"/>
			<description>Entry Range in FunctionType4 is required</description>
			<test>containsRange == true</test>
			<error>
				<message>Entry Range in FunctionType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_3" clause="9" testNumber="23769"/>
			<description>Entry Range with type Array in FunctionType4 shall satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType4 does not satisfy special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_3" clause="2" testNumber="23952"/>
			<description>GammaArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>GammaArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23953"/>
			<description>Entry 0 in GammaArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in GammaArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="23954"/>
			<description>Entry 0 with type Number in GammaArray shall satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in GammaArray does not satisfy possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23955"/>
			<description>Entry 1 in GammaArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in GammaArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="23956"/>
			<description>Entry 1 with type Number in GammaArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in GammaArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="23957"/>
			<description>Entry 2 in GammaArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in GammaArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="23958"/>
			<description>Entry 2 with type Number in GammaArray shall satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in GammaArray does not satisfy possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="1" testNumber="24034"/>
			<description>GraphicsStateParameter shall not contain entries except AAPL:AA, AAPL:ST, BG, BG2, D, FL, Font, HT, HTP, LC, LJ, LW, ML, OP, OPM, RI, SA, SM, TR, TR2, Type, UCR, UCR2, op</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AAPL:AA' &amp;&amp; elem != 'AAPL:ST' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'BG2' &amp;&amp; elem != 'D' &amp;&amp; elem != 'FL' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'HT' &amp;&amp; elem != 'HTP' &amp;&amp; elem != 'LC' &amp;&amp; elem != 'LJ' &amp;&amp; elem != 'LW' &amp;&amp; elem != 'ML' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'OPM' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'SM' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'TR2' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UCR' &amp;&amp; elem != 'UCR2' &amp;&amp; elem != 'op').length == 0</test>
			<error>
				<message>GraphicsStateParameter contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AAPL:AA' &amp;&amp; elem != 'AAPL:ST' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'BG2' &amp;&amp; elem != 'D' &amp;&amp; elem != 'FL' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'HT' &amp;&amp; elem != 'HTP' &amp;&amp; elem != 'LC' &amp;&amp; elem != 'LJ' &amp;&amp; elem != 'LW' &amp;&amp; elem != 'ML' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'OPM' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'SM' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'TR2' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UCR' &amp;&amp; elem != 'UCR2' &amp;&amp; elem != 'op').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24035"/>
			<description>Entry AAPL:AA in GraphicsStateParameter shall have type Boolean</description>
			<test>containsAAPLAA == false || AAPLAAHasTypeBoolean == true</test>
			<error>
				<message>Entry AAPL:AA in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24036"/>
			<description>Entry AAPL:ST with type Dictionary in GraphicsStateParameter shall be object AAPL_ST</description>
			<test>AAPLSTHasTypeDictionary != true || AAPLST_size == 1</test>
			<error>
				<message>Entry AAPL:ST with type Dictionary in GraphicsStateParameter is not object AAPL_ST</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24037"/>
			<description>Entry AAPL:ST in GraphicsStateParameter shall have one of types: Name, Dictionary</description>
			<test>containsAAPLST == false || AAPLSTHasTypeName == true || AAPLSTHasTypeDictionary == true</test>
			<error>
				<message>Entry AAPL:ST in GraphicsStateParameter is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24038"/>
			<description>Entry BG with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>BGHasTypeStream != true || BG_size == 1</test>
			<error>
				<message>Entry BG with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24039"/>
			<description>Entry BG with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>BGHasTypeDictionary != true || BG_size == 1</test>
			<error>
				<message>Entry BG with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24040"/>
			<description>Entry BG in GraphicsStateParameter shall have one of types: Stream, Dictionary</description>
			<test>containsBG == false || BGHasTypeStream == true || BGHasTypeDictionary == true</test>
			<error>
				<message>Entry BG in GraphicsStateParameter is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="10" testNumber="24041"/>
			<description>Entry BG with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>BGHasTypeStream != true || isBGIndirect == true</test>
			<error>
				<message>Entry BG with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24042"/>
			<description>Entry BG2 with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>BG2HasTypeStream != true || BG2_size == 1</test>
			<error>
				<message>Entry BG2 with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24043"/>
			<description>Entry BG2 with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>BG2HasTypeDictionary != true || BG2_size == 1</test>
			<error>
				<message>Entry BG2 with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24044"/>
			<description>Entry BG2 in GraphicsStateParameter shall have one of types: Stream, Name, Dictionary</description>
			<test>containsBG2 == false || BG2HasTypeStream == true || BG2HasTypeName == true || BG2HasTypeDictionary == true</test>
			<error>
				<message>Entry BG2 in GraphicsStateParameter is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="10" testNumber="24045"/>
			<description>Entry BG2 with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>BG2HasTypeStream != true || isBG2Indirect == true</test>
			<error>
				<message>Entry BG2 with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24046"/>
			<description>Entry D with type Array in GraphicsStateParameter shall be object ArrayOfGSPDashPatterns</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in GraphicsStateParameter is not object ArrayOfGSPDashPatterns</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24047"/>
			<description>Entry D in GraphicsStateParameter shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in GraphicsStateParameter is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24048"/>
			<description>Entry FL in GraphicsStateParameter shall have type Number</description>
			<test>containsFL == false || FLHasTypeNumber == true</test>
			<error>
				<message>Entry FL in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="14" testNumber="24049"/>
			<description>Entry FL with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval(@FL &gt; 0)</description>
			<test>FLHasTypeNumber != true || FLNumberValue &gt; 0</test>
			<error>
				<message>Entry FL with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval(@FL &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24050"/>
			<description>Entry Font with type Array in GraphicsStateParameter shall be object ArrayOfFontAndSize</description>
			<test>FontHasTypeArray != true || Font_size == 1</test>
			<error>
				<message>Entry Font with type Array in GraphicsStateParameter is not object ArrayOfFontAndSize</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24051"/>
			<description>Entry Font in GraphicsStateParameter shall have type Array</description>
			<test>containsFont == false || FontHasTypeArray == true</test>
			<error>
				<message>Entry Font in GraphicsStateParameter is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24052"/>
			<description>Entry HT with type Stream in GraphicsStateParameter shall be one of objects HalftoneType6, HalftoneType10, HalftoneType16</description>
			<test>HTHasTypeStream != true || HT_size == 1</test>
			<error>
				<message>Entry HT with type Stream in GraphicsStateParameter is not one of objects HalftoneType6, HalftoneType10, HalftoneType16</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24053"/>
			<description>Entry HT with type Dictionary in GraphicsStateParameter shall be one of objects HalftoneType1, HalftoneType5</description>
			<test>HTHasTypeDictionary != true || HT_size == 1</test>
			<error>
				<message>Entry HT with type Dictionary in GraphicsStateParameter is not one of objects HalftoneType1, HalftoneType5</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24054"/>
			<description>Entry HT in GraphicsStateParameter shall have one of types: Stream, Name, Dictionary</description>
			<test>containsHT == false || HTHasTypeStream == true || HTHasTypeName == true || HTHasTypeDictionary == true</test>
			<error>
				<message>Entry HT in GraphicsStateParameter is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="10" testNumber="24055"/>
			<description>Entry HT with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>HTHasTypeStream != true || isHTIndirect == true</test>
			<error>
				<message>Entry HT with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24056"/>
			<description>Entry HTP with type Array in GraphicsStateParameter shall be object ArrayOf_2Integers</description>
			<test>HTPHasTypeArray != true || HTP_size == 1</test>
			<error>
				<message>Entry HTP with type Array in GraphicsStateParameter is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24057"/>
			<description>Entry HTP in GraphicsStateParameter shall have type Array</description>
			<test>containsHTP == false || HTPHasTypeArray == true</test>
			<error>
				<message>Entry HTP in GraphicsStateParameter is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24058"/>
			<description>Entry LC in GraphicsStateParameter shall have type Integer</description>
			<test>containsLC == false || LCHasTypeInteger == true</test>
			<error>
				<message>Entry LC in GraphicsStateParameter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="14" testNumber="24059"/>
			<description>Entry LC with type Integer in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@LC &gt;= 0) &amp;&amp; (@LC &lt;= 2))</description>
			<test>LCHasTypeInteger != true || (LCIntegerValue &gt;= 0) &amp;&amp; (LCIntegerValue &lt;= 2)</test>
			<error>
				<message>Entry LC with type Integer in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@LC &gt;= 0) &amp;&amp; (@LC &lt;= 2))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24060"/>
			<description>Entry LJ in GraphicsStateParameter shall have type Integer</description>
			<test>containsLJ == false || LJHasTypeInteger == true</test>
			<error>
				<message>Entry LJ in GraphicsStateParameter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="14" testNumber="24061"/>
			<description>Entry LJ with type Integer in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@LJ &gt;= 0) &amp;&amp; (@LJ &lt;= 2))</description>
			<test>LJHasTypeInteger != true || (LJIntegerValue &gt;= 0) &amp;&amp; (LJIntegerValue &lt;= 2)</test>
			<error>
				<message>Entry LJ with type Integer in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@LJ &gt;= 0) &amp;&amp; (@LJ &lt;= 2))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24062"/>
			<description>Entry LW in GraphicsStateParameter shall have type Number</description>
			<test>containsLW == false || LWHasTypeNumber == true</test>
			<error>
				<message>Entry LW in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="14" testNumber="24063"/>
			<description>Entry LW with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval(@LW &gt;= 0)</description>
			<test>LWHasTypeNumber != true || LWNumberValue &gt;= 0</test>
			<error>
				<message>Entry LW with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval(@LW &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24064"/>
			<description>Entry ML in GraphicsStateParameter shall have type Number</description>
			<test>containsML == false || MLHasTypeNumber == true</test>
			<error>
				<message>Entry ML in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="14" testNumber="24065"/>
			<description>Entry ML with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval(@ML &gt;= 1)</description>
			<test>MLHasTypeNumber != true || MLNumberValue &gt;= 1</test>
			<error>
				<message>Entry ML with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval(@ML &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24066"/>
			<description>Entry OP in GraphicsStateParameter shall have type Boolean</description>
			<test>containsOP == false || OPHasTypeBoolean == true</test>
			<error>
				<message>Entry OP in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24067"/>
			<description>Entry OPM in GraphicsStateParameter shall have type Integer</description>
			<test>containsOPM == false || OPMHasTypeInteger == true</test>
			<error>
				<message>Entry OPM in GraphicsStateParameter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="14" testNumber="24068"/>
			<description>Entry OPM with type Integer in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@OPM &gt;= 0) &amp;&amp; (@OPM &lt;= 1))</description>
			<test>OPMHasTypeInteger != true || (OPMIntegerValue &gt;= 0) &amp;&amp; (OPMIntegerValue &lt;= 1)</test>
			<error>
				<message>Entry OPM with type Integer in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@OPM &gt;= 0) &amp;&amp; (@OPM &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24069"/>
			<description>Entry RI in GraphicsStateParameter shall have type Name</description>
			<test>containsRI == false || RIHasTypeName == true</test>
			<error>
				<message>Entry RI in GraphicsStateParameter is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="6" testNumber="24070"/>
			<description>Entry RI with type Name in GraphicsStateParameter shall have one of values: AbsoluteColorimetric, Perceptual, Saturation, RelativeColorimetric</description>
			<test>RIHasTypeName != true || RINameValue == "AbsoluteColorimetric" || RINameValue == "RelativeColorimetric" || RINameValue == "Saturation" || RINameValue == "Perceptual"</test>
			<error>
				<message>Entry RI with type Name in GraphicsStateParameter has incorrect value %2 instead of AbsoluteColorimetric, Perceptual, Saturation, RelativeColorimetric</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RINameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24071"/>
			<description>Entry SA in GraphicsStateParameter shall have type Boolean</description>
			<test>containsSA == false || SAHasTypeBoolean == true</test>
			<error>
				<message>Entry SA in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24072"/>
			<description>Entry SM in GraphicsStateParameter shall have type Number</description>
			<test>containsSM == false || SMHasTypeNumber == true</test>
			<error>
				<message>Entry SM in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="14" testNumber="24073"/>
			<description>Entry SM with type Number in GraphicsStateParameter shall satisfy possible value predicate: fn:Eval((@SM &gt;= 0) &amp;&amp; (@SM &lt;= 1))</description>
			<test>SMHasTypeNumber != true || (SMNumberValue &gt;= 0) &amp;&amp; (SMNumberValue &lt;= 1)</test>
			<error>
				<message>Entry SM with type Number in GraphicsStateParameter does not satisfy possible value predicate: fn:Eval((@SM &gt;= 0) &amp;&amp; (@SM &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24074"/>
			<description>Entry TR with type Array in GraphicsStateParameter shall be object ArrayOf4Functions</description>
			<test>TRHasTypeArray != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Array in GraphicsStateParameter is not object ArrayOf4Functions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24075"/>
			<description>Entry TR with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>TRHasTypeStream != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24076"/>
			<description>Entry TR with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>TRHasTypeDictionary != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24077"/>
			<description>Entry TR in GraphicsStateParameter shall have one of types: Array, Stream, Name, Dictionary</description>
			<test>containsTR == false || TRHasTypeArray == true || TRHasTypeStream == true || TRHasTypeName == true || TRHasTypeDictionary == true</test>
			<error>
				<message>Entry TR in GraphicsStateParameter is not one of types: Array, Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="10" testNumber="24078"/>
			<description>Entry TR with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>TRHasTypeStream != true || isTRIndirect == true</test>
			<error>
				<message>Entry TR with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24079"/>
			<description>Entry TR2 with type Array in GraphicsStateParameter shall be object ArrayOf4Functions</description>
			<test>TR2HasTypeArray != true || TR2_size == 1</test>
			<error>
				<message>Entry TR2 with type Array in GraphicsStateParameter is not object ArrayOf4Functions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24080"/>
			<description>Entry TR2 with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>TR2HasTypeStream != true || TR2_size == 1</test>
			<error>
				<message>Entry TR2 with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24081"/>
			<description>Entry TR2 with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>TR2HasTypeDictionary != true || TR2_size == 1</test>
			<error>
				<message>Entry TR2 with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24082"/>
			<description>Entry TR2 in GraphicsStateParameter shall have one of types: Array, Stream, Name, Dictionary</description>
			<test>containsTR2 == false || TR2HasTypeArray == true || TR2HasTypeStream == true || TR2HasTypeName == true || TR2HasTypeDictionary == true</test>
			<error>
				<message>Entry TR2 in GraphicsStateParameter is not one of types: Array, Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="10" testNumber="24083"/>
			<description>Entry TR2 with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>TR2HasTypeStream != true || isTR2Indirect == true</test>
			<error>
				<message>Entry TR2 with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24084"/>
			<description>Entry Type in GraphicsStateParameter shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in GraphicsStateParameter is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="6" testNumber="24085"/>
			<description>Entry Type with type Name in GraphicsStateParameter shall have value ExtGState</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ExtGState"</test>
			<error>
				<message>Entry Type with type Name in GraphicsStateParameter has incorrect value %2 instead of ExtGState</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24086"/>
			<description>Entry UCR with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>UCRHasTypeStream != true || UCR_size == 1</test>
			<error>
				<message>Entry UCR with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24087"/>
			<description>Entry UCR with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>UCRHasTypeDictionary != true || UCR_size == 1</test>
			<error>
				<message>Entry UCR with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24088"/>
			<description>Entry UCR in GraphicsStateParameter shall have one of types: Stream, Dictionary</description>
			<test>containsUCR == false || UCRHasTypeStream == true || UCRHasTypeDictionary == true</test>
			<error>
				<message>Entry UCR in GraphicsStateParameter is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="10" testNumber="24089"/>
			<description>Entry UCR with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>UCRHasTypeStream != true || isUCRIndirect == true</test>
			<error>
				<message>Entry UCR with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24090"/>
			<description>Entry UCR2 with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>UCR2HasTypeStream != true || UCR2_size == 1</test>
			<error>
				<message>Entry UCR2 with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24091"/>
			<description>Entry UCR2 with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>UCR2HasTypeDictionary != true || UCR2_size == 1</test>
			<error>
				<message>Entry UCR2 with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24092"/>
			<description>Entry UCR2 in GraphicsStateParameter shall have one of types: Stream, Name, Dictionary</description>
			<test>containsUCR2 == false || UCR2HasTypeStream == true || UCR2HasTypeName == true || UCR2HasTypeDictionary == true</test>
			<error>
				<message>Entry UCR2 in GraphicsStateParameter is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="10" testNumber="24093"/>
			<description>Entry UCR2 with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>UCR2HasTypeStream != true || isUCR2Indirect == true</test>
			<error>
				<message>Entry UCR2 with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24094"/>
			<description>Entry op in GraphicsStateParameter shall have type Boolean</description>
			<test>containsop == false || opHasTypeBoolean == true</test>
			<error>
				<message>Entry op in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameterMapEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24477"/>
			<description>Entry with type Dictionary in GraphicsStateParameterMap shall be object GraphicsStateParameter</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in GraphicsStateParameterMap is not object GraphicsStateParameter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameterMapEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24478"/>
			<description>Entry in GraphicsStateParameterMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in GraphicsStateParameterMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="1" testNumber="24568"/>
			<description>HalftoneType1 shall not contain entries except AccurateScreens, Angle, Frequency, HalftoneName, HalftoneType, SpotFunction, TransferFunction, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AccurateScreens' &amp;&amp; elem != 'Angle' &amp;&amp; elem != 'Frequency' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'SpotFunction' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>HalftoneType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AccurateScreens' &amp;&amp; elem != 'Angle' &amp;&amp; elem != 'Frequency' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'SpotFunction' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24569"/>
			<description>Entry AccurateScreens in HalftoneType1 shall have type Boolean</description>
			<test>containsAccurateScreens == false || AccurateScreensHasTypeBoolean == true</test>
			<error>
				<message>Entry AccurateScreens in HalftoneType1 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24570"/>
			<description>Entry Angle in HalftoneType1 shall have type Number</description>
			<test>containsAngle == false || AngleHasTypeNumber == true</test>
			<error>
				<message>Entry Angle in HalftoneType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="24571"/>
			<description>Entry Angle in HalftoneType1 is required</description>
			<test>containsAngle == true</test>
			<error>
				<message>Entry Angle in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24572"/>
			<description>Entry Frequency in HalftoneType1 shall have type Number</description>
			<test>containsFrequency == false || FrequencyHasTypeNumber == true</test>
			<error>
				<message>Entry Frequency in HalftoneType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="24573"/>
			<description>Entry Frequency in HalftoneType1 is required</description>
			<test>containsFrequency == true</test>
			<error>
				<message>Entry Frequency in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="14" testNumber="24574"/>
			<description>Entry Frequency with type Number in HalftoneType1 shall satisfy possible value predicate: fn:Eval(@Frequency &gt;= 0)</description>
			<test>FrequencyHasTypeNumber != true || FrequencyNumberValue &gt;= 0</test>
			<error>
				<message>Entry Frequency with type Number in HalftoneType1 does not satisfy possible value predicate: fn:Eval(@Frequency &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24575"/>
			<description>Entry HalftoneName in HalftoneType1 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType1 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24576"/>
			<description>Entry HalftoneType in HalftoneType1 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="24577"/>
			<description>Entry HalftoneType in HalftoneType1 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="24578"/>
			<description>Entry HalftoneType with type Integer in HalftoneType1 shall have value 1</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 1</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType1 has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24579"/>
			<description>Entry SpotFunction with type Array in HalftoneType1 shall be object ArrayOfFunctions</description>
			<test>SpotFunctionHasTypeArray != true || SpotFunction_size == 1</test>
			<error>
				<message>Entry SpotFunction with type Array in HalftoneType1 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24580"/>
			<description>Entry SpotFunction with type Stream in HalftoneType1 shall be one of objects FunctionType0, FunctionType4</description>
			<test>SpotFunctionHasTypeStream != true || SpotFunction_size == 1</test>
			<error>
				<message>Entry SpotFunction with type Stream in HalftoneType1 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24581"/>
			<description>Entry SpotFunction with type Dictionary in HalftoneType1 shall be one of objects FunctionType2, FunctionType3</description>
			<test>SpotFunctionHasTypeDictionary != true || SpotFunction_size == 1</test>
			<error>
				<message>Entry SpotFunction with type Dictionary in HalftoneType1 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24582"/>
			<description>Entry SpotFunction in HalftoneType1 shall have one of types: Array, Stream, Name, Dictionary</description>
			<test>containsSpotFunction == false || SpotFunctionHasTypeArray == true || SpotFunctionHasTypeStream == true || SpotFunctionHasTypeName == true || SpotFunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry SpotFunction in HalftoneType1 is not one of types: Array, Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="24583"/>
			<description>Entry SpotFunction in HalftoneType1 is required</description>
			<test>containsSpotFunction == true</test>
			<error>
				<message>Entry SpotFunction in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="10" testNumber="24584"/>
			<description>Entry SpotFunction with type Stream in HalftoneType1 shall be indirect</description>
			<test>SpotFunctionHasTypeStream != true || isSpotFunctionIndirect == true</test>
			<error>
				<message>Entry SpotFunction with type Stream in HalftoneType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="24585"/>
			<description>Entry SpotFunction with type Name in HalftoneType1 shall have one of values: Ellipse, LineX, SimpleDot, LineY, Cross, InvertedDouble, Diamond, InvertedDoubleDot, Square, Double, InvertedEllipseC, InvertedEllipseA, Line, CosineDot, InvertedSimpleDot, Round, EllipseA, DoubleDot, EllipseC, Rhomboid, EllipseB</description>
			<test>SpotFunctionHasTypeName != true || SpotFunctionNameValue == "SimpleDot" || SpotFunctionNameValue == "InvertedSimpleDot" || SpotFunctionNameValue == "DoubleDot" || SpotFunctionNameValue == "InvertedDoubleDot" || SpotFunctionNameValue == "CosineDot" || SpotFunctionNameValue == "Double" || SpotFunctionNameValue == "InvertedDouble" || SpotFunctionNameValue == "Line" || SpotFunctionNameValue == "LineX" || SpotFunctionNameValue == "LineY" || SpotFunctionNameValue == "Round" || SpotFunctionNameValue == "Ellipse" || SpotFunctionNameValue == "EllipseA" || SpotFunctionNameValue == "InvertedEllipseA" || SpotFunctionNameValue == "EllipseB" || SpotFunctionNameValue == "EllipseC" || SpotFunctionNameValue == "InvertedEllipseC" || SpotFunctionNameValue == "Square" || SpotFunctionNameValue == "Cross" || SpotFunctionNameValue == "Rhomboid" || SpotFunctionNameValue == "Diamond"</test>
			<error>
				<message>Entry SpotFunction with type Name in HalftoneType1 has incorrect value %2 instead of Ellipse, LineX, SimpleDot, LineY, Cross, InvertedDouble, Diamond, InvertedDoubleDot, Square, Double, InvertedEllipseC, InvertedEllipseA, Line, CosineDot, InvertedSimpleDot, Round, EllipseA, DoubleDot, EllipseC, Rhomboid, EllipseB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SpotFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24586"/>
			<description>Entry TransferFunction with type Stream in HalftoneType1 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType1 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24587"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType1 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType1 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24588"/>
			<description>Entry TransferFunction in HalftoneType1 shall have one of types: Stream, Name, Dictionary</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeStream == true || TransferFunctionHasTypeName == true || TransferFunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType1 is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="11" testNumber="24589"/>
			<description>Entry TransferFunction in HalftoneType1 is required, when fn:IsRequired(parent::@HalftoneType== 5)</description>
			<test>(containsTransferFunction == true || (parentHalftoneTypeIntegerValue == 5) == false)</test>
			<error>
				<message>Entry TransferFunction in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="10" testNumber="24590"/>
			<description>Entry TransferFunction with type Stream in HalftoneType1 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="24591"/>
			<description>Entry TransferFunction with type Name in HalftoneType1 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType1 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24592"/>
			<description>Entry Type in HalftoneType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="24593"/>
			<description>Entry Type with type Name in HalftoneType1 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType1 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="1" testNumber="24742"/>
			<description>HalftoneType10 shall not contain entries except DecodeParms, F, FDecodeParms, FFilter, Filter, HalftoneName, HalftoneType, Length, TransferFunction, Type, Xsquare, Ysquare</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Xsquare' &amp;&amp; elem != 'Ysquare').length == 0</test>
			<error>
				<message>HalftoneType10 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Xsquare' &amp;&amp; elem != 'Ysquare').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24743"/>
			<description>Entry DecodeParms with type Array in HalftoneType10 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType10 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24744"/>
			<description>Entry DecodeParms with type Dictionary in HalftoneType10 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in HalftoneType10 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24745"/>
			<description>Entry DecodeParms in HalftoneType10 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in HalftoneType10 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="9" testNumber="24746"/>
			<description>Entry DecodeParms with type Array in HalftoneType10 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType10 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24747"/>
			<description>Entry F with type Dictionary in HalftoneType10 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in HalftoneType10 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24748"/>
			<description>Entry F in HalftoneType10 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in HalftoneType10 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24749"/>
			<description>Entry FDecodeParms with type Array in HalftoneType10 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType10 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24750"/>
			<description>Entry FDecodeParms with type Dictionary in HalftoneType10 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in HalftoneType10 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24751"/>
			<description>Entry FDecodeParms in HalftoneType10 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in HalftoneType10 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="9" testNumber="24752"/>
			<description>Entry FDecodeParms with type Array in HalftoneType10 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType10 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24753"/>
			<description>Entry FFilter with type Array in HalftoneType10 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType10 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24754"/>
			<description>Entry FFilter in HalftoneType10 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in HalftoneType10 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="9" testNumber="24755"/>
			<description>Entry FFilter with type Array in HalftoneType10 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType10 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="6" testNumber="24756"/>
			<description>Entry FFilter with type Name in HalftoneType10 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in HalftoneType10 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24757"/>
			<description>Entry Filter with type Array in HalftoneType10 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType10 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24758"/>
			<description>Entry Filter in HalftoneType10 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in HalftoneType10 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="9" testNumber="24759"/>
			<description>Entry Filter with type Array in HalftoneType10 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType10 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="6" testNumber="24760"/>
			<description>Entry Filter with type Name in HalftoneType10 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in HalftoneType10 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24761"/>
			<description>Entry HalftoneName in HalftoneType10 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType10 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24762"/>
			<description>Entry HalftoneType in HalftoneType10 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="7" testNumber="24763"/>
			<description>Entry HalftoneType in HalftoneType10 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="6" testNumber="24764"/>
			<description>Entry HalftoneType with type Integer in HalftoneType10 shall have value 10</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 10</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType10 has incorrect value %2 instead of 10</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24765"/>
			<description>Entry Length in HalftoneType10 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="7" testNumber="24766"/>
			<description>Entry Length in HalftoneType10 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24767"/>
			<description>Entry TransferFunction with type Stream in HalftoneType10 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType10 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24768"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType10 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType10 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24769"/>
			<description>Entry TransferFunction in HalftoneType10 shall have one of types: Stream, Name, Dictionary</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeStream == true || TransferFunctionHasTypeName == true || TransferFunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType10 is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="11" testNumber="24770"/>
			<description>Entry TransferFunction in HalftoneType10 is required, when fn:IsRequired(parent::@HalftoneType== 5)</description>
			<test>(containsTransferFunction == true || (parentHalftoneTypeIntegerValue == 5) == false)</test>
			<error>
				<message>Entry TransferFunction in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="10" testNumber="24771"/>
			<description>Entry TransferFunction with type Stream in HalftoneType10 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType10 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="6" testNumber="24772"/>
			<description>Entry TransferFunction with type Name in HalftoneType10 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType10 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24773"/>
			<description>Entry Type in HalftoneType10 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType10 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="6" testNumber="24774"/>
			<description>Entry Type with type Name in HalftoneType10 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType10 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24775"/>
			<description>Entry Xsquare in HalftoneType10 shall have type Integer</description>
			<test>containsXsquare == false || XsquareHasTypeInteger == true</test>
			<error>
				<message>Entry Xsquare in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="7" testNumber="24776"/>
			<description>Entry Xsquare in HalftoneType10 is required</description>
			<test>containsXsquare == true</test>
			<error>
				<message>Entry Xsquare in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="14" testNumber="24777"/>
			<description>Entry Xsquare with type Integer in HalftoneType10 shall satisfy possible value predicate: fn:Eval(@Xsquare &gt; 0)</description>
			<test>XsquareHasTypeInteger != true || XsquareIntegerValue &gt; 0</test>
			<error>
				<message>Entry Xsquare with type Integer in HalftoneType10 does not satisfy possible value predicate: fn:Eval(@Xsquare &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24778"/>
			<description>Entry Ysquare in HalftoneType10 shall have type Integer</description>
			<test>containsYsquare == false || YsquareHasTypeInteger == true</test>
			<error>
				<message>Entry Ysquare in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="7" testNumber="24779"/>
			<description>Entry Ysquare in HalftoneType10 is required</description>
			<test>containsYsquare == true</test>
			<error>
				<message>Entry Ysquare in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_3" clause="14" testNumber="24780"/>
			<description>Entry Ysquare with type Integer in HalftoneType10 shall satisfy possible value predicate: fn:Eval(@Ysquare &gt; 0)</description>
			<test>YsquareHasTypeInteger != true || YsquareIntegerValue &gt; 0</test>
			<error>
				<message>Entry Ysquare with type Integer in HalftoneType10 does not satisfy possible value predicate: fn:Eval(@Ysquare &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="1" testNumber="24984"/>
			<description>HalftoneType16 shall not contain entries except DecodeParms, F, FDecodeParms, FFilter, Filter, HalftoneName, HalftoneType, Height, Height2, Length, TransferFunction, Type, Width, Width2</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Height2' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'Width2').length == 0</test>
			<error>
				<message>HalftoneType16 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Height2' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'Width2').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24985"/>
			<description>Entry DecodeParms with type Array in HalftoneType16 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType16 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24986"/>
			<description>Entry DecodeParms with type Dictionary in HalftoneType16 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in HalftoneType16 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24987"/>
			<description>Entry DecodeParms in HalftoneType16 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in HalftoneType16 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="9" testNumber="24988"/>
			<description>Entry DecodeParms with type Array in HalftoneType16 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType16 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24989"/>
			<description>Entry F with type Dictionary in HalftoneType16 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in HalftoneType16 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24990"/>
			<description>Entry F in HalftoneType16 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in HalftoneType16 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24991"/>
			<description>Entry FDecodeParms with type Array in HalftoneType16 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType16 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24992"/>
			<description>Entry FDecodeParms with type Dictionary in HalftoneType16 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in HalftoneType16 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24993"/>
			<description>Entry FDecodeParms in HalftoneType16 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in HalftoneType16 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="9" testNumber="24994"/>
			<description>Entry FDecodeParms with type Array in HalftoneType16 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType16 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24995"/>
			<description>Entry FFilter with type Array in HalftoneType16 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType16 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="24996"/>
			<description>Entry FFilter in HalftoneType16 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in HalftoneType16 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="9" testNumber="24997"/>
			<description>Entry FFilter with type Array in HalftoneType16 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType16 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="6" testNumber="24998"/>
			<description>Entry FFilter with type Name in HalftoneType16 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in HalftoneType16 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="17" testNumber="24999"/>
			<description>Entry Filter with type Array in HalftoneType16 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType16 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25000"/>
			<description>Entry Filter in HalftoneType16 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in HalftoneType16 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="9" testNumber="25001"/>
			<description>Entry Filter with type Array in HalftoneType16 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType16 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25002"/>
			<description>Entry Filter with type Name in HalftoneType16 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in HalftoneType16 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25003"/>
			<description>Entry HalftoneName in HalftoneType16 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType16 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25004"/>
			<description>Entry HalftoneType in HalftoneType16 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="7" testNumber="25005"/>
			<description>Entry HalftoneType in HalftoneType16 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25006"/>
			<description>Entry HalftoneType with type Integer in HalftoneType16 shall have value 16</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 16</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType16 has incorrect value %2 instead of 16</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25007"/>
			<description>Entry Height in HalftoneType16 shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="7" testNumber="25008"/>
			<description>Entry Height in HalftoneType16 is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="14" testNumber="25009"/>
			<description>Entry Height with type Integer in HalftoneType16 shall satisfy possible value predicate: fn:Eval(@Height &gt; 0)</description>
			<test>HeightHasTypeInteger != true || HeightIntegerValue &gt; 0</test>
			<error>
				<message>Entry Height with type Integer in HalftoneType16 does not satisfy possible value predicate: fn:Eval(@Height &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25010"/>
			<description>Entry Height2 in HalftoneType16 shall have type Integer</description>
			<test>containsHeight2 == false || Height2HasTypeInteger == true</test>
			<error>
				<message>Entry Height2 in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="14" testNumber="25011"/>
			<description>Entry Height2 with type Integer in HalftoneType16 shall satisfy possible value predicate: fn:Eval(@Height2 &gt; 0)</description>
			<test>Height2HasTypeInteger != true || Height2IntegerValue &gt; 0</test>
			<error>
				<message>Entry Height2 with type Integer in HalftoneType16 does not satisfy possible value predicate: fn:Eval(@Height2 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="9" testNumber="25012"/>
			<description>Entry Height2 with type Integer in HalftoneType16 shall satisfy special case: fn:IsPresent(Width2)</description>
			<test>Height2HasTypeInteger != true || ((containsWidth2 == true))</test>
			<error>
				<message>Entry Height2 with type Integer in HalftoneType16 does not satisfy special case: fn:IsPresent(Width2)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25013"/>
			<description>Entry Length in HalftoneType16 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="7" testNumber="25014"/>
			<description>Entry Length in HalftoneType16 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25015"/>
			<description>Entry TransferFunction with type Stream in HalftoneType16 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType16 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25016"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType16 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType16 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25017"/>
			<description>Entry TransferFunction in HalftoneType16 shall have one of types: Stream, Name, Dictionary</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeStream == true || TransferFunctionHasTypeName == true || TransferFunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType16 is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="11" testNumber="25018"/>
			<description>Entry TransferFunction in HalftoneType16 is required, when fn:IsRequired(parent::@HalftoneType== 5)</description>
			<test>(containsTransferFunction == true || (parentHalftoneTypeIntegerValue == 5) == false)</test>
			<error>
				<message>Entry TransferFunction in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="10" testNumber="25019"/>
			<description>Entry TransferFunction with type Stream in HalftoneType16 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType16 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25020"/>
			<description>Entry TransferFunction with type Name in HalftoneType16 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType16 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25021"/>
			<description>Entry Type in HalftoneType16 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType16 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25022"/>
			<description>Entry Type with type Name in HalftoneType16 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType16 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25023"/>
			<description>Entry Width in HalftoneType16 shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="7" testNumber="25024"/>
			<description>Entry Width in HalftoneType16 is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="14" testNumber="25025"/>
			<description>Entry Width with type Integer in HalftoneType16 shall satisfy possible value predicate: fn:Eval(@Width &gt; 0)</description>
			<test>WidthHasTypeInteger != true || WidthIntegerValue &gt; 0</test>
			<error>
				<message>Entry Width with type Integer in HalftoneType16 does not satisfy possible value predicate: fn:Eval(@Width &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25026"/>
			<description>Entry Width2 in HalftoneType16 shall have type Integer</description>
			<test>containsWidth2 == false || Width2HasTypeInteger == true</test>
			<error>
				<message>Entry Width2 in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_3" clause="14" testNumber="25027"/>
			<description>Entry Width2 with type Integer in HalftoneType16 shall satisfy possible value predicate: fn:Eval(@Width2 &gt; 0)</description>
			<test>Width2HasTypeInteger != true || Width2IntegerValue &gt; 0</test>
			<error>
				<message>Entry Width2 with type Integer in HalftoneType16 does not satisfy possible value predicate: fn:Eval(@Width2 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25267"/>
			<description>Entry Default with type Stream in HalftoneType5 shall be one of objects HalftoneType6, HalftoneType10, HalftoneType16</description>
			<test>DefaultHasTypeStream != true || Default_size == 1</test>
			<error>
				<message>Entry Default with type Stream in HalftoneType5 is not one of objects HalftoneType6, HalftoneType10, HalftoneType16</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25268"/>
			<description>Entry Default with type Dictionary in HalftoneType5 shall be object HalftoneType1</description>
			<test>DefaultHasTypeDictionary != true || Default_size == 1</test>
			<error>
				<message>Entry Default with type Dictionary in HalftoneType5 is not object HalftoneType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25269"/>
			<description>Entry Default in HalftoneType5 shall have one of types: Stream, Dictionary</description>
			<test>containsDefault == false || DefaultHasTypeStream == true || DefaultHasTypeDictionary == true</test>
			<error>
				<message>Entry Default in HalftoneType5 is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_3" clause="7" testNumber="25270"/>
			<description>Entry Default in HalftoneType5 is required</description>
			<test>containsDefault == true</test>
			<error>
				<message>Entry Default in HalftoneType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_3" clause="10" testNumber="25271"/>
			<description>Entry Default with type Stream in HalftoneType5 shall be indirect</description>
			<test>DefaultHasTypeStream != true || isDefaultIndirect == true</test>
			<error>
				<message>Entry Default with type Stream in HalftoneType5 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25272"/>
			<description>Entry HalftoneName in HalftoneType5 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType5 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25273"/>
			<description>Entry HalftoneType in HalftoneType5 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_3" clause="7" testNumber="25274"/>
			<description>Entry HalftoneType in HalftoneType5 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25275"/>
			<description>Entry HalftoneType with type Integer in HalftoneType5 shall have value 5</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 5</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType5 has incorrect value %2 instead of 5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25276"/>
			<description>Entry Type in HalftoneType5 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType5 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25277"/>
			<description>Entry Type with type Name in HalftoneType5 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType5 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25337"/>
			<description>Entry with type Stream in HalftoneType5 shall be one of objects HalftoneType6, HalftoneType10, HalftoneType16</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in HalftoneType5 is not one of objects HalftoneType6, HalftoneType10, HalftoneType16</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25338"/>
			<description>Entry with type Dictionary in HalftoneType5 shall be object HalftoneType1</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in HalftoneType5 is not object HalftoneType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25339"/>
			<description>Entry in HalftoneType5 shall have one of types: Stream, Dictionary</description>
			<test>HasTypeStream == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in HalftoneType5 is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="25340"/>
			<description>Entry with type Stream in HalftoneType5 shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in HalftoneType5 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="1" testNumber="25378"/>
			<description>HalftoneType6 shall not contain entries except DecodeParms, F, FDecodeParms, FFilter, Filter, HalftoneName, HalftoneType, Height, Length, TransferFunction, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').length == 0</test>
			<error>
				<message>HalftoneType6 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25379"/>
			<description>Entry DecodeParms with type Array in HalftoneType6 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType6 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25380"/>
			<description>Entry DecodeParms with type Dictionary in HalftoneType6 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in HalftoneType6 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25381"/>
			<description>Entry DecodeParms in HalftoneType6 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in HalftoneType6 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="9" testNumber="25382"/>
			<description>Entry DecodeParms with type Array in HalftoneType6 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType6 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25383"/>
			<description>Entry F with type Dictionary in HalftoneType6 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in HalftoneType6 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25384"/>
			<description>Entry F in HalftoneType6 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in HalftoneType6 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25385"/>
			<description>Entry FDecodeParms with type Array in HalftoneType6 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType6 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25386"/>
			<description>Entry FDecodeParms with type Dictionary in HalftoneType6 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in HalftoneType6 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25387"/>
			<description>Entry FDecodeParms in HalftoneType6 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in HalftoneType6 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="9" testNumber="25388"/>
			<description>Entry FDecodeParms with type Array in HalftoneType6 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType6 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25389"/>
			<description>Entry FFilter with type Array in HalftoneType6 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType6 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25390"/>
			<description>Entry FFilter in HalftoneType6 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in HalftoneType6 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="9" testNumber="25391"/>
			<description>Entry FFilter with type Array in HalftoneType6 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType6 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25392"/>
			<description>Entry FFilter with type Name in HalftoneType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in HalftoneType6 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25393"/>
			<description>Entry Filter with type Array in HalftoneType6 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType6 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25394"/>
			<description>Entry Filter in HalftoneType6 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in HalftoneType6 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="9" testNumber="25395"/>
			<description>Entry Filter with type Array in HalftoneType6 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType6 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25396"/>
			<description>Entry Filter with type Name in HalftoneType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in HalftoneType6 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25397"/>
			<description>Entry HalftoneName in HalftoneType6 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType6 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25398"/>
			<description>Entry HalftoneType in HalftoneType6 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="7" testNumber="25399"/>
			<description>Entry HalftoneType in HalftoneType6 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25400"/>
			<description>Entry HalftoneType with type Integer in HalftoneType6 shall have value 6</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 6</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType6 has incorrect value %2 instead of 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25401"/>
			<description>Entry Height in HalftoneType6 shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="7" testNumber="25402"/>
			<description>Entry Height in HalftoneType6 is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in HalftoneType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="14" testNumber="25403"/>
			<description>Entry Height with type Integer in HalftoneType6 shall satisfy possible value predicate: fn:Eval(@Height &gt;= 0)</description>
			<test>HeightHasTypeInteger != true || HeightIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Height with type Integer in HalftoneType6 does not satisfy possible value predicate: fn:Eval(@Height &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25404"/>
			<description>Entry Length in HalftoneType6 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="7" testNumber="25405"/>
			<description>Entry Length in HalftoneType6 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in HalftoneType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25406"/>
			<description>Entry TransferFunction with type Stream in HalftoneType6 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType6 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25407"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType6 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType6 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25408"/>
			<description>Entry TransferFunction in HalftoneType6 shall have one of types: Stream, Name, Dictionary</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeStream == true || TransferFunctionHasTypeName == true || TransferFunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType6 is not one of types: Stream, Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="10" testNumber="25409"/>
			<description>Entry TransferFunction with type Stream in HalftoneType6 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType6 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25410"/>
			<description>Entry TransferFunction with type Name in HalftoneType6 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType6 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25411"/>
			<description>Entry Type in HalftoneType6 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType6 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25412"/>
			<description>Entry Type with type Name in HalftoneType6 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType6 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25413"/>
			<description>Entry Width in HalftoneType6 shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="7" testNumber="25414"/>
			<description>Entry Width in HalftoneType6 is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in HalftoneType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_3" clause="14" testNumber="25415"/>
			<description>Entry Width with type Integer in HalftoneType6 shall satisfy possible value predicate: fn:Eval(@Width &gt; 0)</description>
			<test>WidthHasTypeInteger != true || WidthIntegerValue &gt; 0</test>
			<error>
				<message>Entry Width with type Integer in HalftoneType6 does not satisfy possible value predicate: fn:Eval(@Width &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_3" clause="2" testNumber="25614"/>
			<description>ICCBasedColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ICCBasedColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25615"/>
			<description>Entry 0 in ICCBasedColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ICCBasedColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25616"/>
			<description>Entry 0 with type Name in ICCBasedColorSpace shall have value ICCBased</description>
			<test>entry0HasTypeName != true || entry0NameValue == "ICCBased"</test>
			<error>
				<message>Entry 0 with type Name in ICCBasedColorSpace has incorrect value %2 instead of ICCBased</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25617"/>
			<description>Entry 1 with type Stream in ICCBasedColorSpace shall be object ICCProfileStream</description>
			<test>entry1HasTypeStream != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Stream in ICCBasedColorSpace is not object ICCProfileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25618"/>
			<description>Entry 1 in ICCBasedColorSpace shall have type Stream</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in ICCBasedColorSpace is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_3" clause="10" testNumber="25619"/>
			<description>Entry 1 with type Stream in ICCBasedColorSpace shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in ICCBasedColorSpace is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="1" testNumber="25650"/>
			<description>ICCProfileStream shall not contain entries except Alternate, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, N, Range</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Alternate' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Range').length == 0</test>
			<error>
				<message>ICCProfileStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Alternate' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Range').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25651"/>
			<description>Entry Alternate with type Array in ICCProfileStream shall be one of objects CalGrayColorSpace, CalRGBColorSpace, DeviceNColorSpace, IndexedColorSpace, LabColorSpace, SeparationColorSpace</description>
			<test>AlternateHasTypeArray != true || Alternate_size == 1</test>
			<error>
				<message>Entry Alternate with type Array in ICCProfileStream is not one of objects CalGrayColorSpace, CalRGBColorSpace, DeviceNColorSpace, IndexedColorSpace, LabColorSpace, SeparationColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25652"/>
			<description>Entry Alternate in ICCProfileStream shall have one of types: Array, Name</description>
			<test>containsAlternate == false || AlternateHasTypeArray == true || AlternateHasTypeName == true</test>
			<error>
				<message>Entry Alternate in ICCProfileStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25653"/>
			<description>Entry Alternate with type Name in ICCProfileStream shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>AlternateHasTypeName != true || AlternateNameValue == "DeviceGray" || AlternateNameValue == "DeviceRGB" || AlternateNameValue == "DeviceCMYK"</test>
			<error>
				<message>Entry Alternate with type Name in ICCProfileStream has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>AlternateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25654"/>
			<description>Entry DecodeParms with type Array in ICCProfileStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ICCProfileStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25655"/>
			<description>Entry DecodeParms with type Dictionary in ICCProfileStream shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ICCProfileStream is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25656"/>
			<description>Entry DecodeParms in ICCProfileStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ICCProfileStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="25657"/>
			<description>Entry DecodeParms with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25658"/>
			<description>Entry F with type Dictionary in ICCProfileStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ICCProfileStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25659"/>
			<description>Entry F in ICCProfileStream shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ICCProfileStream is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25660"/>
			<description>Entry FDecodeParms with type Array in ICCProfileStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ICCProfileStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25661"/>
			<description>Entry FDecodeParms with type Dictionary in ICCProfileStream shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ICCProfileStream is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25662"/>
			<description>Entry FDecodeParms in ICCProfileStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ICCProfileStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="25663"/>
			<description>Entry FDecodeParms with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25664"/>
			<description>Entry FFilter with type Array in ICCProfileStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ICCProfileStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25665"/>
			<description>Entry FFilter in ICCProfileStream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ICCProfileStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="25666"/>
			<description>Entry FFilter with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25667"/>
			<description>Entry FFilter with type Name in ICCProfileStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in ICCProfileStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25668"/>
			<description>Entry Filter with type Array in ICCProfileStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ICCProfileStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25669"/>
			<description>Entry Filter in ICCProfileStream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ICCProfileStream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="25670"/>
			<description>Entry Filter with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25671"/>
			<description>Entry Filter with type Name in ICCProfileStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in ICCProfileStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25672"/>
			<description>Entry Length in ICCProfileStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ICCProfileStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="7" testNumber="25673"/>
			<description>Entry Length in ICCProfileStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ICCProfileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25674"/>
			<description>Entry N in ICCProfileStream shall have type Integer</description>
			<test>containsN == false || NHasTypeInteger == true</test>
			<error>
				<message>Entry N in ICCProfileStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="7" testNumber="25675"/>
			<description>Entry N in ICCProfileStream is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in ICCProfileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25676"/>
			<description>Entry N with type Integer in ICCProfileStream shall have one of values: 1, 3, 4</description>
			<test>NHasTypeInteger != true || NIntegerValue == 1 || NIntegerValue == 3 || NIntegerValue == 4</test>
			<error>
				<message>Entry N with type Integer in ICCProfileStream has incorrect value %2 instead of 1, 3, 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25677"/>
			<description>Entry Range with type Array in ICCProfileStream shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in ICCProfileStream is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25678"/>
			<description>Entry Range in ICCProfileStream shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in ICCProfileStream is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="25679"/>
			<description>Entry Range with type Array in ICCProfileStream shall satisfy special case: fn:Eval(fn:ArrayLength(Range) == (2 * @N))</description>
			<test>RangeHasTypeArray != true || (RangeArraySize == (2 * NIntegerValue))</test>
			<error>
				<message>Entry Range with type Array in ICCProfileStream does not satisfy special case: fn:Eval(fn:ArrayLength(Range) == (2 * @N))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_3" clause="1" testNumber="25853"/>
			<description>IconFit shall not contain entries except A, S, SW</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SW').length == 0</test>
			<error>
				<message>IconFit contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SW').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25854"/>
			<description>Entry A with type Array in IconFit shall be object ArrayOf_2Numbers</description>
			<test>AHasTypeArray != true || A_size == 1</test>
			<error>
				<message>Entry A with type Array in IconFit is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25855"/>
			<description>Entry A in IconFit shall have type Array</description>
			<test>containsA == false || AHasTypeArray == true</test>
			<error>
				<message>Entry A in IconFit is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_3" clause="9" testNumber="25856"/>
			<description>Entry A with type Array in IconFit shall satisfy special case: fn:Eval((A::@0&gt;= 0) &amp;&amp; (A::@0&lt;= 1) &amp;&amp; (A::@1&gt;= 0) &amp;&amp; (A::@1&lt;= 1))</description>
			<test>AHasTypeArray != true || ((A0NumberValue &gt;= 0) &amp;&amp; (A0NumberValue &lt;= 1) &amp;&amp; (A1NumberValue &gt;= 0) &amp;&amp; (A1NumberValue &lt;= 1))</test>
			<error>
				<message>Entry A with type Array in IconFit does not satisfy special case: fn:Eval((A::@0&gt;= 0) &amp;&amp; (A::@0&lt;= 1) &amp;&amp; (A::@1&gt;= 0) &amp;&amp; (A::@1&lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25857"/>
			<description>Entry S in IconFit shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in IconFit is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25858"/>
			<description>Entry S with type Name in IconFit shall have one of values: P, A</description>
			<test>SHasTypeName != true || SNameValue == "A" || SNameValue == "P"</test>
			<error>
				<message>Entry S with type Name in IconFit has incorrect value %2 instead of P, A</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25859"/>
			<description>Entry SW in IconFit shall have type Name</description>
			<test>containsSW == false || SWHasTypeName == true</test>
			<error>
				<message>Entry SW in IconFit is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25860"/>
			<description>Entry SW with type Name in IconFit shall have one of values: A, B, S, N</description>
			<test>SWHasTypeName != true || SWNameValue == "A" || SWNameValue == "B" || SWNameValue == "S" || SWNameValue == "N"</test>
			<error>
				<message>Entry SW with type Name in IconFit has incorrect value %2 instead of A, B, S, N</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SWNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_3" clause="2" testNumber="25937"/>
			<description>IndexedColorSpace shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>IndexedColorSpace contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25938"/>
			<description>Entry 0 in IndexedColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in IndexedColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25939"/>
			<description>Entry 0 with type Name in IndexedColorSpace shall have value Indexed</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Indexed"</test>
			<error>
				<message>Entry 0 with type Name in IndexedColorSpace has incorrect value %2 instead of Indexed</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25940"/>
			<description>Entry 1 with type Array in IndexedColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in IndexedColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25941"/>
			<description>Entry 1 in IndexedColorSpace shall have one of types: Array, Name</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in IndexedColorSpace is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_3" clause="6" testNumber="25942"/>
			<description>Entry 1 with type Name in IndexedColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry1HasTypeName != true || entry1NameValue == "DeviceCMYK" || entry1NameValue == "DeviceRGB" || entry1NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 1 with type Name in IndexedColorSpace has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25943"/>
			<description>Entry 2 in IndexedColorSpace shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in IndexedColorSpace is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_3" clause="14" testNumber="25944"/>
			<description>Entry 2 with type Integer in IndexedColorSpace shall satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 255))</description>
			<test>entry2HasTypeInteger != true || (entry2IntegerValue &gt;= 0) &amp;&amp; (entry2IntegerValue &lt;= 255)</test>
			<error>
				<message>Entry 2 with type Integer in IndexedColorSpace does not satisfy possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 255))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="25945"/>
			<description>Entry 3 with type Stream in IndexedColorSpace shall be object Stream</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in IndexedColorSpace is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="25946"/>
			<description>Entry 3 in IndexedColorSpace shall have one of types: Stream, String</description>
			<test>size &lt;= 3 || entry3HasTypeStream == true || entry3HasTypeString == true</test>
			<error>
				<message>Entry 3 in IndexedColorSpace is not one of types: Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_3" clause="10" testNumber="25947"/>
			<description>Entry 3 with type Stream in IndexedColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in IndexedColorSpace is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="1" testNumber="26013"/>
			<description>InteractiveForm shall not contain entries except CO, DA, DR, Fields, NeedAppearances, Q, SigFlags</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CO' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DR' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'NeedAppearances' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'SigFlags').length == 0</test>
			<error>
				<message>InteractiveForm contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CO' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DR' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'NeedAppearances' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'SigFlags').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26014"/>
			<description>Entry CO with type Array in InteractiveForm shall be object ArrayOfFields</description>
			<test>COHasTypeArray != true || CO_size == 1</test>
			<error>
				<message>Entry CO with type Array in InteractiveForm is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26015"/>
			<description>Entry CO in InteractiveForm shall have type Array</description>
			<test>containsCO == false || COHasTypeArray == true</test>
			<error>
				<message>Entry CO in InteractiveForm is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26016"/>
			<description>Entry DA in InteractiveForm shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in InteractiveForm is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26017"/>
			<description>Entry DR with type Dictionary in InteractiveForm shall be object Resource</description>
			<test>DRHasTypeDictionary != true || DR_size == 1</test>
			<error>
				<message>Entry DR with type Dictionary in InteractiveForm is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26018"/>
			<description>Entry DR in InteractiveForm shall have type Dictionary</description>
			<test>containsDR == false || DRHasTypeDictionary == true</test>
			<error>
				<message>Entry DR in InteractiveForm is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26019"/>
			<description>Entry Fields with type Array in InteractiveForm shall be object ArrayOfFields</description>
			<test>FieldsHasTypeArray != true || Fields_size == 1</test>
			<error>
				<message>Entry Fields with type Array in InteractiveForm is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26020"/>
			<description>Entry Fields in InteractiveForm shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in InteractiveForm is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="7" testNumber="26021"/>
			<description>Entry Fields in InteractiveForm is required</description>
			<test>containsFields == true</test>
			<error>
				<message>Entry Fields in InteractiveForm is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26022"/>
			<description>Entry NeedAppearances in InteractiveForm shall have type Boolean</description>
			<test>containsNeedAppearances == false || NeedAppearancesHasTypeBoolean == true</test>
			<error>
				<message>Entry NeedAppearances in InteractiveForm is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26023"/>
			<description>Entry Q in InteractiveForm shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in InteractiveForm is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="6" testNumber="26024"/>
			<description>Entry Q with type Integer in InteractiveForm shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in InteractiveForm has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26025"/>
			<description>Entry SigFlags in InteractiveForm shall have type Bitmask</description>
			<test>containsSigFlags == false || SigFlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry SigFlags in InteractiveForm is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_3" clause="9" testNumber="26026"/>
			<description>Entry SigFlags with type Bitmask in InteractiveForm shall satisfy special case: fn:Eval(fn:BitsClear(3 , 32))</description>
			<test>SigFlagsHasTypeBitmask != true || (((SigFlagsBitmaskValue &gt;&gt; 2 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry SigFlags with type Bitmask in InteractiveForm does not satisfy special case: fn:Eval(fn:BitsClear(3 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_3" clause="2" testNumber="26122"/>
			<description>LabColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>LabColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26123"/>
			<description>Entry 0 in LabColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in LabColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_3" clause="6" testNumber="26124"/>
			<description>Entry 0 with type Name in LabColorSpace shall have value Lab</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Lab"</test>
			<error>
				<message>Entry 0 with type Name in LabColorSpace has incorrect value %2 instead of Lab</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26125"/>
			<description>Entry 1 with type Dictionary in LabColorSpace shall be object LabDict</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in LabColorSpace is not object LabDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26126"/>
			<description>Entry 1 in LabColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in LabColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_3" clause="1" testNumber="26168"/>
			<description>LabDict shall not contain entries except BlackPoint, Range, WhitePoint</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'WhitePoint').length == 0</test>
			<error>
				<message>LabDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'WhitePoint').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26169"/>
			<description>Entry BlackPoint with type Array in LabDict shall be object BlackpointArray</description>
			<test>BlackPointHasTypeArray != true || BlackPoint_size == 1</test>
			<error>
				<message>Entry BlackPoint with type Array in LabDict is not object BlackpointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26170"/>
			<description>Entry BlackPoint in LabDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in LabDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26171"/>
			<description>Entry Range with type Array in LabDict shall be object LabRangeArray</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in LabDict is not object LabRangeArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26172"/>
			<description>Entry Range in LabDict shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in LabDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26173"/>
			<description>Entry WhitePoint with type Array in LabDict shall be object WhitepointArray</description>
			<test>WhitePointHasTypeArray != true || WhitePoint_size == 1</test>
			<error>
				<message>Entry WhitePoint with type Array in LabDict is not object WhitepointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26174"/>
			<description>Entry WhitePoint in LabDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in LabDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="26175"/>
			<description>Entry WhitePoint in LabDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in LabDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_3" clause="2" testNumber="26234"/>
			<description>LabRangeArray shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>LabRangeArray contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26235"/>
			<description>Entry 0 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="26236"/>
			<description>Entry 0 with type Number in LabRangeArray shall satisfy possible value predicate: fn:Eval(@0 &lt;= @1)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &lt;= entry1NumberValue</test>
			<error>
				<message>Entry 0 with type Number in LabRangeArray does not satisfy possible value predicate: fn:Eval(@0 &lt;= @1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26237"/>
			<description>Entry 1 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="26238"/>
			<description>Entry 1 with type Number in LabRangeArray shall satisfy possible value predicate: fn:Eval(@1 &gt;= @0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= entry0NumberValue</test>
			<error>
				<message>Entry 1 with type Number in LabRangeArray does not satisfy possible value predicate: fn:Eval(@1 &gt;= @0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26239"/>
			<description>Entry 2 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="26240"/>
			<description>Entry 2 with type Number in LabRangeArray shall satisfy possible value predicate: fn:Eval(@2 &lt;= @3)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &lt;= entry3NumberValue</test>
			<error>
				<message>Entry 2 with type Number in LabRangeArray does not satisfy possible value predicate: fn:Eval(@2 &lt;= @3)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26241"/>
			<description>Entry 3 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="26242"/>
			<description>Entry 3 with type Number in LabRangeArray shall satisfy possible value predicate: fn:Eval(@3 &gt;= @2)</description>
			<test>entry3HasTypeNumber != true || entry3NumberValue &gt;= entry2NumberValue</test>
			<error>
				<message>Entry 3 with type Number in LabRangeArray does not satisfy possible value predicate: fn:Eval(@3 &gt;= @2)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="1" testNumber="26492"/>
			<description>LinearizationParameterDict shall not contain entries except E, H, L, Linearized, N, O, P, T</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'H' &amp;&amp; elem != 'L' &amp;&amp; elem != 'Linearized' &amp;&amp; elem != 'N' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'T').length == 0</test>
			<error>
				<message>LinearizationParameterDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'H' &amp;&amp; elem != 'L' &amp;&amp; elem != 'Linearized' &amp;&amp; elem != 'N' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'T').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26493"/>
			<description>Entry E in LinearizationParameterDict shall have type Integer</description>
			<test>containsE == false || EHasTypeInteger == true</test>
			<error>
				<message>Entry E in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="26494"/>
			<description>Entry E in LinearizationParameterDict is required</description>
			<test>containsE == true</test>
			<error>
				<message>Entry E in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="16" testNumber="26495"/>
			<description>If entry E with type Integer in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>EHasTypeInteger != true || (isEIndirect == false)</test>
			<error>
				<message>Entry E with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="14" testNumber="26496"/>
			<description>Entry E with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval((@E &gt; 0) &amp;&amp; (@E &lt;= @L))</description>
			<test>EHasTypeInteger != true || (EIntegerValue &gt; 0) &amp;&amp; (EIntegerValue &lt;= LIntegerValue)</test>
			<error>
				<message>Entry E with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval((@E &gt; 0) &amp;&amp; (@E &lt;= @L))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26497"/>
			<description>Entry H with type Array in LinearizationParameterDict shall be one of objects ArrayOf_2Integers, ArrayOf_4Integers</description>
			<test>HHasTypeArray != true || H_size == 1</test>
			<error>
				<message>Entry H with type Array in LinearizationParameterDict is not one of objects ArrayOf_2Integers, ArrayOf_4Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26498"/>
			<description>Entry H in LinearizationParameterDict shall have type Array</description>
			<test>containsH == false || HHasTypeArray == true</test>
			<error>
				<message>Entry H in LinearizationParameterDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="26499"/>
			<description>Entry H in LinearizationParameterDict is required</description>
			<test>containsH == true</test>
			<error>
				<message>Entry H in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="16" testNumber="26500"/>
			<description>If entry H with type Array in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>HHasTypeArray != true || (isHIndirect == false)</test>
			<error>
				<message>Entry H with type Array in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26501"/>
			<description>Entry L in LinearizationParameterDict shall have type Integer</description>
			<test>containsL == false || LHasTypeInteger == true</test>
			<error>
				<message>Entry L in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="26502"/>
			<description>Entry L in LinearizationParameterDict is required</description>
			<test>containsL == true</test>
			<error>
				<message>Entry L in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="16" testNumber="26503"/>
			<description>If entry L with type Integer in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>LHasTypeInteger != true || (isLIndirect == false)</test>
			<error>
				<message>Entry L with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="14" testNumber="26504"/>
			<description>Entry L with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@L &gt; 0)</description>
			<test>LHasTypeInteger != true || LIntegerValue &gt; 0</test>
			<error>
				<message>Entry L with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@L &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26505"/>
			<description>Entry Linearized in LinearizationParameterDict shall have type Number</description>
			<test>containsLinearized == false || LinearizedHasTypeNumber == true</test>
			<error>
				<message>Entry Linearized in LinearizationParameterDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="26506"/>
			<description>Entry Linearized in LinearizationParameterDict is required</description>
			<test>containsLinearized == true</test>
			<error>
				<message>Entry Linearized in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="16" testNumber="26507"/>
			<description>If entry Linearized with type Number in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>LinearizedHasTypeNumber != true || (isLinearizedIndirect == false)</test>
			<error>
				<message>Entry Linearized with type Number in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="6" testNumber="26508"/>
			<description>Entry Linearized with type Number in LinearizationParameterDict shall have value 1.0</description>
			<test>LinearizedHasTypeNumber != true || LinearizedNumberValue == 1.0</test>
			<error>
				<message>Entry Linearized with type Number in LinearizationParameterDict has incorrect value %2 instead of 1.0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>LinearizedNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26509"/>
			<description>Entry N in LinearizationParameterDict shall have type Integer</description>
			<test>containsN == false || NHasTypeInteger == true</test>
			<error>
				<message>Entry N in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="26510"/>
			<description>Entry N in LinearizationParameterDict is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="16" testNumber="26511"/>
			<description>If entry N with type Integer in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>NHasTypeInteger != true || (isNIndirect == false)</test>
			<error>
				<message>Entry N with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="14" testNumber="26512"/>
			<description>Entry N with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@N &gt; 0)</description>
			<test>NHasTypeInteger != true || NIntegerValue &gt; 0</test>
			<error>
				<message>Entry N with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@N &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26513"/>
			<description>Entry O in LinearizationParameterDict shall have type Integer</description>
			<test>containsO == false || OHasTypeInteger == true</test>
			<error>
				<message>Entry O in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="26514"/>
			<description>Entry O in LinearizationParameterDict is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="16" testNumber="26515"/>
			<description>If entry O with type Integer in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>OHasTypeInteger != true || (isOIndirect == false)</test>
			<error>
				<message>Entry O with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="14" testNumber="26516"/>
			<description>Entry O with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@O &gt; 0)</description>
			<test>OHasTypeInteger != true || OIntegerValue &gt; 0</test>
			<error>
				<message>Entry O with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@O &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26517"/>
			<description>Entry P in LinearizationParameterDict shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="16" testNumber="26518"/>
			<description>If entry P with type Integer in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>PHasTypeInteger != true || (isPIndirect == false)</test>
			<error>
				<message>Entry P with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="14" testNumber="26519"/>
			<description>Entry P with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@P &gt;= 0)</description>
			<test>PHasTypeInteger != true || PIntegerValue &gt;= 0</test>
			<error>
				<message>Entry P with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@P &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26520"/>
			<description>Entry T in LinearizationParameterDict shall have type Integer</description>
			<test>containsT == false || THasTypeInteger == true</test>
			<error>
				<message>Entry T in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="26521"/>
			<description>Entry T in LinearizationParameterDict is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="16" testNumber="26522"/>
			<description>If entry T with type Integer in LinearizationParameterDict satisfies condition fn:MustBeDirect(), it shall be direct</description>
			<test>THasTypeInteger != true || (isTIndirect == false)</test>
			<error>
				<message>Entry T with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_3" clause="14" testNumber="26523"/>
			<description>Entry T with type Integer in LinearizationParameterDict shall satisfy possible value predicate: fn:Eval(@T &gt; 0)</description>
			<test>THasTypeInteger != true || TIntegerValue &gt; 0</test>
			<error>
				<message>Entry T with type Integer in LinearizationParameterDict does not satisfy possible value predicate: fn:Eval(@T &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_3" clause="1" testNumber="26693"/>
			<description>Mac shall not contain entries except Creator, ResFork, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Creator' &amp;&amp; elem != 'ResFork' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>Mac contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Creator' &amp;&amp; elem != 'ResFork' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26694"/>
			<description>Entry Creator in Mac shall have type Integer</description>
			<test>containsCreator == false || CreatorHasTypeInteger == true</test>
			<error>
				<message>Entry Creator in Mac is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26695"/>
			<description>Entry ResFork with type Stream in Mac shall be object Stream</description>
			<test>ResForkHasTypeStream != true || ResFork_size == 1</test>
			<error>
				<message>Entry ResFork with type Stream in Mac is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26696"/>
			<description>Entry ResFork in Mac shall have type Stream</description>
			<test>containsResFork == false || ResForkHasTypeStream == true</test>
			<error>
				<message>Entry ResFork in Mac is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_3" clause="10" testNumber="26697"/>
			<description>Entry ResFork with type Stream in Mac shall be indirect</description>
			<test>ResForkHasTypeStream != true || isResForkIndirect == true</test>
			<error>
				<message>Entry ResFork with type Stream in Mac is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26698"/>
			<description>Entry Subtype in Mac shall have type Integer</description>
			<test>containsSubtype == false || SubtypeHasTypeInteger == true</test>
			<error>
				<message>Entry Subtype in Mac is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="1" testNumber="26745"/>
			<description>MarkedContentReference shall not contain entries except MCID, Pg, Stm, StmOwn, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'MCID' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Stm' &amp;&amp; elem != 'StmOwn' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MarkedContentReference contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'MCID' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Stm' &amp;&amp; elem != 'StmOwn' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26746"/>
			<description>Entry MCID in MarkedContentReference shall have type Integer</description>
			<test>containsMCID == false || MCIDHasTypeInteger == true</test>
			<error>
				<message>Entry MCID in MarkedContentReference is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="7" testNumber="26747"/>
			<description>Entry MCID in MarkedContentReference is required</description>
			<test>containsMCID == true</test>
			<error>
				<message>Entry MCID in MarkedContentReference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26748"/>
			<description>Entry Pg with type Dictionary in MarkedContentReference shall be object PageObject</description>
			<test>PgHasTypeDictionary != true || Pg_size == 1</test>
			<error>
				<message>Entry Pg with type Dictionary in MarkedContentReference is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26749"/>
			<description>Entry Pg in MarkedContentReference shall have type Dictionary</description>
			<test>containsPg == false || PgHasTypeDictionary == true</test>
			<error>
				<message>Entry Pg in MarkedContentReference is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="10" testNumber="26750"/>
			<description>Entry Pg with type Dictionary in MarkedContentReference shall be indirect</description>
			<test>PgHasTypeDictionary != true || isPgIndirect == true</test>
			<error>
				<message>Entry Pg with type Dictionary in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26751"/>
			<description>Entry Stm with type Stream in MarkedContentReference shall be object XObjectFormType1</description>
			<test>StmHasTypeStream != true || Stm_size == 1</test>
			<error>
				<message>Entry Stm with type Stream in MarkedContentReference is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26752"/>
			<description>Entry Stm in MarkedContentReference shall have type Stream</description>
			<test>containsStm == false || StmHasTypeStream == true</test>
			<error>
				<message>Entry Stm in MarkedContentReference is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="10" testNumber="26753"/>
			<description>Entry Stm with type Stream in MarkedContentReference shall be indirect</description>
			<test>StmHasTypeStream != true || isStmIndirect == true</test>
			<error>
				<message>Entry Stm with type Stream in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26754"/>
			<description>Entry StmOwn with type Array in MarkedContentReference shall be object _UniversalArray</description>
			<test>StmOwnHasTypeArray != true || StmOwn_size == 1</test>
			<error>
				<message>Entry StmOwn with type Array in MarkedContentReference is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26755"/>
			<description>Entry StmOwn with type Stream in MarkedContentReference shall be object Stream</description>
			<test>StmOwnHasTypeStream != true || StmOwn_size == 1</test>
			<error>
				<message>Entry StmOwn with type Stream in MarkedContentReference is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="17" testNumber="26756"/>
			<description>Entry StmOwn with type Dictionary in MarkedContentReference shall be object _UniversalDictionary</description>
			<test>StmOwnHasTypeDictionary != true || StmOwn_size == 1</test>
			<error>
				<message>Entry StmOwn with type Dictionary in MarkedContentReference is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26757"/>
			<description>Entry StmOwn in MarkedContentReference shall have one of types: Array, Stream, Dictionary</description>
			<test>containsStmOwn == false || StmOwnHasTypeArray == true || StmOwnHasTypeStream == true || StmOwnHasTypeDictionary == true</test>
			<error>
				<message>Entry StmOwn in MarkedContentReference is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="10" testNumber="26758"/>
			<description>Entry StmOwn with type Array in MarkedContentReference shall be indirect</description>
			<test>StmOwnHasTypeArray != true || isStmOwnIndirect == true</test>
			<error>
				<message>Entry StmOwn with type Array in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="10" testNumber="26759"/>
			<description>Entry StmOwn with type Stream in MarkedContentReference shall be indirect</description>
			<test>StmOwnHasTypeStream != true || isStmOwnIndirect == true</test>
			<error>
				<message>Entry StmOwn with type Stream in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="10" testNumber="26760"/>
			<description>Entry StmOwn with type Dictionary in MarkedContentReference shall be indirect</description>
			<test>StmOwnHasTypeDictionary != true || isStmOwnIndirect == true</test>
			<error>
				<message>Entry StmOwn with type Dictionary in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="8" testNumber="26761"/>
			<description>Entry Type in MarkedContentReference shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MarkedContentReference is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="7" testNumber="26762"/>
			<description>Entry Type in MarkedContentReference is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in MarkedContentReference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_3" clause="6" testNumber="26763"/>
			<description>Entry Type with type Name in MarkedContentReference shall have value MCR</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MCR"</test>
			<error>
				<message>Entry Type with type Name in MarkedContentReference has incorrect value %2 instead of MCR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_3" clause="1" testNumber="27815"/>
			<description>MicrosoftWindowsLaunchParam shall not contain entries except D, F, O, P</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P').length == 0</test>
			<error>
				<message>MicrosoftWindowsLaunchParam contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'F' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_3" clause="8" testNumber="27816"/>
			<description>Entry D in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsD == false || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in MicrosoftWindowsLaunchParam is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_3" clause="8" testNumber="27817"/>
			<description>Entry F in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsF == false || FHasTypeStringByte == true</test>
			<error>
				<message>Entry F in MicrosoftWindowsLaunchParam is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_3" clause="7" testNumber="27818"/>
			<description>Entry F in MicrosoftWindowsLaunchParam is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in MicrosoftWindowsLaunchParam is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_3" clause="8" testNumber="27819"/>
			<description>Entry O in MicrosoftWindowsLaunchParam shall have type StringAscii</description>
			<test>containsO == false || OHasTypeStringAscii == true</test>
			<error>
				<message>Entry O in MicrosoftWindowsLaunchParam is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_3" clause="6" testNumber="27820"/>
			<description>Entry O with type StringAscii in MicrosoftWindowsLaunchParam shall have one of values: print, open</description>
			<test>OHasTypeStringAscii != true || OStringAsciiValue == "open" || OStringAsciiValue == "print"</test>
			<error>
				<message>Entry O with type StringAscii in MicrosoftWindowsLaunchParam has incorrect value %2 instead of print, open</message>
				<arguments>
					<argument>keyName</argument>
					<argument>OStringAsciiValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_3" clause="8" testNumber="27821"/>
			<description>Entry P in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsP == false || PHasTypeStringByte == true</test>
			<error>
				<message>Entry P in MicrosoftWindowsLaunchParam is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_3" clause="1" testNumber="27932"/>
			<description>Movie shall not contain entries except Aspect, F, Poster, Rotate</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Aspect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Poster' &amp;&amp; elem != 'Rotate').length == 0</test>
			<error>
				<message>Movie contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Aspect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Poster' &amp;&amp; elem != 'Rotate').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_3" clause="17" testNumber="27933"/>
			<description>Entry Aspect with type Array in Movie shall be object ArrayOf_2Numbers</description>
			<test>AspectHasTypeArray != true || Aspect_size == 1</test>
			<error>
				<message>Entry Aspect with type Array in Movie is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="27934"/>
			<description>Entry Aspect in Movie shall have type Array</description>
			<test>containsAspect == false || AspectHasTypeArray == true</test>
			<error>
				<message>Entry Aspect in Movie is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_3" clause="17" testNumber="27935"/>
			<description>Entry F with type Dictionary in Movie shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Movie is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="27936"/>
			<description>Entry F in Movie shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in Movie is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_3" clause="7" testNumber="27937"/>
			<description>Entry F in Movie is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in Movie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_3" clause="17" testNumber="27938"/>
			<description>Entry Poster with type Stream in Movie shall be object XObjectImage</description>
			<test>PosterHasTypeStream != true || Poster_size == 1</test>
			<error>
				<message>Entry Poster with type Stream in Movie is not object XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="27939"/>
			<description>Entry Poster in Movie shall have one of types: Stream, Boolean</description>
			<test>containsPoster == false || PosterHasTypeStream == true || PosterHasTypeBoolean == true</test>
			<error>
				<message>Entry Poster in Movie is not one of types: Stream, Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_3" clause="10" testNumber="27940"/>
			<description>Entry Poster with type Stream in Movie shall be indirect</description>
			<test>PosterHasTypeStream != true || isPosterIndirect == true</test>
			<error>
				<message>Entry Poster with type Stream in Movie is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_3" clause="8" testNumber="27941"/>
			<description>Entry Rotate in Movie shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in Movie is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_3" clause="14" testNumber="27942"/>
			<description>Entry Rotate with type Integer in Movie shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in Movie does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="1" testNumber="28020"/>
			<description>MovieActivation shall not contain entries except Duration, FWPosition, FWScale, Mode, Rate, ShowControls, Start, Synchronous, Volume</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Duration' &amp;&amp; elem != 'FWPosition' &amp;&amp; elem != 'FWScale' &amp;&amp; elem != 'Mode' &amp;&amp; elem != 'Rate' &amp;&amp; elem != 'ShowControls' &amp;&amp; elem != 'Start' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Volume').length == 0</test>
			<error>
				<message>MovieActivation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Duration' &amp;&amp; elem != 'FWPosition' &amp;&amp; elem != 'FWScale' &amp;&amp; elem != 'Mode' &amp;&amp; elem != 'Rate' &amp;&amp; elem != 'ShowControls' &amp;&amp; elem != 'Start' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Volume').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28021"/>
			<description>Entry Duration with type Array in MovieActivation shall be object ArrayOfDuration</description>
			<test>DurationHasTypeArray != true || Duration_size == 1</test>
			<error>
				<message>Entry Duration with type Array in MovieActivation is not object ArrayOfDuration</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28022"/>
			<description>Entry Duration in MovieActivation shall have one of types: Array, StringByte, Integer</description>
			<test>containsDuration == false || DurationHasTypeArray == true || DurationHasTypeStringByte == true || DurationHasTypeInteger == true</test>
			<error>
				<message>Entry Duration in MovieActivation is not one of types: Array, StringByte, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="9" testNumber="28023"/>
			<description>Entry Duration with type StringByte in MovieActivation shall satisfy special case: fn:Eval(fn:StringLength(Duration) == 8)</description>
			<test>DurationHasTypeStringByte != true || (DurationStringSize == 8)</test>
			<error>
				<message>Entry Duration with type StringByte in MovieActivation does not satisfy special case: fn:Eval(fn:StringLength(Duration) == 8)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="9" testNumber="28024"/>
			<description>Entry Duration with type Integer in MovieActivation shall satisfy special case: fn:Eval(@Duration &gt; 0)</description>
			<test>DurationHasTypeInteger != true || (DurationIntegerValue &gt; 0)</test>
			<error>
				<message>Entry Duration with type Integer in MovieActivation does not satisfy special case: fn:Eval(@Duration &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28025"/>
			<description>Entry FWPosition with type Array in MovieActivation shall be object ArrayOf_2Numbers</description>
			<test>FWPositionHasTypeArray != true || FWPosition_size == 1</test>
			<error>
				<message>Entry FWPosition with type Array in MovieActivation is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28026"/>
			<description>Entry FWPosition in MovieActivation shall have type Array</description>
			<test>containsFWPosition == false || FWPositionHasTypeArray == true</test>
			<error>
				<message>Entry FWPosition in MovieActivation is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="9" testNumber="28027"/>
			<description>Entry FWPosition with type Array in MovieActivation shall satisfy special case: fn:Eval((FWPosition::@0&gt;= 0.0) &amp;&amp; (FWPosition::@0&lt;= 1.0) &amp;&amp; (FWPosition::@1&gt;= 0.0) &amp;&amp; (FWPosition::@1&lt;= 1.0))</description>
			<test>FWPositionHasTypeArray != true || ((FWPosition0NumberValue &gt;= 0.0) &amp;&amp; (FWPosition0NumberValue &lt;= 1.0) &amp;&amp; (FWPosition1NumberValue &gt;= 0.0) &amp;&amp; (FWPosition1NumberValue &lt;= 1.0))</test>
			<error>
				<message>Entry FWPosition with type Array in MovieActivation does not satisfy special case: fn:Eval((FWPosition::@0&gt;= 0.0) &amp;&amp; (FWPosition::@0&lt;= 1.0) &amp;&amp; (FWPosition::@1&gt;= 0.0) &amp;&amp; (FWPosition::@1&lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28028"/>
			<description>Entry FWScale with type Array in MovieActivation shall be object ArrayOf_2Integers</description>
			<test>FWScaleHasTypeArray != true || FWScale_size == 1</test>
			<error>
				<message>Entry FWScale with type Array in MovieActivation is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28029"/>
			<description>Entry FWScale in MovieActivation shall have type Array</description>
			<test>containsFWScale == false || FWScaleHasTypeArray == true</test>
			<error>
				<message>Entry FWScale in MovieActivation is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="9" testNumber="28030"/>
			<description>Entry FWScale with type Array in MovieActivation shall satisfy special case: fn:Eval((FWScale::@0&gt; 0) &amp;&amp; (FWScale::@1&gt; 0))</description>
			<test>FWScaleHasTypeArray != true || ((FWScale0IntegerValue &gt; 0) &amp;&amp; (FWScale1IntegerValue &gt; 0))</test>
			<error>
				<message>Entry FWScale with type Array in MovieActivation does not satisfy special case: fn:Eval((FWScale::@0&gt; 0) &amp;&amp; (FWScale::@1&gt; 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28031"/>
			<description>Entry Mode in MovieActivation shall have type Name</description>
			<test>containsMode == false || ModeHasTypeName == true</test>
			<error>
				<message>Entry Mode in MovieActivation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="6" testNumber="28032"/>
			<description>Entry Mode with type Name in MovieActivation shall have one of values: Palindrome, Once, Repeat, Open</description>
			<test>ModeHasTypeName != true || ModeNameValue == "Once" || ModeNameValue == "Open" || ModeNameValue == "Repeat" || ModeNameValue == "Palindrome"</test>
			<error>
				<message>Entry Mode with type Name in MovieActivation has incorrect value %2 instead of Palindrome, Once, Repeat, Open</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28033"/>
			<description>Entry Rate in MovieActivation shall have type Number</description>
			<test>containsRate == false || RateHasTypeNumber == true</test>
			<error>
				<message>Entry Rate in MovieActivation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28034"/>
			<description>Entry ShowControls in MovieActivation shall have type Boolean</description>
			<test>containsShowControls == false || ShowControlsHasTypeBoolean == true</test>
			<error>
				<message>Entry ShowControls in MovieActivation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28035"/>
			<description>Entry Start with type Array in MovieActivation shall be object ArrayOfDuration</description>
			<test>StartHasTypeArray != true || Start_size == 1</test>
			<error>
				<message>Entry Start with type Array in MovieActivation is not object ArrayOfDuration</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28036"/>
			<description>Entry Start in MovieActivation shall have one of types: Array, StringByte, Integer</description>
			<test>containsStart == false || StartHasTypeArray == true || StartHasTypeStringByte == true || StartHasTypeInteger == true</test>
			<error>
				<message>Entry Start in MovieActivation is not one of types: Array, StringByte, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="9" testNumber="28037"/>
			<description>Entry Start with type StringByte in MovieActivation shall satisfy special case: fn:Eval(fn:StringLength(Start) == 8)</description>
			<test>StartHasTypeStringByte != true || (StartStringSize == 8)</test>
			<error>
				<message>Entry Start with type StringByte in MovieActivation does not satisfy special case: fn:Eval(fn:StringLength(Start) == 8)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="9" testNumber="28038"/>
			<description>Entry Start with type Integer in MovieActivation shall satisfy special case: fn:Eval(@Start &gt; 0)</description>
			<test>StartHasTypeInteger != true || (StartIntegerValue &gt; 0)</test>
			<error>
				<message>Entry Start with type Integer in MovieActivation does not satisfy special case: fn:Eval(@Start &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28039"/>
			<description>Entry Synchronous in MovieActivation shall have type Boolean</description>
			<test>containsSynchronous == false || SynchronousHasTypeBoolean == true</test>
			<error>
				<message>Entry Synchronous in MovieActivation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28040"/>
			<description>Entry Volume in MovieActivation shall have type Number</description>
			<test>containsVolume == false || VolumeHasTypeNumber == true</test>
			<error>
				<message>Entry Volume in MovieActivation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_3" clause="14" testNumber="28041"/>
			<description>Entry Volume with type Number in MovieActivation shall satisfy possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</description>
			<test>VolumeHasTypeNumber != true || (VolumeNumberValue &gt;= - 1) &amp;&amp; (VolumeNumberValue &lt;= 1)</test>
			<error>
				<message>Entry Volume with type Number in MovieActivation does not satisfy possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="1" testNumber="28155"/>
			<description>Name shall not contain entries except AP, Dests, IDS, JavaScript, Pages, Templates, URLS</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'IDS' &amp;&amp; elem != 'JavaScript' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Templates' &amp;&amp; elem != 'URLS').length == 0</test>
			<error>
				<message>Name contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'IDS' &amp;&amp; elem != 'JavaScript' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Templates' &amp;&amp; elem != 'URLS').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28156"/>
			<description>Entry AP with type NameTree in Name shall be object NameNameTreeAP</description>
			<test>APHasTypeNameTree != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type NameTree in Name is not object NameNameTreeAP</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28157"/>
			<description>Entry AP in Name shall have type NameTree</description>
			<test>containsAP == false || APHasTypeNameTree == true</test>
			<error>
				<message>Entry AP in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28158"/>
			<description>Entry Dests with type NameTree in Name shall be object NameNameTreeDests</description>
			<test>DestsHasTypeNameTree != true || Dests_size == 1</test>
			<error>
				<message>Entry Dests with type NameTree in Name is not object NameNameTreeDests</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28159"/>
			<description>Entry Dests in Name shall have type NameTree</description>
			<test>containsDests == false || DestsHasTypeNameTree == true</test>
			<error>
				<message>Entry Dests in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28160"/>
			<description>Entry IDS with type NameTree in Name shall be object NameNameTreeIDS</description>
			<test>IDSHasTypeNameTree != true || IDS_size == 1</test>
			<error>
				<message>Entry IDS with type NameTree in Name is not object NameNameTreeIDS</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28161"/>
			<description>Entry IDS in Name shall have type NameTree</description>
			<test>containsIDS == false || IDSHasTypeNameTree == true</test>
			<error>
				<message>Entry IDS in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28162"/>
			<description>Entry JavaScript with type NameTree in Name shall be object NameNameTreeJavaScript</description>
			<test>JavaScriptHasTypeNameTree != true || JavaScript_size == 1</test>
			<error>
				<message>Entry JavaScript with type NameTree in Name is not object NameNameTreeJavaScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28163"/>
			<description>Entry JavaScript in Name shall have type NameTree</description>
			<test>containsJavaScript == false || JavaScriptHasTypeNameTree == true</test>
			<error>
				<message>Entry JavaScript in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28164"/>
			<description>Entry Pages with type NameTree in Name shall be object NameNameTreePages</description>
			<test>PagesHasTypeNameTree != true || Pages_size == 1</test>
			<error>
				<message>Entry Pages with type NameTree in Name is not object NameNameTreePages</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28165"/>
			<description>Entry Pages in Name shall have type NameTree</description>
			<test>containsPages == false || PagesHasTypeNameTree == true</test>
			<error>
				<message>Entry Pages in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28166"/>
			<description>Entry Templates with type NameTree in Name shall be object NameNameTreeTemplates</description>
			<test>TemplatesHasTypeNameTree != true || Templates_size == 1</test>
			<error>
				<message>Entry Templates with type NameTree in Name is not object NameNameTreeTemplates</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28167"/>
			<description>Entry Templates in Name shall have type NameTree</description>
			<test>containsTemplates == false || TemplatesHasTypeNameTree == true</test>
			<error>
				<message>Entry Templates in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28168"/>
			<description>Entry URLS with type NameTree in Name shall be object NameNameTreeURLS</description>
			<test>URLSHasTypeNameTree != true || URLS_size == 1</test>
			<error>
				<message>Entry URLS with type NameTree in Name is not object NameNameTreeURLS</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28169"/>
			<description>Entry URLS in Name shall have type NameTree</description>
			<test>containsURLS == false || URLSHasTypeNameTree == true</test>
			<error>
				<message>Entry URLS in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAP">
			<id specification="ISO_32000_1_3" clause="18" testNumber="28277"/>
			<description>Entry * in NameNameTreeAP shall be object NameNameTreeAPEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeAP is not object NameNameTreeAPEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAPEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28283"/>
			<description>Entry with type Stream in NameNameTreeAP shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in NameNameTreeAP is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeDests">
			<id specification="ISO_32000_1_3" clause="18" testNumber="28305"/>
			<description>Entry * in NameNameTreeDests shall be object NameNameTreeDestsEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeDests is not object NameNameTreeDestsEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeDestsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28313"/>
			<description>Entry with type Array in NameNameTreeDests shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in NameNameTreeDests is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeDestsEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28314"/>
			<description>Entry with type Dictionary in NameNameTreeDests shall be object DestDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeDests is not object DestDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeIDS">
			<id specification="ISO_32000_1_3" clause="18" testNumber="28340"/>
			<description>Entry * in NameNameTreeIDS shall be object NameNameTreeIDSEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeIDS is not object NameNameTreeIDSEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeIDSEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28346"/>
			<description>Entry with type Dictionary in NameNameTreeIDS shall be one of objects WebCaptureImageSet, WebCapturePageSet</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeIDS is not one of objects WebCaptureImageSet, WebCapturePageSet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeJavaScript">
			<id specification="ISO_32000_1_3" clause="18" testNumber="28352"/>
			<description>Entry * in NameNameTreeJavaScript shall be object NameNameTreeJavaScriptEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeJavaScript is not object NameNameTreeJavaScriptEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeJavaScriptEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28358"/>
			<description>Entry with type Dictionary in NameNameTreeJavaScript shall be object ActionECMAScript</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeJavaScript is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeJavaScriptEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28359"/>
			<description>Entry in NameNameTreeJavaScript shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in NameNameTreeJavaScript is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreePages">
			<id specification="ISO_32000_1_3" clause="18" testNumber="28370"/>
			<description>Entry * in NameNameTreePages shall be object NameNameTreePagesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreePages is not object NameNameTreePagesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreePagesEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28376"/>
			<description>Entry with type Dictionary in NameNameTreePages shall be object PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreePages is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreePagesEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28377"/>
			<description>Entry in NameNameTreePages shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in NameNameTreePages is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeTemplates">
			<id specification="ISO_32000_1_3" clause="18" testNumber="28396"/>
			<description>Entry * in NameNameTreeTemplates shall be object NameNameTreeTemplatesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeTemplates is not object NameNameTreeTemplatesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeTemplatesEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28402"/>
			<description>Entry with type Dictionary in NameNameTreeTemplates shall be object PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeTemplates is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeTemplatesEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28403"/>
			<description>Entry in NameNameTreeTemplates shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in NameNameTreeTemplates is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeURLS">
			<id specification="ISO_32000_1_3" clause="18" testNumber="28414"/>
			<description>Entry * in NameNameTreeURLS shall be object NameNameTreeURLSEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeURLS is not object NameNameTreeURLSEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeURLSEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28420"/>
			<description>Entry with type Dictionary in NameNameTreeURLS shall be one of objects WebCaptureImageSet, WebCapturePageSet</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeURLS is not one of objects WebCaptureImageSet, WebCapturePageSet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13">
			<id specification="ISO_32000_1_3" clause="1" testNumber="28603"/>
			<description>OPIVersion13 shall not contain entries except 1.3</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != '1.3').length == 0</test>
			<error>
				<message>OPIVersion13 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != '1.3').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28604"/>
			<description>Entry 1.3 with type Dictionary in OPIVersion13 shall be object OPIVersion13Dict</description>
			<test>entry13HasTypeDictionary != true || entry13_size == 1</test>
			<error>
				<message>Entry 1.3 with type Dictionary in OPIVersion13 is not object OPIVersion13Dict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28605"/>
			<description>Entry 1.3 in OPIVersion13 shall have type Dictionary</description>
			<test>contains13 == false || entry13HasTypeDictionary == true</test>
			<error>
				<message>Entry 1.3 in OPIVersion13 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="1" testNumber="28654"/>
			<description>OPIVersion13Dict shall not contain entries except Color, ColorType, Comments, CropFixed, CropRect, F, GrayMap, ID, ImageType, Overprint, Position, Resolution, Size, Tags, Tint, Transparency, Type, Version</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Color' &amp;&amp; elem != 'ColorType' &amp;&amp; elem != 'Comments' &amp;&amp; elem != 'CropFixed' &amp;&amp; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'GrayMap' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageType' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'Resolution' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Tint' &amp;&amp; elem != 'Transparency' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version').length == 0</test>
			<error>
				<message>OPIVersion13Dict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Color' &amp;&amp; elem != 'ColorType' &amp;&amp; elem != 'Comments' &amp;&amp; elem != 'CropFixed' &amp;&amp; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'GrayMap' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageType' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'Resolution' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Tint' &amp;&amp; elem != 'Transparency' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28655"/>
			<description>Entry Color with type Array in OPIVersion13Dict shall be object ArrayOfOPI13Color</description>
			<test>ColorHasTypeArray != true || Color_size == 1</test>
			<error>
				<message>Entry Color with type Array in OPIVersion13Dict is not object ArrayOfOPI13Color</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28656"/>
			<description>Entry Color in OPIVersion13Dict shall have type Array</description>
			<test>containsColor == false || ColorHasTypeArray == true</test>
			<error>
				<message>Entry Color in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28657"/>
			<description>Entry ColorType in OPIVersion13Dict shall have type Name</description>
			<test>containsColorType == false || ColorTypeHasTypeName == true</test>
			<error>
				<message>Entry ColorType in OPIVersion13Dict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28658"/>
			<description>Entry Comments in OPIVersion13Dict shall have type StringText</description>
			<test>containsComments == false || CommentsHasTypeStringText == true</test>
			<error>
				<message>Entry Comments in OPIVersion13Dict is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28659"/>
			<description>Entry CropFixed with type Array in OPIVersion13Dict shall be object ArrayOf_4Numbers</description>
			<test>CropFixedHasTypeArray != true || CropFixed_size == 1</test>
			<error>
				<message>Entry CropFixed with type Array in OPIVersion13Dict is not object ArrayOf_4Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28660"/>
			<description>Entry CropFixed in OPIVersion13Dict shall have type Array</description>
			<test>containsCropFixed == false || CropFixedHasTypeArray == true</test>
			<error>
				<message>Entry CropFixed in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28661"/>
			<description>Entry CropRect in OPIVersion13Dict shall have type Rectangle</description>
			<test>containsCropRect == false || CropRectHasTypeRectangle == true</test>
			<error>
				<message>Entry CropRect in OPIVersion13Dict is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28662"/>
			<description>Entry F with type Dictionary in OPIVersion13Dict shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in OPIVersion13Dict is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28663"/>
			<description>Entry F in OPIVersion13Dict shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in OPIVersion13Dict is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="28664"/>
			<description>Entry F in OPIVersion13Dict is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in OPIVersion13Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28665"/>
			<description>Entry GrayMap with type Array in OPIVersion13Dict shall be object ArrayOfIntegersGeneral</description>
			<test>GrayMapHasTypeArray != true || GrayMap_size == 1</test>
			<error>
				<message>Entry GrayMap with type Array in OPIVersion13Dict is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28666"/>
			<description>Entry GrayMap in OPIVersion13Dict shall have type Array</description>
			<test>containsGrayMap == false || GrayMapHasTypeArray == true</test>
			<error>
				<message>Entry GrayMap in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="9" testNumber="28667"/>
			<description>Entry GrayMap with type Array in OPIVersion13Dict shall satisfy special case: fn:Eval((fn:ArrayLength(GrayMap) mod 2) == 0)</description>
			<test>GrayMapHasTypeArray != true || ((GrayMapArraySize % 2) == 0)</test>
			<error>
				<message>Entry GrayMap with type Array in OPIVersion13Dict does not satisfy special case: fn:Eval((fn:ArrayLength(GrayMap) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28668"/>
			<description>Entry ID in OPIVersion13Dict shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in OPIVersion13Dict is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28669"/>
			<description>Entry ImageType with type Array in OPIVersion13Dict shall be object ArrayOf_2Integers</description>
			<test>ImageTypeHasTypeArray != true || ImageType_size == 1</test>
			<error>
				<message>Entry ImageType with type Array in OPIVersion13Dict is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28670"/>
			<description>Entry ImageType in OPIVersion13Dict shall have type Array</description>
			<test>containsImageType == false || ImageTypeHasTypeArray == true</test>
			<error>
				<message>Entry ImageType in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28671"/>
			<description>Entry Overprint in OPIVersion13Dict shall have type Boolean</description>
			<test>containsOverprint == false || OverprintHasTypeBoolean == true</test>
			<error>
				<message>Entry Overprint in OPIVersion13Dict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28672"/>
			<description>Entry Position with type Array in OPIVersion13Dict shall be object ArrayOf_8Numbers</description>
			<test>PositionHasTypeArray != true || Position_size == 1</test>
			<error>
				<message>Entry Position with type Array in OPIVersion13Dict is not object ArrayOf_8Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28673"/>
			<description>Entry Position in OPIVersion13Dict shall have type Array</description>
			<test>containsPosition == false || PositionHasTypeArray == true</test>
			<error>
				<message>Entry Position in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28674"/>
			<description>Entry Resolution with type Array in OPIVersion13Dict shall be object ArrayOf_2Numbers</description>
			<test>ResolutionHasTypeArray != true || Resolution_size == 1</test>
			<error>
				<message>Entry Resolution with type Array in OPIVersion13Dict is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28675"/>
			<description>Entry Resolution in OPIVersion13Dict shall have type Array</description>
			<test>containsResolution == false || ResolutionHasTypeArray == true</test>
			<error>
				<message>Entry Resolution in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28676"/>
			<description>Entry Size with type Array in OPIVersion13Dict shall be object ArrayOf_2Integers</description>
			<test>SizeHasTypeArray != true || Size_size == 1</test>
			<error>
				<message>Entry Size with type Array in OPIVersion13Dict is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28677"/>
			<description>Entry Size in OPIVersion13Dict shall have type Array</description>
			<test>containsSize == false || SizeHasTypeArray == true</test>
			<error>
				<message>Entry Size in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28678"/>
			<description>Entry Tags with type Array in OPIVersion13Dict shall be object ArrayOfTags</description>
			<test>TagsHasTypeArray != true || Tags_size == 1</test>
			<error>
				<message>Entry Tags with type Array in OPIVersion13Dict is not object ArrayOfTags</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28679"/>
			<description>Entry Tags in OPIVersion13Dict shall have type Array</description>
			<test>containsTags == false || TagsHasTypeArray == true</test>
			<error>
				<message>Entry Tags in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28680"/>
			<description>Entry Tint in OPIVersion13Dict shall have type Number</description>
			<test>containsTint == false || TintHasTypeNumber == true</test>
			<error>
				<message>Entry Tint in OPIVersion13Dict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28681"/>
			<description>Entry Transparency in OPIVersion13Dict shall have type Boolean</description>
			<test>containsTransparency == false || TransparencyHasTypeBoolean == true</test>
			<error>
				<message>Entry Transparency in OPIVersion13Dict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28682"/>
			<description>Entry Type in OPIVersion13Dict shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OPIVersion13Dict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="6" testNumber="28683"/>
			<description>Entry Type with type Name in OPIVersion13Dict shall have value OPI</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OPI"</test>
			<error>
				<message>Entry Type with type Name in OPIVersion13Dict has incorrect value %2 instead of OPI</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28684"/>
			<description>Entry Version in OPIVersion13Dict shall have type Number</description>
			<test>containsVersion == false || VersionHasTypeNumber == true</test>
			<error>
				<message>Entry Version in OPIVersion13Dict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="28685"/>
			<description>Entry Version in OPIVersion13Dict is required</description>
			<test>containsVersion == true</test>
			<error>
				<message>Entry Version in OPIVersion13Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_3" clause="6" testNumber="28686"/>
			<description>Entry Version with type Number in OPIVersion13Dict shall have value 1.3</description>
			<test>VersionHasTypeNumber != true || VersionNumberValue == 1.3</test>
			<error>
				<message>Entry Version with type Number in OPIVersion13Dict has incorrect value %2 instead of 1.3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VersionNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20">
			<id specification="ISO_32000_1_3" clause="1" testNumber="28855"/>
			<description>OPIVersion20 shall not contain entries except 2.0</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != '2.0').length == 0</test>
			<error>
				<message>OPIVersion20 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != '2.0').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28856"/>
			<description>Entry 2.0 with type Dictionary in OPIVersion20 shall be object OPIVersion20Dict</description>
			<test>entry20HasTypeDictionary != true || entry20_size == 1</test>
			<error>
				<message>Entry 2.0 with type Dictionary in OPIVersion20 is not object OPIVersion20Dict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28857"/>
			<description>Entry 2.0 in OPIVersion20 shall have type Dictionary</description>
			<test>contains20 == false || entry20HasTypeDictionary == true</test>
			<error>
				<message>Entry 2.0 in OPIVersion20 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="1" testNumber="28900"/>
			<description>OPIVersion20Dict shall not contain entries except CropRect, F, IncludedImageDimensions, IncludedImageQuality, Inks, MainImage, Overprint, Size, Tags, Type, Version</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IncludedImageDimensions' &amp;&amp; elem != 'IncludedImageQuality' &amp;&amp; elem != 'Inks' &amp;&amp; elem != 'MainImage' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version').length == 0</test>
			<error>
				<message>OPIVersion20Dict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IncludedImageDimensions' &amp;&amp; elem != 'IncludedImageQuality' &amp;&amp; elem != 'Inks' &amp;&amp; elem != 'MainImage' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28901"/>
			<description>Entry CropRect in OPIVersion20Dict shall have type Rectangle</description>
			<test>containsCropRect == false || CropRectHasTypeRectangle == true</test>
			<error>
				<message>Entry CropRect in OPIVersion20Dict is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="11" testNumber="28902"/>
			<description>Entry CropRect in OPIVersion20Dict is required, when fn:IsRequired(fn:IsPresent(Size))</description>
			<test>(containsCropRect == true || ((containsSize == true)) == false)</test>
			<error>
				<message>Entry CropRect in OPIVersion20Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28903"/>
			<description>Entry F with type Dictionary in OPIVersion20Dict shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in OPIVersion20Dict is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28904"/>
			<description>Entry F in OPIVersion20Dict shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in OPIVersion20Dict is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="28905"/>
			<description>Entry F in OPIVersion20Dict is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in OPIVersion20Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28906"/>
			<description>Entry IncludedImageDimensions with type Array in OPIVersion20Dict shall be object ArrayOf_2Integers</description>
			<test>IncludedImageDimensionsHasTypeArray != true || IncludedImageDimensions_size == 1</test>
			<error>
				<message>Entry IncludedImageDimensions with type Array in OPIVersion20Dict is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28907"/>
			<description>Entry IncludedImageDimensions in OPIVersion20Dict shall have type Array</description>
			<test>containsIncludedImageDimensions == false || IncludedImageDimensionsHasTypeArray == true</test>
			<error>
				<message>Entry IncludedImageDimensions in OPIVersion20Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="9" testNumber="28908"/>
			<description>Entry IncludedImageDimensions with type Array in OPIVersion20Dict shall satisfy special case: fn:Eval((IncludedImageDimensions::@0&gt; 0) &amp;&amp; (IncludedImageDimensions::@1&gt; 0))</description>
			<test>IncludedImageDimensionsHasTypeArray != true || ((IncludedImageDimensions0IntegerValue &gt; 0) &amp;&amp; (IncludedImageDimensions1IntegerValue &gt; 0))</test>
			<error>
				<message>Entry IncludedImageDimensions with type Array in OPIVersion20Dict does not satisfy special case: fn:Eval((IncludedImageDimensions::@0&gt; 0) &amp;&amp; (IncludedImageDimensions::@1&gt; 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28909"/>
			<description>Entry IncludedImageQuality in OPIVersion20Dict shall have type Number</description>
			<test>containsIncludedImageQuality == false || IncludedImageQualityHasTypeNumber == true</test>
			<error>
				<message>Entry IncludedImageQuality in OPIVersion20Dict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="6" testNumber="28910"/>
			<description>Entry IncludedImageQuality with type Number in OPIVersion20Dict shall have one of values: 1, 2, 3</description>
			<test>IncludedImageQualityHasTypeNumber != true || IncludedImageQualityNumberValue == 1 || IncludedImageQualityNumberValue == 2 || IncludedImageQualityNumberValue == 3</test>
			<error>
				<message>Entry IncludedImageQuality with type Number in OPIVersion20Dict has incorrect value %2 instead of 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>IncludedImageQualityNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28911"/>
			<description>Entry Inks with type Array in OPIVersion20Dict shall be object ArrayOfOPI2Inks</description>
			<test>InksHasTypeArray != true || Inks_size == 1</test>
			<error>
				<message>Entry Inks with type Array in OPIVersion20Dict is not object ArrayOfOPI2Inks</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28912"/>
			<description>Entry Inks in OPIVersion20Dict shall have one of types: Array, Name</description>
			<test>containsInks == false || InksHasTypeArray == true || InksHasTypeName == true</test>
			<error>
				<message>Entry Inks in OPIVersion20Dict is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="6" testNumber="28913"/>
			<description>Entry Inks with type Name in OPIVersion20Dict shall have one of values: registration, full_color</description>
			<test>InksHasTypeName != true || InksNameValue == "full_color" || InksNameValue == "registration"</test>
			<error>
				<message>Entry Inks with type Name in OPIVersion20Dict has incorrect value %2 instead of registration, full_color</message>
				<arguments>
					<argument>keyName</argument>
					<argument>InksNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28914"/>
			<description>Entry MainImage in OPIVersion20Dict shall have type StringByte</description>
			<test>containsMainImage == false || MainImageHasTypeStringByte == true</test>
			<error>
				<message>Entry MainImage in OPIVersion20Dict is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28915"/>
			<description>Entry Overprint in OPIVersion20Dict shall have type Boolean</description>
			<test>containsOverprint == false || OverprintHasTypeBoolean == true</test>
			<error>
				<message>Entry Overprint in OPIVersion20Dict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28916"/>
			<description>Entry Size with type Array in OPIVersion20Dict shall be object ArrayOf_2Numbers</description>
			<test>SizeHasTypeArray != true || Size_size == 1</test>
			<error>
				<message>Entry Size with type Array in OPIVersion20Dict is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28917"/>
			<description>Entry Size in OPIVersion20Dict shall have type Array</description>
			<test>containsSize == false || SizeHasTypeArray == true</test>
			<error>
				<message>Entry Size in OPIVersion20Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="11" testNumber="28918"/>
			<description>Entry Size in OPIVersion20Dict is required, when fn:IsRequired(fn:IsPresent(CropRect))</description>
			<test>(containsSize == true || ((containsCropRect == true)) == false)</test>
			<error>
				<message>Entry Size in OPIVersion20Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="9" testNumber="28919"/>
			<description>Entry Size with type Array in OPIVersion20Dict shall satisfy special case: fn:Eval((Size::@0&gt; 0) &amp;&amp; (Size::@1&gt; 0))</description>
			<test>SizeHasTypeArray != true || ((Size0NumberValue &gt; 0) &amp;&amp; (Size1NumberValue &gt; 0))</test>
			<error>
				<message>Entry Size with type Array in OPIVersion20Dict does not satisfy special case: fn:Eval((Size::@0&gt; 0) &amp;&amp; (Size::@1&gt; 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="17" testNumber="28920"/>
			<description>Entry Tags with type Array in OPIVersion20Dict shall be object ArrayOfTags</description>
			<test>TagsHasTypeArray != true || Tags_size == 1</test>
			<error>
				<message>Entry Tags with type Array in OPIVersion20Dict is not object ArrayOfTags</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28921"/>
			<description>Entry Tags in OPIVersion20Dict shall have type Array</description>
			<test>containsTags == false || TagsHasTypeArray == true</test>
			<error>
				<message>Entry Tags in OPIVersion20Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28922"/>
			<description>Entry Type in OPIVersion20Dict shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OPIVersion20Dict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="6" testNumber="28923"/>
			<description>Entry Type with type Name in OPIVersion20Dict shall have value OPI</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OPI"</test>
			<error>
				<message>Entry Type with type Name in OPIVersion20Dict has incorrect value %2 instead of OPI</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="28924"/>
			<description>Entry Version in OPIVersion20Dict shall have type Number</description>
			<test>containsVersion == false || VersionHasTypeNumber == true</test>
			<error>
				<message>Entry Version in OPIVersion20Dict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="28925"/>
			<description>Entry Version in OPIVersion20Dict is required</description>
			<test>containsVersion == true</test>
			<error>
				<message>Entry Version in OPIVersion20Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_3" clause="6" testNumber="28926"/>
			<description>Entry Version with type Number in OPIVersion20Dict shall have value 2.0</description>
			<test>VersionHasTypeNumber != true || VersionNumberValue == 2.0</test>
			<error>
				<message>Entry Version with type Number in OPIVersion20Dict has incorrect value %2 instead of 2.0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VersionNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="1" testNumber="29062"/>
			<description>ObjectReference shall not contain entries except Obj, Pg, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Obj' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ObjectReference contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Obj' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29063"/>
			<description>Entry Obj with type Array in ObjectReference shall be object _UniversalArray</description>
			<test>ObjHasTypeArray != true || Obj_size == 1</test>
			<error>
				<message>Entry Obj with type Array in ObjectReference is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29064"/>
			<description>Entry Obj with type Stream in ObjectReference shall be object XObjectFormType1</description>
			<test>ObjHasTypeStream != true || Obj_size == 1</test>
			<error>
				<message>Entry Obj with type Stream in ObjectReference is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29065"/>
			<description>Entry Obj with type Dictionary in ObjectReference shall be object _UniversalDictionary</description>
			<test>ObjHasTypeDictionary != true || Obj_size == 1</test>
			<error>
				<message>Entry Obj with type Dictionary in ObjectReference is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29066"/>
			<description>Entry Obj in ObjectReference shall have one of types: Array, Stream, Dictionary</description>
			<test>containsObj == false || ObjHasTypeArray == true || ObjHasTypeStream == true || ObjHasTypeDictionary == true</test>
			<error>
				<message>Entry Obj in ObjectReference is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="7" testNumber="29067"/>
			<description>Entry Obj in ObjectReference is required</description>
			<test>containsObj == true</test>
			<error>
				<message>Entry Obj in ObjectReference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="10" testNumber="29068"/>
			<description>Entry Obj with type Array in ObjectReference shall be indirect</description>
			<test>ObjHasTypeArray != true || isObjIndirect == true</test>
			<error>
				<message>Entry Obj with type Array in ObjectReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="10" testNumber="29069"/>
			<description>Entry Obj with type Stream in ObjectReference shall be indirect</description>
			<test>ObjHasTypeStream != true || isObjIndirect == true</test>
			<error>
				<message>Entry Obj with type Stream in ObjectReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="10" testNumber="29070"/>
			<description>Entry Obj with type Dictionary in ObjectReference shall be indirect</description>
			<test>ObjHasTypeDictionary != true || isObjIndirect == true</test>
			<error>
				<message>Entry Obj with type Dictionary in ObjectReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29071"/>
			<description>Entry Pg with type Dictionary in ObjectReference shall be object PageObject</description>
			<test>PgHasTypeDictionary != true || Pg_size == 1</test>
			<error>
				<message>Entry Pg with type Dictionary in ObjectReference is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29072"/>
			<description>Entry Pg in ObjectReference shall have type Dictionary</description>
			<test>containsPg == false || PgHasTypeDictionary == true</test>
			<error>
				<message>Entry Pg in ObjectReference is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="10" testNumber="29073"/>
			<description>Entry Pg with type Dictionary in ObjectReference shall be indirect</description>
			<test>PgHasTypeDictionary != true || isPgIndirect == true</test>
			<error>
				<message>Entry Pg with type Dictionary in ObjectReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29074"/>
			<description>Entry Type in ObjectReference shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ObjectReference is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="7" testNumber="29075"/>
			<description>Entry Type in ObjectReference is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ObjectReference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_3" clause="6" testNumber="29076"/>
			<description>Entry Type with type Name in ObjectReference shall have value OBJR</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OBJR"</test>
			<error>
				<message>Entry Type with type Name in ObjectReference has incorrect value %2 instead of OBJR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_3" clause="1" testNumber="29797"/>
			<description>Outline shall not contain entries except Count, First, Last, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>Outline contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29798"/>
			<description>Entry Count in Outline shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in Outline is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_3" clause="14" testNumber="29799"/>
			<description>Entry Count with type Integer in Outline shall satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in Outline does not satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29800"/>
			<description>Entry First with type Dictionary in Outline shall be object OutlineItem</description>
			<test>FirstHasTypeDictionary != true || First_size == 1</test>
			<error>
				<message>Entry First with type Dictionary in Outline is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29801"/>
			<description>Entry First in Outline shall have type Dictionary</description>
			<test>containsFirst == false || FirstHasTypeDictionary == true</test>
			<error>
				<message>Entry First in Outline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_3" clause="10" testNumber="29802"/>
			<description>Entry First with type Dictionary in Outline shall be indirect</description>
			<test>FirstHasTypeDictionary != true || isFirstIndirect == true</test>
			<error>
				<message>Entry First with type Dictionary in Outline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29803"/>
			<description>Entry Last with type Dictionary in Outline shall be object OutlineItem</description>
			<test>LastHasTypeDictionary != true || Last_size == 1</test>
			<error>
				<message>Entry Last with type Dictionary in Outline is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29804"/>
			<description>Entry Last in Outline shall have type Dictionary</description>
			<test>containsLast == false || LastHasTypeDictionary == true</test>
			<error>
				<message>Entry Last in Outline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_3" clause="10" testNumber="29805"/>
			<description>Entry Last with type Dictionary in Outline shall be indirect</description>
			<test>LastHasTypeDictionary != true || isLastIndirect == true</test>
			<error>
				<message>Entry Last with type Dictionary in Outline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29806"/>
			<description>Entry Type in Outline shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Outline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_3" clause="6" testNumber="29807"/>
			<description>Entry Type with type Name in Outline shall have value Outlines</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Outlines"</test>
			<error>
				<message>Entry Type with type Name in Outline has incorrect value %2 instead of Outlines</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="1" testNumber="29944"/>
			<description>OutlineItem shall not contain entries except A, Count, Dest, First, Last, Next, Parent, Prev, SE, Title</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'SE' &amp;&amp; elem != 'Title').length == 0</test>
			<error>
				<message>OutlineItem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'SE' &amp;&amp; elem != 'Title').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29945"/>
			<description>Entry A with type Dictionary in OutlineItem shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in OutlineItem is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29946"/>
			<description>Entry A in OutlineItem shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="9" testNumber="29947"/>
			<description>Entry A with type Dictionary in OutlineItem shall satisfy special case: fn:Not(fn:IsPresent(Dest))</description>
			<test>AHasTypeDictionary != true || (((containsDest == true)) != true)</test>
			<error>
				<message>Entry A with type Dictionary in OutlineItem does not satisfy special case: fn:Not(fn:IsPresent(Dest))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29948"/>
			<description>Entry Count in OutlineItem shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in OutlineItem is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29949"/>
			<description>Entry Dest with type Array in OutlineItem shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DestHasTypeArray != true || Dest_size == 1</test>
			<error>
				<message>Entry Dest with type Array in OutlineItem is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29950"/>
			<description>Entry Dest in OutlineItem shall have one of types: Array, StringByte, Name</description>
			<test>containsDest == false || DestHasTypeArray == true || DestHasTypeStringByte == true || DestHasTypeName == true</test>
			<error>
				<message>Entry Dest in OutlineItem is not one of types: Array, StringByte, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="9" testNumber="29951"/>
			<description>Entry Dest with type Array in OutlineItem shall satisfy special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeArray != true || (((containsA == true)) != true)</test>
			<error>
				<message>Entry Dest with type Array in OutlineItem does not satisfy special case: fn:Not(fn:IsPresent(A))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="9" testNumber="29952"/>
			<description>Entry Dest with type StringByte in OutlineItem shall satisfy special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeStringByte != true || (((containsA == true)) != true)</test>
			<error>
				<message>Entry Dest with type StringByte in OutlineItem does not satisfy special case: fn:Not(fn:IsPresent(A))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="9" testNumber="29953"/>
			<description>Entry Dest with type Name in OutlineItem shall satisfy special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeName != true || (((containsA == true)) != true)</test>
			<error>
				<message>Entry Dest with type Name in OutlineItem does not satisfy special case: fn:Not(fn:IsPresent(A))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29954"/>
			<description>Entry First with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>FirstHasTypeDictionary != true || First_size == 1</test>
			<error>
				<message>Entry First with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29955"/>
			<description>Entry First in OutlineItem shall have type Dictionary</description>
			<test>containsFirst == false || FirstHasTypeDictionary == true</test>
			<error>
				<message>Entry First in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="10" testNumber="29956"/>
			<description>Entry First with type Dictionary in OutlineItem shall be indirect</description>
			<test>FirstHasTypeDictionary != true || isFirstIndirect == true</test>
			<error>
				<message>Entry First with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29957"/>
			<description>Entry Last with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>LastHasTypeDictionary != true || Last_size == 1</test>
			<error>
				<message>Entry Last with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29958"/>
			<description>Entry Last in OutlineItem shall have type Dictionary</description>
			<test>containsLast == false || LastHasTypeDictionary == true</test>
			<error>
				<message>Entry Last in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="10" testNumber="29959"/>
			<description>Entry Last with type Dictionary in OutlineItem shall be indirect</description>
			<test>LastHasTypeDictionary != true || isLastIndirect == true</test>
			<error>
				<message>Entry Last with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29960"/>
			<description>Entry Next with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29961"/>
			<description>Entry Next in OutlineItem shall have type Dictionary</description>
			<test>containsNext == false || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="10" testNumber="29962"/>
			<description>Entry Next with type Dictionary in OutlineItem shall be indirect</description>
			<test>NextHasTypeDictionary != true || isNextIndirect == true</test>
			<error>
				<message>Entry Next with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29963"/>
			<description>Entry Parent with type Dictionary in OutlineItem shall be one of objects OutlineItem, Outline</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in OutlineItem is not one of objects OutlineItem, Outline</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29964"/>
			<description>Entry Parent in OutlineItem shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="7" testNumber="29965"/>
			<description>Entry Parent in OutlineItem is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in OutlineItem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="10" testNumber="29966"/>
			<description>Entry Parent with type Dictionary in OutlineItem shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29967"/>
			<description>Entry Prev with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>PrevHasTypeDictionary != true || Prev_size == 1</test>
			<error>
				<message>Entry Prev with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29968"/>
			<description>Entry Prev in OutlineItem shall have type Dictionary</description>
			<test>containsPrev == false || PrevHasTypeDictionary == true</test>
			<error>
				<message>Entry Prev in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="10" testNumber="29969"/>
			<description>Entry Prev with type Dictionary in OutlineItem shall be indirect</description>
			<test>PrevHasTypeDictionary != true || isPrevIndirect == true</test>
			<error>
				<message>Entry Prev with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="29970"/>
			<description>Entry SE with type Dictionary in OutlineItem shall be object StructElem</description>
			<test>SEHasTypeDictionary != true || SE_size == 1</test>
			<error>
				<message>Entry SE with type Dictionary in OutlineItem is not object StructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29971"/>
			<description>Entry SE in OutlineItem shall have type Dictionary</description>
			<test>containsSE == false || SEHasTypeDictionary == true</test>
			<error>
				<message>Entry SE in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="10" testNumber="29972"/>
			<description>Entry SE with type Dictionary in OutlineItem shall be indirect</description>
			<test>SEHasTypeDictionary != true || isSEIndirect == true</test>
			<error>
				<message>Entry SE with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="29973"/>
			<description>Entry Title in OutlineItem shall have type StringText</description>
			<test>containsTitle == false || TitleHasTypeStringText == true</test>
			<error>
				<message>Entry Title in OutlineItem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_3" clause="7" testNumber="29974"/>
			<description>Entry Title in OutlineItem is required</description>
			<test>containsTitle == true</test>
			<error>
				<message>Entry Title in OutlineItem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_3" clause="1" testNumber="30226"/>
			<description>PageLabel shall not contain entries except P, S, St, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'St' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PageLabel contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'St' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30227"/>
			<description>Entry P in PageLabel shall have type StringText</description>
			<test>containsP == false || PHasTypeStringText == true</test>
			<error>
				<message>Entry P in PageLabel is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30228"/>
			<description>Entry S in PageLabel shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in PageLabel is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_3" clause="6" testNumber="30229"/>
			<description>Entry S with type Name in PageLabel shall have one of values: A, a, R, r, D</description>
			<test>SHasTypeName != true || SNameValue == "D" || SNameValue == "R" || SNameValue == "r" || SNameValue == "A" || SNameValue == "a"</test>
			<error>
				<message>Entry S with type Name in PageLabel has incorrect value %2 instead of A, a, R, r, D</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30230"/>
			<description>Entry St in PageLabel shall have type Integer</description>
			<test>containsSt == false || StHasTypeInteger == true</test>
			<error>
				<message>Entry St in PageLabel is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_3" clause="14" testNumber="30231"/>
			<description>Entry St with type Integer in PageLabel shall satisfy possible value predicate: fn:Eval(@St &gt;= 1)</description>
			<test>StHasTypeInteger != true || StIntegerValue &gt;= 1</test>
			<error>
				<message>Entry St with type Integer in PageLabel does not satisfy possible value predicate: fn:Eval(@St &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30232"/>
			<description>Entry Type in PageLabel shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageLabel is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_3" clause="6" testNumber="30233"/>
			<description>Entry Type with type Name in PageLabel shall have value PageLabel</description>
			<test>TypeHasTypeName != true || TypeNameValue == "PageLabel"</test>
			<error>
				<message>Entry Type with type Name in PageLabel has incorrect value %2 instead of PageLabel</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="1" testNumber="30368"/>
			<description>PageObject shall not contain entries except AA, Annots, ArtBox, B, BleedBox, Contents, CropBox, Dur, Hid, ID, LastModified, MediaBox, PZ, Parent, PieceInfo, Resources, Rotate, SeparationInfo, StructParents, Thumb, Trans, TrimBox, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'ArtBox' &amp;&amp; elem != 'B' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'Hid' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'PZ' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'SeparationInfo' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'TrimBox' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PageObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'ArtBox' &amp;&amp; elem != 'B' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'Hid' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'PZ' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'SeparationInfo' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'TrimBox' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30369"/>
			<description>Entry AA with type Dictionary in PageObject shall be object AddActionPageObject</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in PageObject is not object AddActionPageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30370"/>
			<description>Entry AA in PageObject shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30371"/>
			<description>Entry Annots with type Array in PageObject shall be object ArrayOfAnnots</description>
			<test>AnnotsHasTypeArray != true || Annots_size == 1</test>
			<error>
				<message>Entry Annots with type Array in PageObject is not object ArrayOfAnnots</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30372"/>
			<description>Entry Annots in PageObject shall have type Array</description>
			<test>containsAnnots == false || AnnotsHasTypeArray == true</test>
			<error>
				<message>Entry Annots in PageObject is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30373"/>
			<description>Entry ArtBox in PageObject shall have type Rectangle</description>
			<test>containsArtBox == false || ArtBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry ArtBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30374"/>
			<description>Entry B with type Array in PageObject shall be object ArrayOfBeads</description>
			<test>BHasTypeArray != true || B_size == 1</test>
			<error>
				<message>Entry B with type Array in PageObject is not object ArrayOfBeads</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30375"/>
			<description>Entry B in PageObject shall have type Array</description>
			<test>containsB == false || BHasTypeArray == true</test>
			<error>
				<message>Entry B in PageObject is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="9" testNumber="30376"/>
			<description>Entry B with type Array in PageObject shall satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</description>
			<test>BHasTypeArray != true || ((((TypeNameValue == "Template") == true &amp;&amp; containsB == true)) != true)</test>
			<error>
				<message>Entry B with type Array in PageObject does not satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30377"/>
			<description>Entry BleedBox in PageObject shall have type Rectangle</description>
			<test>containsBleedBox == false || BleedBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BleedBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30378"/>
			<description>Entry Contents with type Array in PageObject shall be object ArrayOfStreamsGeneral</description>
			<test>ContentsHasTypeArray != true || Contents_size == 1</test>
			<error>
				<message>Entry Contents with type Array in PageObject is not object ArrayOfStreamsGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30379"/>
			<description>Entry Contents with type Stream in PageObject shall be object Stream</description>
			<test>ContentsHasTypeStream != true || Contents_size == 1</test>
			<error>
				<message>Entry Contents with type Stream in PageObject is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30380"/>
			<description>Entry Contents in PageObject shall have one of types: Array, Stream</description>
			<test>containsContents == false || ContentsHasTypeArray == true || ContentsHasTypeStream == true</test>
			<error>
				<message>Entry Contents in PageObject is not one of types: Array, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="10" testNumber="30381"/>
			<description>Entry Contents with type Stream in PageObject shall be indirect</description>
			<test>ContentsHasTypeStream != true || isContentsIndirect == true</test>
			<error>
				<message>Entry Contents with type Stream in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30382"/>
			<description>Entry CropBox in PageObject shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30383"/>
			<description>Entry Dur in PageObject shall have type Number</description>
			<test>containsDur == false || DurHasTypeNumber == true</test>
			<error>
				<message>Entry Dur in PageObject is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30384"/>
			<description>Entry Hid in PageObject shall have type Boolean</description>
			<test>containsHid == false || HidHasTypeBoolean == true</test>
			<error>
				<message>Entry Hid in PageObject is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30385"/>
			<description>Entry ID in PageObject shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in PageObject is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30386"/>
			<description>Entry LastModified in PageObject shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in PageObject is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="11" testNumber="30387"/>
			<description>Entry LastModified in PageObject is required, when fn:IsRequired(fn:IsPresent(PieceInfo))</description>
			<test>(containsLastModified == true || ((containsPieceInfo == true)) == false)</test>
			<error>
				<message>Entry LastModified in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30388"/>
			<description>Entry MediaBox in PageObject shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="7" testNumber="30389"/>
			<description>Entry MediaBox in PageObject is required</description>
			<test>containsMediaBox == true</test>
			<error>
				<message>Entry MediaBox in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30390"/>
			<description>Entry PZ in PageObject shall have type Number</description>
			<test>containsPZ == false || PZHasTypeNumber == true</test>
			<error>
				<message>Entry PZ in PageObject is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30391"/>
			<description>Entry Parent with type Dictionary in PageObject shall be one of objects PageTreeNode, PageTreeNodeRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject is not one of objects PageTreeNode, PageTreeNodeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30392"/>
			<description>Entry Parent in PageObject shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="11" testNumber="30393"/>
			<description>Entry Parent in PageObject is required, when fn:IsRequired(@Type != Template)</description>
			<test>(containsParent == true || (TypeNameValue != "Template") == false)</test>
			<error>
				<message>Entry Parent in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="10" testNumber="30394"/>
			<description>Entry Parent with type Dictionary in PageObject shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="9" testNumber="30395"/>
			<description>Entry Parent with type Dictionary in PageObject shall satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</description>
			<test>ParentHasTypeDictionary != true || ((((TypeNameValue == "Template") == true &amp;&amp; containsParent == true)) != true)</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject does not satisfy special case: fn:Not(fn:IsPresent(@Type == Template))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30396"/>
			<description>Entry PieceInfo with type Dictionary in PageObject shall be object PagePiece</description>
			<test>PieceInfoHasTypeDictionary != true || PieceInfo_size == 1</test>
			<error>
				<message>Entry PieceInfo with type Dictionary in PageObject is not object PagePiece</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30397"/>
			<description>Entry PieceInfo in PageObject shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30398"/>
			<description>Entry Resources with type Dictionary in PageObject shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PageObject is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30399"/>
			<description>Entry Resources in PageObject shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="7" testNumber="30400"/>
			<description>Entry Resources in PageObject is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30401"/>
			<description>Entry Rotate in PageObject shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="14" testNumber="30402"/>
			<description>Entry Rotate with type Integer in PageObject shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageObject does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30403"/>
			<description>Entry SeparationInfo with type Dictionary in PageObject shall be object Separation</description>
			<test>SeparationInfoHasTypeDictionary != true || SeparationInfo_size == 1</test>
			<error>
				<message>Entry SeparationInfo with type Dictionary in PageObject is not object Separation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30404"/>
			<description>Entry SeparationInfo in PageObject shall have type Dictionary</description>
			<test>containsSeparationInfo == false || SeparationInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry SeparationInfo in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30405"/>
			<description>Entry StructParents in PageObject shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in PageObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="11" testNumber="30406"/>
			<description>Entry StructParents in PageObject is required, when fn:IsRequired(fn:PageContainsStructContentItems())</description>
			<test>(containsStructParents == true || ((pageContainsStructContentItems == true)) == false)</test>
			<error>
				<message>Entry StructParents in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30407"/>
			<description>Entry Thumb with type Stream in PageObject shall be object Thumbnail</description>
			<test>ThumbHasTypeStream != true || Thumb_size == 1</test>
			<error>
				<message>Entry Thumb with type Stream in PageObject is not object Thumbnail</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30408"/>
			<description>Entry Thumb in PageObject shall have type Stream</description>
			<test>containsThumb == false || ThumbHasTypeStream == true</test>
			<error>
				<message>Entry Thumb in PageObject is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="10" testNumber="30409"/>
			<description>Entry Thumb with type Stream in PageObject shall be indirect</description>
			<test>ThumbHasTypeStream != true || isThumbIndirect == true</test>
			<error>
				<message>Entry Thumb with type Stream in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30410"/>
			<description>Entry Trans with type Dictionary in PageObject shall be object Transition</description>
			<test>TransHasTypeDictionary != true || Trans_size == 1</test>
			<error>
				<message>Entry Trans with type Dictionary in PageObject is not object Transition</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30411"/>
			<description>Entry Trans in PageObject shall have type Dictionary</description>
			<test>containsTrans == false || TransHasTypeDictionary == true</test>
			<error>
				<message>Entry Trans in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30412"/>
			<description>Entry TrimBox in PageObject shall have type Rectangle</description>
			<test>containsTrimBox == false || TrimBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry TrimBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30413"/>
			<description>Entry Type in PageObject shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="7" testNumber="30414"/>
			<description>Entry Type in PageObject is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_3" clause="6" testNumber="30415"/>
			<description>Entry Type with type Name in PageObject shall have one of values: Page, Template</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Page" || TypeNameValue == "Template"</test>
			<error>
				<message>Entry Type with type Name in PageObject has incorrect value %2 instead of Page, Template</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APagePieceEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30740"/>
			<description>Entry with type Dictionary in PagePiece shall be object Data</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in PagePiece is not object Data</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APagePieceEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30741"/>
			<description>Entry in PagePiece shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in PagePiece is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="1" testNumber="30812"/>
			<description>PageTreeNode shall not contain entries except Count, CropBox, Kids, MediaBox, Parent, Resources, Rotate, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PageTreeNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30813"/>
			<description>Entry Count in PageTreeNode shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in PageTreeNode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="7" testNumber="30814"/>
			<description>Entry Count in PageTreeNode is required</description>
			<test>containsCount == true</test>
			<error>
				<message>Entry Count in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="14" testNumber="30815"/>
			<description>Entry Count with type Integer in PageTreeNode shall satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in PageTreeNode does not satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30816"/>
			<description>Entry CropBox in PageTreeNode shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageTreeNode is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30817"/>
			<description>Entry Kids with type Array in PageTreeNode shall be object ArrayOfPageTreeNodeKids</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in PageTreeNode is not object ArrayOfPageTreeNodeKids</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30818"/>
			<description>Entry Kids in PageTreeNode shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in PageTreeNode is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="7" testNumber="30819"/>
			<description>Entry Kids in PageTreeNode is required</description>
			<test>containsKids == true</test>
			<error>
				<message>Entry Kids in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30820"/>
			<description>Entry MediaBox in PageTreeNode shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageTreeNode is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30821"/>
			<description>Entry Parent with type Dictionary in PageTreeNode shall be one of objects PageTreeNode, PageTreeNodeRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in PageTreeNode is not one of objects PageTreeNode, PageTreeNodeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30822"/>
			<description>Entry Parent in PageTreeNode shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in PageTreeNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="7" testNumber="30823"/>
			<description>Entry Parent in PageTreeNode is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="10" testNumber="30824"/>
			<description>Entry Parent with type Dictionary in PageTreeNode shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in PageTreeNode is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30825"/>
			<description>Entry Resources with type Dictionary in PageTreeNode shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PageTreeNode is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30826"/>
			<description>Entry Resources in PageTreeNode shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageTreeNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30827"/>
			<description>Entry Rotate in PageTreeNode shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageTreeNode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="14" testNumber="30828"/>
			<description>Entry Rotate with type Integer in PageTreeNode shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageTreeNode does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30829"/>
			<description>Entry Type in PageTreeNode shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageTreeNode is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="7" testNumber="30830"/>
			<description>Entry Type in PageTreeNode is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_3" clause="6" testNumber="30831"/>
			<description>Entry Type with type Name in PageTreeNode shall have value Pages</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pages"</test>
			<error>
				<message>Entry Type with type Name in PageTreeNode has incorrect value %2 instead of Pages</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="1" testNumber="30980"/>
			<description>PageTreeNodeRoot shall not contain entries except Count, CropBox, Kids, MediaBox, Resources, Rotate, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PageTreeNodeRoot contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30981"/>
			<description>Entry Count in PageTreeNodeRoot shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in PageTreeNodeRoot is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="7" testNumber="30982"/>
			<description>Entry Count in PageTreeNodeRoot is required</description>
			<test>containsCount == true</test>
			<error>
				<message>Entry Count in PageTreeNodeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="14" testNumber="30983"/>
			<description>Entry Count with type Integer in PageTreeNodeRoot shall satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in PageTreeNodeRoot does not satisfy possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30984"/>
			<description>Entry CropBox in PageTreeNodeRoot shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageTreeNodeRoot is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30985"/>
			<description>Entry Kids with type Array in PageTreeNodeRoot shall be object ArrayOfPageTreeNodeKids</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in PageTreeNodeRoot is not object ArrayOfPageTreeNodeKids</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30986"/>
			<description>Entry Kids in PageTreeNodeRoot shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in PageTreeNodeRoot is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="7" testNumber="30987"/>
			<description>Entry Kids in PageTreeNodeRoot is required</description>
			<test>containsKids == true</test>
			<error>
				<message>Entry Kids in PageTreeNodeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30988"/>
			<description>Entry MediaBox in PageTreeNodeRoot shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageTreeNodeRoot is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="17" testNumber="30989"/>
			<description>Entry Resources with type Dictionary in PageTreeNodeRoot shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PageTreeNodeRoot is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30990"/>
			<description>Entry Resources in PageTreeNodeRoot shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageTreeNodeRoot is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30991"/>
			<description>Entry Rotate in PageTreeNodeRoot shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageTreeNodeRoot is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="14" testNumber="30992"/>
			<description>Entry Rotate with type Integer in PageTreeNodeRoot shall satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageTreeNodeRoot does not satisfy possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="30993"/>
			<description>Entry Type in PageTreeNodeRoot shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageTreeNodeRoot is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="7" testNumber="30994"/>
			<description>Entry Type in PageTreeNodeRoot is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageTreeNodeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_3" clause="6" testNumber="30995"/>
			<description>Entry Type with type Name in PageTreeNodeRoot shall have value Pages</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pages"</test>
			<error>
				<message>Entry Type with type Name in PageTreeNodeRoot has incorrect value %2 instead of Pages</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_3" clause="2" testNumber="31144"/>
			<description>PatternColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>PatternColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31145"/>
			<description>Entry 0 in PatternColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in PatternColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_3" clause="6" testNumber="31146"/>
			<description>Entry 0 with type Name in PatternColorSpace shall have value Pattern</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Pattern"</test>
			<error>
				<message>Entry 0 with type Name in PatternColorSpace has incorrect value %2 instead of Pattern</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31147"/>
			<description>Entry 1 with type Array in PatternColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in PatternColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31148"/>
			<description>Entry 1 in PatternColorSpace shall have one of types: Array, Name</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in PatternColorSpace is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_3" clause="6" testNumber="31149"/>
			<description>Entry 1 with type Name in PatternColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry1HasTypeName != true || entry1NameValue == "DeviceCMYK" || entry1NameValue == "DeviceRGB" || entry1NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 1 with type Name in PatternColorSpace has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31183"/>
			<description>Entry with type Stream in PatternMap shall be object PatternType1</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in PatternMap is not object PatternType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31184"/>
			<description>Entry with type Dictionary in PatternMap shall be object PatternType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in PatternMap is not object PatternType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31185"/>
			<description>Entry in PatternMap shall have one of types: Stream, Dictionary</description>
			<test>HasTypeStream == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in PatternMap is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="31186"/>
			<description>Entry with type Stream in PatternMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in PatternMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="1" testNumber="31251"/>
			<description>PatternType1 shall not contain entries except BBox, DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Matrix, PaintType, PatternType, Resources, TilingType, Type, XStep, XUID, YStep</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PaintType' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'TilingType' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XStep' &amp;&amp; elem != 'XUID' &amp;&amp; elem != 'YStep').length == 0</test>
			<error>
				<message>PatternType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PaintType' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'TilingType' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XStep' &amp;&amp; elem != 'XUID' &amp;&amp; elem != 'YStep').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31252"/>
			<description>Entry BBox in PatternType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in PatternType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="31253"/>
			<description>Entry BBox in PatternType1 is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31254"/>
			<description>Entry DecodeParms with type Array in PatternType1 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in PatternType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31255"/>
			<description>Entry DecodeParms with type Dictionary in PatternType1 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in PatternType1 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31256"/>
			<description>Entry DecodeParms in PatternType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in PatternType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="31257"/>
			<description>Entry DecodeParms with type Array in PatternType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in PatternType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31258"/>
			<description>Entry F with type Dictionary in PatternType1 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in PatternType1 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31259"/>
			<description>Entry F in PatternType1 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in PatternType1 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31260"/>
			<description>Entry FDecodeParms with type Array in PatternType1 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in PatternType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31261"/>
			<description>Entry FDecodeParms with type Dictionary in PatternType1 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in PatternType1 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31262"/>
			<description>Entry FDecodeParms in PatternType1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in PatternType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="31263"/>
			<description>Entry FDecodeParms with type Array in PatternType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in PatternType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31264"/>
			<description>Entry FFilter with type Array in PatternType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in PatternType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31265"/>
			<description>Entry FFilter in PatternType1 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in PatternType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="31266"/>
			<description>Entry FFilter with type Array in PatternType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in PatternType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="31267"/>
			<description>Entry FFilter with type Name in PatternType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in PatternType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31268"/>
			<description>Entry Filter with type Array in PatternType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in PatternType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31269"/>
			<description>Entry Filter in PatternType1 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in PatternType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="31270"/>
			<description>Entry Filter with type Array in PatternType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in PatternType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="31271"/>
			<description>Entry Filter with type Name in PatternType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in PatternType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31272"/>
			<description>Entry Length in PatternType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="31273"/>
			<description>Entry Length in PatternType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31274"/>
			<description>Entry Matrix in PatternType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in PatternType1 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31275"/>
			<description>Entry PaintType in PatternType1 shall have type Integer</description>
			<test>containsPaintType == false || PaintTypeHasTypeInteger == true</test>
			<error>
				<message>Entry PaintType in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="31276"/>
			<description>Entry PaintType in PatternType1 is required</description>
			<test>containsPaintType == true</test>
			<error>
				<message>Entry PaintType in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="31277"/>
			<description>Entry PaintType with type Integer in PatternType1 shall have one of values: 1, 2</description>
			<test>PaintTypeHasTypeInteger != true || PaintTypeIntegerValue == 1 || PaintTypeIntegerValue == 2</test>
			<error>
				<message>Entry PaintType with type Integer in PatternType1 has incorrect value %2 instead of 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PaintTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31278"/>
			<description>Entry PatternType in PatternType1 shall have type Integer</description>
			<test>containsPatternType == false || PatternTypeHasTypeInteger == true</test>
			<error>
				<message>Entry PatternType in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="31279"/>
			<description>Entry PatternType in PatternType1 is required</description>
			<test>containsPatternType == true</test>
			<error>
				<message>Entry PatternType in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="31280"/>
			<description>Entry PatternType with type Integer in PatternType1 shall have value 1</description>
			<test>PatternTypeHasTypeInteger != true || PatternTypeIntegerValue == 1</test>
			<error>
				<message>Entry PatternType with type Integer in PatternType1 has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PatternTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31281"/>
			<description>Entry Resources with type Dictionary in PatternType1 shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PatternType1 is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31282"/>
			<description>Entry Resources in PatternType1 shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PatternType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="31283"/>
			<description>Entry Resources in PatternType1 is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31284"/>
			<description>Entry TilingType in PatternType1 shall have type Integer</description>
			<test>containsTilingType == false || TilingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry TilingType in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="31285"/>
			<description>Entry TilingType in PatternType1 is required</description>
			<test>containsTilingType == true</test>
			<error>
				<message>Entry TilingType in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="31286"/>
			<description>Entry TilingType with type Integer in PatternType1 shall have one of values: 1, 2, 3</description>
			<test>TilingTypeHasTypeInteger != true || TilingTypeIntegerValue == 1 || TilingTypeIntegerValue == 2 || TilingTypeIntegerValue == 3</test>
			<error>
				<message>Entry TilingType with type Integer in PatternType1 has incorrect value %2 instead of 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TilingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31287"/>
			<description>Entry Type in PatternType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PatternType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="31288"/>
			<description>Entry Type with type Name in PatternType1 shall have value Pattern</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pattern"</test>
			<error>
				<message>Entry Type with type Name in PatternType1 has incorrect value %2 instead of Pattern</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31289"/>
			<description>Entry XStep in PatternType1 shall have type Number</description>
			<test>containsXStep == false || XStepHasTypeNumber == true</test>
			<error>
				<message>Entry XStep in PatternType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="31290"/>
			<description>Entry XStep in PatternType1 is required</description>
			<test>containsXStep == true</test>
			<error>
				<message>Entry XStep in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31291"/>
			<description>Entry XUID with type Array in PatternType1 shall be object ArrayOfIntegersGeneral</description>
			<test>XUIDHasTypeArray != true || XUID_size == 1</test>
			<error>
				<message>Entry XUID with type Array in PatternType1 is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31292"/>
			<description>Entry XUID in PatternType1 shall have type Array</description>
			<test>containsXUID == false || XUIDHasTypeArray == true</test>
			<error>
				<message>Entry XUID in PatternType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31293"/>
			<description>Entry YStep in PatternType1 shall have type Number</description>
			<test>containsYStep == false || YStepHasTypeNumber == true</test>
			<error>
				<message>Entry YStep in PatternType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="31294"/>
			<description>Entry YStep in PatternType1 is required</description>
			<test>containsYStep == true</test>
			<error>
				<message>Entry YStep in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="1" testNumber="31528"/>
			<description>PatternType2 shall not contain entries except ExtGState, Matrix, PatternType, Shading, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ExtGState' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PatternType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ExtGState' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31529"/>
			<description>Entry ExtGState with type Dictionary in PatternType2 shall be object GraphicsStateParameter</description>
			<test>ExtGStateHasTypeDictionary != true || ExtGState_size == 1</test>
			<error>
				<message>Entry ExtGState with type Dictionary in PatternType2 is not object GraphicsStateParameter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31530"/>
			<description>Entry ExtGState in PatternType2 shall have type Dictionary</description>
			<test>containsExtGState == false || ExtGStateHasTypeDictionary == true</test>
			<error>
				<message>Entry ExtGState in PatternType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31531"/>
			<description>Entry Matrix in PatternType2 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in PatternType2 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31532"/>
			<description>Entry PatternType in PatternType2 shall have type Integer</description>
			<test>containsPatternType == false || PatternTypeHasTypeInteger == true</test>
			<error>
				<message>Entry PatternType in PatternType2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="31533"/>
			<description>Entry PatternType in PatternType2 is required</description>
			<test>containsPatternType == true</test>
			<error>
				<message>Entry PatternType in PatternType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="6" testNumber="31534"/>
			<description>Entry PatternType with type Integer in PatternType2 shall have value 2</description>
			<test>PatternTypeHasTypeInteger != true || PatternTypeIntegerValue == 2</test>
			<error>
				<message>Entry PatternType with type Integer in PatternType2 has incorrect value %2 instead of 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PatternTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31535"/>
			<description>Entry Shading with type Stream in PatternType2 shall be one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</description>
			<test>ShadingHasTypeStream != true || Shading_size == 1</test>
			<error>
				<message>Entry Shading with type Stream in PatternType2 is not one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31536"/>
			<description>Entry Shading with type Dictionary in PatternType2 shall be one of objects ShadingType1, ShadingType2, ShadingType3</description>
			<test>ShadingHasTypeDictionary != true || Shading_size == 1</test>
			<error>
				<message>Entry Shading with type Dictionary in PatternType2 is not one of objects ShadingType1, ShadingType2, ShadingType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31537"/>
			<description>Entry Shading in PatternType2 shall have one of types: Stream, Dictionary</description>
			<test>containsShading == false || ShadingHasTypeStream == true || ShadingHasTypeDictionary == true</test>
			<error>
				<message>Entry Shading in PatternType2 is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="31538"/>
			<description>Entry Shading in PatternType2 is required</description>
			<test>containsShading == true</test>
			<error>
				<message>Entry Shading in PatternType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="10" testNumber="31539"/>
			<description>Entry Shading with type Stream in PatternType2 shall be indirect</description>
			<test>ShadingHasTypeStream != true || isShadingIndirect == true</test>
			<error>
				<message>Entry Shading with type Stream in PatternType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31540"/>
			<description>Entry Type in PatternType2 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PatternType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_3" clause="6" testNumber="31541"/>
			<description>Entry Type with type Name in PatternType2 shall have value Pattern</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pattern"</test>
			<error>
				<message>Entry Type with type Name in PatternType2 has incorrect value %2 instead of Pattern</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArray">
			<id specification="ISO_32000_1_3" clause="3" testNumber="31779"/>
			<description>RelatedFilesArray shall contain 2*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>RelatedFilesArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_3" clause="2" testNumber="31785"/>
			<description>RelatedFilesArraySubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>RelatedFilesArraySubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31786"/>
			<description>Entry 0 in RelatedFilesArraySubArray shall have type String</description>
			<test>size &lt;= 0 || entry0HasTypeString == true</test>
			<error>
				<message>Entry 0 in RelatedFilesArraySubArray is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_3" clause="17" testNumber="31787"/>
			<description>Entry 1 with type Stream in RelatedFilesArraySubArray shall be object EmbeddedFileStream</description>
			<test>entry1HasTypeStream != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Stream in RelatedFilesArraySubArray is not object EmbeddedFileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="31788"/>
			<description>Entry 1 in RelatedFilesArraySubArray shall have type Stream</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in RelatedFilesArraySubArray is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_3" clause="10" testNumber="31789"/>
			<description>Entry 1 with type Stream in RelatedFilesArraySubArray shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in RelatedFilesArraySubArray is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="1" testNumber="32383"/>
			<description>Resource shall not contain entries except ColorSpace, ExtGState, Font, Pattern, ProcSet, Properties, Shading, XObject</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'ExtGState' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'Pattern' &amp;&amp; elem != 'ProcSet' &amp;&amp; elem != 'Properties' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'XObject').length == 0</test>
			<error>
				<message>Resource contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'ExtGState' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'Pattern' &amp;&amp; elem != 'ProcSet' &amp;&amp; elem != 'Properties' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'XObject').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32384"/>
			<description>Entry ColorSpace with type Dictionary in Resource shall be object ColorSpaceMap</description>
			<test>ColorSpaceHasTypeDictionary != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Dictionary in Resource is not object ColorSpaceMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32385"/>
			<description>Entry ColorSpace in Resource shall have type Dictionary</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeDictionary == true</test>
			<error>
				<message>Entry ColorSpace in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32386"/>
			<description>Entry ExtGState with type Dictionary in Resource shall be object GraphicsStateParameterMap</description>
			<test>ExtGStateHasTypeDictionary != true || ExtGState_size == 1</test>
			<error>
				<message>Entry ExtGState with type Dictionary in Resource is not object GraphicsStateParameterMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32387"/>
			<description>Entry ExtGState in Resource shall have type Dictionary</description>
			<test>containsExtGState == false || ExtGStateHasTypeDictionary == true</test>
			<error>
				<message>Entry ExtGState in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32388"/>
			<description>Entry Font with type Dictionary in Resource shall be object FontMap</description>
			<test>FontHasTypeDictionary != true || Font_size == 1</test>
			<error>
				<message>Entry Font with type Dictionary in Resource is not object FontMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32389"/>
			<description>Entry Font in Resource shall have type Dictionary</description>
			<test>containsFont == false || FontHasTypeDictionary == true</test>
			<error>
				<message>Entry Font in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32390"/>
			<description>Entry Pattern with type Dictionary in Resource shall be object PatternMap</description>
			<test>PatternHasTypeDictionary != true || Pattern_size == 1</test>
			<error>
				<message>Entry Pattern with type Dictionary in Resource is not object PatternMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32391"/>
			<description>Entry Pattern in Resource shall have type Dictionary</description>
			<test>containsPattern == false || PatternHasTypeDictionary == true</test>
			<error>
				<message>Entry Pattern in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32392"/>
			<description>Entry ProcSet with type Array in Resource shall be object ArrayOfNamesForProcSet</description>
			<test>ProcSetHasTypeArray != true || ProcSet_size == 1</test>
			<error>
				<message>Entry ProcSet with type Array in Resource is not object ArrayOfNamesForProcSet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32393"/>
			<description>Entry ProcSet in Resource shall have type Array</description>
			<test>containsProcSet == false || ProcSetHasTypeArray == true</test>
			<error>
				<message>Entry ProcSet in Resource is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32394"/>
			<description>Entry Properties with type Dictionary in Resource shall be object _UniversalDictionary</description>
			<test>entryPropertiesHasTypeDictionary != true || entryProperties_size == 1</test>
			<error>
				<message>Entry Properties with type Dictionary in Resource is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32395"/>
			<description>Entry Properties in Resource shall have type Dictionary</description>
			<test>containsProperties == false || entryPropertiesHasTypeDictionary == true</test>
			<error>
				<message>Entry Properties in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32396"/>
			<description>Entry Shading with type Dictionary in Resource shall be object ShadingMap</description>
			<test>ShadingHasTypeDictionary != true || Shading_size == 1</test>
			<error>
				<message>Entry Shading with type Dictionary in Resource is not object ShadingMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32397"/>
			<description>Entry Shading in Resource shall have type Dictionary</description>
			<test>containsShading == false || ShadingHasTypeDictionary == true</test>
			<error>
				<message>Entry Shading in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32398"/>
			<description>Entry XObject with type Dictionary in Resource shall be object XObjectMap</description>
			<test>XObjectHasTypeDictionary != true || XObject_size == 1</test>
			<error>
				<message>Entry XObject with type Dictionary in Resource is not object XObjectMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32399"/>
			<description>Entry XObject in Resource shall have type Dictionary</description>
			<test>containsXObject == false || XObjectHasTypeDictionary == true</test>
			<error>
				<message>Entry XObject in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARoleMapEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32787"/>
			<description>Entry in RoleMap shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in RoleMap is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_3" clause="1" testNumber="32795"/>
			<description>Separation shall not contain entries except ColorSpace, DeviceColorant, Pages</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'DeviceColorant' &amp;&amp; elem != 'Pages').length == 0</test>
			<error>
				<message>Separation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'DeviceColorant' &amp;&amp; elem != 'Pages').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32796"/>
			<description>Entry ColorSpace with type Array in Separation shall be one of objects SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in Separation is not one of objects SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32797"/>
			<description>Entry ColorSpace in Separation shall have type Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in Separation is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32798"/>
			<description>Entry DeviceColorant in Separation shall have one of types: String, Name</description>
			<test>containsDeviceColorant == false || DeviceColorantHasTypeString == true || DeviceColorantHasTypeName == true</test>
			<error>
				<message>Entry DeviceColorant in Separation is not one of types: String, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_3" clause="7" testNumber="32799"/>
			<description>Entry DeviceColorant in Separation is required</description>
			<test>containsDeviceColorant == true</test>
			<error>
				<message>Entry DeviceColorant in Separation is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32800"/>
			<description>Entry Pages with type Array in Separation shall be object ArrayOfPages</description>
			<test>PagesHasTypeArray != true || Pages_size == 1</test>
			<error>
				<message>Entry Pages with type Array in Separation is not object ArrayOfPages</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32801"/>
			<description>Entry Pages in Separation shall have type Array</description>
			<test>containsPages == false || PagesHasTypeArray == true</test>
			<error>
				<message>Entry Pages in Separation is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_3" clause="7" testNumber="32802"/>
			<description>Entry Pages in Separation is required</description>
			<test>containsPages == true</test>
			<error>
				<message>Entry Pages in Separation is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_3" clause="2" testNumber="32853"/>
			<description>SeparationColorSpace shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>SeparationColorSpace contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32854"/>
			<description>Entry 0 in SeparationColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in SeparationColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_3" clause="6" testNumber="32855"/>
			<description>Entry 0 with type Name in SeparationColorSpace shall have value Separation</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Separation"</test>
			<error>
				<message>Entry 0 with type Name in SeparationColorSpace has incorrect value %2 instead of Separation</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32856"/>
			<description>Entry 1 in SeparationColorSpace shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in SeparationColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32857"/>
			<description>Entry 2 with type Array in SeparationColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</description>
			<test>entry2HasTypeArray != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Array in SeparationColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32858"/>
			<description>Entry 2 in SeparationColorSpace shall have one of types: Array, Name</description>
			<test>size &lt;= 2 || entry2HasTypeArray == true || entry2HasTypeName == true</test>
			<error>
				<message>Entry 2 in SeparationColorSpace is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_3" clause="6" testNumber="32859"/>
			<description>Entry 2 with type Name in SeparationColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry2HasTypeName != true || entry2NameValue == "DeviceCMYK" || entry2NameValue == "DeviceRGB" || entry2NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 2 with type Name in SeparationColorSpace has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32860"/>
			<description>Entry 3 with type Stream in SeparationColorSpace shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in SeparationColorSpace is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32861"/>
			<description>Entry 3 with type Dictionary in SeparationColorSpace shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry3HasTypeDictionary != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Dictionary in SeparationColorSpace is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32862"/>
			<description>Entry 3 in SeparationColorSpace shall have one of types: Stream, Dictionary</description>
			<test>size &lt;= 3 || entry3HasTypeStream == true || entry3HasTypeDictionary == true</test>
			<error>
				<message>Entry 3 in SeparationColorSpace is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_3" clause="10" testNumber="32863"/>
			<description>Entry 3 with type Stream in SeparationColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in SeparationColorSpace is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32919"/>
			<description>Entry with type Stream in ShadingMap shall be one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ShadingMap is not one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32920"/>
			<description>Entry with type Dictionary in ShadingMap shall be one of objects ShadingType1, ShadingType2, ShadingType3</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ShadingMap is not one of objects ShadingType1, ShadingType2, ShadingType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32921"/>
			<description>Entry in ShadingMap shall have one of types: Stream, Dictionary</description>
			<test>HasTypeStream == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ShadingMap is not one of types: Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="32922"/>
			<description>Entry with type Stream in ShadingMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ShadingMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="1" testNumber="32943"/>
			<description>ShadingType1 shall not contain entries except AntiAlias, BBox, Background, ColorSpace, Domain, Function, Matrix, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'ShadingType').length == 0</test>
			<error>
				<message>ShadingType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'ShadingType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32944"/>
			<description>Entry AntiAlias in ShadingType1 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType1 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32945"/>
			<description>Entry BBox in ShadingType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32946"/>
			<description>Entry Background with type Array in ShadingType1 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType1 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32947"/>
			<description>Entry Background in ShadingType1 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32948"/>
			<description>Entry ColorSpace with type Array in ShadingType1 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType1 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32949"/>
			<description>Entry ColorSpace in ShadingType1 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="32950"/>
			<description>Entry ColorSpace in ShadingType1 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="32951"/>
			<description>Entry ColorSpace with type Name in ShadingType1 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType1 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32952"/>
			<description>Entry Domain with type Array in ShadingType1 shall be object ArrayOf_4Numbers</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in ShadingType1 is not object ArrayOf_4Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32953"/>
			<description>Entry Domain in ShadingType1 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in ShadingType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32954"/>
			<description>Entry Function with type Array in ShadingType1 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType1 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32955"/>
			<description>Entry Function with type Stream in ShadingType1 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType1 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="32956"/>
			<description>Entry Function with type Dictionary in ShadingType1 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType1 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32957"/>
			<description>Entry Function in ShadingType1 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType1 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="32958"/>
			<description>Entry Function in ShadingType1 is required</description>
			<test>containsFunction == true</test>
			<error>
				<message>Entry Function in ShadingType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="10" testNumber="32959"/>
			<description>Entry Function with type Stream in ShadingType1 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32960"/>
			<description>Entry Matrix in ShadingType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in ShadingType1 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="32961"/>
			<description>Entry ShadingType in ShadingType1 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="32962"/>
			<description>Entry ShadingType in ShadingType1 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="32963"/>
			<description>Entry ShadingType with type Integer in ShadingType1 shall have value 1</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 1</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType1 has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="1" testNumber="33069"/>
			<description>ShadingType2 shall not contain entries except AntiAlias, BBox, Background, ColorSpace, Coords, Domain, Extend, Function, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ShadingType').length == 0</test>
			<error>
				<message>ShadingType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ShadingType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33070"/>
			<description>Entry AntiAlias in ShadingType2 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType2 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33071"/>
			<description>Entry BBox in ShadingType2 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType2 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33072"/>
			<description>Entry Background with type Array in ShadingType2 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33073"/>
			<description>Entry Background in ShadingType2 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33074"/>
			<description>Entry ColorSpace with type Array in ShadingType2 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType2 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33075"/>
			<description>Entry ColorSpace in ShadingType2 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType2 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33076"/>
			<description>Entry ColorSpace in ShadingType2 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33077"/>
			<description>Entry ColorSpace with type Name in ShadingType2 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType2 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33078"/>
			<description>Entry Coords with type Array in ShadingType2 shall be object ArrayOf_4Numbers</description>
			<test>CoordsHasTypeArray != true || Coords_size == 1</test>
			<error>
				<message>Entry Coords with type Array in ShadingType2 is not object ArrayOf_4Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33079"/>
			<description>Entry Coords in ShadingType2 shall have type Array</description>
			<test>containsCoords == false || CoordsHasTypeArray == true</test>
			<error>
				<message>Entry Coords in ShadingType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33080"/>
			<description>Entry Coords in ShadingType2 is required</description>
			<test>containsCoords == true</test>
			<error>
				<message>Entry Coords in ShadingType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33081"/>
			<description>Entry Domain with type Array in ShadingType2 shall be object ArrayOf_2Numbers</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in ShadingType2 is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33082"/>
			<description>Entry Domain in ShadingType2 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in ShadingType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33083"/>
			<description>Entry Extend with type Array in ShadingType2 shall be object ArrayOf_2Booleans</description>
			<test>ExtendHasTypeArray != true || Extend_size == 1</test>
			<error>
				<message>Entry Extend with type Array in ShadingType2 is not object ArrayOf_2Booleans</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33084"/>
			<description>Entry Extend in ShadingType2 shall have type Array</description>
			<test>containsExtend == false || ExtendHasTypeArray == true</test>
			<error>
				<message>Entry Extend in ShadingType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33085"/>
			<description>Entry Function with type Array in ShadingType2 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType2 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33086"/>
			<description>Entry Function with type Stream in ShadingType2 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType2 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33087"/>
			<description>Entry Function with type Dictionary in ShadingType2 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType2 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33088"/>
			<description>Entry Function in ShadingType2 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType2 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33089"/>
			<description>Entry Function in ShadingType2 is required</description>
			<test>containsFunction == true</test>
			<error>
				<message>Entry Function in ShadingType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="10" testNumber="33090"/>
			<description>Entry Function with type Stream in ShadingType2 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33091"/>
			<description>Entry ShadingType in ShadingType2 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33092"/>
			<description>Entry ShadingType in ShadingType2 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33093"/>
			<description>Entry ShadingType with type Integer in ShadingType2 shall have value 2</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 2</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType2 has incorrect value %2 instead of 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="1" testNumber="33219"/>
			<description>ShadingType3 shall not contain entries except AntiAlias, BBox, Background, ColorSpace, Coords, Domain, Extend, Function, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ShadingType').length == 0</test>
			<error>
				<message>ShadingType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ShadingType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33220"/>
			<description>Entry AntiAlias in ShadingType3 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType3 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33221"/>
			<description>Entry BBox in ShadingType3 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType3 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33222"/>
			<description>Entry Background with type Array in ShadingType3 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33223"/>
			<description>Entry Background in ShadingType3 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33224"/>
			<description>Entry ColorSpace with type Array in ShadingType3 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType3 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33225"/>
			<description>Entry ColorSpace in ShadingType3 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType3 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33226"/>
			<description>Entry ColorSpace in ShadingType3 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33227"/>
			<description>Entry ColorSpace with type Name in ShadingType3 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType3 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33228"/>
			<description>Entry Coords with type Array in ShadingType3 shall be object ArrayOf_6Numbers</description>
			<test>CoordsHasTypeArray != true || Coords_size == 1</test>
			<error>
				<message>Entry Coords with type Array in ShadingType3 is not object ArrayOf_6Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33229"/>
			<description>Entry Coords in ShadingType3 shall have type Array</description>
			<test>containsCoords == false || CoordsHasTypeArray == true</test>
			<error>
				<message>Entry Coords in ShadingType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33230"/>
			<description>Entry Coords in ShadingType3 is required</description>
			<test>containsCoords == true</test>
			<error>
				<message>Entry Coords in ShadingType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33231"/>
			<description>Entry Domain with type Array in ShadingType3 shall be object ArrayOf_2Numbers</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in ShadingType3 is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33232"/>
			<description>Entry Domain in ShadingType3 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in ShadingType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33233"/>
			<description>Entry Extend with type Array in ShadingType3 shall be object ArrayOf_2Booleans</description>
			<test>ExtendHasTypeArray != true || Extend_size == 1</test>
			<error>
				<message>Entry Extend with type Array in ShadingType3 is not object ArrayOf_2Booleans</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33234"/>
			<description>Entry Extend in ShadingType3 shall have type Array</description>
			<test>containsExtend == false || ExtendHasTypeArray == true</test>
			<error>
				<message>Entry Extend in ShadingType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33235"/>
			<description>Entry Function with type Array in ShadingType3 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType3 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33236"/>
			<description>Entry Function with type Stream in ShadingType3 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType3 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33237"/>
			<description>Entry Function with type Dictionary in ShadingType3 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType3 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33238"/>
			<description>Entry Function in ShadingType3 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType3 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33239"/>
			<description>Entry Function in ShadingType3 is required</description>
			<test>containsFunction == true</test>
			<error>
				<message>Entry Function in ShadingType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="10" testNumber="33240"/>
			<description>Entry Function with type Stream in ShadingType3 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33241"/>
			<description>Entry ShadingType in ShadingType3 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33242"/>
			<description>Entry ShadingType in ShadingType3 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33243"/>
			<description>Entry ShadingType with type Integer in ShadingType3 shall have value 3</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 3</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType3 has incorrect value %2 instead of 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="1" testNumber="33369"/>
			<description>ShadingType4 shall not contain entries except AntiAlias, BBox, Background, BitsPerComponent, BitsPerCoordinate, BitsPerFlag, ColorSpace, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Function, Length, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType').length == 0</test>
			<error>
				<message>ShadingType4 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33370"/>
			<description>Entry AntiAlias in ShadingType4 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType4 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33371"/>
			<description>Entry BBox in ShadingType4 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType4 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33372"/>
			<description>Entry Background with type Array in ShadingType4 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType4 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33373"/>
			<description>Entry Background in ShadingType4 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType4 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33374"/>
			<description>Entry BitsPerComponent in ShadingType4 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33375"/>
			<description>Entry BitsPerComponent in ShadingType4 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33376"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType4 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType4 has incorrect value %2 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33377"/>
			<description>Entry BitsPerCoordinate in ShadingType4 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33378"/>
			<description>Entry BitsPerCoordinate in ShadingType4 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33379"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType4 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType4 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33380"/>
			<description>Entry BitsPerFlag in ShadingType4 shall have type Integer</description>
			<test>containsBitsPerFlag == false || BitsPerFlagHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33381"/>
			<description>Entry BitsPerFlag in ShadingType4 is required</description>
			<test>containsBitsPerFlag == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33382"/>
			<description>Entry BitsPerFlag with type Integer in ShadingType4 shall have one of values: 2, 4, 8</description>
			<test>BitsPerFlagHasTypeInteger != true || BitsPerFlagIntegerValue == 2 || BitsPerFlagIntegerValue == 4 || BitsPerFlagIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerFlag with type Integer in ShadingType4 has incorrect value %2 instead of 2, 4, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerFlagIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33383"/>
			<description>Entry ColorSpace with type Array in ShadingType4 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType4 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33384"/>
			<description>Entry ColorSpace in ShadingType4 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType4 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33385"/>
			<description>Entry ColorSpace in ShadingType4 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33386"/>
			<description>Entry ColorSpace with type Name in ShadingType4 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType4 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33387"/>
			<description>Entry Decode with type Array in ShadingType4 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in ShadingType4 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33388"/>
			<description>Entry Decode in ShadingType4 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType4 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33389"/>
			<description>Entry DecodeParms with type Array in ShadingType4 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType4 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33390"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType4 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType4 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33391"/>
			<description>Entry DecodeParms in ShadingType4 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType4 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="9" testNumber="33392"/>
			<description>Entry DecodeParms with type Array in ShadingType4 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType4 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33393"/>
			<description>Entry F with type Dictionary in ShadingType4 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ShadingType4 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33394"/>
			<description>Entry F in ShadingType4 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ShadingType4 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33395"/>
			<description>Entry FDecodeParms with type Array in ShadingType4 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType4 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33396"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType4 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType4 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33397"/>
			<description>Entry FDecodeParms in ShadingType4 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType4 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="9" testNumber="33398"/>
			<description>Entry FDecodeParms with type Array in ShadingType4 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType4 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33399"/>
			<description>Entry FFilter with type Array in ShadingType4 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType4 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33400"/>
			<description>Entry FFilter in ShadingType4 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ShadingType4 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="9" testNumber="33401"/>
			<description>Entry FFilter with type Array in ShadingType4 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType4 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33402"/>
			<description>Entry FFilter with type Name in ShadingType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType4 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33403"/>
			<description>Entry Filter with type Array in ShadingType4 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ShadingType4 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33404"/>
			<description>Entry Filter in ShadingType4 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ShadingType4 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="9" testNumber="33405"/>
			<description>Entry Filter with type Array in ShadingType4 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType4 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33406"/>
			<description>Entry Filter with type Name in ShadingType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType4 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33407"/>
			<description>Entry Function with type Array in ShadingType4 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType4 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33408"/>
			<description>Entry Function with type Stream in ShadingType4 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType4 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33409"/>
			<description>Entry Function with type Dictionary in ShadingType4 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType4 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33410"/>
			<description>Entry Function in ShadingType4 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType4 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="10" testNumber="33411"/>
			<description>Entry Function with type Stream in ShadingType4 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType4 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33412"/>
			<description>Entry Length in ShadingType4 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33413"/>
			<description>Entry Length in ShadingType4 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33414"/>
			<description>Entry ShadingType in ShadingType4 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33415"/>
			<description>Entry ShadingType in ShadingType4 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33416"/>
			<description>Entry ShadingType with type Integer in ShadingType4 shall have value 4</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 4</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType4 has incorrect value %2 instead of 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="1" testNumber="33665"/>
			<description>ShadingType5 shall not contain entries except AntiAlias, BBox, Background, BitsPerComponent, BitsPerCoordinate, ColorSpace, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Function, Length, ShadingType, VerticesPerRow</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'VerticesPerRow').length == 0</test>
			<error>
				<message>ShadingType5 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'VerticesPerRow').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33666"/>
			<description>Entry AntiAlias in ShadingType5 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType5 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33667"/>
			<description>Entry BBox in ShadingType5 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType5 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33668"/>
			<description>Entry Background with type Array in ShadingType5 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType5 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33669"/>
			<description>Entry Background in ShadingType5 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType5 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33670"/>
			<description>Entry BitsPerComponent in ShadingType5 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33671"/>
			<description>Entry BitsPerComponent in ShadingType5 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33672"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType5 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType5 has incorrect value %2 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33673"/>
			<description>Entry BitsPerCoordinate in ShadingType5 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33674"/>
			<description>Entry BitsPerCoordinate in ShadingType5 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33675"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType5 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType5 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33676"/>
			<description>Entry ColorSpace with type Array in ShadingType5 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType5 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33677"/>
			<description>Entry ColorSpace in ShadingType5 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType5 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33678"/>
			<description>Entry ColorSpace in ShadingType5 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33679"/>
			<description>Entry ColorSpace with type Name in ShadingType5 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType5 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33680"/>
			<description>Entry Decode with type Array in ShadingType5 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in ShadingType5 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33681"/>
			<description>Entry Decode in ShadingType5 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType5 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33682"/>
			<description>Entry DecodeParms with type Array in ShadingType5 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType5 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33683"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType5 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType5 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33684"/>
			<description>Entry DecodeParms in ShadingType5 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType5 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="9" testNumber="33685"/>
			<description>Entry DecodeParms with type Array in ShadingType5 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType5 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33686"/>
			<description>Entry F with type Dictionary in ShadingType5 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ShadingType5 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33687"/>
			<description>Entry F in ShadingType5 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ShadingType5 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33688"/>
			<description>Entry FDecodeParms with type Array in ShadingType5 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType5 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33689"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType5 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType5 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33690"/>
			<description>Entry FDecodeParms in ShadingType5 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType5 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="9" testNumber="33691"/>
			<description>Entry FDecodeParms with type Array in ShadingType5 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType5 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33692"/>
			<description>Entry FFilter with type Array in ShadingType5 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType5 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33693"/>
			<description>Entry FFilter in ShadingType5 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ShadingType5 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="9" testNumber="33694"/>
			<description>Entry FFilter with type Array in ShadingType5 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType5 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33695"/>
			<description>Entry FFilter with type Name in ShadingType5 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType5 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33696"/>
			<description>Entry Filter with type Array in ShadingType5 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ShadingType5 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33697"/>
			<description>Entry Filter in ShadingType5 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ShadingType5 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="9" testNumber="33698"/>
			<description>Entry Filter with type Array in ShadingType5 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType5 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33699"/>
			<description>Entry Filter with type Name in ShadingType5 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType5 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33700"/>
			<description>Entry Function with type Array in ShadingType5 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType5 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33701"/>
			<description>Entry Function with type Stream in ShadingType5 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType5 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33702"/>
			<description>Entry Function with type Dictionary in ShadingType5 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType5 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33703"/>
			<description>Entry Function in ShadingType5 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType5 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="10" testNumber="33704"/>
			<description>Entry Function with type Stream in ShadingType5 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType5 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33705"/>
			<description>Entry Length in ShadingType5 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33706"/>
			<description>Entry Length in ShadingType5 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33707"/>
			<description>Entry ShadingType in ShadingType5 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33708"/>
			<description>Entry ShadingType in ShadingType5 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33709"/>
			<description>Entry ShadingType with type Integer in ShadingType5 shall have value 5</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 5</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType5 has incorrect value %2 instead of 5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33710"/>
			<description>Entry VerticesPerRow in ShadingType5 shall have type Integer</description>
			<test>containsVerticesPerRow == false || VerticesPerRowHasTypeInteger == true</test>
			<error>
				<message>Entry VerticesPerRow in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33711"/>
			<description>Entry VerticesPerRow in ShadingType5 is required</description>
			<test>containsVerticesPerRow == true</test>
			<error>
				<message>Entry VerticesPerRow in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_3" clause="14" testNumber="33712"/>
			<description>Entry VerticesPerRow with type Integer in ShadingType5 shall satisfy possible value predicate: fn:Eval(@VerticesPerRow &gt;= 2)</description>
			<test>VerticesPerRowHasTypeInteger != true || VerticesPerRowIntegerValue &gt;= 2</test>
			<error>
				<message>Entry VerticesPerRow with type Integer in ShadingType5 does not satisfy possible value predicate: fn:Eval(@VerticesPerRow &gt;= 2)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="1" testNumber="33961"/>
			<description>ShadingType6 shall not contain entries except AntiAlias, BBox, Background, BitsPerComponent, BitsPerCoordinate, BitsPerFlag, ColorSpace, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Function, Length, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType').length == 0</test>
			<error>
				<message>ShadingType6 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33962"/>
			<description>Entry AntiAlias in ShadingType6 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType6 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33963"/>
			<description>Entry BBox in ShadingType6 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType6 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33964"/>
			<description>Entry Background with type Array in ShadingType6 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType6 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33965"/>
			<description>Entry Background in ShadingType6 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType6 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33966"/>
			<description>Entry BitsPerComponent in ShadingType6 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33967"/>
			<description>Entry BitsPerComponent in ShadingType6 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33968"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType6 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType6 has incorrect value %2 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33969"/>
			<description>Entry BitsPerCoordinate in ShadingType6 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33970"/>
			<description>Entry BitsPerCoordinate in ShadingType6 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33971"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType6 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType6 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33972"/>
			<description>Entry BitsPerFlag in ShadingType6 shall have type Integer</description>
			<test>containsBitsPerFlag == false || BitsPerFlagHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33973"/>
			<description>Entry BitsPerFlag in ShadingType6 is required</description>
			<test>containsBitsPerFlag == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33974"/>
			<description>Entry ColorSpace with type Array in ShadingType6 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType6 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33975"/>
			<description>Entry ColorSpace in ShadingType6 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType6 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="7" testNumber="33976"/>
			<description>Entry ColorSpace in ShadingType6 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33977"/>
			<description>Entry ColorSpace with type Name in ShadingType6 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType6 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33978"/>
			<description>Entry Decode with type Array in ShadingType6 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in ShadingType6 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33979"/>
			<description>Entry Decode in ShadingType6 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType6 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33980"/>
			<description>Entry DecodeParms with type Array in ShadingType6 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType6 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33981"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType6 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType6 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33982"/>
			<description>Entry DecodeParms in ShadingType6 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType6 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="9" testNumber="33983"/>
			<description>Entry DecodeParms with type Array in ShadingType6 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType6 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33984"/>
			<description>Entry F with type Dictionary in ShadingType6 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ShadingType6 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33985"/>
			<description>Entry F in ShadingType6 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ShadingType6 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33986"/>
			<description>Entry FDecodeParms with type Array in ShadingType6 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType6 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33987"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType6 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType6 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33988"/>
			<description>Entry FDecodeParms in ShadingType6 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType6 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="9" testNumber="33989"/>
			<description>Entry FDecodeParms with type Array in ShadingType6 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType6 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33990"/>
			<description>Entry FFilter with type Array in ShadingType6 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType6 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33991"/>
			<description>Entry FFilter in ShadingType6 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ShadingType6 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="9" testNumber="33992"/>
			<description>Entry FFilter with type Array in ShadingType6 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType6 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33993"/>
			<description>Entry FFilter with type Name in ShadingType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType6 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33994"/>
			<description>Entry Filter with type Array in ShadingType6 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ShadingType6 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="33995"/>
			<description>Entry Filter in ShadingType6 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ShadingType6 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="9" testNumber="33996"/>
			<description>Entry Filter with type Array in ShadingType6 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType6 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="6" testNumber="33997"/>
			<description>Entry Filter with type Name in ShadingType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType6 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33998"/>
			<description>Entry Function with type Array in ShadingType6 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType6 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="33999"/>
			<description>Entry Function with type Stream in ShadingType6 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType6 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34000"/>
			<description>Entry Function with type Dictionary in ShadingType6 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType6 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34001"/>
			<description>Entry Function in ShadingType6 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType6 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="10" testNumber="34002"/>
			<description>Entry Function with type Stream in ShadingType6 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType6 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34003"/>
			<description>Entry Length in ShadingType6 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="7" testNumber="34004"/>
			<description>Entry Length in ShadingType6 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34005"/>
			<description>Entry ShadingType in ShadingType6 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="7" testNumber="34006"/>
			<description>Entry ShadingType in ShadingType6 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_3" clause="6" testNumber="34007"/>
			<description>Entry ShadingType with type Integer in ShadingType6 shall have value 6</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 6</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType6 has incorrect value %2 instead of 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="1" testNumber="34251"/>
			<description>ShadingType7 shall not contain entries except AntiAlias, BBox, Background, BitsPerComponent, BitsPerCoordinate, BitsPerFlag, ColorSpace, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Function, Length, ShadingType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType').length == 0</test>
			<error>
				<message>ShadingType7 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AntiAlias' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ShadingType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34252"/>
			<description>Entry AntiAlias in ShadingType7 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType7 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34253"/>
			<description>Entry BBox in ShadingType7 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType7 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34254"/>
			<description>Entry Background with type Array in ShadingType7 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType7 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34255"/>
			<description>Entry Background in ShadingType7 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType7 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34256"/>
			<description>Entry BitsPerComponent in ShadingType7 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="7" testNumber="34257"/>
			<description>Entry BitsPerComponent in ShadingType7 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="6" testNumber="34258"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType7 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType7 has incorrect value %2 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34259"/>
			<description>Entry BitsPerCoordinate in ShadingType7 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="7" testNumber="34260"/>
			<description>Entry BitsPerCoordinate in ShadingType7 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="6" testNumber="34261"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType7 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType7 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34262"/>
			<description>Entry BitsPerFlag in ShadingType7 shall have type Integer</description>
			<test>containsBitsPerFlag == false || BitsPerFlagHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="7" testNumber="34263"/>
			<description>Entry BitsPerFlag in ShadingType7 is required</description>
			<test>containsBitsPerFlag == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34264"/>
			<description>Entry ColorSpace with type Array in ShadingType7 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType7 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34265"/>
			<description>Entry ColorSpace in ShadingType7 shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType7 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="7" testNumber="34266"/>
			<description>Entry ColorSpace in ShadingType7 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="6" testNumber="34267"/>
			<description>Entry ColorSpace with type Name in ShadingType7 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType7 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34268"/>
			<description>Entry Decode with type Array in ShadingType7 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in ShadingType7 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34269"/>
			<description>Entry Decode in ShadingType7 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType7 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34270"/>
			<description>Entry DecodeParms with type Array in ShadingType7 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType7 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34271"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType7 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType7 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34272"/>
			<description>Entry DecodeParms in ShadingType7 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType7 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="9" testNumber="34273"/>
			<description>Entry DecodeParms with type Array in ShadingType7 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType7 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34274"/>
			<description>Entry F with type Dictionary in ShadingType7 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ShadingType7 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34275"/>
			<description>Entry F in ShadingType7 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in ShadingType7 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34276"/>
			<description>Entry FDecodeParms with type Array in ShadingType7 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType7 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34277"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType7 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType7 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34278"/>
			<description>Entry FDecodeParms in ShadingType7 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType7 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="9" testNumber="34279"/>
			<description>Entry FDecodeParms with type Array in ShadingType7 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType7 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34280"/>
			<description>Entry FFilter with type Array in ShadingType7 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType7 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34281"/>
			<description>Entry FFilter in ShadingType7 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in ShadingType7 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="9" testNumber="34282"/>
			<description>Entry FFilter with type Array in ShadingType7 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType7 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="6" testNumber="34283"/>
			<description>Entry FFilter with type Name in ShadingType7 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType7 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34284"/>
			<description>Entry Filter with type Array in ShadingType7 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ShadingType7 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34285"/>
			<description>Entry Filter in ShadingType7 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in ShadingType7 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="9" testNumber="34286"/>
			<description>Entry Filter with type Array in ShadingType7 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType7 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="6" testNumber="34287"/>
			<description>Entry Filter with type Name in ShadingType7 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType7 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34288"/>
			<description>Entry Function with type Array in ShadingType7 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType7 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34289"/>
			<description>Entry Function with type Stream in ShadingType7 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType7 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34290"/>
			<description>Entry Function with type Dictionary in ShadingType7 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType7 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34291"/>
			<description>Entry Function in ShadingType7 shall have one of types: Array, Stream, Dictionary</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeStream == true || FunctionHasTypeDictionary == true</test>
			<error>
				<message>Entry Function in ShadingType7 is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="10" testNumber="34292"/>
			<description>Entry Function with type Stream in ShadingType7 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType7 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34293"/>
			<description>Entry Length in ShadingType7 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="7" testNumber="34294"/>
			<description>Entry Length in ShadingType7 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34295"/>
			<description>Entry ShadingType in ShadingType7 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="7" testNumber="34296"/>
			<description>Entry ShadingType in ShadingType7 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_3" clause="6" testNumber="34297"/>
			<description>Entry ShadingType with type Integer in ShadingType7 shall have value 7</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 7</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType7 has incorrect value %2 instead of 7</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="1" testNumber="34663"/>
			<description>Signature shall not contain entries except ByteRange, Cert, Changes, ContactInfo, Contents, Filter, Location, M, Name, R, Reason, SubFilter, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ByteRange' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>Signature contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ByteRange' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34664"/>
			<description>Entry ByteRange with type Array in Signature shall be object ArrayOfIntegersGeneral</description>
			<test>ByteRangeHasTypeArray != true || ByteRange_size == 1</test>
			<error>
				<message>Entry ByteRange with type Array in Signature is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34665"/>
			<description>Entry ByteRange in Signature shall have type Array</description>
			<test>containsByteRange == false || ByteRangeHasTypeArray == true</test>
			<error>
				<message>Entry ByteRange in Signature is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34666"/>
			<description>Entry Cert with type Array in Signature shall be object ArrayOfStringsByte</description>
			<test>CertHasTypeArray != true || Cert_size == 1</test>
			<error>
				<message>Entry Cert with type Array in Signature is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34667"/>
			<description>Entry Cert in Signature shall have one of types: Array, StringByte</description>
			<test>containsCert == false || CertHasTypeArray == true || CertHasTypeStringByte == true</test>
			<error>
				<message>Entry Cert in Signature is not one of types: Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="11" testNumber="34668"/>
			<description>Entry Cert in Signature is required, when fn:IsRequired(@SubFilter == adbe.x509.rsa_sha1)</description>
			<test>(containsCert == true || (SubFilterNameValue == "adbe.x509.rsa_sha1") == false)</test>
			<error>
				<message>Entry Cert in Signature is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="17" testNumber="34669"/>
			<description>Entry Changes with type Array in Signature shall be object ArrayOf_3Integers</description>
			<test>ChangesHasTypeArray != true || Changes_size == 1</test>
			<error>
				<message>Entry Changes with type Array in Signature is not object ArrayOf_3Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34670"/>
			<description>Entry Changes in Signature shall have type Array</description>
			<test>containsChanges == false || ChangesHasTypeArray == true</test>
			<error>
				<message>Entry Changes in Signature is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34671"/>
			<description>Entry ContactInfo in Signature shall have type StringText</description>
			<test>containsContactInfo == false || ContactInfoHasTypeStringText == true</test>
			<error>
				<message>Entry ContactInfo in Signature is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34672"/>
			<description>Entry Contents in Signature shall have type StringByte</description>
			<test>containsContents == false || ContentsHasTypeStringByte == true</test>
			<error>
				<message>Entry Contents in Signature is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="7" testNumber="34673"/>
			<description>Entry Contents in Signature is required</description>
			<test>containsContents == true</test>
			<error>
				<message>Entry Contents in Signature is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34674"/>
			<description>Entry Filter in Signature shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in Signature is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="7" testNumber="34675"/>
			<description>Entry Filter in Signature is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in Signature is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="6" testNumber="34676"/>
			<description>Entry Filter with type Name in Signature shall have one of values: VeriSign.PPKVS, CICI.SignIt, Entrust.PPKEF, Adobe.PPKLite</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Adobe.PPKLite" || FilterNameValue == "Entrust.PPKEF" || FilterNameValue == "CICI.SignIt" || FilterNameValue == "VeriSign.PPKVS"</test>
			<error>
				<message>Entry Filter with type Name in Signature has incorrect value %2 instead of VeriSign.PPKVS, CICI.SignIt, Entrust.PPKEF, Adobe.PPKLite</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34677"/>
			<description>Entry Location in Signature shall have type StringText</description>
			<test>containsLocation == false || LocationHasTypeStringText == true</test>
			<error>
				<message>Entry Location in Signature is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34678"/>
			<description>Entry M in Signature shall have type Date</description>
			<test>containsM == false || MHasTypeDate == true</test>
			<error>
				<message>Entry M in Signature is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34679"/>
			<description>Entry Name in Signature shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in Signature is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34680"/>
			<description>Entry R in Signature shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in Signature is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34681"/>
			<description>Entry Reason in Signature shall have type StringText</description>
			<test>containsReason == false || ReasonHasTypeStringText == true</test>
			<error>
				<message>Entry Reason in Signature is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34682"/>
			<description>Entry SubFilter in Signature shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in Signature is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="6" testNumber="34683"/>
			<description>Entry SubFilter with type Name in Signature shall have one of values: adbe.pkcs7.detached, adbe.x509.rsa_sha1</description>
			<test>SubFilterHasTypeName != true || SubFilterNameValue == "adbe.pkcs7.detached" || SubFilterNameValue == "adbe.x509.rsa_sha1"</test>
			<error>
				<message>Entry SubFilter with type Name in Signature has incorrect value %2 instead of adbe.pkcs7.detached, adbe.x509.rsa_sha1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="8" testNumber="34684"/>
			<description>Entry Type in Signature shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Signature is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_3" clause="6" testNumber="34685"/>
			<description>Entry Type with type Name in Signature shall have value Sig</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Sig"</test>
			<error>
				<message>Entry Type with type Name in Signature has incorrect value %2 instead of Sig</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="1" testNumber="35617"/>
			<description>SoundObject shall not contain entries except B, C, CO, CP, DecodeParms, E, F, FDecodeParms, FFilter, Filter, Length, R, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'CP' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'E' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>SoundObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'C' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'CP' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'E' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35618"/>
			<description>Entry B in SoundObject shall have type Integer</description>
			<test>containsB == false || BHasTypeInteger == true</test>
			<error>
				<message>Entry B in SoundObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="14" testNumber="35619"/>
			<description>Entry B with type Integer in SoundObject shall satisfy possible value predicate: fn:Eval(@B &gt; 0)</description>
			<test>BHasTypeInteger != true || BIntegerValue &gt; 0</test>
			<error>
				<message>Entry B with type Integer in SoundObject does not satisfy possible value predicate: fn:Eval(@B &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35620"/>
			<description>Entry C in SoundObject shall have type Integer</description>
			<test>containsC == false || CHasTypeInteger == true</test>
			<error>
				<message>Entry C in SoundObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="14" testNumber="35621"/>
			<description>Entry C with type Integer in SoundObject shall satisfy possible value predicate: fn:Eval(@C &gt; 0)</description>
			<test>CHasTypeInteger != true || CIntegerValue &gt; 0</test>
			<error>
				<message>Entry C with type Integer in SoundObject does not satisfy possible value predicate: fn:Eval(@C &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35622"/>
			<description>Entry CO in SoundObject shall have type Name</description>
			<test>containsCO == false || COHasTypeName == true</test>
			<error>
				<message>Entry CO in SoundObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35623"/>
			<description>Entry CP with type Array in SoundObject shall be object _UniversalArray</description>
			<test>CPHasTypeArray != true || CP_size == 1</test>
			<error>
				<message>Entry CP with type Array in SoundObject is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35624"/>
			<description>Entry CP with type Stream in SoundObject shall be object Stream</description>
			<test>CPHasTypeStream != true || CP_size == 1</test>
			<error>
				<message>Entry CP with type Stream in SoundObject is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35625"/>
			<description>Entry CP with type Dictionary in SoundObject shall be object _UniversalDictionary</description>
			<test>CPHasTypeDictionary != true || CP_size == 1</test>
			<error>
				<message>Entry CP with type Dictionary in SoundObject is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35626"/>
			<description>Entry CP in SoundObject shall have one of types: Array, Stream, Dictionary</description>
			<test>containsCP == false || CPHasTypeArray == true || CPHasTypeStream == true || CPHasTypeDictionary == true</test>
			<error>
				<message>Entry CP in SoundObject is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="10" testNumber="35627"/>
			<description>Entry CP with type Stream in SoundObject shall be indirect</description>
			<test>CPHasTypeStream != true || isCPIndirect == true</test>
			<error>
				<message>Entry CP with type Stream in SoundObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35628"/>
			<description>Entry DecodeParms with type Array in SoundObject shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in SoundObject is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35629"/>
			<description>Entry DecodeParms with type Dictionary in SoundObject shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in SoundObject is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35630"/>
			<description>Entry DecodeParms in SoundObject shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in SoundObject is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="9" testNumber="35631"/>
			<description>Entry DecodeParms with type Array in SoundObject shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in SoundObject does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35632"/>
			<description>Entry E in SoundObject shall have type Name</description>
			<test>containsE == false || EHasTypeName == true</test>
			<error>
				<message>Entry E in SoundObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="6" testNumber="35633"/>
			<description>Entry E with type Name in SoundObject shall have one of values: Signed, Raw, muLaw, ALaw</description>
			<test>EHasTypeName != true || ENameValue == "Raw" || ENameValue == "Signed" || ENameValue == "muLaw" || ENameValue == "ALaw"</test>
			<error>
				<message>Entry E with type Name in SoundObject has incorrect value %2 instead of Signed, Raw, muLaw, ALaw</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ENameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35634"/>
			<description>Entry F with type Dictionary in SoundObject shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in SoundObject is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35635"/>
			<description>Entry F in SoundObject shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in SoundObject is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35636"/>
			<description>Entry FDecodeParms with type Array in SoundObject shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in SoundObject is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35637"/>
			<description>Entry FDecodeParms with type Dictionary in SoundObject shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in SoundObject is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35638"/>
			<description>Entry FDecodeParms in SoundObject shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in SoundObject is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="9" testNumber="35639"/>
			<description>Entry FDecodeParms with type Array in SoundObject shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in SoundObject does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35640"/>
			<description>Entry FFilter with type Array in SoundObject shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in SoundObject is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35641"/>
			<description>Entry FFilter in SoundObject shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in SoundObject is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="9" testNumber="35642"/>
			<description>Entry FFilter with type Array in SoundObject shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in SoundObject does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="6" testNumber="35643"/>
			<description>Entry FFilter with type Name in SoundObject shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in SoundObject has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35644"/>
			<description>Entry Filter with type Array in SoundObject shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in SoundObject is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35645"/>
			<description>Entry Filter in SoundObject shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in SoundObject is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="9" testNumber="35646"/>
			<description>Entry Filter with type Array in SoundObject shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in SoundObject does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="6" testNumber="35647"/>
			<description>Entry Filter with type Name in SoundObject shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in SoundObject has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35648"/>
			<description>Entry Length in SoundObject shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in SoundObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="7" testNumber="35649"/>
			<description>Entry Length in SoundObject is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in SoundObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35650"/>
			<description>Entry R in SoundObject shall have type Number</description>
			<test>containsR == false || RHasTypeNumber == true</test>
			<error>
				<message>Entry R in SoundObject is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="7" testNumber="35651"/>
			<description>Entry R in SoundObject is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in SoundObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="14" testNumber="35652"/>
			<description>Entry R with type Number in SoundObject shall satisfy possible value predicate: fn:Eval(@R &gt; 0)</description>
			<test>RHasTypeNumber != true || RNumberValue &gt; 0</test>
			<error>
				<message>Entry R with type Number in SoundObject does not satisfy possible value predicate: fn:Eval(@R &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35653"/>
			<description>Entry Type in SoundObject shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SoundObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_3" clause="6" testNumber="35654"/>
			<description>Entry Type with type Name in SoundObject shall have value Sound</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Sound"</test>
			<error>
				<message>Entry Type with type Name in SoundObject has incorrect value %2 instead of Sound</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_3" clause="1" testNumber="35853"/>
			<description>SourceInformation shall not contain entries except AU, C, E, S, TS</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AU' &amp;&amp; elem != 'C' &amp;&amp; elem != 'E' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TS').length == 0</test>
			<error>
				<message>SourceInformation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AU' &amp;&amp; elem != 'C' &amp;&amp; elem != 'E' &amp;&amp; elem != 'S' &amp;&amp; elem != 'TS').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35854"/>
			<description>Entry AU with type Dictionary in SourceInformation shall be object URLAlias</description>
			<test>AUHasTypeDictionary != true || AU_size == 1</test>
			<error>
				<message>Entry AU with type Dictionary in SourceInformation is not object URLAlias</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35855"/>
			<description>Entry AU in SourceInformation shall have one of types: StringAscii, Dictionary</description>
			<test>containsAU == false || AUHasTypeStringAscii == true || AUHasTypeDictionary == true</test>
			<error>
				<message>Entry AU in SourceInformation is not one of types: StringAscii, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_3" clause="7" testNumber="35856"/>
			<description>Entry AU in SourceInformation is required</description>
			<test>containsAU == true</test>
			<error>
				<message>Entry AU in SourceInformation is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35857"/>
			<description>Entry C with type Dictionary in SourceInformation shall be object WebCaptureCommand</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in SourceInformation is not object WebCaptureCommand</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35858"/>
			<description>Entry C in SourceInformation shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in SourceInformation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_3" clause="10" testNumber="35859"/>
			<description>Entry C with type Dictionary in SourceInformation shall be indirect</description>
			<test>CHasTypeDictionary != true || isCIndirect == true</test>
			<error>
				<message>Entry C with type Dictionary in SourceInformation is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_3" clause="9" testNumber="35860"/>
			<description>Entry C with type Dictionary in SourceInformation shall satisfy special case: fn:Eval(parent::@S== SPS)</description>
			<test>CHasTypeDictionary != true || (parentSNameValue == "SPS")</test>
			<error>
				<message>Entry C with type Dictionary in SourceInformation does not satisfy special case: fn:Eval(parent::@S== SPS)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35861"/>
			<description>Entry E in SourceInformation shall have type Date</description>
			<test>containsE == false || EHasTypeDate == true</test>
			<error>
				<message>Entry E in SourceInformation is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35862"/>
			<description>Entry S in SourceInformation shall have type Integer</description>
			<test>containsS == false || SHasTypeInteger == true</test>
			<error>
				<message>Entry S in SourceInformation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_3" clause="6" testNumber="35863"/>
			<description>Entry S with type Integer in SourceInformation shall have one of values: 0, 1, 2</description>
			<test>SHasTypeInteger != true || SIntegerValue == 0 || SIntegerValue == 1 || SIntegerValue == 2</test>
			<error>
				<message>Entry S with type Integer in SourceInformation has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_3" clause="9" testNumber="35864"/>
			<description>Entry S with type Integer in SourceInformation shall satisfy special case: fn:Eval(parent::@S== SPS)</description>
			<test>SHasTypeInteger != true || (parentSNameValue == "SPS")</test>
			<error>
				<message>Entry S with type Integer in SourceInformation does not satisfy special case: fn:Eval(parent::@S== SPS)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35865"/>
			<description>Entry TS in SourceInformation shall have type Date</description>
			<test>containsTS == false || TSHasTypeDate == true</test>
			<error>
				<message>Entry TS in SourceInformation is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35974"/>
			<description>Entry DecodeParms with type Array in Stream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in Stream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35975"/>
			<description>Entry DecodeParms with type Dictionary in Stream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in Stream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35976"/>
			<description>Entry DecodeParms in Stream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in Stream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="35977"/>
			<description>Entry DecodeParms with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35978"/>
			<description>Entry F with type Dictionary in Stream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Stream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35979"/>
			<description>Entry F in Stream shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in Stream is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35980"/>
			<description>Entry FDecodeParms with type Array in Stream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in Stream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35981"/>
			<description>Entry FDecodeParms with type Dictionary in Stream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in Stream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35982"/>
			<description>Entry FDecodeParms in Stream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in Stream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="35983"/>
			<description>Entry FDecodeParms with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35984"/>
			<description>Entry FFilter with type Array in Stream shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in Stream is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35985"/>
			<description>Entry FFilter in Stream shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in Stream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="35986"/>
			<description>Entry FFilter with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="35987"/>
			<description>Entry FFilter with type Name in Stream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry FFilter with type Name in Stream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="17" testNumber="35988"/>
			<description>Entry Filter with type Array in Stream shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in Stream is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35989"/>
			<description>Entry Filter in Stream shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in Stream is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="9" testNumber="35990"/>
			<description>Entry Filter with type Array in Stream shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in Stream does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="6" testNumber="35991"/>
			<description>Entry Filter with type Name in Stream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry Filter with type Name in Stream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="8" testNumber="35992"/>
			<description>Entry Length in Stream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in Stream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_3" clause="7" testNumber="35993"/>
			<description>Entry Length in Stream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in Stream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="1" testNumber="36102"/>
			<description>StructElem shall not contain entries except A, Alt, C, ID, K, P, Pg, R, S, T, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'Alt' &amp;&amp; elem != 'C' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'K' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>StructElem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'Alt' &amp;&amp; elem != 'C' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'K' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36103"/>
			<description>Entry A with type Array in StructElem shall be object ArrayOfAttributeRevisions</description>
			<test>AHasTypeArray != true || A_size == 1</test>
			<error>
				<message>Entry A with type Array in StructElem is not object ArrayOfAttributeRevisions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36104"/>
			<description>Entry A with type Stream in StructElem shall be object Stream</description>
			<test>AHasTypeStream != true || A_size == 1</test>
			<error>
				<message>Entry A with type Stream in StructElem is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36105"/>
			<description>Entry A with type Dictionary in StructElem shall be object StructureAttributesDict</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in StructElem is not object StructureAttributesDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36106"/>
			<description>Entry A in StructElem shall have one of types: Array, Stream, Dictionary</description>
			<test>containsA == false || AHasTypeArray == true || AHasTypeStream == true || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in StructElem is not one of types: Array, Stream, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="14" testNumber="36107"/>
			<description>Entry A with type Array in StructElem shall satisfy possible value predicate: fn:Eval(fn:ArrayLength(A) &gt;= 1)</description>
			<test>AHasTypeArray != true || AArraySize &gt;= 1</test>
			<error>
				<message>Entry A with type Array in StructElem does not satisfy possible value predicate: fn:Eval(fn:ArrayLength(A) &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="10" testNumber="36108"/>
			<description>Entry A with type Stream in StructElem shall be indirect</description>
			<test>AHasTypeStream != true || isAIndirect == true</test>
			<error>
				<message>Entry A with type Stream in StructElem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36109"/>
			<description>Entry Alt in StructElem shall have type StringText</description>
			<test>containsAlt == false || AltHasTypeStringText == true</test>
			<error>
				<message>Entry Alt in StructElem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36110"/>
			<description>Entry C with type Array in StructElem shall be object ArrayOfClassNamesRevisions</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in StructElem is not object ArrayOfClassNamesRevisions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36111"/>
			<description>Entry C in StructElem shall have one of types: Array, Name</description>
			<test>containsC == false || CHasTypeArray == true || CHasTypeName == true</test>
			<error>
				<message>Entry C in StructElem is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36112"/>
			<description>Entry ID in StructElem shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in StructElem is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36113"/>
			<description>Entry K with type Array in StructElem shall be object ArrayOfStructElemKids</description>
			<test>KHasTypeArray != true || K_size == 1</test>
			<error>
				<message>Entry K with type Array in StructElem is not object ArrayOfStructElemKids</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36114"/>
			<description>Entry K with type Dictionary in StructElem shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>KHasTypeDictionary != true || K_size == 1</test>
			<error>
				<message>Entry K with type Dictionary in StructElem is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36115"/>
			<description>Entry K in StructElem shall have one of types: Array, Integer, Dictionary</description>
			<test>containsK == false || KHasTypeArray == true || KHasTypeInteger == true || KHasTypeDictionary == true</test>
			<error>
				<message>Entry K in StructElem is not one of types: Array, Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36116"/>
			<description>Entry P with type Dictionary in StructElem shall be one of objects StructElem, StructTreeRoot</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in StructElem is not one of objects StructElem, StructTreeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36117"/>
			<description>Entry P in StructElem shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in StructElem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="7" testNumber="36118"/>
			<description>Entry P in StructElem is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in StructElem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="10" testNumber="36119"/>
			<description>Entry P with type Dictionary in StructElem shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in StructElem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36120"/>
			<description>Entry Pg with type Dictionary in StructElem shall be object PageObject</description>
			<test>PgHasTypeDictionary != true || Pg_size == 1</test>
			<error>
				<message>Entry Pg with type Dictionary in StructElem is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36121"/>
			<description>Entry Pg in StructElem shall have type Dictionary</description>
			<test>containsPg == false || PgHasTypeDictionary == true</test>
			<error>
				<message>Entry Pg in StructElem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="10" testNumber="36122"/>
			<description>Entry Pg with type Dictionary in StructElem shall be indirect</description>
			<test>PgHasTypeDictionary != true || isPgIndirect == true</test>
			<error>
				<message>Entry Pg with type Dictionary in StructElem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36123"/>
			<description>Entry R in StructElem shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in StructElem is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="14" testNumber="36124"/>
			<description>Entry R with type Integer in StructElem shall satisfy possible value predicate: fn:Eval(@R &gt;= 0)</description>
			<test>RHasTypeInteger != true || RIntegerValue &gt;= 0</test>
			<error>
				<message>Entry R with type Integer in StructElem does not satisfy possible value predicate: fn:Eval(@R &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36125"/>
			<description>Entry S in StructElem shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in StructElem is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="7" testNumber="36126"/>
			<description>Entry S in StructElem is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in StructElem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36127"/>
			<description>Entry T in StructElem shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in StructElem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36128"/>
			<description>Entry Type in StructElem shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in StructElem is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_3" clause="6" testNumber="36129"/>
			<description>Entry Type with type Name in StructElem shall have value StructElem</description>
			<test>TypeHasTypeName != true || TypeNameValue == "StructElem"</test>
			<error>
				<message>Entry Type with type Name in StructElem has incorrect value %2 instead of StructElem</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="1" testNumber="36294"/>
			<description>StructTreeRoot shall not contain entries except ClassMap, IDTree, K, ParentTree, ParentTreeNextKey, RoleMap, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ClassMap' &amp;&amp; elem != 'IDTree' &amp;&amp; elem != 'K' &amp;&amp; elem != 'ParentTree' &amp;&amp; elem != 'ParentTreeNextKey' &amp;&amp; elem != 'RoleMap' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>StructTreeRoot contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ClassMap' &amp;&amp; elem != 'IDTree' &amp;&amp; elem != 'K' &amp;&amp; elem != 'ParentTree' &amp;&amp; elem != 'ParentTreeNextKey' &amp;&amp; elem != 'RoleMap' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36295"/>
			<description>Entry ClassMap with type Dictionary in StructTreeRoot shall be object ClassMap</description>
			<test>ClassMapHasTypeDictionary != true || ClassMap_size == 1</test>
			<error>
				<message>Entry ClassMap with type Dictionary in StructTreeRoot is not object ClassMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36296"/>
			<description>Entry ClassMap in StructTreeRoot shall have type Dictionary</description>
			<test>containsClassMap == false || ClassMapHasTypeDictionary == true</test>
			<error>
				<message>Entry ClassMap in StructTreeRoot is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36297"/>
			<description>Entry IDTree with type NameTree in StructTreeRoot shall be object StructTreeRootNameTreeIDTree</description>
			<test>IDTreeHasTypeNameTree != true || IDTree_size == 1</test>
			<error>
				<message>Entry IDTree with type NameTree in StructTreeRoot is not object StructTreeRootNameTreeIDTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36298"/>
			<description>Entry IDTree in StructTreeRoot shall have type NameTree</description>
			<test>containsIDTree == false || IDTreeHasTypeNameTree == true</test>
			<error>
				<message>Entry IDTree in StructTreeRoot is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36299"/>
			<description>Entry K with type Array in StructTreeRoot shall be object ArrayOfStructElem</description>
			<test>KHasTypeArray != true || K_size == 1</test>
			<error>
				<message>Entry K with type Array in StructTreeRoot is not object ArrayOfStructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36300"/>
			<description>Entry K with type Dictionary in StructTreeRoot shall be object StructElem</description>
			<test>KHasTypeDictionary != true || K_size == 1</test>
			<error>
				<message>Entry K with type Dictionary in StructTreeRoot is not object StructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36301"/>
			<description>Entry K in StructTreeRoot shall have one of types: Array, Dictionary</description>
			<test>containsK == false || KHasTypeArray == true || KHasTypeDictionary == true</test>
			<error>
				<message>Entry K in StructTreeRoot is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36302"/>
			<description>Entry ParentTree with type NumberTree in StructTreeRoot shall be object StructTreeRootNumberTreeParentTree</description>
			<test>ParentTreeHasTypeNumberTree != true || ParentTree_size == 1</test>
			<error>
				<message>Entry ParentTree with type NumberTree in StructTreeRoot is not object StructTreeRootNumberTreeParentTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36303"/>
			<description>Entry ParentTree in StructTreeRoot shall have type NumberTree</description>
			<test>containsParentTree == false || ParentTreeHasTypeNumberTree == true</test>
			<error>
				<message>Entry ParentTree in StructTreeRoot is not of type NumberTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36304"/>
			<description>Entry ParentTreeNextKey in StructTreeRoot shall have type Integer</description>
			<test>containsParentTreeNextKey == false || ParentTreeNextKeyHasTypeInteger == true</test>
			<error>
				<message>Entry ParentTreeNextKey in StructTreeRoot is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36305"/>
			<description>Entry RoleMap with type Dictionary in StructTreeRoot shall be object RoleMap</description>
			<test>RoleMapHasTypeDictionary != true || RoleMap_size == 1</test>
			<error>
				<message>Entry RoleMap with type Dictionary in StructTreeRoot is not object RoleMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36306"/>
			<description>Entry RoleMap in StructTreeRoot shall have type Dictionary</description>
			<test>containsRoleMap == false || RoleMapHasTypeDictionary == true</test>
			<error>
				<message>Entry RoleMap in StructTreeRoot is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36307"/>
			<description>Entry Type in StructTreeRoot shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in StructTreeRoot is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="7" testNumber="36308"/>
			<description>Entry Type in StructTreeRoot is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in StructTreeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_3" clause="6" testNumber="36309"/>
			<description>Entry Type with type Name in StructTreeRoot shall have value StructTreeRoot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "StructTreeRoot"</test>
			<error>
				<message>Entry Type with type Name in StructTreeRoot has incorrect value %2 instead of StructTreeRoot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNameTreeIDTree">
			<id specification="ISO_32000_1_3" clause="18" testNumber="36401"/>
			<description>Entry * in StructTreeRootNameTreeIDTree shall be object StructTreeRootNameTreeIDTreeEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in StructTreeRootNameTreeIDTree is not object StructTreeRootNameTreeIDTreeEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNameTreeIDTreeEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36407"/>
			<description>Entry with type Dictionary in StructTreeRootNameTreeIDTree shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in StructTreeRootNameTreeIDTree is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNumberTreeParentTree">
			<id specification="ISO_32000_1_3" clause="18" testNumber="36413"/>
			<description>Entry * in StructTreeRootNumberTreeParentTree shall be object StructTreeRootNumberTreeParentTreeEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in StructTreeRootNumberTreeParentTree is not object StructTreeRootNumberTreeParentTreeEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNumberTreeParentTreeEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36419"/>
			<description>Entry with type Array in StructTreeRootNumberTreeParentTree shall be object ArrayOfStructElem</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in StructTreeRootNumberTreeParentTree is not object ArrayOfStructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNumberTreeParentTreeEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="36420"/>
			<description>Entry with type Dictionary in StructTreeRootNumberTreeParentTree shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in StructTreeRootNumberTreeParentTree is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_3" clause="1" testNumber="36431"/>
			<description>StructureAttributesDict shall not contain entries except O</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'O').length == 0</test>
			<error>
				<message>StructureAttributesDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'O').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="36432"/>
			<description>Entry O in StructureAttributesDict shall have type Name</description>
			<test>containsO == false || OHasTypeName == true</test>
			<error>
				<message>Entry O in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_3" clause="7" testNumber="36433"/>
			<description>Entry O in StructureAttributesDict is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in StructureAttributesDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStyleDict">
			<id specification="ISO_32000_1_3" clause="1" testNumber="37031"/>
			<description>StyleDict shall not contain entries except Panose</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Panose').length == 0</test>
			<error>
				<message>StyleDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Panose').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStyleDict">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37032"/>
			<description>Entry Panose in StyleDict shall have type StringByte</description>
			<test>containsPanose == false || PanoseHasTypeStringByte == true</test>
			<error>
				<message>Entry Panose in StyleDict is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStyleDict">
			<id specification="ISO_32000_1_3" clause="9" testNumber="37033"/>
			<description>Entry Panose with type StringByte in StyleDict shall satisfy special case: fn:Eval(fn:StringLength(Panose) == 12)</description>
			<test>PanoseHasTypeStringByte != true || (PanoseStringSize == 12)</test>
			<error>
				<message>Entry Panose with type StringByte in StyleDict does not satisfy special case: fn:Eval(fn:StringLength(Panose) == 12)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_3" clause="1" testNumber="37111"/>
			<description>Thread shall not contain entries except F, I, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'I' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>Thread contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'I' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_3" clause="17" testNumber="37112"/>
			<description>Entry F with type Dictionary in Thread shall be object BeadFirst</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Thread is not object BeadFirst</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37113"/>
			<description>Entry F in Thread shall have type Dictionary</description>
			<test>containsF == false || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in Thread is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_3" clause="7" testNumber="37114"/>
			<description>Entry F in Thread is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in Thread is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_3" clause="10" testNumber="37115"/>
			<description>Entry F with type Dictionary in Thread shall be indirect</description>
			<test>FHasTypeDictionary != true || isFIndirect == true</test>
			<error>
				<message>Entry F with type Dictionary in Thread is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_3" clause="17" testNumber="37116"/>
			<description>Entry I with type Dictionary in Thread shall be object DocInfo</description>
			<test>IHasTypeDictionary != true || I_size == 1</test>
			<error>
				<message>Entry I with type Dictionary in Thread is not object DocInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37117"/>
			<description>Entry I in Thread shall have type Dictionary</description>
			<test>containsI == false || IHasTypeDictionary == true</test>
			<error>
				<message>Entry I in Thread is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37118"/>
			<description>Entry Type in Thread shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Thread is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37119"/>
			<description>Entry Type with type Name in Thread shall have value Thread</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Thread"</test>
			<error>
				<message>Entry Type with type Name in Thread has incorrect value %2 instead of Thread</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="1" testNumber="37222"/>
			<description>Thumbnail shall not contain entries except BitsPerComponent, ColorSpace, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Height, Length, Subtype, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').length == 0</test>
			<error>
				<message>Thumbnail contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37223"/>
			<description>Entry BitsPerComponent in Thumbnail shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="7" testNumber="37224"/>
			<description>Entry BitsPerComponent in Thumbnail is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37225"/>
			<description>Entry BitsPerComponent with type Integer in Thumbnail shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in Thumbnail has incorrect value %2 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="17" testNumber="37226"/>
			<description>Entry ColorSpace with type Array in Thumbnail shall be object IndexedColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in Thumbnail is not object IndexedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37227"/>
			<description>Entry ColorSpace in Thumbnail shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in Thumbnail is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="7" testNumber="37228"/>
			<description>Entry ColorSpace in Thumbnail is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37229"/>
			<description>Entry ColorSpace with type Name in Thumbnail shall have one of values: DeviceGray, DeviceRGB</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in Thumbnail has incorrect value %2 instead of DeviceGray, DeviceRGB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="17" testNumber="37230"/>
			<description>Entry Decode with type Array in Thumbnail shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in Thumbnail is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37231"/>
			<description>Entry Decode in Thumbnail shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in Thumbnail is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="17" testNumber="37232"/>
			<description>Entry DecodeParms with type Array in Thumbnail shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in Thumbnail is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="17" testNumber="37233"/>
			<description>Entry DecodeParms with type Dictionary in Thumbnail shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in Thumbnail is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37234"/>
			<description>Entry DecodeParms in Thumbnail shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in Thumbnail is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="9" testNumber="37235"/>
			<description>Entry DecodeParms with type Array in Thumbnail shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in Thumbnail does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="17" testNumber="37236"/>
			<description>Entry F with type Dictionary in Thumbnail shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Thumbnail is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37237"/>
			<description>Entry F in Thumbnail shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in Thumbnail is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="17" testNumber="37238"/>
			<description>Entry FDecodeParms with type Array in Thumbnail shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in Thumbnail is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="17" testNumber="37239"/>
			<description>Entry FDecodeParms with type Dictionary in Thumbnail shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in Thumbnail is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37240"/>
			<description>Entry FDecodeParms in Thumbnail shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in Thumbnail is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="9" testNumber="37241"/>
			<description>Entry FDecodeParms with type Array in Thumbnail shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in Thumbnail does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="17" testNumber="37242"/>
			<description>Entry FFilter with type Array in Thumbnail shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in Thumbnail is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37243"/>
			<description>Entry FFilter in Thumbnail shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in Thumbnail is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="9" testNumber="37244"/>
			<description>Entry FFilter with type Array in Thumbnail shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in Thumbnail does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37245"/>
			<description>Entry FFilter with type Name in Thumbnail shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry FFilter with type Name in Thumbnail has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="17" testNumber="37246"/>
			<description>Entry Filter with type Array in Thumbnail shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in Thumbnail is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37247"/>
			<description>Entry Filter in Thumbnail shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in Thumbnail is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="9" testNumber="37248"/>
			<description>Entry Filter with type Array in Thumbnail shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in Thumbnail does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37249"/>
			<description>Entry Filter with type Name in Thumbnail shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry Filter with type Name in Thumbnail has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37250"/>
			<description>Entry Height in Thumbnail shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="7" testNumber="37251"/>
			<description>Entry Height in Thumbnail is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37252"/>
			<description>Entry Length in Thumbnail shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="7" testNumber="37253"/>
			<description>Entry Length in Thumbnail is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37254"/>
			<description>Entry Subtype in Thumbnail shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in Thumbnail is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37255"/>
			<description>Entry Subtype with type Name in Thumbnail shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in Thumbnail has incorrect value %2 instead of Image</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37256"/>
			<description>Entry Type in Thumbnail shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Thumbnail is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37257"/>
			<description>Entry Type with type Name in Thumbnail shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in Thumbnail has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37258"/>
			<description>Entry Width in Thumbnail shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_3" clause="7" testNumber="37259"/>
			<description>Entry Width in Thumbnail is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_3" clause="2" testNumber="37518"/>
			<description>TrailerIDArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>TrailerIDArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37519"/>
			<description>Entry 0 in TrailerIDArray shall have type StringByte</description>
			<test>size &lt;= 0 || entry0HasTypeStringByte == true</test>
			<error>
				<message>Entry 0 in TrailerIDArray is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_3" clause="16" testNumber="37520"/>
			<description>If entry 0 with type StringByte in TrailerIDArray satisfies condition fn:MustBeDirect(fn:IsPresent(trailer::Encrypt)), it shall be direct</description>
			<test>entry0HasTypeStringByte != true || (isentry0Indirect == false || ((containstrailerEncrypt == true)) == false)</test>
			<error>
				<message>Entry 0 with type StringByte in TrailerIDArray is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37521"/>
			<description>Entry 1 in TrailerIDArray shall have type StringByte</description>
			<test>size &lt;= 1 || entry1HasTypeStringByte == true</test>
			<error>
				<message>Entry 1 in TrailerIDArray is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrailerIDArray">
			<id specification="ISO_32000_1_3" clause="16" testNumber="37522"/>
			<description>If entry 1 with type StringByte in TrailerIDArray satisfies condition fn:MustBeDirect(fn:IsPresent(trailer::Encrypt)), it shall be direct</description>
			<test>entry1HasTypeStringByte != true || (isentry1Indirect == false || ((containstrailerEncrypt == true)) == false)</test>
			<error>
				<message>Entry 1 with type StringByte in TrailerIDArray is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="1" testNumber="37580"/>
			<description>Transition shall not contain entries except D, Di, Dm, M, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'Di' &amp;&amp; elem != 'Dm' &amp;&amp; elem != 'M' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>Transition contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'Di' &amp;&amp; elem != 'Dm' &amp;&amp; elem != 'M' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37581"/>
			<description>Entry D in Transition shall have type Number</description>
			<test>containsD == false || DHasTypeNumber == true</test>
			<error>
				<message>Entry D in Transition is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="14" testNumber="37582"/>
			<description>Entry D with type Number in Transition shall satisfy possible value predicate: fn:Eval(@D &gt;= 0)</description>
			<test>DHasTypeNumber != true || DNumberValue &gt;= 0</test>
			<error>
				<message>Entry D with type Number in Transition does not satisfy possible value predicate: fn:Eval(@D &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37583"/>
			<description>Entry Di in Transition shall have one of types: Integer, Name</description>
			<test>containsDi == false || DiHasTypeInteger == true || DiHasTypeName == true</test>
			<error>
				<message>Entry Di in Transition is not one of types: Integer, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37584"/>
			<description>Entry Di with type Integer in Transition shall have one of values: 0, 90, 315, 180, 270</description>
			<test>DiHasTypeInteger != true || DiIntegerValue == 0 || DiIntegerValue == 90 || DiIntegerValue == 180 || DiIntegerValue == 270 || DiIntegerValue == 315</test>
			<error>
				<message>Entry Di with type Integer in Transition has incorrect value %2 instead of 0, 90, 315, 180, 270</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DiIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="9" testNumber="37585"/>
			<description>Entry Di with type Integer in Transition shall satisfy special case: fn:Eval((((@Di == 90) || (@Di == 180)) &amp;&amp; (@S == Wipe)) || ((@Di == 315) &amp;&amp; (@S == Glitter)))</description>
			<test>DiHasTypeInteger != true || ((((DiIntegerValue == 90) || (DiIntegerValue == 180)) &amp;&amp; (SNameValue == "Wipe")) || ((DiIntegerValue == 315) &amp;&amp; (SNameValue == "Glitter")))</test>
			<error>
				<message>Entry Di with type Integer in Transition does not satisfy special case: fn:Eval((((@Di == 90) || (@Di == 180)) &amp;&amp; (@S == Wipe)) || ((@Di == 315) &amp;&amp; (@S == Glitter)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37586"/>
			<description>Entry Di with type Name in Transition shall have value None</description>
			<test>DiHasTypeName != true || DiNameValue == "None"</test>
			<error>
				<message>Entry Di with type Name in Transition has incorrect value %2 instead of None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DiNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="9" testNumber="37587"/>
			<description>Entry Di with type Name in Transition shall satisfy special case: fn:Eval(((@Di == None) &amp;&amp; (@S == Fly) &amp;&amp; fn:SinceVersion(1.5 , (@SS != 1.0))))</description>
			<test>DiHasTypeName != true || (((DiNameValue == "None") &amp;&amp; (SNameValue == "Fly") &amp;&amp; true))</test>
			<error>
				<message>Entry Di with type Name in Transition does not satisfy special case: fn:Eval(((@Di == None) &amp;&amp; (@S == Fly) &amp;&amp; fn:SinceVersion(1.5 , (@SS != 1.0))))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37588"/>
			<description>Entry Dm in Transition shall have type Name</description>
			<test>containsDm == false || DmHasTypeName == true</test>
			<error>
				<message>Entry Dm in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37589"/>
			<description>Entry Dm with type Name in Transition shall have one of values: V, H</description>
			<test>DmHasTypeName != true || DmNameValue == "H" || DmNameValue == "V"</test>
			<error>
				<message>Entry Dm with type Name in Transition has incorrect value %2 instead of V, H</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DmNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37590"/>
			<description>Entry M in Transition shall have type Name</description>
			<test>containsM == false || MHasTypeName == true</test>
			<error>
				<message>Entry M in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37591"/>
			<description>Entry M with type Name in Transition shall have one of values: I, O</description>
			<test>MHasTypeName != true || MNameValue == "I" || MNameValue == "O"</test>
			<error>
				<message>Entry M with type Name in Transition has incorrect value %2 instead of I, O</message>
				<arguments>
					<argument>keyName</argument>
					<argument>MNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37592"/>
			<description>Entry S in Transition shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37593"/>
			<description>Entry S with type Name in Transition shall have one of values: Uncover, Glitter, R, Fly, Cover, Dissolve, Box, Split, Push, Blinds, Fade, Wipe</description>
			<test>SHasTypeName != true || SNameValue == "Split" || SNameValue == "Blinds" || SNameValue == "Box" || SNameValue == "Wipe" || SNameValue == "Dissolve" || SNameValue == "Glitter" || SNameValue == "R" || SNameValue == "Fly" || SNameValue == "Push" || SNameValue == "Cover" || SNameValue == "Uncover" || SNameValue == "Fade"</test>
			<error>
				<message>Entry S with type Name in Transition has incorrect value %2 instead of Uncover, Glitter, R, Fly, Cover, Dissolve, Box, Split, Push, Blinds, Fade, Wipe</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37594"/>
			<description>Entry Type in Transition shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37595"/>
			<description>Entry Type with type Name in Transition shall have value Trans</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Trans"</test>
			<error>
				<message>Entry Type with type Name in Transition has incorrect value %2 instead of Trans</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_3" clause="1" testNumber="37684"/>
			<description>TrapRegion shall not contain entries except TP, TZ</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'TP' &amp;&amp; elem != 'TZ').length == 0</test>
			<error>
				<message>TrapRegion contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'TP' &amp;&amp; elem != 'TZ').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37685"/>
			<description>Entry TP in TrapRegion shall have type Name</description>
			<test>containsTP == false || TPHasTypeName == true</test>
			<error>
				<message>Entry TP in TrapRegion is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_3" clause="7" testNumber="37686"/>
			<description>Entry TP in TrapRegion is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in TrapRegion is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_3" clause="17" testNumber="37687"/>
			<description>Entry TZ with type Array in TrapRegion shall be object ArrayOf_ArrayOfNumbers</description>
			<test>TZHasTypeArray != true || TZ_size == 1</test>
			<error>
				<message>Entry TZ with type Array in TrapRegion is not object ArrayOf_ArrayOfNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37688"/>
			<description>Entry TZ in TrapRegion shall have type Array</description>
			<test>containsTZ == false || TZHasTypeArray == true</test>
			<error>
				<message>Entry TZ in TrapRegion is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURI">
			<id specification="ISO_32000_1_3" clause="1" testNumber="37718"/>
			<description>URI shall not contain entries except Base</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Base').length == 0</test>
			<error>
				<message>URI contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Base').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURI">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37719"/>
			<description>Entry Base in URI shall have type StringAscii</description>
			<test>containsBase == false || BaseHasTypeStringAscii == true</test>
			<error>
				<message>Entry Base in URI is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_3" clause="1" testNumber="37730"/>
			<description>URLAlias shall not contain entries except C, U</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'U').length == 0</test>
			<error>
				<message>URLAlias contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'U').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_3" clause="17" testNumber="37731"/>
			<description>Entry C with type Array in URLAlias shall be object ArrayOfArraysURLStrings</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in URLAlias is not object ArrayOfArraysURLStrings</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37732"/>
			<description>Entry C in URLAlias shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in URLAlias is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_3" clause="9" testNumber="37733"/>
			<description>Entry C with type Array in URLAlias shall satisfy special case: fn:Eval(fn:ArrayLength(C) &gt;= 1)</description>
			<test>CHasTypeArray != true || (CArraySize &gt;= 1)</test>
			<error>
				<message>Entry C with type Array in URLAlias does not satisfy special case: fn:Eval(fn:ArrayLength(C) &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37734"/>
			<description>Entry U in URLAlias shall have type StringAscii</description>
			<test>containsU == false || UHasTypeStringAscii == true</test>
			<error>
				<message>Entry U in URLAlias is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_3" clause="7" testNumber="37735"/>
			<description>Entry U in URLAlias is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in URLAlias is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_3" clause="1" testNumber="37942"/>
			<description>ViewerPreferences shall not contain entries except CenterWindow, Direction, FitWindow, HideMenubar, HideToolbar, HideWindowUI, NonFullScreenPageMode</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CenterWindow' &amp;&amp; elem != 'Direction' &amp;&amp; elem != 'FitWindow' &amp;&amp; elem != 'HideMenubar' &amp;&amp; elem != 'HideToolbar' &amp;&amp; elem != 'HideWindowUI' &amp;&amp; elem != 'NonFullScreenPageMode').length == 0</test>
			<error>
				<message>ViewerPreferences contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CenterWindow' &amp;&amp; elem != 'Direction' &amp;&amp; elem != 'FitWindow' &amp;&amp; elem != 'HideMenubar' &amp;&amp; elem != 'HideToolbar' &amp;&amp; elem != 'HideWindowUI' &amp;&amp; elem != 'NonFullScreenPageMode').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37943"/>
			<description>Entry CenterWindow in ViewerPreferences shall have type Boolean</description>
			<test>containsCenterWindow == false || CenterWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry CenterWindow in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37944"/>
			<description>Entry Direction in ViewerPreferences shall have type Name</description>
			<test>containsDirection == false || DirectionHasTypeName == true</test>
			<error>
				<message>Entry Direction in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37945"/>
			<description>Entry Direction with type Name in ViewerPreferences shall have one of values: L2R, R2L</description>
			<test>DirectionHasTypeName != true || DirectionNameValue == "L2R" || DirectionNameValue == "R2L"</test>
			<error>
				<message>Entry Direction with type Name in ViewerPreferences has incorrect value %2 instead of L2R, R2L</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DirectionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37946"/>
			<description>Entry FitWindow in ViewerPreferences shall have type Boolean</description>
			<test>containsFitWindow == false || FitWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry FitWindow in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37947"/>
			<description>Entry HideMenubar in ViewerPreferences shall have type Boolean</description>
			<test>containsHideMenubar == false || HideMenubarHasTypeBoolean == true</test>
			<error>
				<message>Entry HideMenubar in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37948"/>
			<description>Entry HideToolbar in ViewerPreferences shall have type Boolean</description>
			<test>containsHideToolbar == false || HideToolbarHasTypeBoolean == true</test>
			<error>
				<message>Entry HideToolbar in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37949"/>
			<description>Entry HideWindowUI in ViewerPreferences shall have type Boolean</description>
			<test>containsHideWindowUI == false || HideWindowUIHasTypeBoolean == true</test>
			<error>
				<message>Entry HideWindowUI in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_3" clause="8" testNumber="37950"/>
			<description>Entry NonFullScreenPageMode in ViewerPreferences shall have type Name</description>
			<test>containsNonFullScreenPageMode == false || NonFullScreenPageModeHasTypeName == true</test>
			<error>
				<message>Entry NonFullScreenPageMode in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_3" clause="6" testNumber="37951"/>
			<description>Entry NonFullScreenPageMode with type Name in ViewerPreferences shall have one of values: UseOutlines, UseThumbs, UseOC, UseNone</description>
			<test>NonFullScreenPageModeHasTypeName != true || NonFullScreenPageModeNameValue == "UseNone" || NonFullScreenPageModeNameValue == "UseOutlines" || NonFullScreenPageModeNameValue == "UseThumbs" || NonFullScreenPageModeNameValue == "UseOC"</test>
			<error>
				<message>Entry NonFullScreenPageMode with type Name in ViewerPreferences has incorrect value %2 instead of UseOutlines, UseThumbs, UseOC, UseNone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NonFullScreenPageModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="1" testNumber="38121"/>
			<description>WebCaptureCommand shall not contain entries except CT, F, H, L, P, S, URL</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'L' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'URL').length == 0</test>
			<error>
				<message>WebCaptureCommand contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'F' &amp;&amp; elem != 'H' &amp;&amp; elem != 'L' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'URL').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38122"/>
			<description>Entry CT in WebCaptureCommand shall have type StringAscii</description>
			<test>containsCT == false || CTHasTypeStringAscii == true</test>
			<error>
				<message>Entry CT in WebCaptureCommand is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38123"/>
			<description>Entry F in WebCaptureCommand shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in WebCaptureCommand is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="9" testNumber="38124"/>
			<description>Entry F with type Bitmask in WebCaptureCommand shall satisfy special case: fn:Eval(fn:BitsClear(4 , 32))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in WebCaptureCommand does not satisfy special case: fn:Eval(fn:BitsClear(4 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38125"/>
			<description>Entry H in WebCaptureCommand shall have type String</description>
			<test>containsH == false || HHasTypeString == true</test>
			<error>
				<message>Entry H in WebCaptureCommand is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38126"/>
			<description>Entry L in WebCaptureCommand shall have type Integer</description>
			<test>containsL == false || LHasTypeInteger == true</test>
			<error>
				<message>Entry L in WebCaptureCommand is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="9" testNumber="38127"/>
			<description>Entry L with type Integer in WebCaptureCommand shall satisfy special case: fn:Eval(@L &gt;= 1)</description>
			<test>LHasTypeInteger != true || (LIntegerValue &gt;= 1)</test>
			<error>
				<message>Entry L with type Integer in WebCaptureCommand does not satisfy special case: fn:Eval(@L &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38128"/>
			<description>Entry P with type Stream in WebCaptureCommand shall be object Stream</description>
			<test>PHasTypeStream != true || P_size == 1</test>
			<error>
				<message>Entry P with type Stream in WebCaptureCommand is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38129"/>
			<description>Entry P in WebCaptureCommand shall have one of types: Stream, String</description>
			<test>containsP == false || PHasTypeStream == true || PHasTypeString == true</test>
			<error>
				<message>Entry P in WebCaptureCommand is not one of types: Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="10" testNumber="38130"/>
			<description>Entry P with type Stream in WebCaptureCommand shall be indirect</description>
			<test>PHasTypeStream != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Stream in WebCaptureCommand is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38131"/>
			<description>Entry S with type Dictionary in WebCaptureCommand shall be object WebCaptureCommandSettings</description>
			<test>SHasTypeDictionary != true || S_size == 1</test>
			<error>
				<message>Entry S with type Dictionary in WebCaptureCommand is not object WebCaptureCommandSettings</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38132"/>
			<description>Entry S in WebCaptureCommand shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in WebCaptureCommand is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38133"/>
			<description>Entry URL in WebCaptureCommand shall have type StringAscii</description>
			<test>containsURL == false || URLHasTypeStringAscii == true</test>
			<error>
				<message>Entry URL in WebCaptureCommand is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38134"/>
			<description>Entry URL in WebCaptureCommand is required</description>
			<test>containsURL == true</test>
			<error>
				<message>Entry URL in WebCaptureCommand is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_3" clause="1" testNumber="38205"/>
			<description>WebCaptureCommandSettings shall not contain entries except C, G</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'G').length == 0</test>
			<error>
				<message>WebCaptureCommandSettings contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'G').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38206"/>
			<description>Entry C with type Dictionary in WebCaptureCommandSettings shall be object _UniversalDictionary</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in WebCaptureCommandSettings is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38207"/>
			<description>Entry C in WebCaptureCommandSettings shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in WebCaptureCommandSettings is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38208"/>
			<description>Entry G with type Dictionary in WebCaptureCommandSettings shall be object _UniversalDictionary</description>
			<test>GHasTypeDictionary != true || G_size == 1</test>
			<error>
				<message>Entry G with type Dictionary in WebCaptureCommandSettings is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38209"/>
			<description>Entry G in WebCaptureCommandSettings shall have type Dictionary</description>
			<test>containsG == false || GHasTypeDictionary == true</test>
			<error>
				<message>Entry G in WebCaptureCommandSettings is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="1" testNumber="38235"/>
			<description>WebCaptureImageSet shall not contain entries except CT, ID, O, R, S, SI, TS, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'O' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>WebCaptureImageSet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'O' &amp;&amp; elem != 'R' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38236"/>
			<description>Entry CT in WebCaptureImageSet shall have type String</description>
			<test>containsCT == false || CTHasTypeString == true</test>
			<error>
				<message>Entry CT in WebCaptureImageSet is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38237"/>
			<description>Entry ID in WebCaptureImageSet shall have type String</description>
			<test>containsID == false || entryIDHasTypeString == true</test>
			<error>
				<message>Entry ID in WebCaptureImageSet is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38238"/>
			<description>Entry ID in WebCaptureImageSet is required</description>
			<test>containsID == true</test>
			<error>
				<message>Entry ID in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38239"/>
			<description>Entry O with type Array in WebCaptureImageSet shall be object ArrayOfWebCaptureImages</description>
			<test>OHasTypeArray != true || O_size == 1</test>
			<error>
				<message>Entry O with type Array in WebCaptureImageSet is not object ArrayOfWebCaptureImages</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38240"/>
			<description>Entry O in WebCaptureImageSet shall have type Array</description>
			<test>containsO == false || OHasTypeArray == true</test>
			<error>
				<message>Entry O in WebCaptureImageSet is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38241"/>
			<description>Entry O in WebCaptureImageSet is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38242"/>
			<description>Entry R with type Array in WebCaptureImageSet shall be object ArrayOfIntegersGeneral</description>
			<test>RHasTypeArray != true || R_size == 1</test>
			<error>
				<message>Entry R with type Array in WebCaptureImageSet is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38243"/>
			<description>Entry R in WebCaptureImageSet shall have one of types: Array, Integer</description>
			<test>containsR == false || RHasTypeArray == true || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in WebCaptureImageSet is not one of types: Array, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38244"/>
			<description>Entry R in WebCaptureImageSet is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="9" testNumber="38245"/>
			<description>Entry R with type Array in WebCaptureImageSet shall satisfy special case: fn:Eval(fn:ArrayLength(O) == fn:ArrayLength(R))</description>
			<test>RHasTypeArray != true || (OArraySize == RArraySize)</test>
			<error>
				<message>Entry R with type Array in WebCaptureImageSet does not satisfy special case: fn:Eval(fn:ArrayLength(O) == fn:ArrayLength(R))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="9" testNumber="38246"/>
			<description>Entry R with type Integer in WebCaptureImageSet shall satisfy special case: fn:Eval(@R &gt; 0)</description>
			<test>RHasTypeInteger != true || (RIntegerValue &gt; 0)</test>
			<error>
				<message>Entry R with type Integer in WebCaptureImageSet does not satisfy special case: fn:Eval(@R &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38247"/>
			<description>Entry S in WebCaptureImageSet shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in WebCaptureImageSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38248"/>
			<description>Entry S in WebCaptureImageSet is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38249"/>
			<description>Entry S with type Name in WebCaptureImageSet shall have value SIS</description>
			<test>SHasTypeName != true || SNameValue == "SIS"</test>
			<error>
				<message>Entry S with type Name in WebCaptureImageSet has incorrect value %2 instead of SIS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38250"/>
			<description>Entry SI with type Array in WebCaptureImageSet shall be object ArrayOfSourceInformation</description>
			<test>SIHasTypeArray != true || SI_size == 1</test>
			<error>
				<message>Entry SI with type Array in WebCaptureImageSet is not object ArrayOfSourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38251"/>
			<description>Entry SI with type Dictionary in WebCaptureImageSet shall be object SourceInformation</description>
			<test>SIHasTypeDictionary != true || SI_size == 1</test>
			<error>
				<message>Entry SI with type Dictionary in WebCaptureImageSet is not object SourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38252"/>
			<description>Entry SI in WebCaptureImageSet shall have one of types: Array, Dictionary</description>
			<test>containsSI == false || SIHasTypeArray == true || SIHasTypeDictionary == true</test>
			<error>
				<message>Entry SI in WebCaptureImageSet is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38253"/>
			<description>Entry SI in WebCaptureImageSet is required</description>
			<test>containsSI == true</test>
			<error>
				<message>Entry SI in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38254"/>
			<description>Entry TS in WebCaptureImageSet shall have type Date</description>
			<test>containsTS == false || TSHasTypeDate == true</test>
			<error>
				<message>Entry TS in WebCaptureImageSet is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38255"/>
			<description>Entry Type in WebCaptureImageSet shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in WebCaptureImageSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38256"/>
			<description>Entry Type with type Name in WebCaptureImageSet shall have value SpiderContentSet</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SpiderContentSet"</test>
			<error>
				<message>Entry Type with type Name in WebCaptureImageSet has incorrect value %2 instead of SpiderContentSet</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_3" clause="1" testNumber="38367"/>
			<description>WebCaptureInfo shall not contain entries except C, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>WebCaptureInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38368"/>
			<description>Entry C with type Array in WebCaptureInfo shall be object ArrayOfWebCaptureCommands</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in WebCaptureInfo is not object ArrayOfWebCaptureCommands</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38369"/>
			<description>Entry C in WebCaptureInfo shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in WebCaptureInfo is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38370"/>
			<description>Entry V in WebCaptureInfo shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in WebCaptureInfo is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38371"/>
			<description>Entry V in WebCaptureInfo is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in WebCaptureInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38372"/>
			<description>Entry V with type Number in WebCaptureInfo shall have value 1</description>
			<test>VHasTypeNumber != true || VNumberValue == 1</test>
			<error>
				<message>Entry V with type Number in WebCaptureInfo has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="1" testNumber="38403"/>
			<description>WebCapturePageSet shall not contain entries except CT, ID, O, S, SI, T, TID, TS, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'O' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TID' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>WebCapturePageSet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CT' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'O' &amp;&amp; elem != 'S' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'T' &amp;&amp; elem != 'TID' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38404"/>
			<description>Entry CT in WebCapturePageSet shall have type StringAscii</description>
			<test>containsCT == false || CTHasTypeStringAscii == true</test>
			<error>
				<message>Entry CT in WebCapturePageSet is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38405"/>
			<description>Entry ID in WebCapturePageSet shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in WebCapturePageSet is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38406"/>
			<description>Entry ID in WebCapturePageSet is required</description>
			<test>containsID == true</test>
			<error>
				<message>Entry ID in WebCapturePageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38407"/>
			<description>Entry O with type Array in WebCapturePageSet shall be object ArrayOfWebCapturePages</description>
			<test>OHasTypeArray != true || O_size == 1</test>
			<error>
				<message>Entry O with type Array in WebCapturePageSet is not object ArrayOfWebCapturePages</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38408"/>
			<description>Entry O in WebCapturePageSet shall have type Array</description>
			<test>containsO == false || OHasTypeArray == true</test>
			<error>
				<message>Entry O in WebCapturePageSet is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38409"/>
			<description>Entry O in WebCapturePageSet is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in WebCapturePageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38410"/>
			<description>Entry S in WebCapturePageSet shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in WebCapturePageSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38411"/>
			<description>Entry S in WebCapturePageSet is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in WebCapturePageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38412"/>
			<description>Entry S with type Name in WebCapturePageSet shall have value SPS</description>
			<test>SHasTypeName != true || SNameValue == "SPS"</test>
			<error>
				<message>Entry S with type Name in WebCapturePageSet has incorrect value %2 instead of SPS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38413"/>
			<description>Entry SI with type Array in WebCapturePageSet shall be object ArrayOfSourceInformation</description>
			<test>SIHasTypeArray != true || SI_size == 1</test>
			<error>
				<message>Entry SI with type Array in WebCapturePageSet is not object ArrayOfSourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38414"/>
			<description>Entry SI with type Dictionary in WebCapturePageSet shall be object SourceInformation</description>
			<test>SIHasTypeDictionary != true || SI_size == 1</test>
			<error>
				<message>Entry SI with type Dictionary in WebCapturePageSet is not object SourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38415"/>
			<description>Entry SI in WebCapturePageSet shall have one of types: Array, Dictionary</description>
			<test>containsSI == false || SIHasTypeArray == true || SIHasTypeDictionary == true</test>
			<error>
				<message>Entry SI in WebCapturePageSet is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38416"/>
			<description>Entry SI in WebCapturePageSet is required</description>
			<test>containsSI == true</test>
			<error>
				<message>Entry SI in WebCapturePageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38417"/>
			<description>Entry T in WebCapturePageSet shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in WebCapturePageSet is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38418"/>
			<description>Entry TID in WebCapturePageSet shall have type StringByte</description>
			<test>containsTID == false || TIDHasTypeStringByte == true</test>
			<error>
				<message>Entry TID in WebCapturePageSet is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38419"/>
			<description>Entry TS in WebCapturePageSet shall have type Date</description>
			<test>containsTS == false || TSHasTypeDate == true</test>
			<error>
				<message>Entry TS in WebCapturePageSet is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38420"/>
			<description>Entry Type in WebCapturePageSet shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in WebCapturePageSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38421"/>
			<description>Entry Type with type Name in WebCapturePageSet shall have value SpiderContentSet</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SpiderContentSet"</test>
			<error>
				<message>Entry Type with type Name in WebCapturePageSet has incorrect value %2 instead of SpiderContentSet</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_3" clause="2" testNumber="38531"/>
			<description>WhitepointArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>WhitepointArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38532"/>
			<description>Entry 0 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in WhitepointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="38533"/>
			<description>Entry 0 with type Number in WhitepointArray shall satisfy possible value predicate: fn:Eval(@0 &gt; 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt; 0</test>
			<error>
				<message>Entry 0 with type Number in WhitepointArray does not satisfy possible value predicate: fn:Eval(@0 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38534"/>
			<description>Entry 1 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in WhitepointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38535"/>
			<description>Entry 1 with type Number in WhitepointArray shall have value 1</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue == 1</test>
			<error>
				<message>Entry 1 with type Number in WhitepointArray has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38536"/>
			<description>Entry 2 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in WhitepointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_3" clause="14" testNumber="38537"/>
			<description>Entry 2 with type Number in WhitepointArray shall satisfy possible value predicate: fn:Eval(@2 &gt; 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt; 0</test>
			<error>
				<message>Entry 2 with type Number in WhitepointArray does not satisfy possible value predicate: fn:Eval(@2 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="1" testNumber="38623"/>
			<description>XObjectFormPS shall not contain entries except DecodeParms, F, FDecodeParms, FFilter, Filter, Length, Level1, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>XObjectFormPS contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38624"/>
			<description>Entry DecodeParms with type Array in XObjectFormPS shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPS is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38625"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormPS shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormPS is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38626"/>
			<description>Entry DecodeParms in XObjectFormPS shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPS is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="9" testNumber="38627"/>
			<description>Entry DecodeParms with type Array in XObjectFormPS shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPS does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38628"/>
			<description>Entry F with type Dictionary in XObjectFormPS shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormPS is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38629"/>
			<description>Entry F in XObjectFormPS shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectFormPS is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38630"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPS shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPS is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38631"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormPS shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormPS is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38632"/>
			<description>Entry FDecodeParms in XObjectFormPS shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPS is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="9" testNumber="38633"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPS shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPS does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38634"/>
			<description>Entry FFilter with type Array in XObjectFormPS shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPS is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38635"/>
			<description>Entry FFilter in XObjectFormPS shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormPS is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="9" testNumber="38636"/>
			<description>Entry FFilter with type Array in XObjectFormPS shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPS does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38637"/>
			<description>Entry FFilter with type Name in XObjectFormPS shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormPS has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38638"/>
			<description>Entry Filter with type Array in XObjectFormPS shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPS is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38639"/>
			<description>Entry Filter in XObjectFormPS shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormPS is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="9" testNumber="38640"/>
			<description>Entry Filter with type Array in XObjectFormPS shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPS does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38641"/>
			<description>Entry Filter with type Name in XObjectFormPS shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormPS has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38642"/>
			<description>Entry Length in XObjectFormPS shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormPS is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38643"/>
			<description>Entry Length in XObjectFormPS is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormPS is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38644"/>
			<description>Entry Level1 with type Stream in XObjectFormPS shall be object Stream</description>
			<test>Level1HasTypeStream != true || Level1_size == 1</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPS is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38645"/>
			<description>Entry Level1 in XObjectFormPS shall have type Stream</description>
			<test>containsLevel1 == false || Level1HasTypeStream == true</test>
			<error>
				<message>Entry Level1 in XObjectFormPS is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="10" testNumber="38646"/>
			<description>Entry Level1 with type Stream in XObjectFormPS shall be indirect</description>
			<test>Level1HasTypeStream != true || isLevel1Indirect == true</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPS is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38647"/>
			<description>Entry Subtype in XObjectFormPS shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPS is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38648"/>
			<description>Entry Subtype in XObjectFormPS is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPS is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38649"/>
			<description>Entry Subtype with type Name in XObjectFormPS shall have value PS</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PS"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormPS has incorrect value %2 instead of PS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38650"/>
			<description>Entry Type in XObjectFormPS shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormPS is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38651"/>
			<description>Entry Type with type Name in XObjectFormPS shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormPS has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="1" testNumber="38920"/>
			<description>XObjectFormPSpassthrough shall not contain entries except BBox, DecodeParms, F, FDecodeParms, FFilter, Filter, FormType, Length, Level1, Matrix, PS, Subtype, Subtype2, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Subtype2' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>XObjectFormPSpassthrough contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Subtype2' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38921"/>
			<description>Entry BBox in XObjectFormPSpassthrough shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormPSpassthrough is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38922"/>
			<description>Entry BBox in XObjectFormPSpassthrough is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38923"/>
			<description>Entry DecodeParms with type Array in XObjectFormPSpassthrough shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPSpassthrough is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38924"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormPSpassthrough shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormPSpassthrough is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38925"/>
			<description>Entry DecodeParms in XObjectFormPSpassthrough shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPSpassthrough is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="9" testNumber="38926"/>
			<description>Entry DecodeParms with type Array in XObjectFormPSpassthrough shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPSpassthrough does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38927"/>
			<description>Entry F with type Dictionary in XObjectFormPSpassthrough shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormPSpassthrough is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38928"/>
			<description>Entry F in XObjectFormPSpassthrough shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectFormPSpassthrough is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38929"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPSpassthrough shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPSpassthrough is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38930"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormPSpassthrough shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormPSpassthrough is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38931"/>
			<description>Entry FDecodeParms in XObjectFormPSpassthrough shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPSpassthrough is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="9" testNumber="38932"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPSpassthrough shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPSpassthrough does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38933"/>
			<description>Entry FFilter with type Array in XObjectFormPSpassthrough shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPSpassthrough is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38934"/>
			<description>Entry FFilter in XObjectFormPSpassthrough shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormPSpassthrough is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="9" testNumber="38935"/>
			<description>Entry FFilter with type Array in XObjectFormPSpassthrough shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPSpassthrough does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38936"/>
			<description>Entry FFilter with type Name in XObjectFormPSpassthrough shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38937"/>
			<description>Entry Filter with type Array in XObjectFormPSpassthrough shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPSpassthrough is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38938"/>
			<description>Entry Filter in XObjectFormPSpassthrough shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormPSpassthrough is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="9" testNumber="38939"/>
			<description>Entry Filter with type Array in XObjectFormPSpassthrough shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPSpassthrough does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38940"/>
			<description>Entry Filter with type Name in XObjectFormPSpassthrough shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38941"/>
			<description>Entry FormType in XObjectFormPSpassthrough shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormPSpassthrough is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="11" testNumber="38942"/>
			<description>Entry FormType in XObjectFormPSpassthrough is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsFormType == true || (false) == false)</test>
			<error>
				<message>Entry FormType in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38943"/>
			<description>Entry FormType with type Integer in XObjectFormPSpassthrough shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormPSpassthrough has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38944"/>
			<description>Entry Length in XObjectFormPSpassthrough shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormPSpassthrough is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38945"/>
			<description>Entry Length in XObjectFormPSpassthrough is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38946"/>
			<description>Entry Level1 with type Stream in XObjectFormPSpassthrough shall be object Stream</description>
			<test>Level1HasTypeStream != true || Level1_size == 1</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPSpassthrough is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38947"/>
			<description>Entry Level1 in XObjectFormPSpassthrough shall have type Stream</description>
			<test>containsLevel1 == false || Level1HasTypeStream == true</test>
			<error>
				<message>Entry Level1 in XObjectFormPSpassthrough is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="10" testNumber="38948"/>
			<description>Entry Level1 with type Stream in XObjectFormPSpassthrough shall be indirect</description>
			<test>Level1HasTypeStream != true || isLevel1Indirect == true</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPSpassthrough is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38949"/>
			<description>Entry Matrix in XObjectFormPSpassthrough shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormPSpassthrough is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="11" testNumber="38950"/>
			<description>Entry Matrix in XObjectFormPSpassthrough is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsMatrix == true || (false) == false)</test>
			<error>
				<message>Entry Matrix in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="17" testNumber="38951"/>
			<description>Entry PS with type Stream in XObjectFormPSpassthrough shall be object Stream</description>
			<test>PSHasTypeStream != true || PS_size == 1</test>
			<error>
				<message>Entry PS with type Stream in XObjectFormPSpassthrough is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38952"/>
			<description>Entry PS in XObjectFormPSpassthrough shall have type Stream</description>
			<test>containsPS == false || PSHasTypeStream == true</test>
			<error>
				<message>Entry PS in XObjectFormPSpassthrough is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38953"/>
			<description>Entry PS in XObjectFormPSpassthrough is required</description>
			<test>containsPS == true</test>
			<error>
				<message>Entry PS in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="10" testNumber="38954"/>
			<description>Entry PS with type Stream in XObjectFormPSpassthrough shall be indirect</description>
			<test>PSHasTypeStream != true || isPSIndirect == true</test>
			<error>
				<message>Entry PS with type Stream in XObjectFormPSpassthrough is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38955"/>
			<description>Entry Subtype in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPSpassthrough is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38956"/>
			<description>Entry Subtype in XObjectFormPSpassthrough is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38957"/>
			<description>Entry Subtype with type Name in XObjectFormPSpassthrough shall have value PS</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PS"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of PS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38958"/>
			<description>Entry Subtype2 in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsSubtype2 == false || Subtype2HasTypeName == true</test>
			<error>
				<message>Entry Subtype2 in XObjectFormPSpassthrough is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="7" testNumber="38959"/>
			<description>Entry Subtype2 in XObjectFormPSpassthrough is required</description>
			<test>containsSubtype2 == true</test>
			<error>
				<message>Entry Subtype2 in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38960"/>
			<description>Entry Subtype2 with type Name in XObjectFormPSpassthrough shall have value PS</description>
			<test>Subtype2HasTypeName != true || Subtype2NameValue == "PS"</test>
			<error>
				<message>Entry Subtype2 with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of PS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>Subtype2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="8" testNumber="38961"/>
			<description>Entry Type in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormPSpassthrough is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_3" clause="6" testNumber="38962"/>
			<description>Entry Type with type Name in XObjectFormPSpassthrough shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="1" testNumber="39535"/>
			<description>XObjectFormTrapNet shall not contain entries except BBox, DecodeParms, F, FDecodeParms, FFilter, Filter, FormType, LastModified, Length, Matrix, Name, OPI, PCM, PieceInfo, Resources, SeparationColorNames, StructParent, StructParents, Subtype, TrapRegions, TrapStyles, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PCM' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'SeparationColorNames' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TrapRegions' &amp;&amp; elem != 'TrapStyles' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>XObjectFormTrapNet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PCM' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'SeparationColorNames' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TrapRegions' &amp;&amp; elem != 'TrapStyles' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39536"/>
			<description>Entry BBox in XObjectFormTrapNet shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormTrapNet is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="39537"/>
			<description>Entry BBox in XObjectFormTrapNet is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39538"/>
			<description>Entry DecodeParms with type Array in XObjectFormTrapNet shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormTrapNet is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39539"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormTrapNet shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormTrapNet is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39540"/>
			<description>Entry DecodeParms in XObjectFormTrapNet shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormTrapNet is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="9" testNumber="39541"/>
			<description>Entry DecodeParms with type Array in XObjectFormTrapNet shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormTrapNet does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39542"/>
			<description>Entry F with type Dictionary in XObjectFormTrapNet shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormTrapNet is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39543"/>
			<description>Entry F in XObjectFormTrapNet shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectFormTrapNet is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39544"/>
			<description>Entry FDecodeParms with type Array in XObjectFormTrapNet shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormTrapNet is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39545"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormTrapNet shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormTrapNet is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39546"/>
			<description>Entry FDecodeParms in XObjectFormTrapNet shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormTrapNet is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="9" testNumber="39547"/>
			<description>Entry FDecodeParms with type Array in XObjectFormTrapNet shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormTrapNet does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39548"/>
			<description>Entry FFilter with type Array in XObjectFormTrapNet shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormTrapNet is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39549"/>
			<description>Entry FFilter in XObjectFormTrapNet shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormTrapNet is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="9" testNumber="39550"/>
			<description>Entry FFilter with type Array in XObjectFormTrapNet shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormTrapNet does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="6" testNumber="39551"/>
			<description>Entry FFilter with type Name in XObjectFormTrapNet shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormTrapNet has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39552"/>
			<description>Entry Filter with type Array in XObjectFormTrapNet shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormTrapNet is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39553"/>
			<description>Entry Filter in XObjectFormTrapNet shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormTrapNet is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="9" testNumber="39554"/>
			<description>Entry Filter with type Array in XObjectFormTrapNet shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormTrapNet does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="6" testNumber="39555"/>
			<description>Entry Filter with type Name in XObjectFormTrapNet shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormTrapNet has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39556"/>
			<description>Entry FormType in XObjectFormTrapNet shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="6" testNumber="39557"/>
			<description>Entry FormType with type Integer in XObjectFormTrapNet shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormTrapNet has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39558"/>
			<description>Entry LastModified in XObjectFormTrapNet shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in XObjectFormTrapNet is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="11" testNumber="39559"/>
			<description>Entry LastModified in XObjectFormTrapNet is required, when fn:IsRequired(fn:IsPresent(PieceInfo))</description>
			<test>(containsLastModified == true || ((containsPieceInfo == true)) == false)</test>
			<error>
				<message>Entry LastModified in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39560"/>
			<description>Entry Length in XObjectFormTrapNet shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="39561"/>
			<description>Entry Length in XObjectFormTrapNet is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39562"/>
			<description>Entry Matrix in XObjectFormTrapNet shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormTrapNet is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39563"/>
			<description>Entry Name in XObjectFormTrapNet shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectFormTrapNet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39564"/>
			<description>Entry OPI with type Dictionary in XObjectFormTrapNet shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectFormTrapNet is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39565"/>
			<description>Entry OPI in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39566"/>
			<description>Entry PCM in XObjectFormTrapNet shall have type Name</description>
			<test>containsPCM == false || PCMHasTypeName == true</test>
			<error>
				<message>Entry PCM in XObjectFormTrapNet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="39567"/>
			<description>Entry PCM in XObjectFormTrapNet is required</description>
			<test>containsPCM == true</test>
			<error>
				<message>Entry PCM in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="6" testNumber="39568"/>
			<description>Entry PCM with type Name in XObjectFormTrapNet shall have one of values: DeviceGray, DeviceRGBK, DeviceRGB, DeviceN, DeviceCMYK, DeviceCMY</description>
			<test>PCMHasTypeName != true || PCMNameValue == "DeviceGray" || PCMNameValue == "DeviceRGB" || PCMNameValue == "DeviceCMYK" || PCMNameValue == "DeviceCMY" || PCMNameValue == "DeviceRGBK" || PCMNameValue == "DeviceN"</test>
			<error>
				<message>Entry PCM with type Name in XObjectFormTrapNet has incorrect value %2 instead of DeviceGray, DeviceRGBK, DeviceRGB, DeviceN, DeviceCMYK, DeviceCMY</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PCMNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39569"/>
			<description>Entry PieceInfo with type Dictionary in XObjectFormTrapNet shall be object PagePiece</description>
			<test>PieceInfoHasTypeDictionary != true || PieceInfo_size == 1</test>
			<error>
				<message>Entry PieceInfo with type Dictionary in XObjectFormTrapNet is not object PagePiece</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39570"/>
			<description>Entry PieceInfo in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39571"/>
			<description>Entry Resources with type Dictionary in XObjectFormTrapNet shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in XObjectFormTrapNet is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39572"/>
			<description>Entry Resources in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39573"/>
			<description>Entry SeparationColorNames with type Array in XObjectFormTrapNet shall be object ArrayOfNamesGeneral</description>
			<test>SeparationColorNamesHasTypeArray != true || SeparationColorNames_size == 1</test>
			<error>
				<message>Entry SeparationColorNames with type Array in XObjectFormTrapNet is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39574"/>
			<description>Entry SeparationColorNames in XObjectFormTrapNet shall have type Array</description>
			<test>containsSeparationColorNames == false || SeparationColorNamesHasTypeArray == true</test>
			<error>
				<message>Entry SeparationColorNames in XObjectFormTrapNet is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39575"/>
			<description>Entry StructParent in XObjectFormTrapNet shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39576"/>
			<description>Entry StructParents in XObjectFormTrapNet shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39577"/>
			<description>Entry Subtype in XObjectFormTrapNet shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormTrapNet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="7" testNumber="39578"/>
			<description>Entry Subtype in XObjectFormTrapNet is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="6" testNumber="39579"/>
			<description>Entry Subtype with type Name in XObjectFormTrapNet shall have value Form</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Form"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormTrapNet has incorrect value %2 instead of Form</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39580"/>
			<description>Entry TrapRegions with type Array in XObjectFormTrapNet shall be object ArrayOfTrapRegions</description>
			<test>TrapRegionsHasTypeArray != true || TrapRegions_size == 1</test>
			<error>
				<message>Entry TrapRegions with type Array in XObjectFormTrapNet is not object ArrayOfTrapRegions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39581"/>
			<description>Entry TrapRegions in XObjectFormTrapNet shall have type Array</description>
			<test>containsTrapRegions == false || TrapRegionsHasTypeArray == true</test>
			<error>
				<message>Entry TrapRegions in XObjectFormTrapNet is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39582"/>
			<description>Entry TrapStyles in XObjectFormTrapNet shall have type StringText</description>
			<test>containsTrapStyles == false || TrapStylesHasTypeStringText == true</test>
			<error>
				<message>Entry TrapStyles in XObjectFormTrapNet is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39583"/>
			<description>Entry Type in XObjectFormTrapNet shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormTrapNet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_3" clause="6" testNumber="39584"/>
			<description>Entry Type with type Name in XObjectFormTrapNet shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormTrapNet has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="1" testNumber="39993"/>
			<description>XObjectFormType1 shall not contain entries except BBox, DecodeParms, F, FDecodeParms, FFilter, Filter, FormType, LastModified, Length, Matrix, Name, OPI, PieceInfo, Resources, StructParent, StructParents, Subtype, Type, XUID</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XUID').length == 0</test>
			<error>
				<message>XObjectFormType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XUID').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39994"/>
			<description>Entry BBox in XObjectFormType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="39995"/>
			<description>Entry BBox in XObjectFormType1 is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39996"/>
			<description>Entry DecodeParms with type Array in XObjectFormType1 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="39997"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormType1 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormType1 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="39998"/>
			<description>Entry DecodeParms in XObjectFormType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="39999"/>
			<description>Entry DecodeParms with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40000"/>
			<description>Entry F with type Dictionary in XObjectFormType1 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormType1 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40001"/>
			<description>Entry F in XObjectFormType1 shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectFormType1 is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40002"/>
			<description>Entry FDecodeParms with type Array in XObjectFormType1 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40003"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormType1 shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormType1 is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40004"/>
			<description>Entry FDecodeParms in XObjectFormType1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40005"/>
			<description>Entry FDecodeParms with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40006"/>
			<description>Entry FFilter with type Array in XObjectFormType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40007"/>
			<description>Entry FFilter in XObjectFormType1 shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectFormType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40008"/>
			<description>Entry FFilter with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="40009"/>
			<description>Entry FFilter with type Name in XObjectFormType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40010"/>
			<description>Entry Filter with type Array in XObjectFormType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40011"/>
			<description>Entry Filter in XObjectFormType1 shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectFormType1 is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40012"/>
			<description>Entry Filter with type Array in XObjectFormType1 shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormType1 does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="40013"/>
			<description>Entry Filter with type Name in XObjectFormType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40014"/>
			<description>Entry FormType in XObjectFormType1 shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="11" testNumber="40015"/>
			<description>Entry FormType in XObjectFormType1 is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsFormType == true || (false) == false)</test>
			<error>
				<message>Entry FormType in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="40016"/>
			<description>Entry FormType with type Integer in XObjectFormType1 shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormType1 has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40017"/>
			<description>Entry LastModified in XObjectFormType1 shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in XObjectFormType1 is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="11" testNumber="40018"/>
			<description>Entry LastModified in XObjectFormType1 is required, when fn:IsRequired(fn:IsPresent(PieceInfo))</description>
			<test>(containsLastModified == true || ((containsPieceInfo == true)) == false)</test>
			<error>
				<message>Entry LastModified in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40019"/>
			<description>Entry Length in XObjectFormType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="40020"/>
			<description>Entry Length in XObjectFormType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40021"/>
			<description>Entry Matrix in XObjectFormType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormType1 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="11" testNumber="40022"/>
			<description>Entry Matrix in XObjectFormType1 is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsMatrix == true || (false) == false)</test>
			<error>
				<message>Entry Matrix in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40023"/>
			<description>Entry Name in XObjectFormType1 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectFormType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="11" testNumber="40024"/>
			<description>Entry Name in XObjectFormType1 is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40025"/>
			<description>Entry OPI with type Dictionary in XObjectFormType1 shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectFormType1 is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40026"/>
			<description>Entry OPI in XObjectFormType1 shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40027"/>
			<description>Entry PieceInfo with type Dictionary in XObjectFormType1 shall be object PagePiece</description>
			<test>PieceInfoHasTypeDictionary != true || PieceInfo_size == 1</test>
			<error>
				<message>Entry PieceInfo with type Dictionary in XObjectFormType1 is not object PagePiece</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40028"/>
			<description>Entry PieceInfo in XObjectFormType1 shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40029"/>
			<description>Entry Resources with type Dictionary in XObjectFormType1 shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in XObjectFormType1 is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40030"/>
			<description>Entry Resources in XObjectFormType1 shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="40031"/>
			<description>Entry Resources in XObjectFormType1 is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40032"/>
			<description>Entry StructParent in XObjectFormType1 shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40033"/>
			<description>Entry StructParent with type Integer in XObjectFormType1 shall satisfy special case: fn:Not(fn:IsPresent(StructParents))</description>
			<test>StructParentHasTypeInteger != true || (((containsStructParents == true)) != true)</test>
			<error>
				<message>Entry StructParent with type Integer in XObjectFormType1 does not satisfy special case: fn:Not(fn:IsPresent(StructParents))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40034"/>
			<description>Entry StructParents in XObjectFormType1 shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40035"/>
			<description>Entry StructParents with type Integer in XObjectFormType1 shall satisfy special case: fn:Not(fn:IsPresent(StructParent))</description>
			<test>StructParentsHasTypeInteger != true || (((containsStructParent == true)) != true)</test>
			<error>
				<message>Entry StructParents with type Integer in XObjectFormType1 does not satisfy special case: fn:Not(fn:IsPresent(StructParent))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40036"/>
			<description>Entry Subtype in XObjectFormType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="7" testNumber="40037"/>
			<description>Entry Subtype in XObjectFormType1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="40038"/>
			<description>Entry Subtype with type Name in XObjectFormType1 shall have value Form</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Form"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormType1 has incorrect value %2 instead of Form</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40039"/>
			<description>Entry Type in XObjectFormType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="6" testNumber="40040"/>
			<description>Entry Type with type Name in XObjectFormType1 shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormType1 has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40041"/>
			<description>Entry XUID with type Array in XObjectFormType1 shall be object ArrayOfIntegersGeneral</description>
			<test>XUIDHasTypeArray != true || XUID_size == 1</test>
			<error>
				<message>Entry XUID with type Array in XObjectFormType1 is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40042"/>
			<description>Entry XUID in XObjectFormType1 shall have type Array</description>
			<test>containsXUID == false || XUIDHasTypeArray == true</test>
			<error>
				<message>Entry XUID in XObjectFormType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="1" testNumber="40509"/>
			<description>XObjectImage shall not contain entries except Alternates, BitsPerComponent, ColorSpace, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Height, ID, ImageMask, Intent, Interpolate, Length, Mask, Name, OPI, StructParent, Subtype, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Mask' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').length == 0</test>
			<error>
				<message>XObjectImage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Mask' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40510"/>
			<description>Entry Alternates with type Array in XObjectImage shall be object ArrayOfImageAlternates</description>
			<test>AlternatesHasTypeArray != true || Alternates_size == 1</test>
			<error>
				<message>Entry Alternates with type Array in XObjectImage is not object ArrayOfImageAlternates</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40511"/>
			<description>Entry Alternates in XObjectImage shall have type Array</description>
			<test>containsAlternates == false || AlternatesHasTypeArray == true</test>
			<error>
				<message>Entry Alternates in XObjectImage is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40512"/>
			<description>Entry BitsPerComponent in XObjectImage shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="11" testNumber="40513"/>
			<description>Entry BitsPerComponent in XObjectImage is required, when fn:IsRequired(fn:Not(fn:Contains(@Filter , JPXDecode) || (@ImageMask == true)))</description>
			<test>(containsBitsPerComponent == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="15" testNumber="40514"/>
			<description>Entry BitsPerComponent in XObjectImage shall have Integer value 1, if this object satisfies condition (@Filter == CCITTFaxDecode) || (@Filter == JBIG2Decode) || (@ImageMask == true)</description>
			<test>(((FilterNameValue == "CCITTFaxDecode") || (FilterNameValue == "JBIG2Decode") || (ImageMaskBooleanValue == true)) == false || BitsPerComponentIntegerValue == 1)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage does not have value 1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="15" testNumber="40515"/>
			<description>Entry BitsPerComponent in XObjectImage shall have Integer value 8, if this object satisfies condition (@Filter == RunLengthDecode) || (@Filter == DCTDecode)</description>
			<test>(((FilterNameValue == "RunLengthDecode") || (FilterNameValue == "DCTDecode")) == false || BitsPerComponentIntegerValue == 8)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage does not have value 8</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="13" testNumber="40516"/>
			<description>Entry BitsPerComponent with type Integer in XObjectImage shall have one of values: 1, 2, 4, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in XObjectImage has incorrect value %2 instead of 1, 2, 4, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40517"/>
			<description>Entry ColorSpace with type Array in XObjectImage shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in XObjectImage is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40518"/>
			<description>Entry ColorSpace in XObjectImage shall have one of types: Array, Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in XObjectImage is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="11" testNumber="40519"/>
			<description>Entry ColorSpace in XObjectImage is required, when fn:IsRequired(fn:Not(fn:Contains(@Filter , JPXDecode) || (@ImageMask == true)))</description>
			<test>(containsColorSpace == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false)</test>
			<error>
				<message>Entry ColorSpace in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40520"/>
			<description>Entry ColorSpace with type Array in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>ColorSpaceHasTypeArray != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsColorSpace == true)) != true)</test>
			<error>
				<message>Entry ColorSpace with type Array in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="6" testNumber="40521"/>
			<description>Entry ColorSpace with type Name in XObjectImage shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImage has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40522"/>
			<description>Entry ColorSpace with type Name in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>ColorSpaceHasTypeName != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsColorSpace == true)) != true)</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40523"/>
			<description>Entry Decode with type Array in XObjectImage shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in XObjectImage is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40524"/>
			<description>Entry Decode in XObjectImage shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in XObjectImage is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40525"/>
			<description>Entry DecodeParms with type Array in XObjectImage shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImage is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40526"/>
			<description>Entry DecodeParms with type Dictionary in XObjectImage shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectImage is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40527"/>
			<description>Entry DecodeParms in XObjectImage shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectImage is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40528"/>
			<description>Entry DecodeParms with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40529"/>
			<description>Entry F with type Dictionary in XObjectImage shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectImage is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40530"/>
			<description>Entry F in XObjectImage shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectImage is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40531"/>
			<description>Entry FDecodeParms with type Array in XObjectImage shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImage is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40532"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectImage shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectImage is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40533"/>
			<description>Entry FDecodeParms in XObjectImage shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectImage is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40534"/>
			<description>Entry FDecodeParms with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40535"/>
			<description>Entry FFilter with type Array in XObjectImage shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImage is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40536"/>
			<description>Entry FFilter in XObjectImage shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectImage is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40537"/>
			<description>Entry FFilter with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="6" testNumber="40538"/>
			<description>Entry FFilter with type Name in XObjectImage shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectImage has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40539"/>
			<description>Entry Filter with type Array in XObjectImage shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectImage is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40540"/>
			<description>Entry Filter in XObjectImage shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectImage is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40541"/>
			<description>Entry Filter with type Array in XObjectImage shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectImage does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="6" testNumber="40542"/>
			<description>Entry Filter with type Name in XObjectImage shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectImage has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40543"/>
			<description>Entry Height in XObjectImage shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="7" testNumber="40544"/>
			<description>Entry Height in XObjectImage is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40545"/>
			<description>Entry ID in XObjectImage shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in XObjectImage is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40546"/>
			<description>Entry ImageMask in XObjectImage shall have type Boolean</description>
			<test>containsImageMask == false || ImageMaskHasTypeBoolean == true</test>
			<error>
				<message>Entry ImageMask in XObjectImage is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40547"/>
			<description>Entry ImageMask with type Boolean in XObjectImage shall satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</description>
			<test>ImageMaskHasTypeBoolean != true || (((ImageMaskBooleanValue == true) &amp;&amp; (BitsPerComponentIntegerValue == 1) &amp;&amp; ((containsColorSpace == true)) != true &amp;&amp; ((containsMask == true)) != true) || (ImageMaskBooleanValue == false))</test>
			<error>
				<message>Entry ImageMask with type Boolean in XObjectImage does not satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40548"/>
			<description>Entry Intent in XObjectImage shall have type Name</description>
			<test>containsIntent == false || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40549"/>
			<description>Entry Interpolate in XObjectImage shall have type Boolean</description>
			<test>containsInterpolate == false || InterpolateHasTypeBoolean == true</test>
			<error>
				<message>Entry Interpolate in XObjectImage is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40550"/>
			<description>Entry Length in XObjectImage shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="7" testNumber="40551"/>
			<description>Entry Length in XObjectImage is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40552"/>
			<description>Entry Mask with type Array in XObjectImage shall be object ArrayOfIntegersGeneral</description>
			<test>MaskHasTypeArray != true || Mask_size == 1</test>
			<error>
				<message>Entry Mask with type Array in XObjectImage is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40553"/>
			<description>Entry Mask with type Stream in XObjectImage shall be object XObjectImageMask</description>
			<test>MaskHasTypeStream != true || Mask_size == 1</test>
			<error>
				<message>Entry Mask with type Stream in XObjectImage is not object XObjectImageMask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40554"/>
			<description>Entry Mask in XObjectImage shall have one of types: Array, Stream</description>
			<test>containsMask == false || MaskHasTypeArray == true || MaskHasTypeStream == true</test>
			<error>
				<message>Entry Mask in XObjectImage is not one of types: Array, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40555"/>
			<description>Entry Mask with type Array in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>MaskHasTypeArray != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsMask == true)) != true)</test>
			<error>
				<message>Entry Mask with type Array in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="10" testNumber="40556"/>
			<description>Entry Mask with type Stream in XObjectImage shall be indirect</description>
			<test>MaskHasTypeStream != true || isMaskIndirect == true</test>
			<error>
				<message>Entry Mask with type Stream in XObjectImage is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40557"/>
			<description>Entry Mask with type Stream in XObjectImage shall satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>MaskHasTypeStream != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsMask == true)) != true)</test>
			<error>
				<message>Entry Mask with type Stream in XObjectImage does not satisfy special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40558"/>
			<description>Entry Name in XObjectImage shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="11" testNumber="40559"/>
			<description>Entry Name in XObjectImage is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40560"/>
			<description>Entry OPI with type Dictionary in XObjectImage shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectImage is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40561"/>
			<description>Entry OPI in XObjectImage shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectImage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40562"/>
			<description>Entry StructParent in XObjectImage shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage" deferred="true">
			<id specification="ISO_32000_1_3" clause="11" testNumber="40563"/>
			<description>Entry StructParent in XObjectImage is required, when fn:IsRequired(fn:ImageIsStructContentItem())</description>
			<test>(containsStructParent == true || ((imageIsStructContentItem == true &amp;&amp; SubtypeNameValue == "Image")) == false)</test>
			<error>
				<message>Entry StructParent in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40564"/>
			<description>Entry Subtype in XObjectImage shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="7" testNumber="40565"/>
			<description>Entry Subtype in XObjectImage is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="6" testNumber="40566"/>
			<description>Entry Subtype with type Name in XObjectImage shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectImage has incorrect value %2 instead of Image</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40567"/>
			<description>Entry Type in XObjectImage shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="6" testNumber="40568"/>
			<description>Entry Type with type Name in XObjectImage shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectImage has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40569"/>
			<description>Entry Width in XObjectImage shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_3" clause="7" testNumber="40570"/>
			<description>Entry Width in XObjectImage is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="1" testNumber="40969"/>
			<description>XObjectImageMask shall not contain entries except Alternates, BitsPerComponent, Decode, DecodeParms, F, FDecodeParms, FFilter, Filter, Height, ID, ImageMask, Intent, Interpolate, Length, Name, OPI, StructParent, Subtype, Type, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').length == 0</test>
			<error>
				<message>XObjectImageMask contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Alternates' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Width').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40970"/>
			<description>Entry Alternates with type Array in XObjectImageMask shall be object ArrayOfImageAlternates</description>
			<test>AlternatesHasTypeArray != true || Alternates_size == 1</test>
			<error>
				<message>Entry Alternates with type Array in XObjectImageMask is not object ArrayOfImageAlternates</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40971"/>
			<description>Entry Alternates in XObjectImageMask shall have type Array</description>
			<test>containsAlternates == false || AlternatesHasTypeArray == true</test>
			<error>
				<message>Entry Alternates in XObjectImageMask is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40972"/>
			<description>Entry BitsPerComponent in XObjectImageMask shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="6" testNumber="40973"/>
			<description>Entry BitsPerComponent with type Integer in XObjectImageMask shall have value 1</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in XObjectImageMask has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40974"/>
			<description>Entry Decode with type Array in XObjectImageMask shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in XObjectImageMask is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40975"/>
			<description>Entry Decode in XObjectImageMask shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in XObjectImageMask is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="20" testNumber="40976"/>
			<description>Entry Decode with type Array in XObjectImageMask shall have one of values: [1,0], [0,1]</description>
			<test>(DecodeArraySize == 2 &amp;&amp; Decode0IntegerValue == 0 &amp;&amp; Decode1IntegerValue == 1) || (DecodeArraySize == 2 &amp;&amp; Decode0IntegerValue == 1 &amp;&amp; Decode1IntegerValue == 0)</test>
			<error>
				<message>Entry Decode with type Array in XObjectImageMask has incorrect value instead of [1,0], [0,1]</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40977"/>
			<description>Entry DecodeParms with type Array in XObjectImageMask shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImageMask is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40978"/>
			<description>Entry DecodeParms with type Dictionary in XObjectImageMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectImageMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40979"/>
			<description>Entry DecodeParms in XObjectImageMask shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectImageMask is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40980"/>
			<description>Entry DecodeParms with type Array in XObjectImageMask shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImageMask does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40981"/>
			<description>Entry F with type Dictionary in XObjectImageMask shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectImageMask is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40982"/>
			<description>Entry F in XObjectImageMask shall have one of types: String, Dictionary</description>
			<test>containsF == false || FHasTypeString == true || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in XObjectImageMask is not one of types: String, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40983"/>
			<description>Entry FDecodeParms with type Array in XObjectImageMask shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImageMask is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40984"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectImageMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectImageMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40985"/>
			<description>Entry FDecodeParms in XObjectImageMask shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectImageMask is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40986"/>
			<description>Entry FDecodeParms with type Array in XObjectImageMask shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImageMask does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40987"/>
			<description>Entry FFilter with type Array in XObjectImageMask shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImageMask is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40988"/>
			<description>Entry FFilter in XObjectImageMask shall have one of types: Array, Name</description>
			<test>containsFFilter == false || FFilterHasTypeArray == true || FFilterHasTypeName == true</test>
			<error>
				<message>Entry FFilter in XObjectImageMask is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40989"/>
			<description>Entry FFilter with type Array in XObjectImageMask shall satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImageMask does not satisfy special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="6" testNumber="40990"/>
			<description>Entry FFilter with type Name in XObjectImageMask shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectImageMask has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="17" testNumber="40991"/>
			<description>Entry Filter with type Array in XObjectImageMask shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectImageMask is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40992"/>
			<description>Entry Filter in XObjectImageMask shall have one of types: Array, Name</description>
			<test>containsFilter == false || FilterHasTypeArray == true || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in XObjectImageMask is not one of types: Array, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="9" testNumber="40993"/>
			<description>Entry Filter with type Array in XObjectImageMask shall satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectImageMask does not satisfy special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="6" testNumber="40994"/>
			<description>Entry Filter with type Name in XObjectImageMask shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectImageMask has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40995"/>
			<description>Entry Height in XObjectImageMask shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="7" testNumber="40996"/>
			<description>Entry Height in XObjectImageMask is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40997"/>
			<description>Entry ID in XObjectImageMask shall have type String</description>
			<test>containsID == false || entryIDHasTypeString == true</test>
			<error>
				<message>Entry ID in XObjectImageMask is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="40998"/>
			<description>Entry ImageMask in XObjectImageMask shall have type Boolean</description>
			<test>containsImageMask == false || ImageMaskHasTypeBoolean == true</test>
			<error>
				<message>Entry ImageMask in XObjectImageMask is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="7" testNumber="40999"/>
			<description>Entry ImageMask in XObjectImageMask is required</description>
			<test>containsImageMask == true</test>
			<error>
				<message>Entry ImageMask in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="9" testNumber="41000"/>
			<description>Entry ImageMask with type Boolean in XObjectImageMask shall satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</description>
			<test>ImageMaskHasTypeBoolean != true || (((ImageMaskBooleanValue == true) &amp;&amp; (BitsPerComponentIntegerValue == 1) &amp;&amp; ((containsColorSpace == true)) != true &amp;&amp; ((containsMask == true)) != true) || (ImageMaskBooleanValue == false))</test>
			<error>
				<message>Entry ImageMask with type Boolean in XObjectImageMask does not satisfy special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="41001"/>
			<description>Entry Intent in XObjectImageMask shall have type Name</description>
			<test>containsIntent == false || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in XObjectImageMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="41002"/>
			<description>Entry Interpolate in XObjectImageMask shall have type Boolean</description>
			<test>containsInterpolate == false || InterpolateHasTypeBoolean == true</test>
			<error>
				<message>Entry Interpolate in XObjectImageMask is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="41003"/>
			<description>Entry Length in XObjectImageMask shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="7" testNumber="41004"/>
			<description>Entry Length in XObjectImageMask is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="41005"/>
			<description>Entry Name in XObjectImageMask shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectImageMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="17" testNumber="41006"/>
			<description>Entry OPI with type Dictionary in XObjectImageMask shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectImageMask is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="41007"/>
			<description>Entry OPI in XObjectImageMask shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectImageMask is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="41008"/>
			<description>Entry StructParent in XObjectImageMask shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask" deferred="true">
			<id specification="ISO_32000_1_3" clause="11" testNumber="41009"/>
			<description>Entry StructParent in XObjectImageMask is required, when fn:IsRequired(fn:ImageIsStructContentItem())</description>
			<test>(containsStructParent == true || ((imageIsStructContentItem == true &amp;&amp; SubtypeNameValue == "Image")) == false)</test>
			<error>
				<message>Entry StructParent in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="41010"/>
			<description>Entry Subtype in XObjectImageMask shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectImageMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="7" testNumber="41011"/>
			<description>Entry Subtype in XObjectImageMask is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="6" testNumber="41012"/>
			<description>Entry Subtype with type Name in XObjectImageMask shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectImageMask has incorrect value %2 instead of Image</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="41013"/>
			<description>Entry Type in XObjectImageMask shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectImageMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="6" testNumber="41014"/>
			<description>Entry Type with type Name in XObjectImageMask shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectImageMask has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="8" testNumber="41015"/>
			<description>Entry Width in XObjectImageMask shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_3" clause="7" testNumber="41016"/>
			<description>Entry Width in XObjectImageMask is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="41600"/>
			<description>Entry with type Stream in XObjectMap shall be one of objects XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in XObjectMap is not one of objects XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="41601"/>
			<description>Entry in XObjectMap shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in XObjectMap is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="41602"/>
			<description>Entry with type Stream in XObjectMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in XObjectMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="41871"/>
			<description>Entry with type Array in _UniversalArray shall be object _UniversalArray</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in _UniversalArray is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="41872"/>
			<description>Entry with type Stream in _UniversalArray shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in _UniversalArray is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="41873"/>
			<description>Entry with type Dictionary in _UniversalArray shall be object _UniversalDictionary</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in _UniversalArray is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="41874"/>
			<description>Entry in _UniversalArray shall have one of types: Array, Stream, Boolean, Number, String, Name, Null, Dictionary</description>
			<test>HasTypeArray == true || HasTypeStream == true || HasTypeBoolean == true || HasTypeNumber == true || HasTypeString == true || HasTypeName == true || HasTypeNull == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in _UniversalArray is not one of types: Array, Stream, Boolean, Number, String, Name, Null, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="41875"/>
			<description>Entry with type Stream in _UniversalArray shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in _UniversalArray is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="41906"/>
			<description>Entry with type Array in _UniversalDictionary shall be object _UniversalArray</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in _UniversalDictionary is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="41907"/>
			<description>Entry with type Stream in _UniversalDictionary shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in _UniversalDictionary is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_3" clause="17" testNumber="41908"/>
			<description>Entry with type Dictionary in _UniversalDictionary shall be object _UniversalDictionary</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in _UniversalDictionary is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_3" clause="8" testNumber="41909"/>
			<description>Entry in _UniversalDictionary shall have one of types: Array, Stream, Boolean, Number, String, Name, Null, Dictionary</description>
			<test>HasTypeArray == true || HasTypeStream == true || HasTypeBoolean == true || HasTypeNumber == true || HasTypeString == true || HasTypeName == true || HasTypeNull == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in _UniversalDictionary is not one of types: Array, Stream, Boolean, Number, String, Name, Null, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_3" clause="10" testNumber="41910"/>
			<description>Entry with type Stream in _UniversalDictionary shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in _UniversalDictionary is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
	</rules>
	<variables/>
</profile>
