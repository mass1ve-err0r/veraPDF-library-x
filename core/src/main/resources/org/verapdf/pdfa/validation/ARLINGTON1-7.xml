<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<profile xmlns="http://www.verapdf.org/ValidationProfile" flavour="ARLINGTON1_7">
	<details creator="veraPDF Consortium" created="2022-05-23T21:45:28.872+03:00">
		<name>Arlington PDF 1.7 validation profile</name>
		<description>Validation rules against PDF 1.7 Specification</description>
	</details>
	<hash></hash>
	<rules>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22"/>
			<description>Entry with type Stream in XObjectMap shall be one of objects XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in XObjectMap is not one of objects XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="23"/>
			<description>Entry with type Stream in XObjectMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in XObjectMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24"/>
			<description>Entry in XObjectMap shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in XObjectMap is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="1" testNumber="88"/>
			<description>ActionImportData shall not contain entries except S, F, Next, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionImportData contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="89"/>
			<description>Entry S in ActionImportData is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionImportData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="6" testNumber="90"/>
			<description>Entry S with type Name in ActionImportData shall have value ImportData</description>
			<test>SHasTypeName != true || SNameValue == "ImportData"</test>
			<error>
				<message>Entry S with type Name in ActionImportData has incorrect value %2 instead of ImportData</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="91"/>
			<description>Entry S in ActionImportData shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionImportData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="92"/>
			<description>Entry F with type Dictionary in ActionImportData shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionImportData is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="93"/>
			<description>Entry F in ActionImportData is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in ActionImportData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="94"/>
			<description>Entry F in ActionImportData shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionImportData is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="95"/>
			<description>Entry Next with type Array in ActionImportData shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionImportData is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="96"/>
			<description>Entry Next with type Dictionary in ActionImportData shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionImportData is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="97"/>
			<description>Entry Next in ActionImportData shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionImportData is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="6" testNumber="98"/>
			<description>Entry Type with type Name in ActionImportData shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionImportData has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionImportData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="99"/>
			<description>Entry Type in ActionImportData shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionImportData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfoEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="137"/>
			<description>Entry in DocInfo shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %1 in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="2" testNumber="220"/>
			<description>ArrayOf4Functions shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf4Functions contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="17" testNumber="221"/>
			<description>Entry 3 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry3HasTypeDictionary != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="17" testNumber="222"/>
			<description>Entry 3 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="10" testNumber="223"/>
			<description>Entry 3 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in ArrayOf4Functions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="8" testNumber="224"/>
			<description>Entry 3 in ArrayOf4Functions shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 3 || entry3HasTypeDictionary == true || entry3HasTypeStream == true</test>
			<error>
				<message>Entry 3 in ArrayOf4Functions is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="17" testNumber="225"/>
			<description>Entry 0 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="17" testNumber="226"/>
			<description>Entry 0 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry0HasTypeStream != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="10" testNumber="227"/>
			<description>Entry 0 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry0HasTypeStream != true || isentry0Indirect == true</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOf4Functions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="8" testNumber="228"/>
			<description>Entry 0 in ArrayOf4Functions shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeStream == true</test>
			<error>
				<message>Entry 0 in ArrayOf4Functions is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="17" testNumber="229"/>
			<description>Entry 2 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry2HasTypeDictionary != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="17" testNumber="230"/>
			<description>Entry 2 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry2HasTypeStream != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="10" testNumber="231"/>
			<description>Entry 2 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry2HasTypeStream != true || isentry2Indirect == true</test>
			<error>
				<message>Entry 2 with type Stream in ArrayOf4Functions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="8" testNumber="232"/>
			<description>Entry 2 in ArrayOf4Functions shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 2 || entry2HasTypeDictionary == true || entry2HasTypeStream == true</test>
			<error>
				<message>Entry 2 in ArrayOf4Functions is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="17" testNumber="233"/>
			<description>Entry 1 with type Dictionary in ArrayOf4Functions shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in ArrayOf4Functions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="17" testNumber="234"/>
			<description>Entry 1 with type Stream in ArrayOf4Functions shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry1HasTypeStream != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Stream in ArrayOf4Functions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="10" testNumber="235"/>
			<description>Entry 1 with type Stream in ArrayOf4Functions shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in ArrayOf4Functions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf4Functions">
			<id specification="ISO_32000_1_7" clause="8" testNumber="236"/>
			<description>Entry 1 in ArrayOf4Functions shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in ArrayOf4Functions is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotStatesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="258"/>
			<description>Entry in ArrayOfAnnotStates shall have one of types: Null, Name</description>
			<test>HasTypeNull == true || HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfAnnotStates is not one of types: Null, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAPEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="264"/>
			<description>Entry with type Stream in NameNameTreeAP shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in NameNameTreeAP is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="1" testNumber="320"/>
			<description>SoftMaskLuminosity shall not contain entries except BC, G, S, Type, TR</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BC' &amp;&amp; elem != 'G' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'TR').length == 0</test>
			<error>
				<message>SoftMaskLuminosity contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BC' &amp;&amp; elem != 'G' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'TR').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="17" testNumber="321"/>
			<description>Entry BC with type Array in SoftMaskLuminosity shall be object ArrayOfNumbersGeneral</description>
			<test>BCHasTypeArray != true || BC_size == 1</test>
			<error>
				<message>Entry BC with type Array in SoftMaskLuminosity is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="8" testNumber="322"/>
			<description>Entry BC in SoftMaskLuminosity shall have type Array</description>
			<test>containsBC == false || BCHasTypeArray == true</test>
			<error>
				<message>Entry BC in SoftMaskLuminosity is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="17" testNumber="323"/>
			<description>Entry G with type Stream in SoftMaskLuminosity shall be object XObjectFormType1</description>
			<test>GHasTypeStream != true || G_size == 1</test>
			<error>
				<message>Entry G with type Stream in SoftMaskLuminosity is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="7" testNumber="324"/>
			<description>Entry G in SoftMaskLuminosity is required</description>
			<test>containsG == true</test>
			<error>
				<message>Entry G in SoftMaskLuminosity is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="10" testNumber="325"/>
			<description>Entry G with type Stream in SoftMaskLuminosity shall be indirect</description>
			<test>GHasTypeStream != true || isGIndirect == true</test>
			<error>
				<message>Entry G with type Stream in SoftMaskLuminosity is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="8" testNumber="326"/>
			<description>Entry G in SoftMaskLuminosity shall have type Stream</description>
			<test>containsG == false || GHasTypeStream == true</test>
			<error>
				<message>Entry G in SoftMaskLuminosity is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="9" testNumber="327"/>
			<description>Entry G with type Stream in SoftMaskLuminosity shall correspond special case: fn:Eval((G::Group::@S== Transparency) &amp;&amp; fn:IsPresent(G::Group::CS))</description>
			<test>GHasTypeStream != true || ((GGroupSNameValue == "Transparency") &amp;&amp; (containsGGroupCS == true))</test>
			<error>
				<message>Entry G with type Stream in SoftMaskLuminosity doesn't correspond special case: fn:Eval((G::Group::@S== Transparency) &amp;&amp; fn:IsPresent(G::Group::CS))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="7" testNumber="328"/>
			<description>Entry S in SoftMaskLuminosity is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in SoftMaskLuminosity is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="6" testNumber="329"/>
			<description>Entry S with type Name in SoftMaskLuminosity shall have value Luminosity</description>
			<test>SHasTypeName != true || SNameValue == "Luminosity"</test>
			<error>
				<message>Entry S with type Name in SoftMaskLuminosity has incorrect value %2 instead of Luminosity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="8" testNumber="330"/>
			<description>Entry S in SoftMaskLuminosity shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in SoftMaskLuminosity is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="6" testNumber="331"/>
			<description>Entry Type with type Name in SoftMaskLuminosity shall have value Mask</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Mask"</test>
			<error>
				<message>Entry Type with type Name in SoftMaskLuminosity has incorrect value %2 instead of Mask</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="8" testNumber="332"/>
			<description>Entry Type in SoftMaskLuminosity shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SoftMaskLuminosity is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="17" testNumber="333"/>
			<description>Entry TR with type Dictionary in SoftMaskLuminosity shall be one of objects FunctionType2, FunctionType3</description>
			<test>TRHasTypeDictionary != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Dictionary in SoftMaskLuminosity is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="17" testNumber="334"/>
			<description>Entry TR with type Stream in SoftMaskLuminosity shall be one of objects FunctionType0, FunctionType4</description>
			<test>TRHasTypeStream != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Stream in SoftMaskLuminosity is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="10" testNumber="335"/>
			<description>Entry TR with type Stream in SoftMaskLuminosity shall be indirect</description>
			<test>TRHasTypeStream != true || isTRIndirect == true</test>
			<error>
				<message>Entry TR with type Stream in SoftMaskLuminosity is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="6" testNumber="336"/>
			<description>Entry TR with type Name in SoftMaskLuminosity shall have value Identity</description>
			<test>TRHasTypeName != true || TRNameValue == "Identity"</test>
			<error>
				<message>Entry TR with type Name in SoftMaskLuminosity has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TRNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskLuminosity">
			<id specification="ISO_32000_1_7" clause="8" testNumber="337"/>
			<description>Entry TR in SoftMaskLuminosity shall have one of types: Name, Dictionary, Stream</description>
			<test>containsTR == false || TRHasTypeName == true || TRHasTypeDictionary == true || TRHasTypeStream == true</test>
			<error>
				<message>Entry TR in SoftMaskLuminosity is not one of types: Name, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPageElement">
			<id specification="ISO_32000_1_7" clause="1" testNumber="362"/>
			<description>OptContentPageElement shall not contain entries except Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype').length == 0</test>
			<error>
				<message>OptContentPageElement contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPageElement">
			<id specification="ISO_32000_1_7" clause="6" testNumber="363"/>
			<description>Entry Subtype with type Name in OptContentPageElement shall have one of values: FG, BG, L, HF</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "HF" || SubtypeNameValue == "FG" || SubtypeNameValue == "BG" || SubtypeNameValue == "L"</test>
			<error>
				<message>Entry Subtype with type Name in OptContentPageElement has incorrect value %2 instead of FG, BG, L, HF</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPageElement">
			<id specification="ISO_32000_1_7" clause="8" testNumber="364"/>
			<description>Entry Subtype in OptContentPageElement shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in OptContentPageElement is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="1" testNumber="390"/>
			<description>MediaPlayParametersBE shall not contain entries except V, A, D, C, RC, F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'A' &amp;&amp; elem != 'D' &amp;&amp; elem != 'C' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'F').length == 0</test>
			<error>
				<message>MediaPlayParametersBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'A' &amp;&amp; elem != 'D' &amp;&amp; elem != 'C' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="14" testNumber="391"/>
			<description>Entry V with type Integer in MediaPlayParametersBE shall correspond possible value predicate: fn:Eval((@V &gt;= 0) &amp;&amp; (@V &lt;= 100))</description>
			<test>VHasTypeInteger != true || (VIntegerValue &gt;= 0) &amp;&amp; (VIntegerValue &lt;= 100)</test>
			<error>
				<message>Entry V with type Integer in MediaPlayParametersBE doesn't correspond possible value predicate: fn:Eval((@V &gt;= 0) &amp;&amp; (@V &lt;= 100))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="392"/>
			<description>Entry V in MediaPlayParametersBE shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in MediaPlayParametersBE is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="393"/>
			<description>Entry A in MediaPlayParametersBE shall have type Boolean</description>
			<test>containsA == false || AHasTypeBoolean == true</test>
			<error>
				<message>Entry A in MediaPlayParametersBE is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="17" testNumber="394"/>
			<description>Entry D with type Dictionary in MediaPlayParametersBE shall be object MediaDuration</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in MediaPlayParametersBE is not object MediaDuration</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="395"/>
			<description>Entry D in MediaPlayParametersBE shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in MediaPlayParametersBE is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="396"/>
			<description>Entry C in MediaPlayParametersBE shall have type Boolean</description>
			<test>containsC == false || CHasTypeBoolean == true</test>
			<error>
				<message>Entry C in MediaPlayParametersBE is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="14" testNumber="397"/>
			<description>Entry RC with type Number in MediaPlayParametersBE shall correspond possible value predicate: fn:Eval(@RC &gt;= 0.0)</description>
			<test>RCHasTypeNumber != true || RCNumberValue &gt;= 0.0</test>
			<error>
				<message>Entry RC with type Number in MediaPlayParametersBE doesn't correspond possible value predicate: fn:Eval(@RC &gt;= 0.0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="398"/>
			<description>Entry RC in MediaPlayParametersBE shall have type Number</description>
			<test>containsRC == false || RCHasTypeNumber == true</test>
			<error>
				<message>Entry RC in MediaPlayParametersBE is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="6" testNumber="399"/>
			<description>Entry F with type Integer in MediaPlayParametersBE shall have one of values: 0, 1, 2, 3, 4, 5</description>
			<test>FHasTypeInteger != true || FIntegerValue == 0 || FIntegerValue == 1 || FIntegerValue == 2 || FIntegerValue == 3 || FIntegerValue == 4 || FIntegerValue == 5</test>
			<error>
				<message>Entry F with type Integer in MediaPlayParametersBE has incorrect value %2 instead of 0, 1, 2, 3, 4, 5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="400"/>
			<description>Entry F in MediaPlayParametersBE shall have type Integer</description>
			<test>containsF == false || FHasTypeInteger == true</test>
			<error>
				<message>Entry F in MediaPlayParametersBE is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="1" testNumber="412"/>
			<description>RichMediaPosition shall not contain entries except HOffset, VAlign, VOffset, HAlign, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'HOffset' &amp;&amp; elem != 'VAlign' &amp;&amp; elem != 'VOffset' &amp;&amp; elem != 'HAlign' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>RichMediaPosition contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'HOffset' &amp;&amp; elem != 'VAlign' &amp;&amp; elem != 'VOffset' &amp;&amp; elem != 'HAlign' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="413"/>
			<description>Entry HOffset in RichMediaPosition shall have type Number</description>
			<test>containsHOffset == false || HOffsetHasTypeNumber == true</test>
			<error>
				<message>Entry HOffset in RichMediaPosition is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="6" testNumber="414"/>
			<description>Entry VAlign with type Name in RichMediaPosition shall have one of values: Center, Far, Near</description>
			<test>VAlignHasTypeName != true || VAlignNameValue == "Near" || VAlignNameValue == "Center" || VAlignNameValue == "Far"</test>
			<error>
				<message>Entry VAlign with type Name in RichMediaPosition has incorrect value %2 instead of Center, Far, Near</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="415"/>
			<description>Entry VAlign in RichMediaPosition shall have type Name</description>
			<test>containsVAlign == false || VAlignHasTypeName == true</test>
			<error>
				<message>Entry VAlign in RichMediaPosition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="416"/>
			<description>Entry VOffset in RichMediaPosition shall have type Number</description>
			<test>containsVOffset == false || VOffsetHasTypeNumber == true</test>
			<error>
				<message>Entry VOffset in RichMediaPosition is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="6" testNumber="417"/>
			<description>Entry HAlign with type Name in RichMediaPosition shall have one of values: Center, Far, Near</description>
			<test>HAlignHasTypeName != true || HAlignNameValue == "Near" || HAlignNameValue == "Center" || HAlignNameValue == "Far"</test>
			<error>
				<message>Entry HAlign with type Name in RichMediaPosition has incorrect value %2 instead of Center, Far, Near</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="418"/>
			<description>Entry HAlign in RichMediaPosition shall have type Name</description>
			<test>containsHAlign == false || HAlignHasTypeName == true</test>
			<error>
				<message>Entry HAlign in RichMediaPosition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="6" testNumber="419"/>
			<description>Entry Type with type Name in RichMediaPosition shall have value RichMediaPosition</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaPosition"</test>
			<error>
				<message>Entry Type with type Name in RichMediaPosition has incorrect value %2 instead of RichMediaPosition</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPosition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="420"/>
			<description>Entry Type in RichMediaPosition shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaPosition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="1" testNumber="625"/>
			<description>AnnotSound shall not contain entries except M, Popup, RT, T, AP, OC, Rect, Subtype, CreationDate, Contents, F, StructParent, IRT, Name, Type, Border, NM, RC, AS, IT, C, Subj, CA, ExData, P, Sound</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'T' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Sound').length == 0</test>
			<error>
				<message>AnnotSound contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'T' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Sound').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="626"/>
			<description>Entry M in AnnotSound shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotSound is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="17" testNumber="627"/>
			<description>Entry Popup with type Dictionary in AnnotSound shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSound is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="10" testNumber="628"/>
			<description>Entry Popup with type Dictionary in AnnotSound shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="629"/>
			<description>Entry Popup in AnnotSound shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="6" testNumber="630"/>
			<description>Entry RT with type Name in AnnotSound shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotSound has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="631"/>
			<description>Entry RT in AnnotSound shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="632"/>
			<description>Entry T in AnnotSound shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotSound is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="17" testNumber="633"/>
			<description>Entry AP with type Dictionary in AnnotSound shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotSound is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="11" testNumber="634"/>
			<description>Entry AP in AnnotSound is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="635"/>
			<description>Entry AP in AnnotSound shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="17" testNumber="636"/>
			<description>Entry OC with type Dictionary in AnnotSound shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotSound is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="637"/>
			<description>Entry OC in AnnotSound shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="7" testNumber="638"/>
			<description>Entry Rect in AnnotSound is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="639"/>
			<description>Entry Rect in AnnotSound shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotSound is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="7" testNumber="640"/>
			<description>Entry Subtype in AnnotSound is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="6" testNumber="641"/>
			<description>Entry Subtype with type Name in AnnotSound shall have value Sound</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Sound"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotSound has incorrect value %2 instead of Sound</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="642"/>
			<description>Entry Subtype in AnnotSound shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="643"/>
			<description>Entry CreationDate in AnnotSound shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotSound is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="644"/>
			<description>Entry Contents in AnnotSound shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotSound is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="645"/>
			<description>Entry F in AnnotSound shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotSound is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="9" testNumber="646"/>
			<description>Entry F with type Bitmask in AnnotSound shall correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotSound doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="647"/>
			<description>Entry StructParent in AnnotSound shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotSound is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="17" testNumber="648"/>
			<description>Entry IRT with type Dictionary in AnnotSound shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotSound is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="11" testNumber="649"/>
			<description>Entry IRT in AnnotSound is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="650"/>
			<description>Entry IRT in AnnotSound shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="651"/>
			<description>Entry Name in AnnotSound shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="6" testNumber="652"/>
			<description>Entry Type with type Name in AnnotSound shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotSound has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="653"/>
			<description>Entry Type in AnnotSound shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="17" testNumber="654"/>
			<description>Entry Border with type Array in AnnotSound shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotSound is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="655"/>
			<description>Entry Border in AnnotSound shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotSound is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="656"/>
			<description>Entry NM in AnnotSound shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotSound is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="17" testNumber="657"/>
			<description>Entry RC with type Stream in AnnotSound shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotSound is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="10" testNumber="658"/>
			<description>Entry RC with type Stream in AnnotSound shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="659"/>
			<description>Entry RC in AnnotSound shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotSound is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="11" testNumber="660"/>
			<description>Entry AS in AnnotSound is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="661"/>
			<description>Entry AS in AnnotSound shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="662"/>
			<description>Entry IT in AnnotSound shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="17" testNumber="663"/>
			<description>Entry C with type Array in AnnotSound shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotSound is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="664"/>
			<description>Entry C in AnnotSound shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotSound is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="665"/>
			<description>Entry Subj in AnnotSound shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotSound is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="14" testNumber="666"/>
			<description>Entry CA with type Number in AnnotSound shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotSound doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="667"/>
			<description>Entry CA in AnnotSound shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotSound is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="17" testNumber="668"/>
			<description>Entry ExData with type Dictionary in AnnotSound shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotSound is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="669"/>
			<description>Entry ExData in AnnotSound shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="17" testNumber="670"/>
			<description>Entry P with type Dictionary in AnnotSound shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSound is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="10" testNumber="671"/>
			<description>Entry P with type Dictionary in AnnotSound shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="672"/>
			<description>Entry P in AnnotSound shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotSound is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="17" testNumber="673"/>
			<description>Entry Sound with type Stream in AnnotSound shall be object SoundObject</description>
			<test>SoundHasTypeStream != true || Sound_size == 1</test>
			<error>
				<message>Entry Sound with type Stream in AnnotSound is not object SoundObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="7" testNumber="674"/>
			<description>Entry Sound in AnnotSound is required</description>
			<test>containsSound == true</test>
			<error>
				<message>Entry Sound in AnnotSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="10" testNumber="675"/>
			<description>Entry Sound with type Stream in AnnotSound shall be indirect</description>
			<test>SoundHasTypeStream != true || isSoundIndirect == true</test>
			<error>
				<message>Entry Sound with type Stream in AnnotSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="676"/>
			<description>Entry Sound in AnnotSound shall have type Stream</description>
			<test>containsSound == false || SoundHasTypeStream == true</test>
			<error>
				<message>Entry Sound in AnnotSound is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="746"/>
			<description>Entry with type Dictionary in ArrayOfFonts shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfFonts is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="747"/>
			<description>Entry in ArrayOfFonts shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfFonts is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalogNumberTreePageLabelsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="758"/>
			<description>Entry with type Dictionary in CatalogNumberTreePageLabels shall be object PageLabel</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in CatalogNumberTreePageLabels is not object PageLabel</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalogNumberTreePageLabelsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="759"/>
			<description>Entry in CatalogNumberTreePageLabels shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in CatalogNumberTreePageLabels is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMH">
			<id specification="ISO_32000_1_7" clause="1" testNumber="768"/>
			<description>RenditionMH shall not contain entries except C</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C').length == 0</test>
			<error>
				<message>RenditionMH contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMH">
			<id specification="ISO_32000_1_7" clause="17" testNumber="769"/>
			<description>Entry C with type Dictionary in RenditionMH shall be object MediaCriteria</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in RenditionMH is not object MediaCriteria</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMH">
			<id specification="ISO_32000_1_7" clause="8" testNumber="770"/>
			<description>Entry C in RenditionMH shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in RenditionMH is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="4" testNumber="807"/>
			<description>ArrayOf_3or4CalloutLineNumbers shall contain at least 4 elements</description>
			<test>size &gt;= 4</test>
			<error>
				<message>ArrayOf_3or4CalloutLineNumbers contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="808"/>
			<description>Entry 3 in ArrayOf_3or4CalloutLineNumbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_3or4CalloutLineNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="809"/>
			<description>Entry 1 in ArrayOf_3or4CalloutLineNumbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3or4CalloutLineNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="810"/>
			<description>Entry 5 in ArrayOf_3or4CalloutLineNumbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_3or4CalloutLineNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="811"/>
			<description>Entry 0 in ArrayOf_3or4CalloutLineNumbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3or4CalloutLineNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="812"/>
			<description>Entry 2 in ArrayOf_3or4CalloutLineNumbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3or4CalloutLineNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3or4CalloutLineNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="813"/>
			<description>Entry 4 in ArrayOf_3or4CalloutLineNumbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_3or4CalloutLineNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="1" testNumber="853"/>
			<description>MediaClipSection shall not contain entries except N, Type, S, D, Alt, BE, MH</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Alt' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'MH').length == 0</test>
			<error>
				<message>MediaClipSection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Alt' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'MH').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="854"/>
			<description>Entry N in MediaClipSection shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in MediaClipSection is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="6" testNumber="855"/>
			<description>Entry Type with type Name in MediaClipSection shall have value MediaClip</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaClip"</test>
			<error>
				<message>Entry Type with type Name in MediaClipSection has incorrect value %2 instead of MediaClip</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="856"/>
			<description>Entry Type in MediaClipSection shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaClipSection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="7" testNumber="857"/>
			<description>Entry S in MediaClipSection is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaClipSection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="6" testNumber="858"/>
			<description>Entry S with type Name in MediaClipSection shall have value MCS</description>
			<test>SHasTypeName != true || SNameValue == "MCS"</test>
			<error>
				<message>Entry S with type Name in MediaClipSection has incorrect value %2 instead of MCS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="859"/>
			<description>Entry S in MediaClipSection shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaClipSection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="860"/>
			<description>Entry D with type Dictionary in MediaClipSection shall be one of objects MediaClipSection, MediaClipData</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in MediaClipSection is not one of objects MediaClipSection, MediaClipData</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="7" testNumber="861"/>
			<description>Entry D in MediaClipSection is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in MediaClipSection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="862"/>
			<description>Entry D in MediaClipSection shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in MediaClipSection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="863"/>
			<description>Entry Alt with type Array in MediaClipSection shall be object ArrayOfStringsText</description>
			<test>AltHasTypeArray != true || Alt_size == 1</test>
			<error>
				<message>Entry Alt with type Array in MediaClipSection is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="864"/>
			<description>Entry Alt in MediaClipSection shall have type Array</description>
			<test>containsAlt == false || AltHasTypeArray == true</test>
			<error>
				<message>Entry Alt in MediaClipSection is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="865"/>
			<description>Entry BE with type Dictionary in MediaClipSection shall be object MediaClipSectionMHBE</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in MediaClipSection is not object MediaClipSectionMHBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="866"/>
			<description>Entry BE in MediaClipSection shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaClipSection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="867"/>
			<description>Entry MH with type Dictionary in MediaClipSection shall be object MediaClipSectionMHBE</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in MediaClipSection is not object MediaClipSectionMHBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="868"/>
			<description>Entry MH in MediaClipSection shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaClipSection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="1" testNumber="921"/>
			<description>RenditionMedia shall not contain entries except BE, N, P, C, S, Type, MH, SP</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'C' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'SP').length == 0</test>
			<error>
				<message>RenditionMedia contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'C' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'SP').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="17" testNumber="922"/>
			<description>Entry BE with type Dictionary in RenditionMedia shall be object RenditionBE</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in RenditionMedia is not object RenditionBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="923"/>
			<description>Entry BE in RenditionMedia shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in RenditionMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="924"/>
			<description>Entry N in RenditionMedia shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in RenditionMedia is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="17" testNumber="925"/>
			<description>Entry P with type Dictionary in RenditionMedia shall be object MediaPlayParameters</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in RenditionMedia is not object MediaPlayParameters</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="11" testNumber="926"/>
			<description>Entry P in RenditionMedia is required, when fn:IsRequired(fn:Not(fn:IsPresent(C)))</description>
			<test>(containsP == true || (((containsC == true)) != true) == false)</test>
			<error>
				<message>Entry P in RenditionMedia is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="927"/>
			<description>Entry P in RenditionMedia shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in RenditionMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="17" testNumber="928"/>
			<description>Entry C with type Dictionary in RenditionMedia shall be one of objects MediaClipSection, MediaClipData</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in RenditionMedia is not one of objects MediaClipSection, MediaClipData</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="929"/>
			<description>Entry C in RenditionMedia shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in RenditionMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="7" testNumber="930"/>
			<description>Entry S in RenditionMedia is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in RenditionMedia is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="6" testNumber="931"/>
			<description>Entry S with type Name in RenditionMedia shall have value MR</description>
			<test>SHasTypeName != true || SNameValue == "MR"</test>
			<error>
				<message>Entry S with type Name in RenditionMedia has incorrect value %2 instead of MR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="932"/>
			<description>Entry S in RenditionMedia shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in RenditionMedia is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="6" testNumber="933"/>
			<description>Entry Type with type Name in RenditionMedia shall have value Rendition</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Rendition"</test>
			<error>
				<message>Entry Type with type Name in RenditionMedia has incorrect value %2 instead of Rendition</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="934"/>
			<description>Entry Type in RenditionMedia shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RenditionMedia is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="17" testNumber="935"/>
			<description>Entry MH with type Dictionary in RenditionMedia shall be object RenditionMH</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in RenditionMedia is not object RenditionMH</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="936"/>
			<description>Entry MH in RenditionMedia shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in RenditionMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="17" testNumber="937"/>
			<description>Entry SP with type Dictionary in RenditionMedia shall be object MediaScreenParameters</description>
			<test>SPHasTypeDictionary != true || SP_size == 1</test>
			<error>
				<message>Entry SP with type Dictionary in RenditionMedia is not object MediaScreenParameters</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="938"/>
			<description>Entry SP in RenditionMedia shall have type Dictionary</description>
			<test>containsSP == false || SPHasTypeDictionary == true</test>
			<error>
				<message>Entry SP in RenditionMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="977"/>
			<description>SignatureBuildDataDict shall not contain entries except PreRelease, V, NonEFontNoWarn, OS, Date, TrustedMode, Name, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PreRelease' &amp;&amp; elem != 'V' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'Date' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'R').length == 0</test>
			<error>
				<message>SignatureBuildDataDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PreRelease' &amp;&amp; elem != 'V' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'Date' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'R').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="978"/>
			<description>Entry PreRelease in SignatureBuildDataDict shall have type Boolean</description>
			<test>containsPreRelease == false || PreReleaseHasTypeBoolean == true</test>
			<error>
				<message>Entry PreRelease in SignatureBuildDataDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="979"/>
			<description>Entry V in SignatureBuildDataDict shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in SignatureBuildDataDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="980"/>
			<description>Entry NonEFontNoWarn in SignatureBuildDataDict shall have type Boolean</description>
			<test>containsNonEFontNoWarn == false || NonEFontNoWarnHasTypeBoolean == true</test>
			<error>
				<message>Entry NonEFontNoWarn in SignatureBuildDataDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="981"/>
			<description>Entry OS with type Array in SignatureBuildDataDict shall be object ArrayOfStringsText</description>
			<test>OSHasTypeArray != true || OS_size == 1</test>
			<error>
				<message>Entry OS with type Array in SignatureBuildDataDict is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="982"/>
			<description>Entry OS in SignatureBuildDataDict shall have type Array</description>
			<test>containsOS == false || OSHasTypeArray == true</test>
			<error>
				<message>Entry OS in SignatureBuildDataDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="983"/>
			<description>Entry Date in SignatureBuildDataDict shall have type StringText</description>
			<test>containsDate == false || DateHasTypeStringText == true</test>
			<error>
				<message>Entry Date in SignatureBuildDataDict is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="984"/>
			<description>Entry TrustedMode in SignatureBuildDataDict shall have type Boolean</description>
			<test>containsTrustedMode == false || TrustedModeHasTypeBoolean == true</test>
			<error>
				<message>Entry TrustedMode in SignatureBuildDataDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="985"/>
			<description>Entry Name in SignatureBuildDataDict shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in SignatureBuildDataDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="986"/>
			<description>Entry R in SignatureBuildDataDict shall have type Number</description>
			<test>containsR == false || RHasTypeNumber == true</test>
			<error>
				<message>Entry R in SignatureBuildDataDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaDeactivation">
			<id specification="ISO_32000_1_7" clause="1" testNumber="998"/>
			<description>RichMediaDeactivation shall not contain entries except Condition, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Condition' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>RichMediaDeactivation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Condition' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaDeactivation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="999"/>
			<description>Entry Condition with type Name in RichMediaDeactivation shall have one of values: PC, PI, XD</description>
			<test>ConditionHasTypeName != true || ConditionNameValue == "XD" || ConditionNameValue == "PC" || ConditionNameValue == "PI"</test>
			<error>
				<message>Entry Condition with type Name in RichMediaDeactivation has incorrect value %2 instead of PC, PI, XD</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ConditionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaDeactivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1000"/>
			<description>Entry Condition in RichMediaDeactivation shall have type Name</description>
			<test>containsCondition == false || ConditionHasTypeName == true</test>
			<error>
				<message>Entry Condition in RichMediaDeactivation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaDeactivation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1001"/>
			<description>Entry Type with type Name in RichMediaDeactivation shall have value RichMediaDeactivation</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaDeactivation"</test>
			<error>
				<message>Entry Type with type Name in RichMediaDeactivation has incorrect value %2 instead of RichMediaDeactivation</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaDeactivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1002"/>
			<description>Entry Type in RichMediaDeactivation shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaDeactivation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNameTreeIDTree">
			<id specification="ISO_32000_1_7" clause="18" testNumber="1012"/>
			<description>Entry * in StructTreeRootNameTreeIDTree shall be object StructTreeRootNameTreeIDTreeEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in StructTreeRootNameTreeIDTree is not object StructTreeRootNameTreeIDTreeEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="1" testNumber="1066"/>
			<description>SourceInformation shall not contain entries except AU, E, TS, S, C</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AU' &amp;&amp; elem != 'E' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'S' &amp;&amp; elem != 'C').length == 0</test>
			<error>
				<message>SourceInformation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AU' &amp;&amp; elem != 'E' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'S' &amp;&amp; elem != 'C').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1067"/>
			<description>Entry AU with type Dictionary in SourceInformation shall be object URLAlias</description>
			<test>AUHasTypeDictionary != true || AU_size == 1</test>
			<error>
				<message>Entry AU with type Dictionary in SourceInformation is not object URLAlias</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1068"/>
			<description>Entry AU in SourceInformation is required</description>
			<test>containsAU == true</test>
			<error>
				<message>Entry AU in SourceInformation is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1069"/>
			<description>Entry AU in SourceInformation shall have one of types: Dictionary, StringAscii</description>
			<test>containsAU == false || AUHasTypeDictionary == true || AUHasTypeStringAscii == true</test>
			<error>
				<message>Entry AU in SourceInformation is not one of types: Dictionary, StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1070"/>
			<description>Entry E in SourceInformation shall have type Date</description>
			<test>containsE == false || EHasTypeDate == true</test>
			<error>
				<message>Entry E in SourceInformation is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1071"/>
			<description>Entry TS in SourceInformation shall have type Date</description>
			<test>containsTS == false || TSHasTypeDate == true</test>
			<error>
				<message>Entry TS in SourceInformation is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1072"/>
			<description>Entry S with type Integer in SourceInformation shall have one of values: 0, 1, 2</description>
			<test>SHasTypeInteger != true || SIntegerValue == 0 || SIntegerValue == 1 || SIntegerValue == 2</test>
			<error>
				<message>Entry S with type Integer in SourceInformation has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1073"/>
			<description>Entry S in SourceInformation shall have type Integer</description>
			<test>containsS == false || SHasTypeInteger == true</test>
			<error>
				<message>Entry S in SourceInformation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="1074"/>
			<description>Entry S with type Integer in SourceInformation shall correspond special case: fn:Eval(parent::@S== SPS)</description>
			<test>SHasTypeInteger != true || (parentSNameValue == "SPS")</test>
			<error>
				<message>Entry S with type Integer in SourceInformation doesn't correspond special case: fn:Eval(parent::@S== SPS)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1075"/>
			<description>Entry C with type Dictionary in SourceInformation shall be object WebCaptureCommand</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in SourceInformation is not object WebCaptureCommand</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="10" testNumber="1076"/>
			<description>Entry C with type Dictionary in SourceInformation shall be indirect</description>
			<test>CHasTypeDictionary != true || isCIndirect == true</test>
			<error>
				<message>Entry C with type Dictionary in SourceInformation is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1077"/>
			<description>Entry C in SourceInformation shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in SourceInformation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASourceInformation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="1078"/>
			<description>Entry C with type Dictionary in SourceInformation shall correspond special case: fn:Eval(parent::@S== SPS)</description>
			<test>CHasTypeDictionary != true || (parentSNameValue == "SPS")</test>
			<error>
				<message>Entry C with type Dictionary in SourceInformation doesn't correspond special case: fn:Eval(parent::@S== SPS)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="1" testNumber="1092"/>
			<description>RequirementsHandler shall not contain entries except Script, Type, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Script' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>RequirementsHandler contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Script' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1093"/>
			<description>Entry Script in RequirementsHandler shall have type StringText</description>
			<test>containsScript == false || ScriptHasTypeStringText == true</test>
			<error>
				<message>Entry Script in RequirementsHandler is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1094"/>
			<description>Entry Type with type Name in RequirementsHandler shall have value ReqHandler</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ReqHandler"</test>
			<error>
				<message>Entry Type with type Name in RequirementsHandler has incorrect value %2 instead of ReqHandler</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1095"/>
			<description>Entry Type in RequirementsHandler shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RequirementsHandler is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1096"/>
			<description>Entry S in RequirementsHandler is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in RequirementsHandler is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1097"/>
			<description>Entry S with type Name in RequirementsHandler shall have one of values: NoOp, JS</description>
			<test>SHasTypeName != true || SNameValue == "JS" || SNameValue == "NoOp"</test>
			<error>
				<message>Entry S with type Name in RequirementsHandler has incorrect value %2 instead of NoOp, JS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsHandler">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1098"/>
			<description>Entry S in RequirementsHandler shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in RequirementsHandler is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigatorNameTreeStrings">
			<id specification="ISO_32000_1_7" clause="18" testNumber="1106"/>
			<description>Entry * in NavigatorNameTreeStrings shall be object NavigatorNameTreeStringsEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NavigatorNameTreeStrings is not object NavigatorNameTreeStringsEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamEFArrayEntry">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1123"/>
			<description>Entry with type Name in URTransformParamEFArray shall have one of values: Delete, Import, Create, Modify</description>
			<test>HasTypeName != true || NameValue == "Create" || NameValue == "Delete" || NameValue == "Modify" || NameValue == "Import"</test>
			<error>
				<message>Entry %1 with type Name in URTransformParamEFArray has incorrect value %2 instead of Delete, Import, Create, Modify</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamEFArrayEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1124"/>
			<description>Entry in URTransformParamEFArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in URTransformParamEFArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Numbers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="1127"/>
			<description>ArrayOf_3Numbers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_3Numbers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1128"/>
			<description>Entry 2 in ArrayOf_3Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1129"/>
			<description>Entry 0 in ArrayOf_3Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1130"/>
			<description>Entry 1 in ArrayOf_3Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemKidsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1143"/>
			<description>Entry with type Dictionary in ArrayOfStructElemKids shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfStructElemKids is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemKidsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1144"/>
			<description>Entry in ArrayOfStructElemKids shall have one of types: Integer, Dictionary</description>
			<test>HasTypeInteger == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfStructElemKids is not one of types: Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="1" testNumber="1147"/>
			<description>ExDataMarkupGeo shall not contain entries except Type, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>ExDataMarkupGeo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1148"/>
			<description>Entry Type in ExDataMarkupGeo is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ExDataMarkupGeo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1149"/>
			<description>Entry Type with type Name in ExDataMarkupGeo shall have value ExData</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ExData"</test>
			<error>
				<message>Entry Type with type Name in ExDataMarkupGeo has incorrect value %2 instead of ExData</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1150"/>
			<description>Entry Type in ExDataMarkupGeo shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ExDataMarkupGeo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1151"/>
			<description>Entry Subtype in ExDataMarkupGeo is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in ExDataMarkupGeo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1152"/>
			<description>Entry Subtype with type Name in ExDataMarkupGeo shall have value MarkupGeo</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "MarkupGeo"</test>
			<error>
				<message>Entry Subtype with type Name in ExDataMarkupGeo has incorrect value %2 instead of MarkupGeo</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataMarkupGeo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1153"/>
			<description>Entry Subtype in ExDataMarkupGeo shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in ExDataMarkupGeo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="1" testNumber="1200"/>
			<description>Annot3D shall not contain entries except Rect, Type, 3DI, F, 3DB, 3DD, P, AS, 3DU, AP, M, 3DA, C, StructParent, NM, OC, Contents, Subtype, 3DV, Border</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Rect' &amp;&amp; elem != 'Type' &amp;&amp; elem != '3DI' &amp;&amp; elem != 'F' &amp;&amp; elem != '3DB' &amp;&amp; elem != '3DD' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AS' &amp;&amp; elem != '3DU' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'M' &amp;&amp; elem != '3DA' &amp;&amp; elem != 'C' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != '3DV' &amp;&amp; elem != 'Border').length == 0</test>
			<error>
				<message>Annot3D contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Rect' &amp;&amp; elem != 'Type' &amp;&amp; elem != '3DI' &amp;&amp; elem != 'F' &amp;&amp; elem != '3DB' &amp;&amp; elem != '3DD' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AS' &amp;&amp; elem != '3DU' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'M' &amp;&amp; elem != '3DA' &amp;&amp; elem != 'C' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != '3DV' &amp;&amp; elem != 'Border').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1201"/>
			<description>Entry Rect in Annot3D is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in Annot3D is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1202"/>
			<description>Entry Rect in Annot3D shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in Annot3D is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1203"/>
			<description>Entry Type with type Name in Annot3D shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in Annot3D has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1204"/>
			<description>Entry Type in Annot3D shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Annot3D is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1205"/>
			<description>Entry 3DI in Annot3D shall have type Boolean</description>
			<test>contains3DI == false || entry3DIHasTypeBoolean == true</test>
			<error>
				<message>Entry 3DI in Annot3D is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1206"/>
			<description>Entry F in Annot3D shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in Annot3D is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="9" testNumber="1207"/>
			<description>Entry F with type Bitmask in Annot3D shall correspond special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:BitsClear(11 , 32))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in Annot3D doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:BitsClear(11 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1208"/>
			<description>Entry 3DB in Annot3D shall have type Rectangle</description>
			<test>contains3DB == false || entry3DBHasTypeRectangle == true</test>
			<error>
				<message>Entry 3DB in Annot3D is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1209"/>
			<description>Entry 3DD with type Dictionary in Annot3D shall be object 3DReference</description>
			<test>entry3DDHasTypeDictionary != true || entry3DD_size == 1</test>
			<error>
				<message>Entry 3DD with type Dictionary in Annot3D is not object 3DReference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1210"/>
			<description>Entry 3DD with type Stream in Annot3D shall be object 3DStream</description>
			<test>entry3DDHasTypeStream != true || entry3DD_size == 1</test>
			<error>
				<message>Entry 3DD with type Stream in Annot3D is not object 3DStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1211"/>
			<description>Entry 3DD in Annot3D is required</description>
			<test>contains3DD == true</test>
			<error>
				<message>Entry 3DD in Annot3D is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="10" testNumber="1212"/>
			<description>Entry 3DD with type Stream in Annot3D shall be indirect</description>
			<test>entry3DDHasTypeStream != true || isentry3DDIndirect == true</test>
			<error>
				<message>Entry 3DD with type Stream in Annot3D is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1213"/>
			<description>Entry 3DD in Annot3D shall have one of types: Dictionary, Stream</description>
			<test>contains3DD == false || entry3DDHasTypeDictionary == true || entry3DDHasTypeStream == true</test>
			<error>
				<message>Entry 3DD in Annot3D is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1214"/>
			<description>Entry P with type Dictionary in Annot3D shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in Annot3D is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="10" testNumber="1215"/>
			<description>Entry P with type Dictionary in Annot3D shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in Annot3D is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1216"/>
			<description>Entry P in Annot3D shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in Annot3D is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="11" testNumber="1217"/>
			<description>Entry AS in Annot3D is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in Annot3D is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1218"/>
			<description>Entry AS in Annot3D shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in Annot3D is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1219"/>
			<description>Entry 3DU with type Dictionary in Annot3D shall be object 3DUnits</description>
			<test>entry3DUHasTypeDictionary != true || entry3DU_size == 1</test>
			<error>
				<message>Entry 3DU with type Dictionary in Annot3D is not object 3DUnits</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1220"/>
			<description>Entry 3DU in Annot3D shall have type Dictionary</description>
			<test>contains3DU == false || entry3DUHasTypeDictionary == true</test>
			<error>
				<message>Entry 3DU in Annot3D is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1221"/>
			<description>Entry AP with type Dictionary in Annot3D shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in Annot3D is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="11" testNumber="1222"/>
			<description>Entry AP in Annot3D is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in Annot3D is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1223"/>
			<description>Entry AP in Annot3D shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in Annot3D is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1224"/>
			<description>Entry M in Annot3D shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in Annot3D is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1225"/>
			<description>Entry 3DA with type Dictionary in Annot3D shall be object 3DActivation</description>
			<test>entry3DAHasTypeDictionary != true || entry3DA_size == 1</test>
			<error>
				<message>Entry 3DA with type Dictionary in Annot3D is not object 3DActivation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1226"/>
			<description>Entry 3DA in Annot3D shall have type Dictionary</description>
			<test>contains3DA == false || entry3DAHasTypeDictionary == true</test>
			<error>
				<message>Entry 3DA in Annot3D is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1227"/>
			<description>Entry C with type Array in Annot3D shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in Annot3D is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1228"/>
			<description>Entry C in Annot3D shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in Annot3D is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1229"/>
			<description>Entry StructParent in Annot3D shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in Annot3D is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1230"/>
			<description>Entry NM in Annot3D shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in Annot3D is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1231"/>
			<description>Entry OC with type Dictionary in Annot3D shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in Annot3D is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1232"/>
			<description>Entry OC in Annot3D shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in Annot3D is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1233"/>
			<description>Entry Contents in Annot3D shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in Annot3D is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1234"/>
			<description>Entry Subtype in Annot3D is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in Annot3D is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1235"/>
			<description>Entry Subtype with type Name in Annot3D shall have value 3D</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "3D"</test>
			<error>
				<message>Entry Subtype with type Name in Annot3D has incorrect value %2 instead of 3D</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1236"/>
			<description>Entry Subtype in Annot3D shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in Annot3D is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1237"/>
			<description>Entry 3DV with type Dictionary in Annot3D shall be object 3DView</description>
			<test>entry3DVHasTypeDictionary != true || entry3DV_size == 1</test>
			<error>
				<message>Entry 3DV with type Dictionary in Annot3D is not object 3DView</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1238"/>
			<description>Entry 3DV in Annot3D shall have one of types: Name, Integer, Dictionary, String</description>
			<test>contains3DV == false || entry3DVHasTypeName == true || entry3DVHasTypeInteger == true || entry3DVHasTypeDictionary == true || entry3DVHasTypeString == true</test>
			<error>
				<message>Entry 3DV in Annot3D is not one of types: Name, Integer, Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1239"/>
			<description>Entry Border with type Array in Annot3D shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in Annot3D is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnot3D">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1240"/>
			<description>Entry Border in Annot3D shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in Annot3D is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionItem">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1295"/>
			<description>Entry Type with type Name in CollectionItem shall have value CollectionItem</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CollectionItem"</test>
			<error>
				<message>Entry Type with type Name in CollectionItem has incorrect value %2 instead of CollectionItem</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionItem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1296"/>
			<description>Entry Type in CollectionItem shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CollectionItem is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1324"/>
			<description>Entry with type Array in _UniversalDictionary shall be object _UniversalArray</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in _UniversalDictionary is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1325"/>
			<description>Entry with type Dictionary in _UniversalDictionary shall be object _UniversalDictionary</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in _UniversalDictionary is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1326"/>
			<description>Entry with type Stream in _UniversalDictionary shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in _UniversalDictionary is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="1327"/>
			<description>Entry with type Stream in _UniversalDictionary shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in _UniversalDictionary is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalDictionaryEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1328"/>
			<description>Entry in _UniversalDictionary shall have one of types: Null, Name, Array, Boolean, Dictionary, Number, Stream, String</description>
			<test>HasTypeNull == true || HasTypeName == true || HasTypeArray == true || HasTypeBoolean == true || HasTypeDictionary == true || HasTypeNumber == true || HasTypeStream == true || HasTypeString == true</test>
			<error>
				<message>Entry %1 in _UniversalDictionary is not one of types: Null, Name, Array, Boolean, Dictionary, Number, Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeURLS">
			<id specification="ISO_32000_1_7" clause="18" testNumber="1338"/>
			<description>Entry * in NameNameTreeURLS shall be object NameNameTreeURLSEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeURLS is not object NameNameTreeURLSEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="1390"/>
			<description>CalGrayDict shall not contain entries except BlackPoint, WhitePoint, Gamma</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'WhitePoint' &amp;&amp; elem != 'Gamma').length == 0</test>
			<error>
				<message>CalGrayDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BlackPoint' &amp;&amp; elem != 'WhitePoint' &amp;&amp; elem != 'Gamma').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1391"/>
			<description>Entry BlackPoint with type Array in CalGrayDict shall be object BlackpointArray</description>
			<test>BlackPointHasTypeArray != true || BlackPoint_size == 1</test>
			<error>
				<message>Entry BlackPoint with type Array in CalGrayDict is not object BlackpointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1392"/>
			<description>Entry BlackPoint in CalGrayDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in CalGrayDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1393"/>
			<description>Entry WhitePoint with type Array in CalGrayDict shall be object WhitepointArray</description>
			<test>WhitePointHasTypeArray != true || WhitePoint_size == 1</test>
			<error>
				<message>Entry WhitePoint with type Array in CalGrayDict is not object WhitepointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1394"/>
			<description>Entry WhitePoint in CalGrayDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in CalGrayDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1395"/>
			<description>Entry WhitePoint in CalGrayDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in CalGrayDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="14" testNumber="1396"/>
			<description>Entry Gamma with type Number in CalGrayDict shall correspond possible value predicate: fn:Eval(@Gamma &gt; 0)</description>
			<test>GammaHasTypeNumber != true || GammaNumberValue &gt; 0</test>
			<error>
				<message>Entry Gamma with type Number in CalGrayDict doesn't correspond possible value predicate: fn:Eval(@Gamma &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1397"/>
			<description>Entry Gamma in CalGrayDict shall have type Number</description>
			<test>containsGamma == false || GammaHasTypeNumber == true</test>
			<error>
				<message>Entry Gamma in CalGrayDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="1" testNumber="1448"/>
			<description>MicrosoftWindowsLaunchParam shall not contain entries except O, F, P, D</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'O' &amp;&amp; elem != 'F' &amp;&amp; elem != 'P' &amp;&amp; elem != 'D').length == 0</test>
			<error>
				<message>MicrosoftWindowsLaunchParam contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'O' &amp;&amp; elem != 'F' &amp;&amp; elem != 'P' &amp;&amp; elem != 'D').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1449"/>
			<description>Entry O with type StringAscii in MicrosoftWindowsLaunchParam shall have one of values: print, open</description>
			<test>OHasTypeStringAscii != true || OStringAsciiValue == "open" || OStringAsciiValue == "print"</test>
			<error>
				<message>Entry O with type StringAscii in MicrosoftWindowsLaunchParam has incorrect value %2 instead of print, open</message>
				<arguments>
					<argument>keyName</argument>
					<argument>OStringAsciiValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1450"/>
			<description>Entry O in MicrosoftWindowsLaunchParam shall have type StringAscii</description>
			<test>containsO == false || OHasTypeStringAscii == true</test>
			<error>
				<message>Entry O in MicrosoftWindowsLaunchParam is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1451"/>
			<description>Entry F in MicrosoftWindowsLaunchParam is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in MicrosoftWindowsLaunchParam is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1452"/>
			<description>Entry F in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsF == false || FHasTypeStringByte == true</test>
			<error>
				<message>Entry F in MicrosoftWindowsLaunchParam is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1453"/>
			<description>Entry P in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsP == false || PHasTypeStringByte == true</test>
			<error>
				<message>Entry P in MicrosoftWindowsLaunchParam is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1454"/>
			<description>Entry D in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsD == false || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in MicrosoftWindowsLaunchParam is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="1" testNumber="1478"/>
			<description>MinimumBitDepth shall not contain entries except Type, M, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'M' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>MinimumBitDepth contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'M' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1479"/>
			<description>Entry Type with type Name in MinimumBitDepth shall have value MinBitDepth</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MinBitDepth"</test>
			<error>
				<message>Entry Type with type Name in MinimumBitDepth has incorrect value %2 instead of MinBitDepth</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1480"/>
			<description>Entry Type in MinimumBitDepth shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MinimumBitDepth is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1481"/>
			<description>Entry M with type Integer in MinimumBitDepth shall have one of values: 0, 1, 2, 3, 4, 5, 6</description>
			<test>MHasTypeInteger != true || MIntegerValue == 0 || MIntegerValue == 1 || MIntegerValue == 2 || MIntegerValue == 3 || MIntegerValue == 4 || MIntegerValue == 5 || MIntegerValue == 6</test>
			<error>
				<message>Entry M with type Integer in MinimumBitDepth has incorrect value %2 instead of 0, 1, 2, 3, 4, 5, 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>MIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1482"/>
			<description>Entry M in MinimumBitDepth shall have type Integer</description>
			<test>containsM == false || MHasTypeInteger == true</test>
			<error>
				<message>Entry M in MinimumBitDepth is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1483"/>
			<description>Entry V in MinimumBitDepth is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in MinimumBitDepth is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1484"/>
			<description>Entry V in MinimumBitDepth shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in MinimumBitDepth is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumBitDepth">
			<id specification="ISO_32000_1_7" clause="9" testNumber="1485"/>
			<description>Entry V with type Integer in MinimumBitDepth shall correspond special case: fn:Eval(@V &gt; 0)</description>
			<test>VHasTypeInteger != true || (VIntegerValue &gt; 0)</test>
			<error>
				<message>Entry V with type Integer in MinimumBitDepth doesn't correspond special case: fn:Eval(@V &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNumberTreeParentTree">
			<id specification="ISO_32000_1_7" clause="18" testNumber="1498"/>
			<description>Entry * in StructTreeRootNumberTreeParentTree shall be object StructTreeRootNumberTreeParentTreeEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in StructTreeRootNumberTreeParentTree is not object StructTreeRootNumberTreeParentTreeEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="1" testNumber="1560"/>
			<description>ObjectReference shall not contain entries except Type, Pg, Obj</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Obj').length == 0</test>
			<error>
				<message>ObjectReference contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Obj').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1561"/>
			<description>Entry Type in ObjectReference is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ObjectReference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1562"/>
			<description>Entry Type with type Name in ObjectReference shall have value OBJR</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OBJR"</test>
			<error>
				<message>Entry Type with type Name in ObjectReference has incorrect value %2 instead of OBJR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1563"/>
			<description>Entry Type in ObjectReference shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ObjectReference is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1564"/>
			<description>Entry Pg with type Dictionary in ObjectReference shall be object PageObject</description>
			<test>PgHasTypeDictionary != true || Pg_size == 1</test>
			<error>
				<message>Entry Pg with type Dictionary in ObjectReference is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="10" testNumber="1565"/>
			<description>Entry Pg with type Dictionary in ObjectReference shall be indirect</description>
			<test>PgHasTypeDictionary != true || isPgIndirect == true</test>
			<error>
				<message>Entry Pg with type Dictionary in ObjectReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1566"/>
			<description>Entry Pg in ObjectReference shall have type Dictionary</description>
			<test>containsPg == false || PgHasTypeDictionary == true</test>
			<error>
				<message>Entry Pg in ObjectReference is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1567"/>
			<description>Entry Obj with type Array in ObjectReference shall be object _UniversalArray</description>
			<test>ObjHasTypeArray != true || Obj_size == 1</test>
			<error>
				<message>Entry Obj with type Array in ObjectReference is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1568"/>
			<description>Entry Obj with type Dictionary in ObjectReference shall be object _UniversalDictionary</description>
			<test>ObjHasTypeDictionary != true || Obj_size == 1</test>
			<error>
				<message>Entry Obj with type Dictionary in ObjectReference is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1569"/>
			<description>Entry Obj with type Stream in ObjectReference shall be object XObjectFormType1</description>
			<test>ObjHasTypeStream != true || Obj_size == 1</test>
			<error>
				<message>Entry Obj with type Stream in ObjectReference is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1570"/>
			<description>Entry Obj in ObjectReference is required</description>
			<test>containsObj == true</test>
			<error>
				<message>Entry Obj in ObjectReference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="10" testNumber="1571"/>
			<description>Entry Obj with type Array in ObjectReference shall be indirect</description>
			<test>ObjHasTypeArray != true || isObjIndirect == true</test>
			<error>
				<message>Entry Obj with type Array in ObjectReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="10" testNumber="1572"/>
			<description>Entry Obj with type Dictionary in ObjectReference shall be indirect</description>
			<test>ObjHasTypeDictionary != true || isObjIndirect == true</test>
			<error>
				<message>Entry Obj with type Dictionary in ObjectReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="10" testNumber="1573"/>
			<description>Entry Obj with type Stream in ObjectReference shall be indirect</description>
			<test>ObjHasTypeStream != true || isObjIndirect == true</test>
			<error>
				<message>Entry Obj with type Stream in ObjectReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectReference">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1574"/>
			<description>Entry Obj in ObjectReference shall have one of types: Array, Dictionary, Stream</description>
			<test>containsObj == false || ObjHasTypeArray == true || ObjHasTypeDictionary == true || ObjHasTypeStream == true</test>
			<error>
				<message>Entry Obj in ObjectReference is not one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="1650"/>
			<description>CalRGBDict shall not contain entries except Gamma, BlackPoint, Matrix, WhitePoint</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Gamma' &amp;&amp; elem != 'BlackPoint' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'WhitePoint').length == 0</test>
			<error>
				<message>CalRGBDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Gamma' &amp;&amp; elem != 'BlackPoint' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'WhitePoint').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1651"/>
			<description>Entry Gamma with type Array in CalRGBDict shall be object GammaArray</description>
			<test>GammaHasTypeArray != true || Gamma_size == 1</test>
			<error>
				<message>Entry Gamma with type Array in CalRGBDict is not object GammaArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1652"/>
			<description>Entry Gamma in CalRGBDict shall have type Array</description>
			<test>containsGamma == false || GammaHasTypeArray == true</test>
			<error>
				<message>Entry Gamma in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1653"/>
			<description>Entry BlackPoint with type Array in CalRGBDict shall be object BlackpointArray</description>
			<test>BlackPointHasTypeArray != true || BlackPoint_size == 1</test>
			<error>
				<message>Entry BlackPoint with type Array in CalRGBDict is not object BlackpointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1654"/>
			<description>Entry BlackPoint in CalRGBDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1655"/>
			<description>Entry Matrix with type Array in CalRGBDict shall be object ArrayOf_9Numbers</description>
			<test>MatrixHasTypeArray != true || Matrix_size == 1</test>
			<error>
				<message>Entry Matrix with type Array in CalRGBDict is not object ArrayOf_9Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1656"/>
			<description>Entry Matrix in CalRGBDict shall have type Array</description>
			<test>containsMatrix == false || MatrixHasTypeArray == true</test>
			<error>
				<message>Entry Matrix in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1657"/>
			<description>Entry WhitePoint with type Array in CalRGBDict shall be object WhitepointArray</description>
			<test>WhitePointHasTypeArray != true || WhitePoint_size == 1</test>
			<error>
				<message>Entry WhitePoint with type Array in CalRGBDict is not object WhitepointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1658"/>
			<description>Entry WhitePoint in CalRGBDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in CalRGBDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1659"/>
			<description>Entry WhitePoint in CalRGBDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1725"/>
			<description>Entry Default with type Dictionary in HalftoneType5 shall be object HalftoneType1</description>
			<test>DefaultHasTypeDictionary != true || Default_size == 1</test>
			<error>
				<message>Entry Default with type Dictionary in HalftoneType5 is not object HalftoneType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1726"/>
			<description>Entry Default with type Stream in HalftoneType5 shall be one of objects HalftoneType6, HalftoneType10, HalftoneType16</description>
			<test>DefaultHasTypeStream != true || Default_size == 1</test>
			<error>
				<message>Entry Default with type Stream in HalftoneType5 is not one of objects HalftoneType6, HalftoneType10, HalftoneType16</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1727"/>
			<description>Entry Default in HalftoneType5 is required</description>
			<test>containsDefault == true</test>
			<error>
				<message>Entry Default in HalftoneType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="10" testNumber="1728"/>
			<description>Entry Default with type Stream in HalftoneType5 shall be indirect</description>
			<test>DefaultHasTypeStream != true || isDefaultIndirect == true</test>
			<error>
				<message>Entry Default with type Stream in HalftoneType5 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1729"/>
			<description>Entry Default in HalftoneType5 shall have one of types: Dictionary, Stream</description>
			<test>containsDefault == false || DefaultHasTypeDictionary == true || DefaultHasTypeStream == true</test>
			<error>
				<message>Entry Default in HalftoneType5 is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1730"/>
			<description>Entry HalftoneType in HalftoneType5 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1731"/>
			<description>Entry HalftoneType with type Integer in HalftoneType5 shall have value 5</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 5</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType5 has incorrect value %2 instead of 5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1732"/>
			<description>Entry HalftoneType in HalftoneType5 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1733"/>
			<description>Entry HalftoneName in HalftoneType5 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType5 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1734"/>
			<description>Entry Type with type Name in HalftoneType5 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType5 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1735"/>
			<description>Entry Type in HalftoneType5 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType5 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="1" testNumber="1920"/>
			<description>HalftoneType6 shall not contain entries except Length, FDecodeParms, HalftoneType, Type, DecodeParms, DL, Filter, Height, FFilter, F, TransferFunction, HalftoneName, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Length' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'F' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'Width').length == 0</test>
			<error>
				<message>HalftoneType6 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Length' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'F' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'Width').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1921"/>
			<description>Entry Length in HalftoneType6 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in HalftoneType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1922"/>
			<description>Entry Length in HalftoneType6 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1923"/>
			<description>Entry FDecodeParms with type Array in HalftoneType6 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType6 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1924"/>
			<description>Entry FDecodeParms with type Dictionary in HalftoneType6 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in HalftoneType6 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1925"/>
			<description>Entry FDecodeParms in HalftoneType6 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in HalftoneType6 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="9" testNumber="1926"/>
			<description>Entry FDecodeParms with type Array in HalftoneType6 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType6 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1927"/>
			<description>Entry HalftoneType in HalftoneType6 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1928"/>
			<description>Entry HalftoneType with type Integer in HalftoneType6 shall have value 6</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 6</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType6 has incorrect value %2 instead of 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1929"/>
			<description>Entry HalftoneType in HalftoneType6 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1930"/>
			<description>Entry Type with type Name in HalftoneType6 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType6 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1931"/>
			<description>Entry Type in HalftoneType6 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType6 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1932"/>
			<description>Entry DecodeParms with type Array in HalftoneType6 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType6 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1933"/>
			<description>Entry DecodeParms with type Dictionary in HalftoneType6 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in HalftoneType6 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1934"/>
			<description>Entry DecodeParms in HalftoneType6 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in HalftoneType6 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="9" testNumber="1935"/>
			<description>Entry DecodeParms with type Array in HalftoneType6 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType6 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1936"/>
			<description>Entry DL in HalftoneType6 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="9" testNumber="1937"/>
			<description>Entry DL with type Integer in HalftoneType6 shall correspond special case: fn:Eval(fn:StreamLength(DL) == (@Width * @Height))</description>
			<test>DLHasTypeInteger != true || (DLStreamLength == (WidthIntegerValue * HeightIntegerValue))</test>
			<error>
				<message>Entry DL with type Integer in HalftoneType6 doesn't correspond special case: fn:Eval(fn:StreamLength(DL) == (@Width * @Height))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1938"/>
			<description>Entry Filter with type Array in HalftoneType6 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType6 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1939"/>
			<description>Entry Filter with type Name in HalftoneType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in HalftoneType6 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1940"/>
			<description>Entry Filter in HalftoneType6 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in HalftoneType6 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="9" testNumber="1941"/>
			<description>Entry Filter with type Array in HalftoneType6 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType6 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1942"/>
			<description>Entry Height in HalftoneType6 is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in HalftoneType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="14" testNumber="1943"/>
			<description>Entry Height with type Integer in HalftoneType6 shall correspond possible value predicate: fn:Eval(@Height &gt;= 0)</description>
			<test>HeightHasTypeInteger != true || HeightIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Height with type Integer in HalftoneType6 doesn't correspond possible value predicate: fn:Eval(@Height &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1944"/>
			<description>Entry Height in HalftoneType6 shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1945"/>
			<description>Entry FFilter with type Array in HalftoneType6 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType6 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1946"/>
			<description>Entry FFilter with type Name in HalftoneType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in HalftoneType6 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1947"/>
			<description>Entry FFilter in HalftoneType6 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in HalftoneType6 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="9" testNumber="1948"/>
			<description>Entry FFilter with type Array in HalftoneType6 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType6 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1949"/>
			<description>Entry F with type Dictionary in HalftoneType6 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in HalftoneType6 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1950"/>
			<description>Entry F in HalftoneType6 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in HalftoneType6 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1951"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType6 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType6 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="1952"/>
			<description>Entry TransferFunction with type Stream in HalftoneType6 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType6 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="10" testNumber="1953"/>
			<description>Entry TransferFunction with type Stream in HalftoneType6 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType6 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="6" testNumber="1954"/>
			<description>Entry TransferFunction with type Name in HalftoneType6 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType6 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1955"/>
			<description>Entry TransferFunction in HalftoneType6 shall have one of types: Name, Dictionary, Stream</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeName == true || TransferFunctionHasTypeDictionary == true || TransferFunctionHasTypeStream == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType6 is not one of types: Name, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1956"/>
			<description>Entry HalftoneName in HalftoneType6 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType6 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="7" testNumber="1957"/>
			<description>Entry Width in HalftoneType6 is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in HalftoneType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="14" testNumber="1958"/>
			<description>Entry Width with type Integer in HalftoneType6 shall correspond possible value predicate: fn:Eval(@Width &gt; 0)</description>
			<test>WidthHasTypeInteger != true || WidthIntegerValue &gt; 0</test>
			<error>
				<message>Entry Width with type Integer in HalftoneType6 doesn't correspond possible value predicate: fn:Eval(@Width &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="1959"/>
			<description>Entry Width in HalftoneType6 shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in HalftoneType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="4" testNumber="2016"/>
			<description>ArrayOfClassNamesRevisionsSubArray shall contain at least 1 element</description>
			<test>size &gt;= 1</test>
			<error>
				<message>ArrayOfClassNamesRevisionsSubArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2017"/>
			<description>Entry 0 in ArrayOfClassNamesRevisionsSubArray shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOfClassNamesRevisionsSubArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="2018"/>
			<description>Entry 1 with type Integer in ArrayOfClassNamesRevisionsSubArray shall correspond possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfClassNamesRevisionsSubArray doesn't correspond possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfClassNamesRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2019"/>
			<description>Entry 1 in ArrayOfClassNamesRevisionsSubArray shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfClassNamesRevisionsSubArray is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrders">
			<id specification="ISO_32000_1_7" clause="4" testNumber="2030"/>
			<description>ArrayOfOptContentOrders shall contain at least 1 element</description>
			<test>size &gt;= 1</test>
			<error>
				<message>ArrayOfOptContentOrders contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrders">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2031"/>
			<description>Entry 0 with type Dictionary in ArrayOfOptContentOrders shall be object OptContentGroup</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfOptContentOrders is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrders">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2032"/>
			<description>Entry 0 in ArrayOfOptContentOrders shall have one of types: StringText, Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeStringText == true || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOfOptContentOrders is not one of types: StringText, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="1" testNumber="2070"/>
			<description>IconFit shall not contain entries except FB, A, SW, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FB' &amp;&amp; elem != 'A' &amp;&amp; elem != 'SW' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>IconFit contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FB' &amp;&amp; elem != 'A' &amp;&amp; elem != 'SW' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2071"/>
			<description>Entry FB in IconFit shall have type Boolean</description>
			<test>containsFB == false || FBHasTypeBoolean == true</test>
			<error>
				<message>Entry FB in IconFit is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2072"/>
			<description>Entry A with type Array in IconFit shall be object ArrayOf_2Numbers</description>
			<test>AHasTypeArray != true || A_size == 1</test>
			<error>
				<message>Entry A with type Array in IconFit is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2073"/>
			<description>Entry A in IconFit shall have type Array</description>
			<test>containsA == false || AHasTypeArray == true</test>
			<error>
				<message>Entry A in IconFit is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="9" testNumber="2074"/>
			<description>Entry A with type Array in IconFit shall correspond special case: fn:Eval((A::@0&gt;= 0) &amp;&amp; (A::@0&lt;= 1) &amp;&amp; (A::@1&gt;= 0) &amp;&amp; (A::@1&lt;= 1))</description>
			<test>AHasTypeArray != true || ((A0NumberValue &gt;= 0) &amp;&amp; (A0NumberValue &lt;= 1) &amp;&amp; (A1NumberValue &gt;= 0) &amp;&amp; (A1NumberValue &lt;= 1))</test>
			<error>
				<message>Entry A with type Array in IconFit doesn't correspond special case: fn:Eval((A::@0&gt;= 0) &amp;&amp; (A::@0&lt;= 1) &amp;&amp; (A::@1&gt;= 0) &amp;&amp; (A::@1&lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2075"/>
			<description>Entry SW with type Name in IconFit shall have one of values: A, B, S, N</description>
			<test>SWHasTypeName != true || SWNameValue == "A" || SWNameValue == "B" || SWNameValue == "S" || SWNameValue == "N"</test>
			<error>
				<message>Entry SW with type Name in IconFit has incorrect value %2 instead of A, B, S, N</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SWNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2076"/>
			<description>Entry SW in IconFit shall have type Name</description>
			<test>containsSW == false || SWHasTypeName == true</test>
			<error>
				<message>Entry SW in IconFit is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2077"/>
			<description>Entry S with type Name in IconFit shall have one of values: P, A</description>
			<test>SHasTypeName != true || SNameValue == "A" || SNameValue == "P"</test>
			<error>
				<message>Entry S with type Name in IconFit has incorrect value %2 instead of P, A</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIconFit">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2078"/>
			<description>Entry S in IconFit shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in IconFit is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="1" testNumber="2216"/>
			<description>HalftoneType1 shall not contain entries except AccurateScreens, HalftoneName, Angle, HalftoneType, TransferFunction, Frequency, SpotFunction, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AccurateScreens' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'Angle' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Frequency' &amp;&amp; elem != 'SpotFunction' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>HalftoneType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AccurateScreens' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'Angle' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'Frequency' &amp;&amp; elem != 'SpotFunction' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2217"/>
			<description>Entry AccurateScreens in HalftoneType1 shall have type Boolean</description>
			<test>containsAccurateScreens == false || AccurateScreensHasTypeBoolean == true</test>
			<error>
				<message>Entry AccurateScreens in HalftoneType1 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2218"/>
			<description>Entry HalftoneName in HalftoneType1 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType1 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2219"/>
			<description>Entry Angle in HalftoneType1 is required</description>
			<test>containsAngle == true</test>
			<error>
				<message>Entry Angle in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2220"/>
			<description>Entry Angle in HalftoneType1 shall have type Number</description>
			<test>containsAngle == false || AngleHasTypeNumber == true</test>
			<error>
				<message>Entry Angle in HalftoneType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2221"/>
			<description>Entry HalftoneType in HalftoneType1 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2222"/>
			<description>Entry HalftoneType with type Integer in HalftoneType1 shall have value 1</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 1</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType1 has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2223"/>
			<description>Entry HalftoneType in HalftoneType1 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2224"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType1 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType1 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2225"/>
			<description>Entry TransferFunction with type Stream in HalftoneType1 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType1 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="11" testNumber="2226"/>
			<description>Entry TransferFunction in HalftoneType1 is required, when fn:IsRequired(parent::@HalftoneType== 5)</description>
			<test>(containsTransferFunction == true || (parentHalftoneTypeIntegerValue == 5) == false)</test>
			<error>
				<message>Entry TransferFunction in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="10" testNumber="2227"/>
			<description>Entry TransferFunction with type Stream in HalftoneType1 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2228"/>
			<description>Entry TransferFunction with type Name in HalftoneType1 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType1 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2229"/>
			<description>Entry TransferFunction in HalftoneType1 shall have one of types: Name, Dictionary, Stream</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeName == true || TransferFunctionHasTypeDictionary == true || TransferFunctionHasTypeStream == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType1 is not one of types: Name, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2230"/>
			<description>Entry Frequency in HalftoneType1 is required</description>
			<test>containsFrequency == true</test>
			<error>
				<message>Entry Frequency in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="14" testNumber="2231"/>
			<description>Entry Frequency with type Number in HalftoneType1 shall correspond possible value predicate: fn:Eval(@Frequency &gt;= 0)</description>
			<test>FrequencyHasTypeNumber != true || FrequencyNumberValue &gt;= 0</test>
			<error>
				<message>Entry Frequency with type Number in HalftoneType1 doesn't correspond possible value predicate: fn:Eval(@Frequency &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2232"/>
			<description>Entry Frequency in HalftoneType1 shall have type Number</description>
			<test>containsFrequency == false || FrequencyHasTypeNumber == true</test>
			<error>
				<message>Entry Frequency in HalftoneType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2233"/>
			<description>Entry SpotFunction with type Array in HalftoneType1 shall be object ArrayOfFunctions</description>
			<test>SpotFunctionHasTypeArray != true || SpotFunction_size == 1</test>
			<error>
				<message>Entry SpotFunction with type Array in HalftoneType1 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2234"/>
			<description>Entry SpotFunction with type Dictionary in HalftoneType1 shall be one of objects FunctionType2, FunctionType3</description>
			<test>SpotFunctionHasTypeDictionary != true || SpotFunction_size == 1</test>
			<error>
				<message>Entry SpotFunction with type Dictionary in HalftoneType1 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2235"/>
			<description>Entry SpotFunction with type Stream in HalftoneType1 shall be one of objects FunctionType0, FunctionType4</description>
			<test>SpotFunctionHasTypeStream != true || SpotFunction_size == 1</test>
			<error>
				<message>Entry SpotFunction with type Stream in HalftoneType1 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2236"/>
			<description>Entry SpotFunction in HalftoneType1 is required</description>
			<test>containsSpotFunction == true</test>
			<error>
				<message>Entry SpotFunction in HalftoneType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="10" testNumber="2237"/>
			<description>Entry SpotFunction with type Stream in HalftoneType1 shall be indirect</description>
			<test>SpotFunctionHasTypeStream != true || isSpotFunctionIndirect == true</test>
			<error>
				<message>Entry SpotFunction with type Stream in HalftoneType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2238"/>
			<description>Entry SpotFunction with type Name in HalftoneType1 shall have one of values: Ellipse, LineX, SimpleDot, LineY, Cross, InvertedDouble, Diamond, InvertedDoubleDot, Square, Double, InvertedEllipseC, InvertedEllipseA, Line, CosineDot, InvertedSimpleDot, Round, EllipseA, DoubleDot, EllipseC, Rhomboid, EllipseB</description>
			<test>SpotFunctionHasTypeName != true || SpotFunctionNameValue == "SimpleDot" || SpotFunctionNameValue == "InvertedSimpleDot" || SpotFunctionNameValue == "DoubleDot" || SpotFunctionNameValue == "InvertedDoubleDot" || SpotFunctionNameValue == "CosineDot" || SpotFunctionNameValue == "Double" || SpotFunctionNameValue == "InvertedDouble" || SpotFunctionNameValue == "Line" || SpotFunctionNameValue == "LineX" || SpotFunctionNameValue == "LineY" || SpotFunctionNameValue == "Round" || SpotFunctionNameValue == "Ellipse" || SpotFunctionNameValue == "EllipseA" || SpotFunctionNameValue == "InvertedEllipseA" || SpotFunctionNameValue == "EllipseB" || SpotFunctionNameValue == "EllipseC" || SpotFunctionNameValue == "InvertedEllipseC" || SpotFunctionNameValue == "Square" || SpotFunctionNameValue == "Cross" || SpotFunctionNameValue == "Rhomboid" || SpotFunctionNameValue == "Diamond"</test>
			<error>
				<message>Entry SpotFunction with type Name in HalftoneType1 has incorrect value %2 instead of Ellipse, LineX, SimpleDot, LineY, Cross, InvertedDouble, Diamond, InvertedDoubleDot, Square, Double, InvertedEllipseC, InvertedEllipseA, Line, CosineDot, InvertedSimpleDot, Round, EllipseA, DoubleDot, EllipseC, Rhomboid, EllipseB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SpotFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2239"/>
			<description>Entry SpotFunction in HalftoneType1 shall have one of types: Name, Array, Dictionary, Stream</description>
			<test>containsSpotFunction == false || SpotFunctionHasTypeName == true || SpotFunctionHasTypeArray == true || SpotFunctionHasTypeDictionary == true || SpotFunctionHasTypeStream == true</test>
			<error>
				<message>Entry SpotFunction in HalftoneType1 is not one of types: Name, Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2240"/>
			<description>Entry Type with type Name in HalftoneType1 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType1 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2241"/>
			<description>Entry Type in HalftoneType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="1" testNumber="2310"/>
			<description>OptContentConfig shall not contain entries except Order, ListMode, Name, Creator, ON, RBGroups, BaseState, Locked, AS, OFF, Intent</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Order' &amp;&amp; elem != 'ListMode' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Creator' &amp;&amp; elem != 'ON' &amp;&amp; elem != 'RBGroups' &amp;&amp; elem != 'BaseState' &amp;&amp; elem != 'Locked' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'OFF' &amp;&amp; elem != 'Intent').length == 0</test>
			<error>
				<message>OptContentConfig contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Order' &amp;&amp; elem != 'ListMode' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Creator' &amp;&amp; elem != 'ON' &amp;&amp; elem != 'RBGroups' &amp;&amp; elem != 'BaseState' &amp;&amp; elem != 'Locked' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'OFF' &amp;&amp; elem != 'Intent').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2311"/>
			<description>Entry Order with type Array in OptContentConfig shall be object ArrayOfOptContentOrderElements</description>
			<test>OrderHasTypeArray != true || Order_size == 1</test>
			<error>
				<message>Entry Order with type Array in OptContentConfig is not object ArrayOfOptContentOrderElements</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2312"/>
			<description>Entry Order in OptContentConfig shall have type Array</description>
			<test>containsOrder == false || OrderHasTypeArray == true</test>
			<error>
				<message>Entry Order in OptContentConfig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2313"/>
			<description>Entry ListMode with type Name in OptContentConfig shall have one of values: AllPages, VisiblePages</description>
			<test>ListModeHasTypeName != true || ListModeNameValue == "AllPages" || ListModeNameValue == "VisiblePages"</test>
			<error>
				<message>Entry ListMode with type Name in OptContentConfig has incorrect value %2 instead of AllPages, VisiblePages</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ListModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2314"/>
			<description>Entry ListMode in OptContentConfig shall have type Name</description>
			<test>containsListMode == false || ListModeHasTypeName == true</test>
			<error>
				<message>Entry ListMode in OptContentConfig is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2315"/>
			<description>Entry Name in OptContentConfig shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in OptContentConfig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2316"/>
			<description>Entry Creator in OptContentConfig shall have type StringText</description>
			<test>containsCreator == false || CreatorHasTypeStringText == true</test>
			<error>
				<message>Entry Creator in OptContentConfig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2317"/>
			<description>Entry ON with type Array in OptContentConfig shall be object ArrayOfOptContentGroups</description>
			<test>ONHasTypeArray != true || ON_size == 1</test>
			<error>
				<message>Entry ON with type Array in OptContentConfig is not object ArrayOfOptContentGroups</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2318"/>
			<description>Entry ON in OptContentConfig shall have type Array</description>
			<test>containsON == false || ONHasTypeArray == true</test>
			<error>
				<message>Entry ON in OptContentConfig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2319"/>
			<description>Entry RBGroups with type Array in OptContentConfig shall be object ArrayOfArraysRBGroups</description>
			<test>RBGroupsHasTypeArray != true || RBGroups_size == 1</test>
			<error>
				<message>Entry RBGroups with type Array in OptContentConfig is not object ArrayOfArraysRBGroups</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2320"/>
			<description>Entry RBGroups in OptContentConfig shall have type Array</description>
			<test>containsRBGroups == false || RBGroupsHasTypeArray == true</test>
			<error>
				<message>Entry RBGroups in OptContentConfig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2321"/>
			<description>Entry BaseState with type Name in OptContentConfig shall have one of values: OFF, Unchanged, ON</description>
			<test>BaseStateHasTypeName != true || BaseStateNameValue == "ON" || BaseStateNameValue == "OFF" || BaseStateNameValue == "Unchanged"</test>
			<error>
				<message>Entry BaseState with type Name in OptContentConfig has incorrect value %2 instead of OFF, Unchanged, ON</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BaseStateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2322"/>
			<description>Entry BaseState in OptContentConfig shall have type Name</description>
			<test>containsBaseState == false || BaseStateHasTypeName == true</test>
			<error>
				<message>Entry BaseState in OptContentConfig is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2323"/>
			<description>Entry Locked with type Array in OptContentConfig shall be object ArrayOfOptContentGroups</description>
			<test>LockedHasTypeArray != true || Locked_size == 1</test>
			<error>
				<message>Entry Locked with type Array in OptContentConfig is not object ArrayOfOptContentGroups</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2324"/>
			<description>Entry Locked in OptContentConfig shall have type Array</description>
			<test>containsLocked == false || LockedHasTypeArray == true</test>
			<error>
				<message>Entry Locked in OptContentConfig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2325"/>
			<description>Entry AS with type Array in OptContentConfig shall be object ArrayOfOCUsage</description>
			<test>ASHasTypeArray != true || AS_size == 1</test>
			<error>
				<message>Entry AS with type Array in OptContentConfig is not object ArrayOfOCUsage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2326"/>
			<description>Entry AS in OptContentConfig shall have type Array</description>
			<test>containsAS == false || ASHasTypeArray == true</test>
			<error>
				<message>Entry AS in OptContentConfig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2327"/>
			<description>Entry OFF with type Array in OptContentConfig shall be object ArrayOfOptContentGroups</description>
			<test>OFFHasTypeArray != true || OFF_size == 1</test>
			<error>
				<message>Entry OFF with type Array in OptContentConfig is not object ArrayOfOptContentGroups</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2328"/>
			<description>Entry OFF in OptContentConfig shall have type Array</description>
			<test>containsOFF == false || OFFHasTypeArray == true</test>
			<error>
				<message>Entry OFF in OptContentConfig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2329"/>
			<description>Entry Intent with type Array in OptContentConfig shall be object ArrayOfNamesGeneral</description>
			<test>IntentHasTypeArray != true || Intent_size == 1</test>
			<error>
				<message>Entry Intent with type Array in OptContentConfig is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2330"/>
			<description>Entry Intent with type Name in OptContentConfig shall have one of values: All, Design, View</description>
			<test>IntentHasTypeName != true || IntentNameValue == "All" || IntentNameValue == "Design" || IntentNameValue == "View"</test>
			<error>
				<message>Entry Intent with type Name in OptContentConfig has incorrect value %2 instead of All, Design, View</message>
				<arguments>
					<argument>keyName</argument>
					<argument>IntentNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentConfig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2331"/>
			<description>Entry Intent in OptContentConfig shall have one of types: Name, Array</description>
			<test>containsIntent == false || IntentHasTypeName == true || IntentHasTypeArray == true</test>
			<error>
				<message>Entry Intent in OptContentConfig is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2370"/>
			<description>Entry with type Dictionary in ArrayOfPages shall be object PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfPages is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="2371"/>
			<description>Entry with type Dictionary in ArrayOfPages shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfPages is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2372"/>
			<description>Entry in ArrayOfPages shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfPages is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPagesEntry">
			<id specification="ISO_32000_1_7" clause="9" testNumber="2373"/>
			<description>Entry with type Dictionary in ArrayOfPages shall correspond special case: fn:Eval(fn:IsPresent(*::SeparationInfo))</description>
			<test>HasTypeDictionary != true || ((containsAnySeparationInfo == true))</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfPages doesn't correspond special case: fn:Eval(fn:IsPresent(*::SeparationInfo))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_7" clause="1" testNumber="2388"/>
			<description>FilterCrypt shall not contain entries except Name, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>FilterCrypt contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2389"/>
			<description>Entry Name in FilterCrypt shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FilterCrypt is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_7" clause="9" testNumber="2390"/>
			<description>Entry Name with type Name in FilterCrypt shall correspond special case: fn:InKeyMap(trailer::Encrypt::CF)</description>
			<test>NameHasTypeName != true || ((keysStringtrailerEncryptCF.split('&amp;').filter(elem =&gt; elem == NameNameValue).length &gt; 0))</test>
			<error>
				<message>Entry Name with type Name in FilterCrypt doesn't correspond special case: fn:InKeyMap(trailer::Encrypt::CF)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2391"/>
			<description>Entry Type with type Name in FilterCrypt shall have value CryptFilterDecodeParms</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CryptFilterDecodeParms"</test>
			<error>
				<message>Entry Type with type Name in FilterCrypt has incorrect value %2 instead of CryptFilterDecodeParms</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCrypt">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2392"/>
			<description>Entry Type in FilterCrypt shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FilterCrypt is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="1" testNumber="2450"/>
			<description>ActionECMAScript shall not contain entries except Type, Next, S, JS</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'JS').length == 0</test>
			<error>
				<message>ActionECMAScript contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'JS').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2451"/>
			<description>Entry Type with type Name in ActionECMAScript shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionECMAScript has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2452"/>
			<description>Entry Type in ActionECMAScript shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionECMAScript is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2453"/>
			<description>Entry Next with type Array in ActionECMAScript shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionECMAScript is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2454"/>
			<description>Entry Next with type Dictionary in ActionECMAScript shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionECMAScript is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2455"/>
			<description>Entry Next in ActionECMAScript shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionECMAScript is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2456"/>
			<description>Entry S in ActionECMAScript is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionECMAScript is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2457"/>
			<description>Entry S with type Name in ActionECMAScript shall have value JavaScript</description>
			<test>SHasTypeName != true || SNameValue == "JavaScript"</test>
			<error>
				<message>Entry S with type Name in ActionECMAScript has incorrect value %2 instead of JavaScript</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2458"/>
			<description>Entry S in ActionECMAScript shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionECMAScript is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2459"/>
			<description>Entry JS with type Stream in ActionECMAScript shall be object Stream</description>
			<test>JSHasTypeStream != true || JS_size == 1</test>
			<error>
				<message>Entry JS with type Stream in ActionECMAScript is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2460"/>
			<description>Entry JS in ActionECMAScript is required</description>
			<test>containsJS == true</test>
			<error>
				<message>Entry JS in ActionECMAScript is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="10" testNumber="2461"/>
			<description>Entry JS with type Stream in ActionECMAScript shall be indirect</description>
			<test>JSHasTypeStream != true || isJSIndirect == true</test>
			<error>
				<message>Entry JS with type Stream in ActionECMAScript is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionECMAScript">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2462"/>
			<description>Entry JS in ActionECMAScript shall have one of types: StringText, Stream</description>
			<test>containsJS == false || JSHasTypeStringText == true || JSHasTypeStream == true</test>
			<error>
				<message>Entry JS in ActionECMAScript is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="1" testNumber="2502"/>
			<description>ActionSetOCGState shall not contain entries except PreserveRB, Next, Type, S, State</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PreserveRB' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'State').length == 0</test>
			<error>
				<message>ActionSetOCGState contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PreserveRB' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'State').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2503"/>
			<description>Entry PreserveRB in ActionSetOCGState shall have type Boolean</description>
			<test>containsPreserveRB == false || PreserveRBHasTypeBoolean == true</test>
			<error>
				<message>Entry PreserveRB in ActionSetOCGState is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2504"/>
			<description>Entry Next with type Array in ActionSetOCGState shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionSetOCGState is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2505"/>
			<description>Entry Next with type Dictionary in ActionSetOCGState shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionSetOCGState is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2506"/>
			<description>Entry Next in ActionSetOCGState shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionSetOCGState is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2507"/>
			<description>Entry Type with type Name in ActionSetOCGState shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionSetOCGState has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2508"/>
			<description>Entry Type in ActionSetOCGState shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionSetOCGState is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2509"/>
			<description>Entry S in ActionSetOCGState is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSetOCGState is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2510"/>
			<description>Entry S with type Name in ActionSetOCGState shall have value SetOCGState</description>
			<test>SHasTypeName != true || SNameValue == "SetOCGState"</test>
			<error>
				<message>Entry S with type Name in ActionSetOCGState has incorrect value %2 instead of SetOCGState</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2511"/>
			<description>Entry S in ActionSetOCGState shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSetOCGState is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2512"/>
			<description>Entry State with type Array in ActionSetOCGState shall be object ArrayOfOCGState</description>
			<test>StateHasTypeArray != true || State_size == 1</test>
			<error>
				<message>Entry State with type Array in ActionSetOCGState is not object ArrayOfOCGState</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2513"/>
			<description>Entry State in ActionSetOCGState is required</description>
			<test>containsState == true</test>
			<error>
				<message>Entry State in ActionSetOCGState is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetOCGState">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2514"/>
			<description>Entry State in ActionSetOCGState shall have type Array</description>
			<test>containsState == false || StateHasTypeArray == true</test>
			<error>
				<message>Entry State in ActionSetOCGState is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSubjectDNEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2528"/>
			<description>Entry with type Dictionary in ArrayOfSubjectDN shall be object SubjectDN</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfSubjectDN is not object SubjectDN</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSubjectDNEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2529"/>
			<description>Entry in ArrayOfSubjectDN shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfSubjectDN is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="1" testNumber="2548"/>
			<description>MinimumScreenSize shall not contain entries except V, M, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MinimumScreenSize contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2549"/>
			<description>Entry V with type Array in MinimumScreenSize shall be object ArrayOf_2Integers</description>
			<test>VHasTypeArray != true || V_size == 1</test>
			<error>
				<message>Entry V with type Array in MinimumScreenSize is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2550"/>
			<description>Entry V in MinimumScreenSize is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in MinimumScreenSize is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2551"/>
			<description>Entry V in MinimumScreenSize shall have type Array</description>
			<test>containsV == false || VHasTypeArray == true</test>
			<error>
				<message>Entry V in MinimumScreenSize is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2552"/>
			<description>Entry M with type Integer in MinimumScreenSize shall have one of values: 0, 1, 2, 3, 4, 5, 6</description>
			<test>MHasTypeInteger != true || MIntegerValue == 0 || MIntegerValue == 1 || MIntegerValue == 2 || MIntegerValue == 3 || MIntegerValue == 4 || MIntegerValue == 5 || MIntegerValue == 6</test>
			<error>
				<message>Entry M with type Integer in MinimumScreenSize has incorrect value %2 instead of 0, 1, 2, 3, 4, 5, 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>MIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2553"/>
			<description>Entry M in MinimumScreenSize shall have type Integer</description>
			<test>containsM == false || MHasTypeInteger == true</test>
			<error>
				<message>Entry M in MinimumScreenSize is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2554"/>
			<description>Entry Type with type Name in MinimumScreenSize shall have value MinScreenSize</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MinScreenSize"</test>
			<error>
				<message>Entry Type with type Name in MinimumScreenSize has incorrect value %2 instead of MinScreenSize</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMinimumScreenSize">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2555"/>
			<description>Entry Type in MinimumScreenSize shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MinimumScreenSize is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCompressionFilterNamesEntry">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2578"/>
			<description>Entry with type Name in ArrayOfCompressionFilterNames shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>HasTypeName != true || NameValue == "ASCIIHexDecode" || NameValue == "ASCII85Decode" || NameValue == "LZWDecode" || NameValue == "FlateDecode" || NameValue == "RunLengthDecode" || NameValue == "Crypt"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfCompressionFilterNames has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCompressionFilterNamesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2579"/>
			<description>Entry in ArrayOfCompressionFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfCompressionFilterNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="1" testNumber="2592"/>
			<description>FixedPrint shall not contain entries except H, Matrix, V, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>FixedPrint contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2593"/>
			<description>Entry H in FixedPrint shall have type Number</description>
			<test>containsH == false || HHasTypeNumber == true</test>
			<error>
				<message>Entry H in FixedPrint is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2594"/>
			<description>Entry Matrix in FixedPrint shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in FixedPrint is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2595"/>
			<description>Entry V in FixedPrint shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in FixedPrint is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2596"/>
			<description>Entry Type in FixedPrint is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FixedPrint is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2597"/>
			<description>Entry Type with type Name in FixedPrint shall have value FixedPrint</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FixedPrint"</test>
			<error>
				<message>Entry Type with type Name in FixedPrint has incorrect value %2 instead of FixedPrint</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFixedPrint">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2598"/>
			<description>Entry Type in FixedPrint shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FixedPrint is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="1" testNumber="2678"/>
			<description>ActionURI shall not contain entries except IsMap, URI, S, Next, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'IsMap' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionURI contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'IsMap' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2679"/>
			<description>Entry IsMap in ActionURI shall have type Boolean</description>
			<test>containsIsMap == false || IsMapHasTypeBoolean == true</test>
			<error>
				<message>Entry IsMap in ActionURI is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2680"/>
			<description>Entry URI in ActionURI is required</description>
			<test>containsURI == true</test>
			<error>
				<message>Entry URI in ActionURI is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2681"/>
			<description>Entry URI in ActionURI shall have type StringAscii</description>
			<test>containsURI == false || URIHasTypeStringAscii == true</test>
			<error>
				<message>Entry URI in ActionURI is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2682"/>
			<description>Entry S in ActionURI is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionURI is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2683"/>
			<description>Entry S with type Name in ActionURI shall have value URI</description>
			<test>SHasTypeName != true || SNameValue == "URI"</test>
			<error>
				<message>Entry S with type Name in ActionURI has incorrect value %2 instead of URI</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2684"/>
			<description>Entry S in ActionURI shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionURI is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2685"/>
			<description>Entry Next with type Array in ActionURI shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionURI is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2686"/>
			<description>Entry Next with type Dictionary in ActionURI shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionURI is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2687"/>
			<description>Entry Next in ActionURI shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionURI is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2688"/>
			<description>Entry Type with type Name in ActionURI shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionURI has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2689"/>
			<description>Entry Type in ActionURI shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionURI is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="1" testNumber="2702"/>
			<description>RichMediaActivation shall not contain entries except Condition, Scripts, Animation, Presentation, Type, Configuration, View</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Condition' &amp;&amp; elem != 'Scripts' &amp;&amp; elem != 'Animation' &amp;&amp; elem != 'Presentation' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Configuration' &amp;&amp; elem != 'View').length == 0</test>
			<error>
				<message>RichMediaActivation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Condition' &amp;&amp; elem != 'Scripts' &amp;&amp; elem != 'Animation' &amp;&amp; elem != 'Presentation' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Configuration' &amp;&amp; elem != 'View').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2703"/>
			<description>Entry Condition with type Name in RichMediaActivation shall have one of values: PV, XA, PO</description>
			<test>ConditionHasTypeName != true || ConditionNameValue == "XA" || ConditionNameValue == "PO" || ConditionNameValue == "PV"</test>
			<error>
				<message>Entry Condition with type Name in RichMediaActivation has incorrect value %2 instead of PV, XA, PO</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ConditionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2704"/>
			<description>Entry Condition in RichMediaActivation shall have type Name</description>
			<test>containsCondition == false || ConditionHasTypeName == true</test>
			<error>
				<message>Entry Condition in RichMediaActivation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2705"/>
			<description>Entry Scripts with type Array in RichMediaActivation shall be object ArrayOfIndirectFileSpecifications</description>
			<test>ScriptsHasTypeArray != true || Scripts_size == 1</test>
			<error>
				<message>Entry Scripts with type Array in RichMediaActivation is not object ArrayOfIndirectFileSpecifications</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2706"/>
			<description>Entry Scripts in RichMediaActivation shall have type Array</description>
			<test>containsScripts == false || ScriptsHasTypeArray == true</test>
			<error>
				<message>Entry Scripts in RichMediaActivation is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2707"/>
			<description>Entry Animation with type Dictionary in RichMediaActivation shall be object RichMediaAnimation</description>
			<test>AnimationHasTypeDictionary != true || Animation_size == 1</test>
			<error>
				<message>Entry Animation with type Dictionary in RichMediaActivation is not object RichMediaAnimation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2708"/>
			<description>Entry Animation in RichMediaActivation shall have type Dictionary</description>
			<test>containsAnimation == false || AnimationHasTypeDictionary == true</test>
			<error>
				<message>Entry Animation in RichMediaActivation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2709"/>
			<description>Entry Presentation with type Dictionary in RichMediaActivation shall be object RichMediaPresentation</description>
			<test>PresentationHasTypeDictionary != true || Presentation_size == 1</test>
			<error>
				<message>Entry Presentation with type Dictionary in RichMediaActivation is not object RichMediaPresentation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2710"/>
			<description>Entry Presentation in RichMediaActivation shall have type Dictionary</description>
			<test>containsPresentation == false || PresentationHasTypeDictionary == true</test>
			<error>
				<message>Entry Presentation in RichMediaActivation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2711"/>
			<description>Entry Type with type Name in RichMediaActivation shall have value RichMediaActivation</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaActivation"</test>
			<error>
				<message>Entry Type with type Name in RichMediaActivation has incorrect value %2 instead of RichMediaActivation</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2712"/>
			<description>Entry Type in RichMediaActivation shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaActivation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2713"/>
			<description>Entry Configuration with type Dictionary in RichMediaActivation shall be object RichMediaConfiguration</description>
			<test>ConfigurationHasTypeDictionary != true || Configuration_size == 1</test>
			<error>
				<message>Entry Configuration with type Dictionary in RichMediaActivation is not object RichMediaConfiguration</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="10" testNumber="2714"/>
			<description>Entry Configuration with type Dictionary in RichMediaActivation shall be indirect</description>
			<test>ConfigurationHasTypeDictionary != true || isConfigurationIndirect == true</test>
			<error>
				<message>Entry Configuration with type Dictionary in RichMediaActivation is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2715"/>
			<description>Entry Configuration in RichMediaActivation shall have type Dictionary</description>
			<test>containsConfiguration == false || ConfigurationHasTypeDictionary == true</test>
			<error>
				<message>Entry Configuration in RichMediaActivation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2716"/>
			<description>Entry View with type Dictionary in RichMediaActivation shall be one of objects 3DView, 3DViewAddEntries</description>
			<test>ViewHasTypeDictionary != true || View_size == 1</test>
			<error>
				<message>Entry View with type Dictionary in RichMediaActivation is not one of objects 3DView, 3DViewAddEntries</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="10" testNumber="2717"/>
			<description>Entry View with type Dictionary in RichMediaActivation shall be indirect</description>
			<test>ViewHasTypeDictionary != true || isViewIndirect == true</test>
			<error>
				<message>Entry View with type Dictionary in RichMediaActivation is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2718"/>
			<description>Entry View in RichMediaActivation shall have type Dictionary</description>
			<test>containsView == false || ViewHasTypeDictionary == true</test>
			<error>
				<message>Entry View in RichMediaActivation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="1" testNumber="2754"/>
			<description>MediaDuration shall not contain entries except Type, S, T</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T').length == 0</test>
			<error>
				<message>MediaDuration contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2755"/>
			<description>Entry Type with type Name in MediaDuration shall have value MediaDuration</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaDuration"</test>
			<error>
				<message>Entry Type with type Name in MediaDuration has incorrect value %2 instead of MediaDuration</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2756"/>
			<description>Entry Type in MediaDuration shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaDuration is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2757"/>
			<description>Entry S in MediaDuration is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaDuration is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2758"/>
			<description>Entry S with type Name in MediaDuration shall have one of values: T, F, I</description>
			<test>SHasTypeName != true || SNameValue == "I" || SNameValue == "F" || SNameValue == "T"</test>
			<error>
				<message>Entry S with type Name in MediaDuration has incorrect value %2 instead of T, F, I</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2759"/>
			<description>Entry S in MediaDuration shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaDuration is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2760"/>
			<description>Entry T with type Dictionary in MediaDuration shall be object Timespan</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in MediaDuration is not object Timespan</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="11" testNumber="2761"/>
			<description>Entry T in MediaDuration is required, when fn:IsRequired(@S == T)</description>
			<test>(containsT == true || (SNameValue == "T") == false)</test>
			<error>
				<message>Entry T in MediaDuration is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaDuration">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2762"/>
			<description>Entry T in MediaDuration shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in MediaDuration is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3CenterOfRotationNumbers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="2772"/>
			<description>ArrayOf_3CenterOfRotationNumbers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_3CenterOfRotationNumbers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3CenterOfRotationNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2773"/>
			<description>Entry 1 in ArrayOf_3CenterOfRotationNumbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3CenterOfRotationNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3CenterOfRotationNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2774"/>
			<description>Entry 2 in ArrayOf_3CenterOfRotationNumbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3CenterOfRotationNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3CenterOfRotationNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2775"/>
			<description>Entry 0 in ArrayOf_3CenterOfRotationNumbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3CenterOfRotationNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentGroupsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2797"/>
			<description>Entry with type Dictionary in ArrayOfOptContentGroups shall be object OptContentGroup</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOptContentGroups is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentGroupsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2798"/>
			<description>Entry in ArrayOfOptContentGroups shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOptContentGroups is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="1" testNumber="2831"/>
			<description>AnnotWatermark shall not contain entries except AS, C, Border, Contents, StructParent, Subtype, FixedPrint, Rect, M, Type, NM, OC, F, P, AP</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AS' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'FixedPrint' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'F' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AP').length == 0</test>
			<error>
				<message>AnnotWatermark contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AS' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'FixedPrint' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'F' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AP').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="11" testNumber="2832"/>
			<description>Entry AS in AnnotWatermark is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotWatermark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2833"/>
			<description>Entry AS in AnnotWatermark shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotWatermark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2834"/>
			<description>Entry C with type Array in AnnotWatermark shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotWatermark is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2835"/>
			<description>Entry C in AnnotWatermark shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotWatermark is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2836"/>
			<description>Entry Border with type Array in AnnotWatermark shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotWatermark is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2837"/>
			<description>Entry Border in AnnotWatermark shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotWatermark is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2838"/>
			<description>Entry Contents in AnnotWatermark shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotWatermark is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2839"/>
			<description>Entry StructParent in AnnotWatermark shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotWatermark is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2840"/>
			<description>Entry Subtype in AnnotWatermark is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotWatermark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2841"/>
			<description>Entry Subtype with type Name in AnnotWatermark shall have value Watermark</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Watermark"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotWatermark has incorrect value %2 instead of Watermark</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2842"/>
			<description>Entry Subtype in AnnotWatermark shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotWatermark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2843"/>
			<description>Entry FixedPrint with type Dictionary in AnnotWatermark shall be object FixedPrint</description>
			<test>FixedPrintHasTypeDictionary != true || FixedPrint_size == 1</test>
			<error>
				<message>Entry FixedPrint with type Dictionary in AnnotWatermark is not object FixedPrint</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2844"/>
			<description>Entry FixedPrint in AnnotWatermark shall have type Dictionary</description>
			<test>containsFixedPrint == false || FixedPrintHasTypeDictionary == true</test>
			<error>
				<message>Entry FixedPrint in AnnotWatermark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="7" testNumber="2845"/>
			<description>Entry Rect in AnnotWatermark is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotWatermark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2846"/>
			<description>Entry Rect in AnnotWatermark shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotWatermark is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2847"/>
			<description>Entry M in AnnotWatermark shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotWatermark is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2848"/>
			<description>Entry Type with type Name in AnnotWatermark shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotWatermark has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2849"/>
			<description>Entry Type in AnnotWatermark shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotWatermark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2850"/>
			<description>Entry NM in AnnotWatermark shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotWatermark is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2851"/>
			<description>Entry OC with type Dictionary in AnnotWatermark shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotWatermark is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2852"/>
			<description>Entry OC in AnnotWatermark shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotWatermark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2853"/>
			<description>Entry F in AnnotWatermark shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotWatermark is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="9" testNumber="2854"/>
			<description>Entry F with type Bitmask in AnnotWatermark shall correspond special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotWatermark doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2855"/>
			<description>Entry P with type Dictionary in AnnotWatermark shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWatermark is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="10" testNumber="2856"/>
			<description>Entry P with type Dictionary in AnnotWatermark shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWatermark is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2857"/>
			<description>Entry P in AnnotWatermark shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotWatermark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2858"/>
			<description>Entry AP with type Dictionary in AnnotWatermark shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotWatermark is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="11" testNumber="2859"/>
			<description>Entry AP in AnnotWatermark is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotWatermark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWatermark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2860"/>
			<description>Entry AP in AnnotWatermark shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotWatermark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="2923"/>
			<description>Entry with type Array in ColorSpaceMap shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ColorSpaceMap is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2924"/>
			<description>Entry with type Name in ColorSpaceMap shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>HasTypeName != true || NameValue == "DeviceCMYK" || NameValue == "DeviceRGB" || NameValue == "DeviceGray"</test>
			<error>
				<message>Entry %1 with type Name in ColorSpaceMap has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2925"/>
			<description>Entry in ColorSpaceMap shall have one of types: Name, Array</description>
			<test>HasTypeName == true || HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ColorSpaceMap is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="2" testNumber="2984"/>
			<description>WhitepointArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>WhitepointArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="2985"/>
			<description>Entry 0 with type Number in WhitepointArray shall correspond possible value predicate: fn:Eval(@0 &gt; 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt; 0</test>
			<error>
				<message>Entry 0 with type Number in WhitepointArray doesn't correspond possible value predicate: fn:Eval(@0 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2986"/>
			<description>Entry 0 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in WhitepointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="6" testNumber="2987"/>
			<description>Entry 1 with type Number in WhitepointArray shall have value 1</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue == 1</test>
			<error>
				<message>Entry 1 with type Number in WhitepointArray has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2988"/>
			<description>Entry 1 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in WhitepointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="2989"/>
			<description>Entry 2 with type Number in WhitepointArray shall correspond possible value predicate: fn:Eval(@2 &gt; 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt; 0</test>
			<error>
				<message>Entry 2 with type Number in WhitepointArray doesn't correspond possible value predicate: fn:Eval(@2 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="2990"/>
			<description>Entry 2 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in WhitepointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsW2Entry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3008"/>
			<description>Entry with type Array in ArrayOfCIDGlyphMetricsW2 shall be object ArrayOfNumbersGeneral</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfCIDGlyphMetricsW2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsW2Entry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3009"/>
			<description>Entry in ArrayOfCIDGlyphMetricsW2 shall have one of types: Array, Integer, Number</description>
			<test>HasTypeArray == true || HasTypeInteger == true || HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in ArrayOfCIDGlyphMetricsW2 is not one of types: Array, Integer, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="1" testNumber="3053"/>
			<description>SignatureReferenceUR shall not contain entries except Data, DigestMethod, Type, TransformMethod, TransformParams</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams').length == 0</test>
			<error>
				<message>SignatureReferenceUR contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3054"/>
			<description>Entry Data with type Array in SignatureReferenceUR shall be object _UniversalArray</description>
			<test>DataHasTypeArray != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Array in SignatureReferenceUR is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3055"/>
			<description>Entry Data with type Dictionary in SignatureReferenceUR shall be object _UniversalDictionary</description>
			<test>DataHasTypeDictionary != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Dictionary in SignatureReferenceUR is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3056"/>
			<description>Entry Data with type Stream in SignatureReferenceUR shall be object Stream</description>
			<test>DataHasTypeStream != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceUR is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="10" testNumber="3057"/>
			<description>Entry Data with type Stream in SignatureReferenceUR shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceUR is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3058"/>
			<description>Entry Data in SignatureReferenceUR shall have one of types: Name, Array, Boolean, Integer, Dictionary, Stream, String</description>
			<test>containsData == false || DataHasTypeName == true || DataHasTypeArray == true || DataHasTypeBoolean == true || DataHasTypeInteger == true || DataHasTypeDictionary == true || DataHasTypeStream == true || DataHasTypeString == true</test>
			<error>
				<message>Entry Data in SignatureReferenceUR is not one of types: Name, Array, Boolean, Integer, Dictionary, Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="13" testNumber="3059"/>
			<description>Entry DigestMethod with type Name in SignatureReferenceUR shall have one of values: SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</description>
			<test>DigestMethodHasTypeName != true || DigestMethodNameValue == "MD5" || DigestMethodNameValue == "SHA1" || DigestMethodNameValue == SHA3-256 || DigestMethodNameValue == SHA3-384 || DigestMethodNameValue == SHA3-512 || DigestMethodNameValue == SHAKE256</test>
			<error>
				<message>Entry DigestMethod with type Name in SignatureReferenceUR has incorrect value %2 instead of SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DigestMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3060"/>
			<description>Entry DigestMethod in SignatureReferenceUR shall have type Name</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeName == true</test>
			<error>
				<message>Entry DigestMethod in SignatureReferenceUR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3061"/>
			<description>Entry Type with type Name in SignatureReferenceUR shall have value SigRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigRef"</test>
			<error>
				<message>Entry Type with type Name in SignatureReferenceUR has incorrect value %2 instead of SigRef</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3062"/>
			<description>Entry Type in SignatureReferenceUR shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SignatureReferenceUR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="7" testNumber="3063"/>
			<description>Entry TransformMethod in SignatureReferenceUR is required</description>
			<test>containsTransformMethod == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceUR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3064"/>
			<description>Entry TransformMethod with type Name in SignatureReferenceUR shall have one of values: UR3, UR</description>
			<test>TransformMethodHasTypeName != true || TransformMethodNameValue == "UR" || TransformMethodNameValue == "UR3"</test>
			<error>
				<message>Entry TransformMethod with type Name in SignatureReferenceUR has incorrect value %2 instead of UR3, UR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransformMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3065"/>
			<description>Entry TransformMethod in SignatureReferenceUR shall have type Name</description>
			<test>containsTransformMethod == false || TransformMethodHasTypeName == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceUR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3066"/>
			<description>Entry TransformParams with type Dictionary in SignatureReferenceUR shall be object URTransformParameters</description>
			<test>TransformParamsHasTypeDictionary != true || TransformParams_size == 1</test>
			<error>
				<message>Entry TransformParams with type Dictionary in SignatureReferenceUR is not object URTransformParameters</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceUR">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3067"/>
			<description>Entry TransformParams in SignatureReferenceUR shall have type Dictionary</description>
			<test>containsTransformParams == false || TransformParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry TransformParams in SignatureReferenceUR is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="1" testNumber="3115"/>
			<description>SigFieldSeedValue shall not contain entries except Reasons, TimeStamp, Type, LockDocument, LegalAttestation, SubFilter, Ff, Cert, DigestMethod, V, AddRevInfo, AppearanceFilter, MDP, Filter</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Reasons' &amp;&amp; elem != 'TimeStamp' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'LockDocument' &amp;&amp; elem != 'LegalAttestation' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'V' &amp;&amp; elem != 'AddRevInfo' &amp;&amp; elem != 'AppearanceFilter' &amp;&amp; elem != 'MDP' &amp;&amp; elem != 'Filter').length == 0</test>
			<error>
				<message>SigFieldSeedValue contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Reasons' &amp;&amp; elem != 'TimeStamp' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'LockDocument' &amp;&amp; elem != 'LegalAttestation' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'V' &amp;&amp; elem != 'AddRevInfo' &amp;&amp; elem != 'AppearanceFilter' &amp;&amp; elem != 'MDP' &amp;&amp; elem != 'Filter').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3116"/>
			<description>Entry Reasons with type Array in SigFieldSeedValue shall be object ArrayOfStringsText</description>
			<test>ReasonsHasTypeArray != true || Reasons_size == 1</test>
			<error>
				<message>Entry Reasons with type Array in SigFieldSeedValue is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3117"/>
			<description>Entry Reasons in SigFieldSeedValue shall have type Array</description>
			<test>containsReasons == false || ReasonsHasTypeArray == true</test>
			<error>
				<message>Entry Reasons in SigFieldSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3118"/>
			<description>Entry TimeStamp with type Dictionary in SigFieldSeedValue shall be object TimeStampDict</description>
			<test>TimeStampHasTypeDictionary != true || TimeStamp_size == 1</test>
			<error>
				<message>Entry TimeStamp with type Dictionary in SigFieldSeedValue is not object TimeStampDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3119"/>
			<description>Entry TimeStamp in SigFieldSeedValue shall have type Dictionary</description>
			<test>containsTimeStamp == false || TimeStampHasTypeDictionary == true</test>
			<error>
				<message>Entry TimeStamp in SigFieldSeedValue is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3120"/>
			<description>Entry Type with type Name in SigFieldSeedValue shall have value SV</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SV"</test>
			<error>
				<message>Entry Type with type Name in SigFieldSeedValue has incorrect value %2 instead of SV</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3121"/>
			<description>Entry Type in SigFieldSeedValue shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SigFieldSeedValue is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3122"/>
			<description>Entry LockDocument with type Name in SigFieldSeedValue shall have one of values: auto, True, False</description>
			<test>LockDocumentHasTypeName != true || LockDocumentNameValue == "True" || LockDocumentNameValue == "False" || LockDocumentNameValue == "auto"</test>
			<error>
				<message>Entry LockDocument with type Name in SigFieldSeedValue has incorrect value %2 instead of auto, True, False</message>
				<arguments>
					<argument>keyName</argument>
					<argument>LockDocumentNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3123"/>
			<description>Entry LockDocument in SigFieldSeedValue shall have type Name</description>
			<test>containsLockDocument == false || LockDocumentHasTypeName == true</test>
			<error>
				<message>Entry LockDocument in SigFieldSeedValue is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3124"/>
			<description>Entry LegalAttestation with type Array in SigFieldSeedValue shall be object ArrayOfStringsText</description>
			<test>LegalAttestationHasTypeArray != true || LegalAttestation_size == 1</test>
			<error>
				<message>Entry LegalAttestation with type Array in SigFieldSeedValue is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3125"/>
			<description>Entry LegalAttestation in SigFieldSeedValue shall have type Array</description>
			<test>containsLegalAttestation == false || LegalAttestationHasTypeArray == true</test>
			<error>
				<message>Entry LegalAttestation in SigFieldSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3126"/>
			<description>Entry SubFilter with type Array in SigFieldSeedValue shall be object ArrayOfSignatureSubFilterNames</description>
			<test>SubFilterHasTypeArray != true || SubFilter_size == 1</test>
			<error>
				<message>Entry SubFilter with type Array in SigFieldSeedValue is not object ArrayOfSignatureSubFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3127"/>
			<description>Entry SubFilter in SigFieldSeedValue shall have type Array</description>
			<test>containsSubFilter == false || SubFilterHasTypeArray == true</test>
			<error>
				<message>Entry SubFilter in SigFieldSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3128"/>
			<description>Entry Ff in SigFieldSeedValue shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in SigFieldSeedValue is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="9" testNumber="3129"/>
			<description>Entry Ff with type Bitmask in SigFieldSeedValue shall correspond special case: fn:Eval(fn:BeforeVersion(2.0 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BitsClear(10 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in SigFieldSeedValue doesn't correspond special case: fn:Eval(fn:BeforeVersion(2.0 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BitsClear(10 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3130"/>
			<description>Entry Cert with type Dictionary in SigFieldSeedValue shall be object CertSeedValue</description>
			<test>CertHasTypeDictionary != true || Cert_size == 1</test>
			<error>
				<message>Entry Cert with type Dictionary in SigFieldSeedValue is not object CertSeedValue</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3131"/>
			<description>Entry Cert in SigFieldSeedValue shall have type Dictionary</description>
			<test>containsCert == false || CertHasTypeDictionary == true</test>
			<error>
				<message>Entry Cert in SigFieldSeedValue is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3132"/>
			<description>Entry DigestMethod with type Array in SigFieldSeedValue shall be object ArrayOfDigestMethod</description>
			<test>DigestMethodHasTypeArray != true || DigestMethod_size == 1</test>
			<error>
				<message>Entry DigestMethod with type Array in SigFieldSeedValue is not object ArrayOfDigestMethod</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3133"/>
			<description>Entry DigestMethod in SigFieldSeedValue shall have type Array</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeArray == true</test>
			<error>
				<message>Entry DigestMethod in SigFieldSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3134"/>
			<description>Entry V with type Integer in SigFieldSeedValue shall have one of values: 0, 1, 2, 3</description>
			<test>VHasTypeInteger != true || VIntegerValue == 0 || VIntegerValue == 1 || VIntegerValue == 2 || VIntegerValue == 3</test>
			<error>
				<message>Entry V with type Integer in SigFieldSeedValue has incorrect value %2 instead of 0, 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3135"/>
			<description>Entry V in SigFieldSeedValue shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in SigFieldSeedValue is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3136"/>
			<description>Entry AddRevInfo in SigFieldSeedValue shall have type Boolean</description>
			<test>containsAddRevInfo == false || AddRevInfoHasTypeBoolean == true</test>
			<error>
				<message>Entry AddRevInfo in SigFieldSeedValue is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3137"/>
			<description>Entry AppearanceFilter in SigFieldSeedValue shall have type StringText</description>
			<test>containsAppearanceFilter == false || AppearanceFilterHasTypeStringText == true</test>
			<error>
				<message>Entry AppearanceFilter in SigFieldSeedValue is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3138"/>
			<description>Entry MDP with type Dictionary in SigFieldSeedValue shall be object MDPDict</description>
			<test>MDPHasTypeDictionary != true || MDP_size == 1</test>
			<error>
				<message>Entry MDP with type Dictionary in SigFieldSeedValue is not object MDPDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3139"/>
			<description>Entry MDP in SigFieldSeedValue shall have type Dictionary</description>
			<test>containsMDP == false || MDPHasTypeDictionary == true</test>
			<error>
				<message>Entry MDP in SigFieldSeedValue is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3140"/>
			<description>Entry Filter in SigFieldSeedValue shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in SigFieldSeedValue is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeRenditions">
			<id specification="ISO_32000_1_7" clause="18" testNumber="3169"/>
			<description>Entry * in NameNameTreeRenditions shall be object NameNameTreeRenditionsEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeRenditions is not object NameNameTreeRenditionsEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3181"/>
			<description>Entry with type Dictionary in ArrayOfFields shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidget</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfFields is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field, AnnotWidget</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3182"/>
			<description>Entry in ArrayOfFields shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfFields is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="1" testNumber="3185"/>
			<description>RichMediaConfiguration shall not contain entries except Name, Instances, Type, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Instances' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>RichMediaConfiguration contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Instances' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3186"/>
			<description>Entry Name in RichMediaConfiguration shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in RichMediaConfiguration is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3187"/>
			<description>Entry Instances with type Array in RichMediaConfiguration shall be object ArrayOfRichMediaInstances</description>
			<test>InstancesHasTypeArray != true || Instances_size == 1</test>
			<error>
				<message>Entry Instances with type Array in RichMediaConfiguration is not object ArrayOfRichMediaInstances</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3188"/>
			<description>Entry Instances in RichMediaConfiguration shall have type Array</description>
			<test>containsInstances == false || InstancesHasTypeArray == true</test>
			<error>
				<message>Entry Instances in RichMediaConfiguration is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3189"/>
			<description>Entry Type with type Name in RichMediaConfiguration shall have value RichMediaConfiguration</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaConfiguration"</test>
			<error>
				<message>Entry Type with type Name in RichMediaConfiguration has incorrect value %2 instead of RichMediaConfiguration</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3190"/>
			<description>Entry Type in RichMediaConfiguration shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaConfiguration is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3191"/>
			<description>Entry Subtype with type Name in RichMediaConfiguration shall have one of values: 3D, Video, Sound</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "3D" || SubtypeNameValue == "Sound" || SubtypeNameValue == "Video"</test>
			<error>
				<message>Entry Subtype with type Name in RichMediaConfiguration has incorrect value %2 instead of 3D, Video, Sound</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaConfiguration">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3192"/>
			<description>Entry Subtype in RichMediaConfiguration shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in RichMediaConfiguration is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPMEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3204"/>
			<description>Entry with type Array in DPM shall be object _UniversalArray</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in DPM is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPMEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3205"/>
			<description>Entry with type Dictionary in DPM shall be object _UniversalDictionary</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in DPM is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPMEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3206"/>
			<description>Entry in DPM shall have one of types: Name, Array, Date, StringText, Boolean, Integer, Dictionary, Number</description>
			<test>HasTypeName == true || HasTypeArray == true || HasTypeDate == true || HasTypeStringText == true || HasTypeBoolean == true || HasTypeInteger == true || HasTypeDictionary == true || HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in DPM is not one of types: Name, Array, Date, StringText, Boolean, Integer, Dictionary, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="1" testNumber="3256"/>
			<description>MediaClipData shall not contain entries except P, CT, N, D, S, MH, Type, Alt, BE, PL</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'CT' &amp;&amp; elem != 'N' &amp;&amp; elem != 'D' &amp;&amp; elem != 'S' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Alt' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'PL').length == 0</test>
			<error>
				<message>MediaClipData contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'CT' &amp;&amp; elem != 'N' &amp;&amp; elem != 'D' &amp;&amp; elem != 'S' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Alt' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'PL').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3257"/>
			<description>Entry P with type Dictionary in MediaClipData shall be object MediaPermissions</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in MediaClipData is not object MediaPermissions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3258"/>
			<description>Entry P in MediaClipData shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in MediaClipData is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3259"/>
			<description>Entry CT in MediaClipData shall have type StringAscii</description>
			<test>containsCT == false || CTHasTypeStringAscii == true</test>
			<error>
				<message>Entry CT in MediaClipData is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3260"/>
			<description>Entry N in MediaClipData shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in MediaClipData is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3261"/>
			<description>Entry D with type Dictionary in MediaClipData shall be object FileSpecification</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in MediaClipData is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3262"/>
			<description>Entry D with type Stream in MediaClipData shall be object XObjectFormType1</description>
			<test>DHasTypeStream != true || D_size == 1</test>
			<error>
				<message>Entry D with type Stream in MediaClipData is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="3263"/>
			<description>Entry D in MediaClipData is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in MediaClipData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="10" testNumber="3264"/>
			<description>Entry D with type Stream in MediaClipData shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in MediaClipData is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3265"/>
			<description>Entry D in MediaClipData shall have one of types: Dictionary, Stream, String</description>
			<test>containsD == false || DHasTypeDictionary == true || DHasTypeStream == true || DHasTypeString == true</test>
			<error>
				<message>Entry D in MediaClipData is not one of types: Dictionary, Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="3266"/>
			<description>Entry S in MediaClipData is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaClipData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3267"/>
			<description>Entry S with type Name in MediaClipData shall have value MCD</description>
			<test>SHasTypeName != true || SNameValue == "MCD"</test>
			<error>
				<message>Entry S with type Name in MediaClipData has incorrect value %2 instead of MCD</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3268"/>
			<description>Entry S in MediaClipData shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaClipData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3269"/>
			<description>Entry MH with type Dictionary in MediaClipData shall be object MediaClipDataMHBE</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in MediaClipData is not object MediaClipDataMHBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3270"/>
			<description>Entry MH in MediaClipData shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaClipData is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3271"/>
			<description>Entry Type with type Name in MediaClipData shall have value MediaClip</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaClip"</test>
			<error>
				<message>Entry Type with type Name in MediaClipData has incorrect value %2 instead of MediaClip</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3272"/>
			<description>Entry Type in MediaClipData shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaClipData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3273"/>
			<description>Entry Alt with type Array in MediaClipData shall be object ArrayOfStringsText</description>
			<test>AltHasTypeArray != true || Alt_size == 1</test>
			<error>
				<message>Entry Alt with type Array in MediaClipData is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3274"/>
			<description>Entry Alt in MediaClipData shall have type Array</description>
			<test>containsAlt == false || AltHasTypeArray == true</test>
			<error>
				<message>Entry Alt in MediaClipData is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3275"/>
			<description>Entry BE with type Dictionary in MediaClipData shall be object MediaClipDataMHBE</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in MediaClipData is not object MediaClipDataMHBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3276"/>
			<description>Entry BE in MediaClipData shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaClipData is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3277"/>
			<description>Entry PL with type Dictionary in MediaClipData shall be object MediaPlayers</description>
			<test>PLHasTypeDictionary != true || PL_size == 1</test>
			<error>
				<message>Entry PL with type Dictionary in MediaClipData is not object MediaPlayers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3278"/>
			<description>Entry PL in MediaClipData shall have type Dictionary</description>
			<test>containsPL == false || PLHasTypeDictionary == true</test>
			<error>
				<message>Entry PL in MediaClipData is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="1" testNumber="3462"/>
			<description>AnnotUnderline shall not contain entries except Subj, Rect, Type, Contents, IT, P, AP, OC, RT, AS, F, QuadPoints, M, NM, Border, Popup, CA, StructParent, RC, ExData, Subtype, T, IRT, CreationDate, C</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Subj' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'C').length == 0</test>
			<error>
				<message>AnnotUnderline contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Subj' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'C').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3463"/>
			<description>Entry Subj in AnnotUnderline shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotUnderline is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="7" testNumber="3464"/>
			<description>Entry Rect in AnnotUnderline is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3465"/>
			<description>Entry Rect in AnnotUnderline shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotUnderline is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3466"/>
			<description>Entry Type with type Name in AnnotUnderline shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotUnderline has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3467"/>
			<description>Entry Type in AnnotUnderline shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotUnderline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3468"/>
			<description>Entry Contents in AnnotUnderline shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotUnderline is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3469"/>
			<description>Entry IT in AnnotUnderline shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotUnderline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3470"/>
			<description>Entry P with type Dictionary in AnnotUnderline shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotUnderline is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="10" testNumber="3471"/>
			<description>Entry P with type Dictionary in AnnotUnderline shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotUnderline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3472"/>
			<description>Entry P in AnnotUnderline shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3473"/>
			<description>Entry AP with type Dictionary in AnnotUnderline shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotUnderline is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="11" testNumber="3474"/>
			<description>Entry AP in AnnotUnderline is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3475"/>
			<description>Entry AP in AnnotUnderline shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3476"/>
			<description>Entry OC with type Dictionary in AnnotUnderline shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotUnderline is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3477"/>
			<description>Entry OC in AnnotUnderline shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3478"/>
			<description>Entry RT with type Name in AnnotUnderline shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotUnderline has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3479"/>
			<description>Entry RT in AnnotUnderline shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotUnderline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="11" testNumber="3480"/>
			<description>Entry AS in AnnotUnderline is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3481"/>
			<description>Entry AS in AnnotUnderline shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotUnderline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3482"/>
			<description>Entry F in AnnotUnderline shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotUnderline is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="9" testNumber="3483"/>
			<description>Entry F with type Bitmask in AnnotUnderline shall correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotUnderline doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3484"/>
			<description>Entry QuadPoints with type Array in AnnotUnderline shall be object ArrayOfQuadPoints</description>
			<test>QuadPointsHasTypeArray != true || QuadPoints_size == 1</test>
			<error>
				<message>Entry QuadPoints with type Array in AnnotUnderline is not object ArrayOfQuadPoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="7" testNumber="3485"/>
			<description>Entry QuadPoints in AnnotUnderline is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3486"/>
			<description>Entry QuadPoints in AnnotUnderline shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotUnderline is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3487"/>
			<description>Entry M in AnnotUnderline shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotUnderline is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3488"/>
			<description>Entry NM in AnnotUnderline shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotUnderline is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3489"/>
			<description>Entry Border with type Array in AnnotUnderline shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotUnderline is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3490"/>
			<description>Entry Border in AnnotUnderline shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotUnderline is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3491"/>
			<description>Entry Popup with type Dictionary in AnnotUnderline shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotUnderline is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="10" testNumber="3492"/>
			<description>Entry Popup with type Dictionary in AnnotUnderline shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotUnderline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3493"/>
			<description>Entry Popup in AnnotUnderline shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="14" testNumber="3494"/>
			<description>Entry CA with type Number in AnnotUnderline shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotUnderline doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3495"/>
			<description>Entry CA in AnnotUnderline shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotUnderline is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3496"/>
			<description>Entry StructParent in AnnotUnderline shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotUnderline is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3497"/>
			<description>Entry RC with type Stream in AnnotUnderline shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotUnderline is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="10" testNumber="3498"/>
			<description>Entry RC with type Stream in AnnotUnderline shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotUnderline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3499"/>
			<description>Entry RC in AnnotUnderline shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotUnderline is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3500"/>
			<description>Entry ExData with type Dictionary in AnnotUnderline shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotUnderline is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3501"/>
			<description>Entry ExData in AnnotUnderline shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="7" testNumber="3502"/>
			<description>Entry Subtype in AnnotUnderline is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3503"/>
			<description>Entry Subtype with type Name in AnnotUnderline shall have value Underline</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Underline"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotUnderline has incorrect value %2 instead of Underline</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3504"/>
			<description>Entry Subtype in AnnotUnderline shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotUnderline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3505"/>
			<description>Entry T in AnnotUnderline shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotUnderline is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3506"/>
			<description>Entry IRT with type Dictionary in AnnotUnderline shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotUnderline is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="11" testNumber="3507"/>
			<description>Entry IRT in AnnotUnderline is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotUnderline is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3508"/>
			<description>Entry IRT in AnnotUnderline shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotUnderline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3509"/>
			<description>Entry CreationDate in AnnotUnderline shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotUnderline is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3510"/>
			<description>Entry C with type Array in AnnotUnderline shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotUnderline is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotUnderline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3511"/>
			<description>Entry C in AnnotUnderline shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotUnderline is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="1" testNumber="3571"/>
			<description>GeographicCoordinateSystem shall not contain entries except EPSG, Type, WKT</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'EPSG' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'WKT').length == 0</test>
			<error>
				<message>GeographicCoordinateSystem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'EPSG' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'WKT').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3572"/>
			<description>Entry EPSG in GeographicCoordinateSystem shall have type Integer</description>
			<test>containsEPSG == false || EPSGHasTypeInteger == true</test>
			<error>
				<message>Entry EPSG in GeographicCoordinateSystem is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="9" testNumber="3573"/>
			<description>Entry EPSG with type Integer in GeographicCoordinateSystem shall correspond special case: fn:Eval(fn:Not(fn:IsPresent(WKT)))</description>
			<test>EPSGHasTypeInteger != true || (((containsWKT == true)) != true)</test>
			<error>
				<message>Entry EPSG with type Integer in GeographicCoordinateSystem doesn't correspond special case: fn:Eval(fn:Not(fn:IsPresent(WKT)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="7" testNumber="3574"/>
			<description>Entry Type in GeographicCoordinateSystem is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in GeographicCoordinateSystem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3575"/>
			<description>Entry Type with type Name in GeographicCoordinateSystem shall have value GEOGCS</description>
			<test>TypeHasTypeName != true || TypeNameValue == "GEOGCS"</test>
			<error>
				<message>Entry Type with type Name in GeographicCoordinateSystem has incorrect value %2 instead of GEOGCS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3576"/>
			<description>Entry Type in GeographicCoordinateSystem shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in GeographicCoordinateSystem is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3577"/>
			<description>Entry WKT in GeographicCoordinateSystem shall have type StringAscii</description>
			<test>containsWKT == false || WKTHasTypeStringAscii == true</test>
			<error>
				<message>Entry WKT in GeographicCoordinateSystem is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGeographicCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="9" testNumber="3578"/>
			<description>Entry WKT with type StringAscii in GeographicCoordinateSystem shall correspond special case: fn:Eval(fn:Not(fn:IsPresent(EPSG)))</description>
			<test>WKTHasTypeStringAscii != true || (((containsEPSG == true)) != true)</test>
			<error>
				<message>Entry WKT with type StringAscii in GeographicCoordinateSystem doesn't correspond special case: fn:Eval(fn:Not(fn:IsPresent(EPSG)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13">
			<id specification="ISO_32000_1_7" clause="1" testNumber="3602"/>
			<description>OPIVersion13 shall not contain entries except 1.3</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != '1.3').length == 0</test>
			<error>
				<message>OPIVersion13 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != '1.3').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3603"/>
			<description>Entry 1.3 with type Dictionary in OPIVersion13 shall be object OPIVersion13Dict</description>
			<test>entry13HasTypeDictionary != true || entry13_size == 1</test>
			<error>
				<message>Entry 1.3 with type Dictionary in OPIVersion13 is not object OPIVersion13Dict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3604"/>
			<description>Entry 1.3 in OPIVersion13 shall have type Dictionary</description>
			<test>contains13 == false || entry13HasTypeDictionary == true</test>
			<error>
				<message>Entry 1.3 in OPIVersion13 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSignatureReferencesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3612"/>
			<description>Entry with type Dictionary in ArrayOfSignatureReferences shall be one of objects SignatureReferenceDocMDP, SignatureReferenceFieldMDP, SignatureReferenceIdentity, SignatureReferenceUR</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfSignatureReferences is not one of objects SignatureReferenceDocMDP, SignatureReferenceFieldMDP, SignatureReferenceIdentity, SignatureReferenceUR</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSignatureReferencesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3613"/>
			<description>Entry in ArrayOfSignatureReferences shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfSignatureReferences is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20">
			<id specification="ISO_32000_1_7" clause="1" testNumber="3631"/>
			<description>OPIVersion20 shall not contain entries except 2.0</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != '2.0').length == 0</test>
			<error>
				<message>OPIVersion20 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != '2.0').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3632"/>
			<description>Entry 2.0 with type Dictionary in OPIVersion20 shall be object OPIVersion20Dict</description>
			<test>entry20HasTypeDictionary != true || entry20_size == 1</test>
			<error>
				<message>Entry 2.0 with type Dictionary in OPIVersion20 is not object OPIVersion20Dict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3633"/>
			<description>Entry 2.0 in OPIVersion20 shall have type Dictionary</description>
			<test>contains20 == false || entry20HasTypeDictionary == true</test>
			<error>
				<message>Entry 2.0 in OPIVersion20 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysXPTSValuesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3637"/>
			<description>Entry with type Array in ArrayOfArraysXPTSValues shall be object ArrayOfXPTSValues</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfArraysXPTSValues is not object ArrayOfXPTSValues</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysXPTSValuesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3638"/>
			<description>Entry in ArrayOfArraysXPTSValues shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ArrayOfArraysXPTSValues is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysXPTSValuesEntry">
			<id specification="ISO_32000_1_7" clause="9" testNumber="3639"/>
			<description>Entry with type Array in ArrayOfArraysXPTSValues shall correspond special case: fn:Eval(fn:ArrayLength(*) == fn:ArrayLength(parent::Names))</description>
			<test>HasTypeArray != true || (ArraySize == parentNamesArraySize)</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfArraysXPTSValues doesn't correspond special case: fn:Eval(fn:ArrayLength(*) == fn:ArrayLength(parent::Names))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNonNegativeIntegersGeneralEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3649"/>
			<description>Entry in ArrayOfNonNegativeIntegersGeneral shall have type Integer</description>
			<test>HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfNonNegativeIntegersGeneral is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNonNegativeIntegersGeneralEntry">
			<id specification="ISO_32000_1_7" clause="9" testNumber="3650"/>
			<description>Entry with type Integer in ArrayOfNonNegativeIntegersGeneral shall correspond special case: fn:Eval(@* &gt;= 0)</description>
			<test>HasTypeInteger != true || (IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry %1 with type Integer in ArrayOfNonNegativeIntegersGeneral doesn't correspond special case: fn:Eval(@* &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_7" clause="1" testNumber="3702"/>
			<description>Encoding shall not contain entries except BaseEncoding, Type, Differences</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseEncoding' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Differences').length == 0</test>
			<error>
				<message>Encoding contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseEncoding' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Differences').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3703"/>
			<description>Entry BaseEncoding with type Name in Encoding shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>BaseEncodingHasTypeName != true || BaseEncodingNameValue == "MacRomanEncoding" || BaseEncodingNameValue == "MacExpertEncoding" || BaseEncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry BaseEncoding with type Name in Encoding has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BaseEncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3704"/>
			<description>Entry BaseEncoding in Encoding shall have type Name</description>
			<test>containsBaseEncoding == false || BaseEncodingHasTypeName == true</test>
			<error>
				<message>Entry BaseEncoding in Encoding is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3705"/>
			<description>Entry Type with type Name in Encoding shall have value Encoding</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Encoding"</test>
			<error>
				<message>Entry Type with type Name in Encoding has incorrect value %2 instead of Encoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3706"/>
			<description>Entry Type in Encoding shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Encoding is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3707"/>
			<description>Entry Differences with type Array in Encoding shall be object ArrayOfDifferences</description>
			<test>DifferencesHasTypeArray != true || Differences_size == 1</test>
			<error>
				<message>Entry Differences with type Array in Encoding is not object ArrayOfDifferences</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3708"/>
			<description>Entry Differences in Encoding shall have type Array</description>
			<test>containsDifferences == false || DifferencesHasTypeArray == true</test>
			<error>
				<message>Entry Differences in Encoding is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="1" testNumber="3880"/>
			<description>XObjectFormPrinterMark shall not contain entries except PieceInfo, Ref, Type, Length, Measure, Filter, OC, FDecodeParms, LastModified, Matrix, Colorants, StructParent, Resources, Group, PtData, DL, BBox, F, StructParents, Subtype, OPI, DecodeParms, FFilter, FormType, MarkStyle, Metadata, Name</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PieceInfo' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Colorants' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'F' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'MarkStyle' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name').length == 0</test>
			<error>
				<message>XObjectFormPrinterMark contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PieceInfo' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Colorants' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'F' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'MarkStyle' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3881"/>
			<description>Entry PieceInfo with type Dictionary in XObjectFormPrinterMark shall be object PagePiece</description>
			<test>PieceInfoHasTypeDictionary != true || PieceInfo_size == 1</test>
			<error>
				<message>Entry PieceInfo with type Dictionary in XObjectFormPrinterMark is not object PagePiece</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3882"/>
			<description>Entry PieceInfo in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3883"/>
			<description>Entry Ref with type Dictionary in XObjectFormPrinterMark shall be object Reference</description>
			<test>RefHasTypeDictionary != true || Ref_size == 1</test>
			<error>
				<message>Entry Ref with type Dictionary in XObjectFormPrinterMark is not object Reference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3884"/>
			<description>Entry Ref in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsRef == false || RefHasTypeDictionary == true</test>
			<error>
				<message>Entry Ref in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3885"/>
			<description>Entry Type with type Name in XObjectFormPrinterMark shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormPrinterMark has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3886"/>
			<description>Entry Type in XObjectFormPrinterMark shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="7" testNumber="3887"/>
			<description>Entry Length in XObjectFormPrinterMark is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3888"/>
			<description>Entry Length in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormPrinterMark is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3889"/>
			<description>Entry Measure with type Dictionary in XObjectFormPrinterMark shall be one of objects MeasureRL, MeasureGEO</description>
			<test>MeasureHasTypeDictionary != true || Measure_size == 1</test>
			<error>
				<message>Entry Measure with type Dictionary in XObjectFormPrinterMark is not one of objects MeasureRL, MeasureGEO</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3890"/>
			<description>Entry Measure in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3891"/>
			<description>Entry Filter with type Array in XObjectFormPrinterMark shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPrinterMark is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3892"/>
			<description>Entry Filter with type Name in XObjectFormPrinterMark shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormPrinterMark has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3893"/>
			<description>Entry Filter in XObjectFormPrinterMark shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in XObjectFormPrinterMark is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="9" testNumber="3894"/>
			<description>Entry Filter with type Array in XObjectFormPrinterMark shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPrinterMark doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3895"/>
			<description>Entry OC with type Dictionary in XObjectFormPrinterMark shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectFormPrinterMark is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3896"/>
			<description>Entry OC in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3897"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPrinterMark shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPrinterMark is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3898"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormPrinterMark shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormPrinterMark is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3899"/>
			<description>Entry FDecodeParms in XObjectFormPrinterMark shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPrinterMark is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="9" testNumber="3900"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPrinterMark shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPrinterMark doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="11" testNumber="3901"/>
			<description>Entry LastModified in XObjectFormPrinterMark is required, when fn:IsRequired(fn:IsPresent(PieceInfo))</description>
			<test>(containsLastModified == true || ((containsPieceInfo == true)) == false)</test>
			<error>
				<message>Entry LastModified in XObjectFormPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3902"/>
			<description>Entry LastModified in XObjectFormPrinterMark shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in XObjectFormPrinterMark is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3903"/>
			<description>Entry Matrix in XObjectFormPrinterMark shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormPrinterMark is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3904"/>
			<description>Entry Colorants with type Dictionary in XObjectFormPrinterMark shall be object ColorantsDict</description>
			<test>ColorantsHasTypeDictionary != true || Colorants_size == 1</test>
			<error>
				<message>Entry Colorants with type Dictionary in XObjectFormPrinterMark is not object ColorantsDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3905"/>
			<description>Entry Colorants in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsColorants == false || ColorantsHasTypeDictionary == true</test>
			<error>
				<message>Entry Colorants in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3906"/>
			<description>Entry StructParent in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectFormPrinterMark is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3907"/>
			<description>Entry Resources with type Dictionary in XObjectFormPrinterMark shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in XObjectFormPrinterMark is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3908"/>
			<description>Entry Resources in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3909"/>
			<description>Entry Group with type Dictionary in XObjectFormPrinterMark shall be object GroupAttributes</description>
			<test>GroupHasTypeDictionary != true || Group_size == 1</test>
			<error>
				<message>Entry Group with type Dictionary in XObjectFormPrinterMark is not object GroupAttributes</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3910"/>
			<description>Entry Group in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsGroup == false || GroupHasTypeDictionary == true</test>
			<error>
				<message>Entry Group in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3911"/>
			<description>Entry PtData with type Dictionary in XObjectFormPrinterMark shall be object PointData</description>
			<test>PtDataHasTypeDictionary != true || PtData_size == 1</test>
			<error>
				<message>Entry PtData with type Dictionary in XObjectFormPrinterMark is not object PointData</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3912"/>
			<description>Entry PtData in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsPtData == false || PtDataHasTypeDictionary == true</test>
			<error>
				<message>Entry PtData in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3913"/>
			<description>Entry DL in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectFormPrinterMark is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="9" testNumber="3914"/>
			<description>Entry DL with type Integer in XObjectFormPrinterMark shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectFormPrinterMark doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="7" testNumber="3915"/>
			<description>Entry BBox in XObjectFormPrinterMark is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3916"/>
			<description>Entry BBox in XObjectFormPrinterMark shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormPrinterMark is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3917"/>
			<description>Entry F with type Dictionary in XObjectFormPrinterMark shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormPrinterMark is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3918"/>
			<description>Entry F in XObjectFormPrinterMark shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectFormPrinterMark is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3919"/>
			<description>Entry StructParents in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in XObjectFormPrinterMark is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="7" testNumber="3920"/>
			<description>Entry Subtype in XObjectFormPrinterMark is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3921"/>
			<description>Entry Subtype with type Name in XObjectFormPrinterMark shall have value Form</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Form"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormPrinterMark has incorrect value %2 instead of Form</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3922"/>
			<description>Entry Subtype in XObjectFormPrinterMark shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3923"/>
			<description>Entry OPI with type Dictionary in XObjectFormPrinterMark shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectFormPrinterMark is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3924"/>
			<description>Entry OPI in XObjectFormPrinterMark shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectFormPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3925"/>
			<description>Entry DecodeParms with type Array in XObjectFormPrinterMark shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPrinterMark is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3926"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormPrinterMark shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormPrinterMark is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3927"/>
			<description>Entry DecodeParms in XObjectFormPrinterMark shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPrinterMark is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="9" testNumber="3928"/>
			<description>Entry DecodeParms with type Array in XObjectFormPrinterMark shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPrinterMark doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3929"/>
			<description>Entry FFilter with type Array in XObjectFormPrinterMark shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPrinterMark is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3930"/>
			<description>Entry FFilter with type Name in XObjectFormPrinterMark shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormPrinterMark has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3931"/>
			<description>Entry FFilter in XObjectFormPrinterMark shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in XObjectFormPrinterMark is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="9" testNumber="3932"/>
			<description>Entry FFilter with type Array in XObjectFormPrinterMark shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPrinterMark doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="6" testNumber="3933"/>
			<description>Entry FormType with type Integer in XObjectFormPrinterMark shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormPrinterMark has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3934"/>
			<description>Entry FormType in XObjectFormPrinterMark shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormPrinterMark is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3935"/>
			<description>Entry MarkStyle in XObjectFormPrinterMark shall have type StringText</description>
			<test>containsMarkStyle == false || MarkStyleHasTypeStringText == true</test>
			<error>
				<message>Entry MarkStyle in XObjectFormPrinterMark is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="3936"/>
			<description>Entry Metadata with type Stream in XObjectFormPrinterMark shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormPrinterMark is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="10" testNumber="3937"/>
			<description>Entry Metadata with type Stream in XObjectFormPrinterMark shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormPrinterMark is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3938"/>
			<description>Entry Metadata in XObjectFormPrinterMark shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectFormPrinterMark is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="3939"/>
			<description>Entry Name in XObjectFormPrinterMark shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectFormPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4015"/>
			<description>Entry DefaultCryptFilter with type Dictionary in CryptFilterPublicKeyMap shall be object CryptFilterPublicKey</description>
			<test>DefaultCryptFilterHasTypeDictionary != true || DefaultCryptFilter_size == 1</test>
			<error>
				<message>Entry DefaultCryptFilter with type Dictionary in CryptFilterPublicKeyMap is not object CryptFilterPublicKey</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4016"/>
			<description>Entry DefaultCryptFilter in CryptFilterPublicKeyMap shall have type Dictionary</description>
			<test>containsDefaultCryptFilter == false || DefaultCryptFilterHasTypeDictionary == true</test>
			<error>
				<message>Entry DefaultCryptFilter in CryptFilterPublicKeyMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4017"/>
			<description>Entry DefaultCryptFilter with type Dictionary in CryptFilterPublicKeyMap shall correspond special case: fn:Eval(fn:Not(fn:IsPresent(StdCF)))</description>
			<test>DefaultCryptFilterHasTypeDictionary != true || (((containsStdCF == true)) != true)</test>
			<error>
				<message>Entry DefaultCryptFilter with type Dictionary in CryptFilterPublicKeyMap doesn't correspond special case: fn:Eval(fn:Not(fn:IsPresent(StdCF)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4018"/>
			<description>Entry DefEmbeddedFile with type Dictionary in CryptFilterPublicKeyMap shall be object CryptFilterPublicKey</description>
			<test>DefEmbeddedFileHasTypeDictionary != true || DefEmbeddedFile_size == 1</test>
			<error>
				<message>Entry DefEmbeddedFile with type Dictionary in CryptFilterPublicKeyMap is not object CryptFilterPublicKey</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4019"/>
			<description>Entry DefEmbeddedFile in CryptFilterPublicKeyMap shall have type Dictionary</description>
			<test>containsDefEmbeddedFile == false || DefEmbeddedFileHasTypeDictionary == true</test>
			<error>
				<message>Entry DefEmbeddedFile in CryptFilterPublicKeyMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMap">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4020"/>
			<description>Entry DefEmbeddedFile with type Dictionary in CryptFilterPublicKeyMap shall correspond special case: fn:Eval(fn:Not(fn:IsPresent(StdCF)))</description>
			<test>DefEmbeddedFileHasTypeDictionary != true || (((containsStdCF == true)) != true)</test>
			<error>
				<message>Entry DefEmbeddedFile with type Dictionary in CryptFilterPublicKeyMap doesn't correspond special case: fn:Eval(fn:Not(fn:IsPresent(StdCF)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCConfigEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4031"/>
			<description>Entry with type Dictionary in ArrayOfOCConfig shall be object OptContentConfig</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOCConfig is not object OptContentConfig</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCConfigEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4032"/>
			<description>Entry in ArrayOfOCConfig shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOCConfig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="1" testNumber="4035"/>
			<description>RichMediaCommand shall not contain entries except C, Type, A</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'A').length == 0</test>
			<error>
				<message>RichMediaCommand contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'A').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="7" testNumber="4036"/>
			<description>Entry C in RichMediaCommand is required</description>
			<test>containsC == true</test>
			<error>
				<message>Entry C in RichMediaCommand is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4037"/>
			<description>Entry C in RichMediaCommand shall have type StringText</description>
			<test>containsC == false || CHasTypeStringText == true</test>
			<error>
				<message>Entry C in RichMediaCommand is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="6" testNumber="4038"/>
			<description>Entry Type with type Name in RichMediaCommand shall have value RichMediaCommand</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaCommand"</test>
			<error>
				<message>Entry Type with type Name in RichMediaCommand has incorrect value %2 instead of RichMediaCommand</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4039"/>
			<description>Entry Type in RichMediaCommand shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaCommand is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4040"/>
			<description>Entry A with type Array in RichMediaCommand shall be object RichMediaCommandArray</description>
			<test>AHasTypeArray != true || A_size == 1</test>
			<error>
				<message>Entry A with type Array in RichMediaCommand is not object RichMediaCommandArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommand">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4041"/>
			<description>Entry A in RichMediaCommand shall have one of types: Array, StringText, Boolean, Integer, Number</description>
			<test>containsA == false || AHasTypeArray == true || AHasTypeStringText == true || AHasTypeBoolean == true || AHasTypeInteger == true || AHasTypeNumber == true</test>
			<error>
				<message>Entry A in RichMediaCommand is not one of types: Array, StringText, Boolean, Integer, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_7" clause="1" testNumber="4059"/>
			<description>BorderEffect shall not contain entries except S, I</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'I').length == 0</test>
			<error>
				<message>BorderEffect contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'I').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_7" clause="6" testNumber="4060"/>
			<description>Entry S with type Name in BorderEffect shall have one of values: C, S</description>
			<test>SHasTypeName != true || SNameValue == "C" || SNameValue == "S"</test>
			<error>
				<message>Entry S with type Name in BorderEffect has incorrect value %2 instead of C, S</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4061"/>
			<description>Entry S in BorderEffect shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in BorderEffect is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_7" clause="14" testNumber="4062"/>
			<description>Entry I with type Number in BorderEffect shall correspond possible value predicate: fn:Eval((@I &gt;= 0.0) &amp;&amp; (@I &lt;= 2.0))</description>
			<test>IHasTypeNumber != true || (INumberValue &gt;= 0.0) &amp;&amp; (INumberValue &lt;= 2.0)</test>
			<error>
				<message>Entry I with type Number in BorderEffect doesn't correspond possible value predicate: fn:Eval((@I &gt;= 0.0) &amp;&amp; (@I &lt;= 2.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderEffect">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4063"/>
			<description>Entry I in BorderEffect shall have type Number</description>
			<test>containsI == false || IHasTypeNumber == true</test>
			<error>
				<message>Entry I in BorderEffect is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="1" testNumber="4111"/>
			<description>AppearancePrinterMark shall not contain entries except N, D, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'D' &amp;&amp; elem != 'R').length == 0</test>
			<error>
				<message>AppearancePrinterMark contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'D' &amp;&amp; elem != 'R').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4112"/>
			<description>Entry N with type Dictionary in AppearancePrinterMark shall be object AppearancePrinterMarkSubDict</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in AppearancePrinterMark is not object AppearancePrinterMarkSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4113"/>
			<description>Entry N with type Stream in AppearancePrinterMark shall be object XObjectFormPrinterMark</description>
			<test>NHasTypeStream != true || N_size == 1</test>
			<error>
				<message>Entry N with type Stream in AppearancePrinterMark is not object XObjectFormPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="7" testNumber="4114"/>
			<description>Entry N in AppearancePrinterMark is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in AppearancePrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="10" testNumber="4115"/>
			<description>Entry N with type Stream in AppearancePrinterMark shall be indirect</description>
			<test>NHasTypeStream != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Stream in AppearancePrinterMark is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4116"/>
			<description>Entry N in AppearancePrinterMark shall have one of types: Dictionary, Stream</description>
			<test>containsN == false || NHasTypeDictionary == true || NHasTypeStream == true</test>
			<error>
				<message>Entry N in AppearancePrinterMark is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4117"/>
			<description>Entry D with type Dictionary in AppearancePrinterMark shall be object AppearancePrinterMarkSubDict</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in AppearancePrinterMark is not object AppearancePrinterMarkSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4118"/>
			<description>Entry D with type Stream in AppearancePrinterMark shall be object XObjectFormPrinterMark</description>
			<test>DHasTypeStream != true || D_size == 1</test>
			<error>
				<message>Entry D with type Stream in AppearancePrinterMark is not object XObjectFormPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="10" testNumber="4119"/>
			<description>Entry D with type Stream in AppearancePrinterMark shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in AppearancePrinterMark is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4120"/>
			<description>Entry D in AppearancePrinterMark shall have one of types: Dictionary, Stream</description>
			<test>containsD == false || DHasTypeDictionary == true || DHasTypeStream == true</test>
			<error>
				<message>Entry D in AppearancePrinterMark is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4121"/>
			<description>Entry R with type Dictionary in AppearancePrinterMark shall be object AppearancePrinterMarkSubDict</description>
			<test>RHasTypeDictionary != true || R_size == 1</test>
			<error>
				<message>Entry R with type Dictionary in AppearancePrinterMark is not object AppearancePrinterMarkSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4122"/>
			<description>Entry R with type Stream in AppearancePrinterMark shall be object XObjectFormPrinterMark</description>
			<test>RHasTypeStream != true || R_size == 1</test>
			<error>
				<message>Entry R with type Stream in AppearancePrinterMark is not object XObjectFormPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="10" testNumber="4123"/>
			<description>Entry R with type Stream in AppearancePrinterMark shall be indirect</description>
			<test>RHasTypeStream != true || isRIndirect == true</test>
			<error>
				<message>Entry R with type Stream in AppearancePrinterMark is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4124"/>
			<description>Entry R in AppearancePrinterMark shall have one of types: Dictionary, Stream</description>
			<test>containsR == false || RHasTypeDictionary == true || RHasTypeStream == true</test>
			<error>
				<message>Entry R in AppearancePrinterMark is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="1" testNumber="4139"/>
			<description>RichMediaCuePoint shall not contain entries except Type, Subtype, Name, Time, A</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Time' &amp;&amp; elem != 'A').length == 0</test>
			<error>
				<message>RichMediaCuePoint contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Time' &amp;&amp; elem != 'A').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="6" testNumber="4140"/>
			<description>Entry Type with type Name in RichMediaCuePoint shall have value CuePoint</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CuePoint"</test>
			<error>
				<message>Entry Type with type Name in RichMediaCuePoint has incorrect value %2 instead of CuePoint</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4141"/>
			<description>Entry Type in RichMediaCuePoint shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaCuePoint is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="6" testNumber="4142"/>
			<description>Entry Subtype with type Name in RichMediaCuePoint shall have one of values: Navigation, Event</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Navigation" || SubtypeNameValue == "Event"</test>
			<error>
				<message>Entry Subtype with type Name in RichMediaCuePoint has incorrect value %2 instead of Navigation, Event</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4143"/>
			<description>Entry Subtype in RichMediaCuePoint shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in RichMediaCuePoint is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="7" testNumber="4144"/>
			<description>Entry Name in RichMediaCuePoint is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in RichMediaCuePoint is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4145"/>
			<description>Entry Name in RichMediaCuePoint shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in RichMediaCuePoint is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="7" testNumber="4146"/>
			<description>Entry Time in RichMediaCuePoint is required</description>
			<test>containsTime == true</test>
			<error>
				<message>Entry Time in RichMediaCuePoint is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4147"/>
			<description>Entry Time in RichMediaCuePoint shall have type Number</description>
			<test>containsTime == false || TimeHasTypeNumber == true</test>
			<error>
				<message>Entry Time in RichMediaCuePoint is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4148"/>
			<description>Entry A with type Dictionary in RichMediaCuePoint shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript, ActionRichMediaExecute</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in RichMediaCuePoint is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript, ActionRichMediaExecute</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="7" testNumber="4149"/>
			<description>Entry A in RichMediaCuePoint is required</description>
			<test>containsA == true</test>
			<error>
				<message>Entry A in RichMediaCuePoint is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCuePoint">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4150"/>
			<description>Entry A in RichMediaCuePoint shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in RichMediaCuePoint is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContentNameTreeAssetsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4163"/>
			<description>Entry with type Dictionary in RichMediaContentNameTreeAssets shall be object FileSpecification</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in RichMediaContentNameTreeAssets is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContentNameTreeAssetsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4164"/>
			<description>Entry in RichMediaContentNameTreeAssets shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in RichMediaContentNameTreeAssets is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionItemEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4167"/>
			<description>Entry with type Dictionary in CollectionItem shall be object CollectionSubitem</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in CollectionItem is not object CollectionSubitem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionItemEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4168"/>
			<description>Entry in CollectionItem shall have one of types: Date, StringText, Dictionary, Number</description>
			<test>HasTypeDate == true || HasTypeStringText == true || HasTypeDictionary == true || HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in CollectionItem is not one of types: Date, StringText, Dictionary, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="1" testNumber="4171"/>
			<description>RequirementsEnableJavaScripts shall not contain entries except RH, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'RH' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>RequirementsEnableJavaScripts contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'RH' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4172"/>
			<description>Entry RH with type Array in RequirementsEnableJavaScripts shall be object ArrayOfRequirementsHandlers</description>
			<test>RHHasTypeArray != true || RH_size == 1</test>
			<error>
				<message>Entry RH with type Array in RequirementsEnableJavaScripts is not object ArrayOfRequirementsHandlers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4173"/>
			<description>Entry RH with type Dictionary in RequirementsEnableJavaScripts shall be object RequirementsHandler</description>
			<test>RHHasTypeDictionary != true || RH_size == 1</test>
			<error>
				<message>Entry RH with type Dictionary in RequirementsEnableJavaScripts is not object RequirementsHandler</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4174"/>
			<description>Entry RH in RequirementsEnableJavaScripts shall have one of types: Array, Dictionary</description>
			<test>containsRH == false || RHHasTypeArray == true || RHHasTypeDictionary == true</test>
			<error>
				<message>Entry RH in RequirementsEnableJavaScripts is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="7" testNumber="4175"/>
			<description>Entry S in RequirementsEnableJavaScripts is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in RequirementsEnableJavaScripts is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="6" testNumber="4176"/>
			<description>Entry S with type Name in RequirementsEnableJavaScripts shall have value EnableJavaScripts</description>
			<test>SHasTypeName != true || SNameValue == "EnableJavaScripts"</test>
			<error>
				<message>Entry S with type Name in RequirementsEnableJavaScripts has incorrect value %2 instead of EnableJavaScripts</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4177"/>
			<description>Entry S in RequirementsEnableJavaScripts shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in RequirementsEnableJavaScripts is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="6" testNumber="4178"/>
			<description>Entry Type with type Name in RequirementsEnableJavaScripts shall have value Requirement</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Requirement"</test>
			<error>
				<message>Entry Type with type Name in RequirementsEnableJavaScripts has incorrect value %2 instead of Requirement</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARequirementsEnableJavaScripts">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4179"/>
			<description>Entry Type in RequirementsEnableJavaScripts shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RequirementsEnableJavaScripts is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="1" testNumber="4279"/>
			<description>LegalAttestation shall not contain entries except DevDepGS_UCR, GoToRemoteActions, AlternateImages, DevDepGS_OP, ExternalRefXobjects, DevDepGS_BG, DevDepGS_TR, Annotations, DevDepGS_HT, MovieActions, OptionalContent, URIActions, Attestation, DevDepGS_FL, HideAnnotationActions, LaunchActions, TrueTypeFonts, JavaScriptActions, SoundActions, ExternalOPIdicts, ExternalStreams, NonEmbeddedFonts</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DevDepGS_UCR' &amp;&amp; elem != 'GoToRemoteActions' &amp;&amp; elem != 'AlternateImages' &amp;&amp; elem != 'DevDepGS_OP' &amp;&amp; elem != 'ExternalRefXobjects' &amp;&amp; elem != 'DevDepGS_BG' &amp;&amp; elem != 'DevDepGS_TR' &amp;&amp; elem != 'Annotations' &amp;&amp; elem != 'DevDepGS_HT' &amp;&amp; elem != 'MovieActions' &amp;&amp; elem != 'OptionalContent' &amp;&amp; elem != 'URIActions' &amp;&amp; elem != 'Attestation' &amp;&amp; elem != 'DevDepGS_FL' &amp;&amp; elem != 'HideAnnotationActions' &amp;&amp; elem != 'LaunchActions' &amp;&amp; elem != 'TrueTypeFonts' &amp;&amp; elem != 'JavaScriptActions' &amp;&amp; elem != 'SoundActions' &amp;&amp; elem != 'ExternalOPIdicts' &amp;&amp; elem != 'ExternalStreams' &amp;&amp; elem != 'NonEmbeddedFonts').length == 0</test>
			<error>
				<message>LegalAttestation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DevDepGS_UCR' &amp;&amp; elem != 'GoToRemoteActions' &amp;&amp; elem != 'AlternateImages' &amp;&amp; elem != 'DevDepGS_OP' &amp;&amp; elem != 'ExternalRefXobjects' &amp;&amp; elem != 'DevDepGS_BG' &amp;&amp; elem != 'DevDepGS_TR' &amp;&amp; elem != 'Annotations' &amp;&amp; elem != 'DevDepGS_HT' &amp;&amp; elem != 'MovieActions' &amp;&amp; elem != 'OptionalContent' &amp;&amp; elem != 'URIActions' &amp;&amp; elem != 'Attestation' &amp;&amp; elem != 'DevDepGS_FL' &amp;&amp; elem != 'HideAnnotationActions' &amp;&amp; elem != 'LaunchActions' &amp;&amp; elem != 'TrueTypeFonts' &amp;&amp; elem != 'JavaScriptActions' &amp;&amp; elem != 'SoundActions' &amp;&amp; elem != 'ExternalOPIdicts' &amp;&amp; elem != 'ExternalStreams' &amp;&amp; elem != 'NonEmbeddedFonts').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4280"/>
			<description>Entry DevDepGS_UCR in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_UCR == false || DevDepGS_UCRHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_UCR in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4281"/>
			<description>Entry DevDepGS_UCR with type Integer in LegalAttestation shall correspond special case: fn:Eval(@DevDepGS_UCR &gt;= 0)</description>
			<test>DevDepGS_UCRHasTypeInteger != true || (DevDepGS_UCRIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_UCR with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@DevDepGS_UCR &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4282"/>
			<description>Entry GoToRemoteActions in LegalAttestation shall have type Integer</description>
			<test>containsGoToRemoteActions == false || GoToRemoteActionsHasTypeInteger == true</test>
			<error>
				<message>Entry GoToRemoteActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4283"/>
			<description>Entry GoToRemoteActions with type Integer in LegalAttestation shall correspond special case: fn:Eval(@GoToRemoteActions &gt;= 0)</description>
			<test>GoToRemoteActionsHasTypeInteger != true || (GoToRemoteActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry GoToRemoteActions with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@GoToRemoteActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4284"/>
			<description>Entry AlternateImages in LegalAttestation shall have type Integer</description>
			<test>containsAlternateImages == false || AlternateImagesHasTypeInteger == true</test>
			<error>
				<message>Entry AlternateImages in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4285"/>
			<description>Entry AlternateImages with type Integer in LegalAttestation shall correspond special case: fn:Eval(@AlternateImages &gt;= 0)</description>
			<test>AlternateImagesHasTypeInteger != true || (AlternateImagesIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry AlternateImages with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@AlternateImages &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4286"/>
			<description>Entry DevDepGS_OP in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_OP == false || DevDepGS_OPHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_OP in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4287"/>
			<description>Entry DevDepGS_OP with type Integer in LegalAttestation shall correspond special case: fn:Eval(@DevDepGS_OP &gt;= 0)</description>
			<test>DevDepGS_OPHasTypeInteger != true || (DevDepGS_OPIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_OP with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@DevDepGS_OP &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4288"/>
			<description>Entry ExternalRefXobjects in LegalAttestation shall have type Integer</description>
			<test>containsExternalRefXobjects == false || ExternalRefXobjectsHasTypeInteger == true</test>
			<error>
				<message>Entry ExternalRefXobjects in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4289"/>
			<description>Entry ExternalRefXobjects with type Integer in LegalAttestation shall correspond special case: fn:Eval(@ExternalRefXobjects &gt;= 0)</description>
			<test>ExternalRefXobjectsHasTypeInteger != true || (ExternalRefXobjectsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry ExternalRefXobjects with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@ExternalRefXobjects &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4290"/>
			<description>Entry DevDepGS_BG in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_BG == false || DevDepGS_BGHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_BG in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4291"/>
			<description>Entry DevDepGS_BG with type Integer in LegalAttestation shall correspond special case: fn:Eval(@DevDepGS_BG &gt;= 0)</description>
			<test>DevDepGS_BGHasTypeInteger != true || (DevDepGS_BGIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_BG with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@DevDepGS_BG &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4292"/>
			<description>Entry DevDepGS_TR in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_TR == false || DevDepGS_TRHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_TR in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4293"/>
			<description>Entry DevDepGS_TR with type Integer in LegalAttestation shall correspond special case: fn:Eval(@DevDepGS_TR &gt;= 0)</description>
			<test>DevDepGS_TRHasTypeInteger != true || (DevDepGS_TRIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_TR with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@DevDepGS_TR &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4294"/>
			<description>Entry Annotations in LegalAttestation shall have type Integer</description>
			<test>containsAnnotations == false || AnnotationsHasTypeInteger == true</test>
			<error>
				<message>Entry Annotations in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4295"/>
			<description>Entry Annotations with type Integer in LegalAttestation shall correspond special case: fn:Eval(@Annotations &gt;= 0)</description>
			<test>AnnotationsHasTypeInteger != true || (AnnotationsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Annotations with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@Annotations &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4296"/>
			<description>Entry DevDepGS_HT in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_HT == false || DevDepGS_HTHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_HT in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4297"/>
			<description>Entry DevDepGS_HT with type Integer in LegalAttestation shall correspond special case: fn:Eval(@DevDepGS_HT &gt;= 0)</description>
			<test>DevDepGS_HTHasTypeInteger != true || (DevDepGS_HTIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_HT with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@DevDepGS_HT &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4298"/>
			<description>Entry MovieActions in LegalAttestation shall have type Integer</description>
			<test>containsMovieActions == false || MovieActionsHasTypeInteger == true</test>
			<error>
				<message>Entry MovieActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4299"/>
			<description>Entry MovieActions with type Integer in LegalAttestation shall correspond special case: fn:Eval(@MovieActions &gt;= 0)</description>
			<test>MovieActionsHasTypeInteger != true || (MovieActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry MovieActions with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@MovieActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4300"/>
			<description>Entry OptionalContent in LegalAttestation shall have type Boolean</description>
			<test>containsOptionalContent == false || OptionalContentHasTypeBoolean == true</test>
			<error>
				<message>Entry OptionalContent in LegalAttestation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4301"/>
			<description>Entry URIActions in LegalAttestation shall have type Integer</description>
			<test>containsURIActions == false || URIActionsHasTypeInteger == true</test>
			<error>
				<message>Entry URIActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4302"/>
			<description>Entry URIActions with type Integer in LegalAttestation shall correspond special case: fn:Eval(@URIActions &gt;= 0)</description>
			<test>URIActionsHasTypeInteger != true || (URIActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry URIActions with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@URIActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4303"/>
			<description>Entry Attestation in LegalAttestation shall have type StringText</description>
			<test>containsAttestation == false || AttestationHasTypeStringText == true</test>
			<error>
				<message>Entry Attestation in LegalAttestation is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4304"/>
			<description>Entry DevDepGS_FL in LegalAttestation shall have type Integer</description>
			<test>containsDevDepGS_FL == false || DevDepGS_FLHasTypeInteger == true</test>
			<error>
				<message>Entry DevDepGS_FL in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4305"/>
			<description>Entry DevDepGS_FL with type Integer in LegalAttestation shall correspond special case: fn:Eval(@DevDepGS_FL &gt;= 0)</description>
			<test>DevDepGS_FLHasTypeInteger != true || (DevDepGS_FLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DevDepGS_FL with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@DevDepGS_FL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4306"/>
			<description>Entry HideAnnotationActions in LegalAttestation shall have type Integer</description>
			<test>containsHideAnnotationActions == false || HideAnnotationActionsHasTypeInteger == true</test>
			<error>
				<message>Entry HideAnnotationActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4307"/>
			<description>Entry HideAnnotationActions with type Integer in LegalAttestation shall correspond special case: fn:Eval(@HideAnnotationActions &gt;= 0)</description>
			<test>HideAnnotationActionsHasTypeInteger != true || (HideAnnotationActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry HideAnnotationActions with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@HideAnnotationActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4308"/>
			<description>Entry LaunchActions in LegalAttestation shall have type Integer</description>
			<test>containsLaunchActions == false || LaunchActionsHasTypeInteger == true</test>
			<error>
				<message>Entry LaunchActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4309"/>
			<description>Entry LaunchActions with type Integer in LegalAttestation shall correspond special case: fn:Eval(@LaunchActions &gt;= 0)</description>
			<test>LaunchActionsHasTypeInteger != true || (LaunchActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry LaunchActions with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@LaunchActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4310"/>
			<description>Entry TrueTypeFonts in LegalAttestation shall have type Integer</description>
			<test>containsTrueTypeFonts == false || TrueTypeFontsHasTypeInteger == true</test>
			<error>
				<message>Entry TrueTypeFonts in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4311"/>
			<description>Entry TrueTypeFonts with type Integer in LegalAttestation shall correspond special case: fn:Eval(@TrueTypeFonts &gt;= 0)</description>
			<test>TrueTypeFontsHasTypeInteger != true || (TrueTypeFontsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry TrueTypeFonts with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@TrueTypeFonts &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4312"/>
			<description>Entry JavaScriptActions in LegalAttestation shall have type Integer</description>
			<test>containsJavaScriptActions == false || JavaScriptActionsHasTypeInteger == true</test>
			<error>
				<message>Entry JavaScriptActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4313"/>
			<description>Entry JavaScriptActions with type Integer in LegalAttestation shall correspond special case: fn:Eval(@JavaScriptActions &gt;= 0)</description>
			<test>JavaScriptActionsHasTypeInteger != true || (JavaScriptActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry JavaScriptActions with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@JavaScriptActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4314"/>
			<description>Entry SoundActions in LegalAttestation shall have type Integer</description>
			<test>containsSoundActions == false || SoundActionsHasTypeInteger == true</test>
			<error>
				<message>Entry SoundActions in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4315"/>
			<description>Entry SoundActions with type Integer in LegalAttestation shall correspond special case: fn:Eval(@SoundActions &gt;= 0)</description>
			<test>SoundActionsHasTypeInteger != true || (SoundActionsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry SoundActions with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@SoundActions &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4316"/>
			<description>Entry ExternalOPIdicts in LegalAttestation shall have type Integer</description>
			<test>containsExternalOPIdicts == false || ExternalOPIdictsHasTypeInteger == true</test>
			<error>
				<message>Entry ExternalOPIdicts in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4317"/>
			<description>Entry ExternalOPIdicts with type Integer in LegalAttestation shall correspond special case: fn:Eval(@ExternalOPIdicts &gt;= 0)</description>
			<test>ExternalOPIdictsHasTypeInteger != true || (ExternalOPIdictsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry ExternalOPIdicts with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@ExternalOPIdicts &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4318"/>
			<description>Entry ExternalStreams in LegalAttestation shall have type Integer</description>
			<test>containsExternalStreams == false || ExternalStreamsHasTypeInteger == true</test>
			<error>
				<message>Entry ExternalStreams in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4319"/>
			<description>Entry ExternalStreams with type Integer in LegalAttestation shall correspond special case: fn:Eval(@ExternalStreams &gt;= 0)</description>
			<test>ExternalStreamsHasTypeInteger != true || (ExternalStreamsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry ExternalStreams with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@ExternalStreams &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4320"/>
			<description>Entry NonEmbeddedFonts in LegalAttestation shall have type Integer</description>
			<test>containsNonEmbeddedFonts == false || NonEmbeddedFontsHasTypeInteger == true</test>
			<error>
				<message>Entry NonEmbeddedFonts in LegalAttestation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALegalAttestation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="4321"/>
			<description>Entry NonEmbeddedFonts with type Integer in LegalAttestation shall correspond special case: fn:Eval(@NonEmbeddedFonts &gt;= 0)</description>
			<test>NonEmbeddedFontsHasTypeInteger != true || (NonEmbeddedFontsIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry NonEmbeddedFonts with type Integer in LegalAttestation doesn't correspond special case: fn:Eval(@NonEmbeddedFonts &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGStateEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4371"/>
			<description>Entry with type Dictionary in ArrayOfOCGState shall be object OptContentGroup</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOCGState is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGStateEntry">
			<id specification="ISO_32000_1_7" clause="6" testNumber="4372"/>
			<description>Entry with type Name in ArrayOfOCGState shall have one of values: Toggle, OFF, ON</description>
			<test>HasTypeName != true || NameValue == "ON" || NameValue == "OFF" || NameValue == "Toggle"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfOCGState has incorrect value %2 instead of Toggle, OFF, ON</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGStateEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4373"/>
			<description>Entry in ArrayOfOCGState shall have one of types: Name, Dictionary</description>
			<test>HasTypeName == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOCGState is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="1" testNumber="4494"/>
			<description>ActionThread shall not contain entries except B, S, D, Type, F, Next</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'S' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Next').length == 0</test>
			<error>
				<message>ActionThread contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'S' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Next').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4495"/>
			<description>Entry B with type Dictionary in ActionThread shall be object Bead</description>
			<test>BHasTypeDictionary != true || B_size == 1</test>
			<error>
				<message>Entry B with type Dictionary in ActionThread is not object Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="10" testNumber="4496"/>
			<description>Entry B with type Dictionary in ActionThread shall be indirect</description>
			<test>BHasTypeDictionary != true || isBIndirect == true</test>
			<error>
				<message>Entry B with type Dictionary in ActionThread is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="14" testNumber="4497"/>
			<description>Entry B with type Integer in ActionThread shall correspond possible value predicate: fn:Eval(@B &gt;= 0)</description>
			<test>BHasTypeInteger != true || BIntegerValue &gt;= 0</test>
			<error>
				<message>Entry B with type Integer in ActionThread doesn't correspond possible value predicate: fn:Eval(@B &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4498"/>
			<description>Entry B in ActionThread shall have one of types: Integer, Dictionary</description>
			<test>containsB == false || BHasTypeInteger == true || BHasTypeDictionary == true</test>
			<error>
				<message>Entry B in ActionThread is not one of types: Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="7" testNumber="4499"/>
			<description>Entry S in ActionThread is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionThread is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="6" testNumber="4500"/>
			<description>Entry S with type Name in ActionThread shall have value Thread</description>
			<test>SHasTypeName != true || SNameValue == "Thread"</test>
			<error>
				<message>Entry S with type Name in ActionThread has incorrect value %2 instead of Thread</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4501"/>
			<description>Entry S in ActionThread shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionThread is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4502"/>
			<description>Entry D with type Dictionary in ActionThread shall be object Thread</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in ActionThread is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="7" testNumber="4503"/>
			<description>Entry D in ActionThread is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionThread is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="10" testNumber="4504"/>
			<description>Entry D with type Dictionary in ActionThread shall be indirect</description>
			<test>DHasTypeDictionary != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Dictionary in ActionThread is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="14" testNumber="4505"/>
			<description>Entry D with type Integer in ActionThread shall correspond possible value predicate: fn:Eval((@D &gt;= 0) &amp;&amp; (@D &lt; fn:ArrayLength(trailer::Catalog::Threads)))</description>
			<test>DHasTypeInteger != true || (DIntegerValue &gt;= 0) &amp;&amp; (DIntegerValue &lt; trailerCatalogThreadsArraySize)</test>
			<error>
				<message>Entry D with type Integer in ActionThread doesn't correspond possible value predicate: fn:Eval((@D &gt;= 0) &amp;&amp; (@D &lt; fn:ArrayLength(trailer::Catalog::Threads)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4506"/>
			<description>Entry D in ActionThread shall have one of types: StringText, Integer, Dictionary</description>
			<test>containsD == false || DHasTypeStringText == true || DHasTypeInteger == true || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in ActionThread is not one of types: StringText, Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="6" testNumber="4507"/>
			<description>Entry Type with type Name in ActionThread shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionThread has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4508"/>
			<description>Entry Type in ActionThread shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionThread is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4509"/>
			<description>Entry F with type Dictionary in ActionThread shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionThread is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4510"/>
			<description>Entry F in ActionThread shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionThread is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4511"/>
			<description>Entry Next with type Array in ActionThread shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionThread is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4512"/>
			<description>Entry Next with type Dictionary in ActionThread shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionThread is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4513"/>
			<description>Entry Next in ActionThread shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionThread is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentExport">
			<id specification="ISO_32000_1_7" clause="1" testNumber="4542"/>
			<description>OptContentExport shall not contain entries except ExportState</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ExportState').length == 0</test>
			<error>
				<message>OptContentExport contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ExportState').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentExport">
			<id specification="ISO_32000_1_7" clause="7" testNumber="4543"/>
			<description>Entry ExportState in OptContentExport is required</description>
			<test>containsExportState == true</test>
			<error>
				<message>Entry ExportState in OptContentExport is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentExport">
			<id specification="ISO_32000_1_7" clause="6" testNumber="4544"/>
			<description>Entry ExportState with type Name in OptContentExport shall have one of values: OFF, ON</description>
			<test>ExportStateHasTypeName != true || ExportStateNameValue == "ON" || ExportStateNameValue == "OFF"</test>
			<error>
				<message>Entry ExportState with type Name in OptContentExport has incorrect value %2 instead of OFF, ON</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ExportStateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentExport">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4545"/>
			<description>Entry ExportState in OptContentExport shall have type Name</description>
			<test>containsExportState == false || ExportStateHasTypeName == true</test>
			<error>
				<message>Entry ExportState in OptContentExport is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegers">
			<id specification="ISO_32000_1_7" clause="3" testNumber="4552"/>
			<description>ArrayOfXRefIndexIntegers shall contain 2*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>ArrayOfXRefIndexIntegers contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAlternatePresentations">
			<id specification="ISO_32000_1_7" clause="18" testNumber="4557"/>
			<description>Entry * in NameNameTreeAlternatePresentations shall be object NameNameTreeAlternatePresentationsEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeAlternatePresentations is not object NameNameTreeAlternatePresentationsEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="1" testNumber="4869"/>
			<description>GraphicsStateParameter shall not contain entries except Font, UCR2, ca, SMask, AIS, BM, UCR, HT, BG, AAPL:ST, CA, LC, AAPL:AA, OP, ML, HTP, OPM, LW, D, op, TR, TR2, BG2, RI, SM, LJ, SA, TK, Type, FL</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Font' &amp;&amp; elem != 'UCR2' &amp;&amp; elem != 'ca' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'AIS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'UCR' &amp;&amp; elem != 'HT' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'AAPL:ST' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'LC' &amp;&amp; elem != 'AAPL:AA' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'ML' &amp;&amp; elem != 'HTP' &amp;&amp; elem != 'OPM' &amp;&amp; elem != 'LW' &amp;&amp; elem != 'D' &amp;&amp; elem != 'op' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'TR2' &amp;&amp; elem != 'BG2' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'SM' &amp;&amp; elem != 'LJ' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'TK' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FL').length == 0</test>
			<error>
				<message>GraphicsStateParameter contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Font' &amp;&amp; elem != 'UCR2' &amp;&amp; elem != 'ca' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'AIS' &amp;&amp; elem != 'BM' &amp;&amp; elem != 'UCR' &amp;&amp; elem != 'HT' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'AAPL:ST' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'LC' &amp;&amp; elem != 'AAPL:AA' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'ML' &amp;&amp; elem != 'HTP' &amp;&amp; elem != 'OPM' &amp;&amp; elem != 'LW' &amp;&amp; elem != 'D' &amp;&amp; elem != 'op' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'TR2' &amp;&amp; elem != 'BG2' &amp;&amp; elem != 'RI' &amp;&amp; elem != 'SM' &amp;&amp; elem != 'LJ' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'TK' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FL').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4870"/>
			<description>Entry Font with type Array in GraphicsStateParameter shall be object ArrayOfFontAndSize</description>
			<test>FontHasTypeArray != true || Font_size == 1</test>
			<error>
				<message>Entry Font with type Array in GraphicsStateParameter is not object ArrayOfFontAndSize</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4871"/>
			<description>Entry Font in GraphicsStateParameter shall have type Array</description>
			<test>containsFont == false || FontHasTypeArray == true</test>
			<error>
				<message>Entry Font in GraphicsStateParameter is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4872"/>
			<description>Entry UCR2 with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>UCR2HasTypeDictionary != true || UCR2_size == 1</test>
			<error>
				<message>Entry UCR2 with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4873"/>
			<description>Entry UCR2 with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>UCR2HasTypeStream != true || UCR2_size == 1</test>
			<error>
				<message>Entry UCR2 with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="10" testNumber="4874"/>
			<description>Entry UCR2 with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>UCR2HasTypeStream != true || isUCR2Indirect == true</test>
			<error>
				<message>Entry UCR2 with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4875"/>
			<description>Entry UCR2 in GraphicsStateParameter shall have one of types: Name, Dictionary, Stream</description>
			<test>containsUCR2 == false || UCR2HasTypeName == true || UCR2HasTypeDictionary == true || UCR2HasTypeStream == true</test>
			<error>
				<message>Entry UCR2 in GraphicsStateParameter is not one of types: Name, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="14" testNumber="4876"/>
			<description>Entry ca with type Number in GraphicsStateParameter shall correspond possible value predicate: fn:Eval((@ca &gt;= 0) &amp;&amp; (@ca &lt;= 1))</description>
			<test>caHasTypeNumber != true || (caNumberValue &gt;= 0) &amp;&amp; (caNumberValue &lt;= 1)</test>
			<error>
				<message>Entry ca with type Number in GraphicsStateParameter doesn't correspond possible value predicate: fn:Eval((@ca &gt;= 0) &amp;&amp; (@ca &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4877"/>
			<description>Entry ca in GraphicsStateParameter shall have type Number</description>
			<test>containsca == false || caHasTypeNumber == true</test>
			<error>
				<message>Entry ca in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4878"/>
			<description>Entry SMask with type Dictionary in GraphicsStateParameter shall be one of objects SoftMaskAlpha, SoftMaskLuminosity</description>
			<test>SMaskHasTypeDictionary != true || SMask_size == 1</test>
			<error>
				<message>Entry SMask with type Dictionary in GraphicsStateParameter is not one of objects SoftMaskAlpha, SoftMaskLuminosity</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="6" testNumber="4879"/>
			<description>Entry SMask with type Name in GraphicsStateParameter shall have value None</description>
			<test>SMaskHasTypeName != true || SMaskNameValue == "None"</test>
			<error>
				<message>Entry SMask with type Name in GraphicsStateParameter has incorrect value %2 instead of None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SMaskNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4880"/>
			<description>Entry SMask in GraphicsStateParameter shall have one of types: Name, Dictionary</description>
			<test>containsSMask == false || SMaskHasTypeName == true || SMaskHasTypeDictionary == true</test>
			<error>
				<message>Entry SMask in GraphicsStateParameter is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4881"/>
			<description>Entry AIS in GraphicsStateParameter shall have type Boolean</description>
			<test>containsAIS == false || AISHasTypeBoolean == true</test>
			<error>
				<message>Entry AIS in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4882"/>
			<description>Entry BM with type Array in GraphicsStateParameter shall be object ArrayOfBlendModes</description>
			<test>BMHasTypeArray != true || BM_size == 1</test>
			<error>
				<message>Entry BM with type Array in GraphicsStateParameter is not object ArrayOfBlendModes</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="19" testNumber="4883"/>
			<description>Entry BM with type Name in GraphicsStateParameter shouldn't have deprecated value "Compatible"</description>
			<test>BMNameValue != "Compatible"</test>
			<error>
				<message>Entry BM with type Name in GraphicsStateParameter has deprecated value "Compatible"</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="13" testNumber="4884"/>
			<description>Entry BM with type Name in GraphicsStateParameter shall have one of values: Screen, ColorDodge, Saturation, Color, Luminosity, Darken, Difference, Compatible, Normal, SoftLight, ColorBurn, Multiply, Exclusion, HardLight, Hue, Overlay, Lighten</description>
			<test>BMHasTypeName != true || BMNameValue == "Compatible" || BMNameValue == "Normal" || BMNameValue == "Multiply" || BMNameValue == "Screen" || BMNameValue == "Difference" || BMNameValue == "Darken" || BMNameValue == "Lighten" || BMNameValue == "ColorDodge" || BMNameValue == "ColorBurn" || BMNameValue == "Exclusion" || BMNameValue == "HardLight" || BMNameValue == "Overlay" || BMNameValue == "SoftLight" || BMNameValue == "Luminosity" || BMNameValue == "Hue" || BMNameValue == "Saturation" || BMNameValue == "Color"</test>
			<error>
				<message>Entry BM with type Name in GraphicsStateParameter has incorrect value %2 instead of Screen, ColorDodge, Saturation, Color, Luminosity, Darken, Difference, Compatible, Normal, SoftLight, ColorBurn, Multiply, Exclusion, HardLight, Hue, Overlay, Lighten</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BMNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4885"/>
			<description>Entry BM in GraphicsStateParameter shall have one of types: Name, Array</description>
			<test>containsBM == false || BMHasTypeName == true || BMHasTypeArray == true</test>
			<error>
				<message>Entry BM in GraphicsStateParameter is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4886"/>
			<description>Entry UCR with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>UCRHasTypeDictionary != true || UCR_size == 1</test>
			<error>
				<message>Entry UCR with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4887"/>
			<description>Entry UCR with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>UCRHasTypeStream != true || UCR_size == 1</test>
			<error>
				<message>Entry UCR with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="10" testNumber="4888"/>
			<description>Entry UCR with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>UCRHasTypeStream != true || isUCRIndirect == true</test>
			<error>
				<message>Entry UCR with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4889"/>
			<description>Entry UCR in GraphicsStateParameter shall have one of types: Dictionary, Stream</description>
			<test>containsUCR == false || UCRHasTypeDictionary == true || UCRHasTypeStream == true</test>
			<error>
				<message>Entry UCR in GraphicsStateParameter is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4890"/>
			<description>Entry HT with type Dictionary in GraphicsStateParameter shall be one of objects HalftoneType1, HalftoneType5</description>
			<test>HTHasTypeDictionary != true || HT_size == 1</test>
			<error>
				<message>Entry HT with type Dictionary in GraphicsStateParameter is not one of objects HalftoneType1, HalftoneType5</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4891"/>
			<description>Entry HT with type Stream in GraphicsStateParameter shall be one of objects HalftoneType6, HalftoneType10, HalftoneType16</description>
			<test>HTHasTypeStream != true || HT_size == 1</test>
			<error>
				<message>Entry HT with type Stream in GraphicsStateParameter is not one of objects HalftoneType6, HalftoneType10, HalftoneType16</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="10" testNumber="4892"/>
			<description>Entry HT with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>HTHasTypeStream != true || isHTIndirect == true</test>
			<error>
				<message>Entry HT with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4893"/>
			<description>Entry HT in GraphicsStateParameter shall have one of types: Name, Dictionary, Stream</description>
			<test>containsHT == false || HTHasTypeName == true || HTHasTypeDictionary == true || HTHasTypeStream == true</test>
			<error>
				<message>Entry HT in GraphicsStateParameter is not one of types: Name, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4894"/>
			<description>Entry BG with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>BGHasTypeDictionary != true || BG_size == 1</test>
			<error>
				<message>Entry BG with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4895"/>
			<description>Entry BG with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>BGHasTypeStream != true || BG_size == 1</test>
			<error>
				<message>Entry BG with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="10" testNumber="4896"/>
			<description>Entry BG with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>BGHasTypeStream != true || isBGIndirect == true</test>
			<error>
				<message>Entry BG with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4897"/>
			<description>Entry BG in GraphicsStateParameter shall have one of types: Dictionary, Stream</description>
			<test>containsBG == false || BGHasTypeDictionary == true || BGHasTypeStream == true</test>
			<error>
				<message>Entry BG in GraphicsStateParameter is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4898"/>
			<description>Entry AAPL:ST with type Dictionary in GraphicsStateParameter shall be object AAPL_ST</description>
			<test>AAPLSTHasTypeDictionary != true || AAPLST_size == 1</test>
			<error>
				<message>Entry AAPL:ST with type Dictionary in GraphicsStateParameter is not object AAPL_ST</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4899"/>
			<description>Entry AAPL:ST in GraphicsStateParameter shall have one of types: Name, Dictionary</description>
			<test>containsAAPLST == false || AAPLSTHasTypeName == true || AAPLSTHasTypeDictionary == true</test>
			<error>
				<message>Entry AAPL:ST in GraphicsStateParameter is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="14" testNumber="4900"/>
			<description>Entry CA with type Number in GraphicsStateParameter shall correspond possible value predicate: fn:Eval((@CA &gt;= 0) &amp;&amp; (@CA &lt;= 1))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0) &amp;&amp; (CANumberValue &lt;= 1)</test>
			<error>
				<message>Entry CA with type Number in GraphicsStateParameter doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0) &amp;&amp; (@CA &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4901"/>
			<description>Entry CA in GraphicsStateParameter shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="14" testNumber="4902"/>
			<description>Entry LC with type Integer in GraphicsStateParameter shall correspond possible value predicate: fn:Eval((@LC &gt;= 0) &amp;&amp; (@LC &lt;= 2))</description>
			<test>LCHasTypeInteger != true || (LCIntegerValue &gt;= 0) &amp;&amp; (LCIntegerValue &lt;= 2)</test>
			<error>
				<message>Entry LC with type Integer in GraphicsStateParameter doesn't correspond possible value predicate: fn:Eval((@LC &gt;= 0) &amp;&amp; (@LC &lt;= 2))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4903"/>
			<description>Entry LC in GraphicsStateParameter shall have type Integer</description>
			<test>containsLC == false || LCHasTypeInteger == true</test>
			<error>
				<message>Entry LC in GraphicsStateParameter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4904"/>
			<description>Entry AAPL:AA in GraphicsStateParameter shall have type Boolean</description>
			<test>containsAAPLAA == false || AAPLAAHasTypeBoolean == true</test>
			<error>
				<message>Entry AAPL:AA in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4905"/>
			<description>Entry OP in GraphicsStateParameter shall have type Boolean</description>
			<test>containsOP == false || OPHasTypeBoolean == true</test>
			<error>
				<message>Entry OP in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="14" testNumber="4906"/>
			<description>Entry ML with type Number in GraphicsStateParameter shall correspond possible value predicate: fn:Eval(@ML &gt;= 1)</description>
			<test>MLHasTypeNumber != true || MLNumberValue &gt;= 1</test>
			<error>
				<message>Entry ML with type Number in GraphicsStateParameter doesn't correspond possible value predicate: fn:Eval(@ML &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4907"/>
			<description>Entry ML in GraphicsStateParameter shall have type Number</description>
			<test>containsML == false || MLHasTypeNumber == true</test>
			<error>
				<message>Entry ML in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4908"/>
			<description>Entry HTP with type Array in GraphicsStateParameter shall be object ArrayOf_2Integers</description>
			<test>HTPHasTypeArray != true || HTP_size == 1</test>
			<error>
				<message>Entry HTP with type Array in GraphicsStateParameter is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="5" testNumber="4909"/>
			<description>Entry HTP in GraphicsStateParameter is deprecated since PDF 1.3</description>
			<test>containsHTP == false</test>
			<error>
				<message>Entry HTP in GraphicsStateParameter is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4910"/>
			<description>Entry HTP in GraphicsStateParameter shall have type Array</description>
			<test>containsHTP == false || HTPHasTypeArray == true</test>
			<error>
				<message>Entry HTP in GraphicsStateParameter is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="14" testNumber="4911"/>
			<description>Entry OPM with type Integer in GraphicsStateParameter shall correspond possible value predicate: fn:Eval((@OPM &gt;= 0) &amp;&amp; (@OPM &lt;= 1))</description>
			<test>OPMHasTypeInteger != true || (OPMIntegerValue &gt;= 0) &amp;&amp; (OPMIntegerValue &lt;= 1)</test>
			<error>
				<message>Entry OPM with type Integer in GraphicsStateParameter doesn't correspond possible value predicate: fn:Eval((@OPM &gt;= 0) &amp;&amp; (@OPM &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4912"/>
			<description>Entry OPM in GraphicsStateParameter shall have type Integer</description>
			<test>containsOPM == false || OPMHasTypeInteger == true</test>
			<error>
				<message>Entry OPM in GraphicsStateParameter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="14" testNumber="4913"/>
			<description>Entry LW with type Number in GraphicsStateParameter shall correspond possible value predicate: fn:Eval(@LW &gt;= 0)</description>
			<test>LWHasTypeNumber != true || LWNumberValue &gt;= 0</test>
			<error>
				<message>Entry LW with type Number in GraphicsStateParameter doesn't correspond possible value predicate: fn:Eval(@LW &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4914"/>
			<description>Entry LW in GraphicsStateParameter shall have type Number</description>
			<test>containsLW == false || LWHasTypeNumber == true</test>
			<error>
				<message>Entry LW in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4915"/>
			<description>Entry D with type Array in GraphicsStateParameter shall be object ArrayOfGSPDashPatterns</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in GraphicsStateParameter is not object ArrayOfGSPDashPatterns</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4916"/>
			<description>Entry D in GraphicsStateParameter shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in GraphicsStateParameter is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4917"/>
			<description>Entry op in GraphicsStateParameter shall have type Boolean</description>
			<test>containsop == false || opHasTypeBoolean == true</test>
			<error>
				<message>Entry op in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4918"/>
			<description>Entry TR with type Array in GraphicsStateParameter shall be object ArrayOf4Functions</description>
			<test>TRHasTypeArray != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Array in GraphicsStateParameter is not object ArrayOf4Functions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4919"/>
			<description>Entry TR with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>TRHasTypeDictionary != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4920"/>
			<description>Entry TR with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>TRHasTypeStream != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="10" testNumber="4921"/>
			<description>Entry TR with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>TRHasTypeStream != true || isTRIndirect == true</test>
			<error>
				<message>Entry TR with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4922"/>
			<description>Entry TR in GraphicsStateParameter shall have one of types: Name, Array, Dictionary, Stream</description>
			<test>containsTR == false || TRHasTypeName == true || TRHasTypeArray == true || TRHasTypeDictionary == true || TRHasTypeStream == true</test>
			<error>
				<message>Entry TR in GraphicsStateParameter is not one of types: Name, Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4923"/>
			<description>Entry TR2 with type Array in GraphicsStateParameter shall be object ArrayOf4Functions</description>
			<test>TR2HasTypeArray != true || TR2_size == 1</test>
			<error>
				<message>Entry TR2 with type Array in GraphicsStateParameter is not object ArrayOf4Functions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4924"/>
			<description>Entry TR2 with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>TR2HasTypeDictionary != true || TR2_size == 1</test>
			<error>
				<message>Entry TR2 with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4925"/>
			<description>Entry TR2 with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>TR2HasTypeStream != true || TR2_size == 1</test>
			<error>
				<message>Entry TR2 with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="10" testNumber="4926"/>
			<description>Entry TR2 with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>TR2HasTypeStream != true || isTR2Indirect == true</test>
			<error>
				<message>Entry TR2 with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4927"/>
			<description>Entry TR2 in GraphicsStateParameter shall have one of types: Name, Array, Dictionary, Stream</description>
			<test>containsTR2 == false || TR2HasTypeName == true || TR2HasTypeArray == true || TR2HasTypeDictionary == true || TR2HasTypeStream == true</test>
			<error>
				<message>Entry TR2 in GraphicsStateParameter is not one of types: Name, Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4928"/>
			<description>Entry BG2 with type Dictionary in GraphicsStateParameter shall be one of objects FunctionType2, FunctionType3</description>
			<test>BG2HasTypeDictionary != true || BG2_size == 1</test>
			<error>
				<message>Entry BG2 with type Dictionary in GraphicsStateParameter is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="4929"/>
			<description>Entry BG2 with type Stream in GraphicsStateParameter shall be one of objects FunctionType0, FunctionType4</description>
			<test>BG2HasTypeStream != true || BG2_size == 1</test>
			<error>
				<message>Entry BG2 with type Stream in GraphicsStateParameter is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="10" testNumber="4930"/>
			<description>Entry BG2 with type Stream in GraphicsStateParameter shall be indirect</description>
			<test>BG2HasTypeStream != true || isBG2Indirect == true</test>
			<error>
				<message>Entry BG2 with type Stream in GraphicsStateParameter is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4931"/>
			<description>Entry BG2 in GraphicsStateParameter shall have one of types: Name, Dictionary, Stream</description>
			<test>containsBG2 == false || BG2HasTypeName == true || BG2HasTypeDictionary == true || BG2HasTypeStream == true</test>
			<error>
				<message>Entry BG2 in GraphicsStateParameter is not one of types: Name, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="6" testNumber="4932"/>
			<description>Entry RI with type Name in GraphicsStateParameter shall have one of values: AbsoluteColorimetric, Perceptual, Saturation, RelativeColorimetric</description>
			<test>RIHasTypeName != true || RINameValue == "AbsoluteColorimetric" || RINameValue == "RelativeColorimetric" || RINameValue == "Saturation" || RINameValue == "Perceptual"</test>
			<error>
				<message>Entry RI with type Name in GraphicsStateParameter has incorrect value %2 instead of AbsoluteColorimetric, Perceptual, Saturation, RelativeColorimetric</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RINameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4933"/>
			<description>Entry RI in GraphicsStateParameter shall have type Name</description>
			<test>containsRI == false || RIHasTypeName == true</test>
			<error>
				<message>Entry RI in GraphicsStateParameter is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="14" testNumber="4934"/>
			<description>Entry SM with type Number in GraphicsStateParameter shall correspond possible value predicate: fn:Eval((@SM &gt;= 0) &amp;&amp; (@SM &lt;= 1))</description>
			<test>SMHasTypeNumber != true || (SMNumberValue &gt;= 0) &amp;&amp; (SMNumberValue &lt;= 1)</test>
			<error>
				<message>Entry SM with type Number in GraphicsStateParameter doesn't correspond possible value predicate: fn:Eval((@SM &gt;= 0) &amp;&amp; (@SM &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4935"/>
			<description>Entry SM in GraphicsStateParameter shall have type Number</description>
			<test>containsSM == false || SMHasTypeNumber == true</test>
			<error>
				<message>Entry SM in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="14" testNumber="4936"/>
			<description>Entry LJ with type Integer in GraphicsStateParameter shall correspond possible value predicate: fn:Eval((@LJ &gt;= 0) &amp;&amp; (@LJ &lt;= 2))</description>
			<test>LJHasTypeInteger != true || (LJIntegerValue &gt;= 0) &amp;&amp; (LJIntegerValue &lt;= 2)</test>
			<error>
				<message>Entry LJ with type Integer in GraphicsStateParameter doesn't correspond possible value predicate: fn:Eval((@LJ &gt;= 0) &amp;&amp; (@LJ &lt;= 2))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4937"/>
			<description>Entry LJ in GraphicsStateParameter shall have type Integer</description>
			<test>containsLJ == false || LJHasTypeInteger == true</test>
			<error>
				<message>Entry LJ in GraphicsStateParameter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4938"/>
			<description>Entry SA in GraphicsStateParameter shall have type Boolean</description>
			<test>containsSA == false || SAHasTypeBoolean == true</test>
			<error>
				<message>Entry SA in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4939"/>
			<description>Entry TK in GraphicsStateParameter shall have type Boolean</description>
			<test>containsTK == false || TKHasTypeBoolean == true</test>
			<error>
				<message>Entry TK in GraphicsStateParameter is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="6" testNumber="4940"/>
			<description>Entry Type with type Name in GraphicsStateParameter shall have value ExtGState</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ExtGState"</test>
			<error>
				<message>Entry Type with type Name in GraphicsStateParameter has incorrect value %2 instead of ExtGState</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4941"/>
			<description>Entry Type in GraphicsStateParameter shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in GraphicsStateParameter is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="14" testNumber="4942"/>
			<description>Entry FL with type Number in GraphicsStateParameter shall correspond possible value predicate: fn:Eval(@FL &gt; 0)</description>
			<test>FLHasTypeNumber != true || FLNumberValue &gt; 0</test>
			<error>
				<message>Entry FL with type Number in GraphicsStateParameter doesn't correspond possible value predicate: fn:Eval(@FL &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="4943"/>
			<description>Entry FL in GraphicsStateParameter shall have type Number</description>
			<test>containsFL == false || FLHasTypeNumber == true</test>
			<error>
				<message>Entry FL in GraphicsStateParameter is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAlternatePresentationsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5030"/>
			<description>Entry with type Dictionary in NameNameTreeAlternatePresentations shall be object SlideShow</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeAlternatePresentations is not object SlideShow</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAlternatePresentationsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5031"/>
			<description>Entry in NameNameTreeAlternatePresentations shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in NameNameTreeAlternatePresentations is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamDocumentArrayEntry">
			<id specification="ISO_32000_1_7" clause="6" testNumber="5045"/>
			<description>Entry with type Name in URTransformParamDocumentArray shall have value FullSave</description>
			<test>HasTypeName != true || NameValue == "FullSave"</test>
			<error>
				<message>Entry %1 with type Name in URTransformParamDocumentArray has incorrect value %2 instead of FullSave</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamDocumentArrayEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5046"/>
			<description>Entry in URTransformParamDocumentArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in URTransformParamDocumentArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="1" testNumber="5067"/>
			<description>MediaPlayers shall not contain entries except Type, A, NU, MU</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'A' &amp;&amp; elem != 'NU' &amp;&amp; elem != 'MU').length == 0</test>
			<error>
				<message>MediaPlayers contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'A' &amp;&amp; elem != 'NU' &amp;&amp; elem != 'MU').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="6" testNumber="5068"/>
			<description>Entry Type with type Name in MediaPlayers shall have value MediaPlayers</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaPlayers"</test>
			<error>
				<message>Entry Type with type Name in MediaPlayers has incorrect value %2 instead of MediaPlayers</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5069"/>
			<description>Entry Type in MediaPlayers shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaPlayers is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5070"/>
			<description>Entry A with type Array in MediaPlayers shall be object ArrayOfMediaPlayerInfo</description>
			<test>AHasTypeArray != true || A_size == 1</test>
			<error>
				<message>Entry A with type Array in MediaPlayers is not object ArrayOfMediaPlayerInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5071"/>
			<description>Entry A in MediaPlayers shall have type Array</description>
			<test>containsA == false || AHasTypeArray == true</test>
			<error>
				<message>Entry A in MediaPlayers is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5072"/>
			<description>Entry NU with type Array in MediaPlayers shall be object ArrayOfMediaPlayerInfo</description>
			<test>NUHasTypeArray != true || NU_size == 1</test>
			<error>
				<message>Entry NU with type Array in MediaPlayers is not object ArrayOfMediaPlayerInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5073"/>
			<description>Entry NU in MediaPlayers shall have type Array</description>
			<test>containsNU == false || NUHasTypeArray == true</test>
			<error>
				<message>Entry NU in MediaPlayers is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5074"/>
			<description>Entry MU with type Array in MediaPlayers shall be object ArrayOfMediaPlayerInfo</description>
			<test>MUHasTypeArray != true || MU_size == 1</test>
			<error>
				<message>Entry MU with type Array in MediaPlayers is not object ArrayOfMediaPlayerInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5075"/>
			<description>Entry MU in MediaPlayers shall have type Array</description>
			<test>containsMU == false || MUHasTypeArray == true</test>
			<error>
				<message>Entry MU in MediaPlayers is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="1" testNumber="5085"/>
			<description>RichMediaWindow shall not contain entries except Type, Width, Position, Height</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'Height').length == 0</test>
			<error>
				<message>RichMediaWindow contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'Height').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="6" testNumber="5086"/>
			<description>Entry Type with type Name in RichMediaWindow shall have value RichMediaWindow</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaWindow"</test>
			<error>
				<message>Entry Type with type Name in RichMediaWindow has incorrect value %2 instead of RichMediaWindow</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5087"/>
			<description>Entry Type in RichMediaWindow shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaWindow is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5088"/>
			<description>Entry Width with type Dictionary in RichMediaWindow shall be object RichMediaWidth</description>
			<test>WidthHasTypeDictionary != true || Width_size == 1</test>
			<error>
				<message>Entry Width with type Dictionary in RichMediaWindow is not object RichMediaWidth</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5089"/>
			<description>Entry Width in RichMediaWindow shall have type Dictionary</description>
			<test>containsWidth == false || WidthHasTypeDictionary == true</test>
			<error>
				<message>Entry Width in RichMediaWindow is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5090"/>
			<description>Entry Position with type Dictionary in RichMediaWindow shall be object RichMediaPosition</description>
			<test>PositionHasTypeDictionary != true || Position_size == 1</test>
			<error>
				<message>Entry Position with type Dictionary in RichMediaWindow is not object RichMediaPosition</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5091"/>
			<description>Entry Position in RichMediaWindow shall have type Dictionary</description>
			<test>containsPosition == false || PositionHasTypeDictionary == true</test>
			<error>
				<message>Entry Position in RichMediaWindow is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5092"/>
			<description>Entry Height with type Dictionary in RichMediaWindow shall be object RichMediaHeight</description>
			<test>HeightHasTypeDictionary != true || Height_size == 1</test>
			<error>
				<message>Entry Height with type Dictionary in RichMediaWindow is not object RichMediaHeight</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWindow">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5093"/>
			<description>Entry Height in RichMediaWindow shall have type Dictionary</description>
			<test>containsHeight == false || HeightHasTypeDictionary == true</test>
			<error>
				<message>Entry Height in RichMediaWindow is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeURLSEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5107"/>
			<description>Entry with type Dictionary in NameNameTreeURLS shall be one of objects WebCaptureImageSet, WebCapturePageSet</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeURLS is not one of objects WebCaptureImageSet, WebCapturePageSet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeXFAResourcesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5109"/>
			<description>Entry with type Stream in NameNameTreeXFAResources shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in NameNameTreeXFAResources is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeXFAResourcesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5110"/>
			<description>Entry in NameNameTreeXFAResources shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in NameNameTreeXFAResources is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="1" testNumber="5127"/>
			<description>OptContentCreatorInfo shall not contain entries except SubType, Subtype, Creator</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'SubType' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Creator').length == 0</test>
			<error>
				<message>OptContentCreatorInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'SubType' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Creator').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="7" testNumber="5128"/>
			<description>Entry SubType in OptContentCreatorInfo is required</description>
			<test>containsSubType == true</test>
			<error>
				<message>Entry SubType in OptContentCreatorInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5129"/>
			<description>Entry SubType in OptContentCreatorInfo shall have type Name</description>
			<test>containsSubType == false || SubTypeHasTypeName == true</test>
			<error>
				<message>Entry SubType in OptContentCreatorInfo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="7" testNumber="5130"/>
			<description>Entry Subtype in OptContentCreatorInfo is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in OptContentCreatorInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5131"/>
			<description>Entry Subtype in OptContentCreatorInfo shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in OptContentCreatorInfo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="7" testNumber="5132"/>
			<description>Entry Creator in OptContentCreatorInfo is required</description>
			<test>containsCreator == true</test>
			<error>
				<message>Entry Creator in OptContentCreatorInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentCreatorInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5133"/>
			<description>Entry Creator in OptContentCreatorInfo shall have type StringText</description>
			<test>containsCreator == false || CreatorHasTypeStringText == true</test>
			<error>
				<message>Entry Creator in OptContentCreatorInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDPartArraysEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5143"/>
			<description>Entry with type Array in ArrayOfDPartArrays shall be object ArrayOfDParts</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfDPartArrays is not object ArrayOfDParts</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDPartArraysEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5144"/>
			<description>Entry in ArrayOfDPartArrays shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ArrayOfDPartArrays is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="1" testNumber="5203"/>
			<description>Field shall not contain entries except AA, T, Parent, TU, TM, Kids, Ff</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Ff').length == 0</test>
			<error>
				<message>Field contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Ff').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5204"/>
			<description>Entry AA with type Dictionary in Field shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in Field is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5205"/>
			<description>Entry AA in Field shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in Field is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5206"/>
			<description>Entry T in Field shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in Field is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5207"/>
			<description>Entry Parent with type Dictionary in Field shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in Field is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5208"/>
			<description>Entry Parent in Field shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in Field is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5209"/>
			<description>Entry TU in Field shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in Field is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5210"/>
			<description>Entry TM in Field shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in Field is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5211"/>
			<description>Entry Kids with type Array in Field shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in Field is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5212"/>
			<description>Entry Kids in Field shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in Field is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5213"/>
			<description>Entry Ff in Field shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in Field is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AField">
			<id specification="ISO_32000_1_7" clause="9" testNumber="5214"/>
			<description>Entry Ff with type Bitmask in Field shall correspond special case: fn:Eval(fn:BitsClear(4 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in Field doesn't correspond special case: fn:Eval(fn:BitsClear(4 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStreamNameTreeResources">
			<id specification="ISO_32000_1_7" clause="18" testNumber="5228"/>
			<description>Entry * in 3DStreamNameTreeResources shall be object 3DStreamNameTreeResourcesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in 3DStreamNameTreeResources is not object 3DStreamNameTreeResourcesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="1" testNumber="5390"/>
			<description>AnnotHighlight shall not contain entries except Rect, Subj, Subtype, C, IRT, NM, AP, CreationDate, Type, CA, M, ExData, Contents, RT, AS, OC, QuadPoints, T, Popup, IT, F, RC, Border, StructParent, P</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Rect' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'C' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'M' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'F' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'P').length == 0</test>
			<error>
				<message>AnnotHighlight contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Rect' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'C' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'M' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'F' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'P').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="7" testNumber="5391"/>
			<description>Entry Rect in AnnotHighlight is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5392"/>
			<description>Entry Rect in AnnotHighlight shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotHighlight is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5393"/>
			<description>Entry Subj in AnnotHighlight shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotHighlight is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="7" testNumber="5394"/>
			<description>Entry Subtype in AnnotHighlight is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="6" testNumber="5395"/>
			<description>Entry Subtype with type Name in AnnotHighlight shall have value Highlight</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Highlight"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotHighlight has incorrect value %2 instead of Highlight</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5396"/>
			<description>Entry Subtype in AnnotHighlight shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotHighlight is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5397"/>
			<description>Entry C with type Array in AnnotHighlight shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotHighlight is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5398"/>
			<description>Entry C in AnnotHighlight shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotHighlight is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5399"/>
			<description>Entry IRT with type Dictionary in AnnotHighlight shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotHighlight is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="11" testNumber="5400"/>
			<description>Entry IRT in AnnotHighlight is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5401"/>
			<description>Entry IRT in AnnotHighlight shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5402"/>
			<description>Entry NM in AnnotHighlight shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotHighlight is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5403"/>
			<description>Entry AP with type Dictionary in AnnotHighlight shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotHighlight is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="11" testNumber="5404"/>
			<description>Entry AP in AnnotHighlight is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5405"/>
			<description>Entry AP in AnnotHighlight shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5406"/>
			<description>Entry CreationDate in AnnotHighlight shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotHighlight is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="6" testNumber="5407"/>
			<description>Entry Type with type Name in AnnotHighlight shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotHighlight has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5408"/>
			<description>Entry Type in AnnotHighlight shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotHighlight is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="14" testNumber="5409"/>
			<description>Entry CA with type Number in AnnotHighlight shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotHighlight doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5410"/>
			<description>Entry CA in AnnotHighlight shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotHighlight is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5411"/>
			<description>Entry M in AnnotHighlight shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotHighlight is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5412"/>
			<description>Entry ExData with type Dictionary in AnnotHighlight shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotHighlight is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5413"/>
			<description>Entry ExData in AnnotHighlight shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5414"/>
			<description>Entry Contents in AnnotHighlight shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotHighlight is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="6" testNumber="5415"/>
			<description>Entry RT with type Name in AnnotHighlight shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotHighlight has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5416"/>
			<description>Entry RT in AnnotHighlight shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotHighlight is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="11" testNumber="5417"/>
			<description>Entry AS in AnnotHighlight is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5418"/>
			<description>Entry AS in AnnotHighlight shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotHighlight is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5419"/>
			<description>Entry OC with type Dictionary in AnnotHighlight shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotHighlight is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5420"/>
			<description>Entry OC in AnnotHighlight shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5421"/>
			<description>Entry QuadPoints with type Array in AnnotHighlight shall be object ArrayOfQuadPoints</description>
			<test>QuadPointsHasTypeArray != true || QuadPoints_size == 1</test>
			<error>
				<message>Entry QuadPoints with type Array in AnnotHighlight is not object ArrayOfQuadPoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="7" testNumber="5422"/>
			<description>Entry QuadPoints in AnnotHighlight is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotHighlight is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5423"/>
			<description>Entry QuadPoints in AnnotHighlight shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotHighlight is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5424"/>
			<description>Entry T in AnnotHighlight shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotHighlight is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5425"/>
			<description>Entry Popup with type Dictionary in AnnotHighlight shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotHighlight is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="10" testNumber="5426"/>
			<description>Entry Popup with type Dictionary in AnnotHighlight shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotHighlight is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5427"/>
			<description>Entry Popup in AnnotHighlight shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5428"/>
			<description>Entry IT in AnnotHighlight shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotHighlight is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5429"/>
			<description>Entry F in AnnotHighlight shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotHighlight is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="9" testNumber="5430"/>
			<description>Entry F with type Bitmask in AnnotHighlight shall correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotHighlight doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5431"/>
			<description>Entry RC with type Stream in AnnotHighlight shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotHighlight is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="10" testNumber="5432"/>
			<description>Entry RC with type Stream in AnnotHighlight shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotHighlight is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5433"/>
			<description>Entry RC in AnnotHighlight shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotHighlight is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5434"/>
			<description>Entry Border with type Array in AnnotHighlight shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotHighlight is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5435"/>
			<description>Entry Border in AnnotHighlight shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotHighlight is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5436"/>
			<description>Entry StructParent in AnnotHighlight shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotHighlight is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5437"/>
			<description>Entry P with type Dictionary in AnnotHighlight shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotHighlight is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="10" testNumber="5438"/>
			<description>Entry P with type Dictionary in AnnotHighlight shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotHighlight is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotHighlight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5439"/>
			<description>Entry P in AnnotHighlight shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotHighlight is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="5527"/>
			<description>ArrayOf_3Integers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_3Integers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="14" testNumber="5528"/>
			<description>Entry 2 with type Integer in ArrayOf_3Integers shall correspond possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeInteger != true || entry2IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Integer in ArrayOf_3Integers doesn't correspond possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5529"/>
			<description>Entry 2 in ArrayOf_3Integers shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="14" testNumber="5530"/>
			<description>Entry 0 with type Integer in ArrayOf_3Integers shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeInteger != true || entry0IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOf_3Integers doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5531"/>
			<description>Entry 0 in ArrayOf_3Integers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="14" testNumber="5532"/>
			<description>Entry 1 with type Integer in ArrayOf_3Integers shall correspond possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOf_3Integers doesn't correspond possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3Integers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5533"/>
			<description>Entry 1 in ArrayOf_3Integers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDifferencesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5548"/>
			<description>Entry in ArrayOfDifferences shall have one of types: Name, Integer</description>
			<test>HasTypeName == true || HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfDifferences is not one of types: Name, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="5568"/>
			<description>ArrayOf_2DashNumbers shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2DashNumbers contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5569"/>
			<description>Entry 1 in ArrayOf_2DashNumbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2DashNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5570"/>
			<description>Entry 0 in ArrayOf_2DashNumbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2DashNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeTemplates">
			<id specification="ISO_32000_1_7" clause="18" testNumber="5578"/>
			<description>Entry * in NameNameTreeTemplates shall be object NameNameTreeTemplatesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeTemplates is not object NameNameTreeTemplatesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="1" testNumber="5656"/>
			<description>ActionSetState shall not contain entries except Type, T, AS, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'T' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>ActionSetState contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'T' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="5" testNumber="5657"/>
			<description>Entry Type in ActionSetState is deprecated since PDF 1.2</description>
			<test>containsType == false</test>
			<error>
				<message>Entry Type in ActionSetState is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="6" testNumber="5658"/>
			<description>Entry Type with type Name in ActionSetState shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionSetState has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5659"/>
			<description>Entry Type in ActionSetState shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionSetState is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5660"/>
			<description>Entry T with type Array in ActionSetState shall be object ArrayOfAnnots</description>
			<test>THasTypeArray != true || T_size == 1</test>
			<error>
				<message>Entry T with type Array in ActionSetState is not object ArrayOfAnnots</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5661"/>
			<description>Entry T with type Dictionary in ActionSetState shall be one of objects AnnotText, AnnotLink, AnnotSound, AnnotMovie, AnnotWidget</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in ActionSetState is not one of objects AnnotText, AnnotLink, AnnotSound, AnnotMovie, AnnotWidget</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="7" testNumber="5662"/>
			<description>Entry T in ActionSetState is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in ActionSetState is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="5" testNumber="5663"/>
			<description>Entry T in ActionSetState is deprecated since PDF 1.2</description>
			<test>containsT == false</test>
			<error>
				<message>Entry T in ActionSetState is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="10" testNumber="5664"/>
			<description>Entry T with type Dictionary in ActionSetState shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in ActionSetState is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5665"/>
			<description>Entry T in ActionSetState shall have one of types: Array, Dictionary</description>
			<test>containsT == false || THasTypeArray == true || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in ActionSetState is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="5" testNumber="5666"/>
			<description>Entry AS in ActionSetState is deprecated since PDF 1.2</description>
			<test>containsAS == false</test>
			<error>
				<message>Entry AS in ActionSetState is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5667"/>
			<description>Entry AS in ActionSetState shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in ActionSetState is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="7" testNumber="5668"/>
			<description>Entry S in ActionSetState is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSetState is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="5" testNumber="5669"/>
			<description>Entry S in ActionSetState is deprecated since PDF 1.2</description>
			<test>containsS == false</test>
			<error>
				<message>Entry S in ActionSetState is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="6" testNumber="5670"/>
			<description>Entry S with type Name in ActionSetState shall have value SetState</description>
			<test>SHasTypeName != true || SNameValue == "SetState"</test>
			<error>
				<message>Entry S with type Name in ActionSetState has incorrect value %2 instead of SetState</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSetState">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5671"/>
			<description>Entry S in ActionSetState shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSetState is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTags">
			<id specification="ISO_32000_1_7" clause="3" testNumber="5693"/>
			<description>ArrayOfTags shall contain 2*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>ArrayOfTags contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_7" clause="2" testNumber="5725"/>
			<description>CalGrayColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>CalGrayColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5726"/>
			<description>Entry 1 with type Dictionary in CalGrayColorSpace shall be object CalGrayDict</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in CalGrayColorSpace is not object CalGrayDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5727"/>
			<description>Entry 1 in CalGrayColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in CalGrayColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_7" clause="6" testNumber="5728"/>
			<description>Entry 0 with type Name in CalGrayColorSpace shall have value CalGray</description>
			<test>entry0HasTypeName != true || entry0NameValue == "CalGray"</test>
			<error>
				<message>Entry 0 with type Name in CalGrayColorSpace has incorrect value %2 instead of CalGray</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5729"/>
			<description>Entry 0 in CalGrayColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in CalGrayColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="1" testNumber="5855"/>
			<description>StructElem shall not contain entries except A, Alt, R, Lang, ID, T, P, C, Type, S, Pg, E, ActualText, K</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'Alt' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'T' &amp;&amp; elem != 'P' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'E' &amp;&amp; elem != 'ActualText' &amp;&amp; elem != 'K').length == 0</test>
			<error>
				<message>StructElem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'Alt' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'T' &amp;&amp; elem != 'P' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'E' &amp;&amp; elem != 'ActualText' &amp;&amp; elem != 'K').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5856"/>
			<description>Entry A with type Array in StructElem shall be object ArrayOfAttributeRevisions</description>
			<test>AHasTypeArray != true || A_size == 1</test>
			<error>
				<message>Entry A with type Array in StructElem is not object ArrayOfAttributeRevisions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5857"/>
			<description>Entry A with type Dictionary in StructElem shall be object StructureAttributesDict</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in StructElem is not object StructureAttributesDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5858"/>
			<description>Entry A with type Stream in StructElem shall be object Stream</description>
			<test>AHasTypeStream != true || A_size == 1</test>
			<error>
				<message>Entry A with type Stream in StructElem is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="10" testNumber="5859"/>
			<description>Entry A with type Stream in StructElem shall be indirect</description>
			<test>AHasTypeStream != true || isAIndirect == true</test>
			<error>
				<message>Entry A with type Stream in StructElem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="14" testNumber="5860"/>
			<description>Entry A with type Array in StructElem shall correspond possible value predicate: fn:Eval(fn:ArrayLength(A) &gt;= 1)</description>
			<test>AHasTypeArray != true || AArraySize &gt;= 1</test>
			<error>
				<message>Entry A with type Array in StructElem doesn't correspond possible value predicate: fn:Eval(fn:ArrayLength(A) &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5861"/>
			<description>Entry A in StructElem shall have one of types: Array, Dictionary, Stream</description>
			<test>containsA == false || AHasTypeArray == true || AHasTypeDictionary == true || AHasTypeStream == true</test>
			<error>
				<message>Entry A in StructElem is not one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5862"/>
			<description>Entry Alt in StructElem shall have type StringText</description>
			<test>containsAlt == false || AltHasTypeStringText == true</test>
			<error>
				<message>Entry Alt in StructElem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="14" testNumber="5863"/>
			<description>Entry R with type Integer in StructElem shall correspond possible value predicate: fn:Eval(@R &gt;= 0)</description>
			<test>RHasTypeInteger != true || RIntegerValue &gt;= 0</test>
			<error>
				<message>Entry R with type Integer in StructElem doesn't correspond possible value predicate: fn:Eval(@R &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5864"/>
			<description>Entry R in StructElem shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in StructElem is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5865"/>
			<description>Entry Lang in StructElem shall have type StringText</description>
			<test>containsLang == false || LangHasTypeStringText == true</test>
			<error>
				<message>Entry Lang in StructElem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5866"/>
			<description>Entry ID in StructElem shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in StructElem is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5867"/>
			<description>Entry T in StructElem shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in StructElem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5868"/>
			<description>Entry P with type Dictionary in StructElem shall be one of objects StructElem, StructTreeRoot</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in StructElem is not one of objects StructElem, StructTreeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="7" testNumber="5869"/>
			<description>Entry P in StructElem is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in StructElem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="10" testNumber="5870"/>
			<description>Entry P with type Dictionary in StructElem shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in StructElem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5871"/>
			<description>Entry P in StructElem shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in StructElem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5872"/>
			<description>Entry C with type Array in StructElem shall be object ArrayOfClassNamesRevisions</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in StructElem is not object ArrayOfClassNamesRevisions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5873"/>
			<description>Entry C in StructElem shall have one of types: Name, Array</description>
			<test>containsC == false || CHasTypeName == true || CHasTypeArray == true</test>
			<error>
				<message>Entry C in StructElem is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="6" testNumber="5874"/>
			<description>Entry Type with type Name in StructElem shall have value StructElem</description>
			<test>TypeHasTypeName != true || TypeNameValue == "StructElem"</test>
			<error>
				<message>Entry Type with type Name in StructElem has incorrect value %2 instead of StructElem</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5875"/>
			<description>Entry Type in StructElem shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in StructElem is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="7" testNumber="5876"/>
			<description>Entry S in StructElem is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in StructElem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5877"/>
			<description>Entry S in StructElem shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in StructElem is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5878"/>
			<description>Entry Pg with type Dictionary in StructElem shall be object PageObject</description>
			<test>PgHasTypeDictionary != true || Pg_size == 1</test>
			<error>
				<message>Entry Pg with type Dictionary in StructElem is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="10" testNumber="5879"/>
			<description>Entry Pg with type Dictionary in StructElem shall be indirect</description>
			<test>PgHasTypeDictionary != true || isPgIndirect == true</test>
			<error>
				<message>Entry Pg with type Dictionary in StructElem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5880"/>
			<description>Entry Pg in StructElem shall have type Dictionary</description>
			<test>containsPg == false || PgHasTypeDictionary == true</test>
			<error>
				<message>Entry Pg in StructElem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5881"/>
			<description>Entry E in StructElem shall have type StringText</description>
			<test>containsE == false || EHasTypeStringText == true</test>
			<error>
				<message>Entry E in StructElem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5882"/>
			<description>Entry ActualText in StructElem shall have type StringText</description>
			<test>containsActualText == false || ActualTextHasTypeStringText == true</test>
			<error>
				<message>Entry ActualText in StructElem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5883"/>
			<description>Entry K with type Array in StructElem shall be object ArrayOfStructElemKids</description>
			<test>KHasTypeArray != true || K_size == 1</test>
			<error>
				<message>Entry K with type Array in StructElem is not object ArrayOfStructElemKids</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5884"/>
			<description>Entry K with type Dictionary in StructElem shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>KHasTypeDictionary != true || K_size == 1</test>
			<error>
				<message>Entry K with type Dictionary in StructElem is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructElem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5885"/>
			<description>Entry K in StructElem shall have one of types: Array, Integer, Dictionary</description>
			<test>containsK == false || KHasTypeArray == true || KHasTypeInteger == true || KHasTypeDictionary == true</test>
			<error>
				<message>Entry K in StructElem is not one of types: Array, Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSchemaEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5927"/>
			<description>Entry with type Dictionary in CollectionSchema shall be object CollectionField</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in CollectionSchema is not object CollectionField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSchemaEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5928"/>
			<description>Entry in CollectionSchema shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in CollectionSchema is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_7" clause="2" testNumber="5955"/>
			<description>ICCBasedColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ICCBasedColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_7" clause="6" testNumber="5956"/>
			<description>Entry 0 with type Name in ICCBasedColorSpace shall have value ICCBased</description>
			<test>entry0HasTypeName != true || entry0NameValue == "ICCBased"</test>
			<error>
				<message>Entry 0 with type Name in ICCBasedColorSpace has incorrect value %2 instead of ICCBased</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5957"/>
			<description>Entry 0 in ICCBasedColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ICCBasedColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5958"/>
			<description>Entry 1 with type Stream in ICCBasedColorSpace shall be object ICCProfileStream</description>
			<test>entry1HasTypeStream != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Stream in ICCBasedColorSpace is not object ICCProfileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_7" clause="10" testNumber="5959"/>
			<description>Entry 1 with type Stream in ICCBasedColorSpace shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in ICCBasedColorSpace is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCBasedColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5960"/>
			<description>Entry 1 in ICCBasedColorSpace shall have type Stream</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in ICCBasedColorSpace is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfViewParamsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="5967"/>
			<description>Entry with type Dictionary in ArrayOfViewParams shall be object ViewParams</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfViewParams is not object ViewParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfViewParamsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="5968"/>
			<description>Entry in ArrayOfViewParams shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfViewParams is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShowNameTreeResources">
			<id specification="ISO_32000_1_7" clause="18" testNumber="5974"/>
			<description>Entry * in SlideShowNameTreeResources shall be object SlideShowNameTreeResourcesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in SlideShowNameTreeResources is not object SlideShowNameTreeResourcesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="1" testNumber="6085"/>
			<description>FieldBtnPush shall not contain entries except Ff, TM, AA, T, Kids, Parent, FT, TU, DS, DA, V, RV, DV, Q</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ff' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'V' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'Q').length == 0</test>
			<error>
				<message>FieldBtnPush contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ff' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'V' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'Q').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6086"/>
			<description>Entry Ff in FieldBtnPush shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldBtnPush is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="9" testNumber="6087"/>
			<description>Entry Ff with type Bitmask in FieldBtnPush shall correspond special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitClear(16) &amp;&amp; fn:BitSet(17) &amp;&amp; fn:BitsClear(18 , 25) &amp;&amp; fn:BitsClear(27 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 1 &amp;&amp; ((FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldBtnPush doesn't correspond special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitClear(16) &amp;&amp; fn:BitSet(17) &amp;&amp; fn:BitsClear(18 , 25) &amp;&amp; fn:BitsClear(27 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6088"/>
			<description>Entry TM in FieldBtnPush shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldBtnPush is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6089"/>
			<description>Entry AA with type Dictionary in FieldBtnPush shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldBtnPush is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6090"/>
			<description>Entry AA in FieldBtnPush shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldBtnPush is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6091"/>
			<description>Entry T in FieldBtnPush shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldBtnPush is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6092"/>
			<description>Entry Kids with type Array in FieldBtnPush shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldBtnPush is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6093"/>
			<description>Entry Kids in FieldBtnPush shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldBtnPush is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6094"/>
			<description>Entry Parent with type Dictionary in FieldBtnPush shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldBtnPush is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6095"/>
			<description>Entry Parent in FieldBtnPush shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldBtnPush is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6096"/>
			<description>Entry FT in FieldBtnPush is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldBtnPush is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="6" testNumber="6097"/>
			<description>Entry FT with type Name in FieldBtnPush shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in FieldBtnPush has incorrect value %2 instead of Btn</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6098"/>
			<description>Entry FT in FieldBtnPush shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldBtnPush is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6099"/>
			<description>Entry TU in FieldBtnPush shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldBtnPush is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6100"/>
			<description>Entry DS in FieldBtnPush shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldBtnPush is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6101"/>
			<description>Entry DA in FieldBtnPush is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldBtnPush is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6102"/>
			<description>Entry DA in FieldBtnPush shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldBtnPush is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6103"/>
			<description>Entry V in FieldBtnPush shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldBtnPush is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6104"/>
			<description>Entry RV with type Stream in FieldBtnPush shall be object Stream</description>
			<test>RVHasTypeStream != true || RV_size == 1</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnPush is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="10" testNumber="6105"/>
			<description>Entry RV with type Stream in FieldBtnPush shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnPush is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6106"/>
			<description>Entry RV in FieldBtnPush shall have one of types: StringText, Stream</description>
			<test>containsRV == false || RVHasTypeStringText == true || RVHasTypeStream == true</test>
			<error>
				<message>Entry RV in FieldBtnPush is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6107"/>
			<description>Entry DV in FieldBtnPush shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in FieldBtnPush is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="6" testNumber="6108"/>
			<description>Entry Q with type Integer in FieldBtnPush shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldBtnPush has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnPush">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6109"/>
			<description>Entry Q in FieldBtnPush shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldBtnPush is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="6156"/>
			<description>SignatureBuildDataAppDict shall not contain entries except NonEFontNoWarn, OS, Date, PreRelease, Name, TrustedMode, V, REx, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'Date' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V' &amp;&amp; elem != 'REx' &amp;&amp; elem != 'R').length == 0</test>
			<error>
				<message>SignatureBuildDataAppDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'Date' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'TrustedMode' &amp;&amp; elem != 'V' &amp;&amp; elem != 'REx' &amp;&amp; elem != 'R').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6157"/>
			<description>Entry NonEFontNoWarn in SignatureBuildDataAppDict shall have type Boolean</description>
			<test>containsNonEFontNoWarn == false || NonEFontNoWarnHasTypeBoolean == true</test>
			<error>
				<message>Entry NonEFontNoWarn in SignatureBuildDataAppDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6158"/>
			<description>Entry OS with type Array in SignatureBuildDataAppDict shall be object ArrayOfStringsText</description>
			<test>OSHasTypeArray != true || OS_size == 1</test>
			<error>
				<message>Entry OS with type Array in SignatureBuildDataAppDict is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6159"/>
			<description>Entry OS in SignatureBuildDataAppDict shall have type Array</description>
			<test>containsOS == false || OSHasTypeArray == true</test>
			<error>
				<message>Entry OS in SignatureBuildDataAppDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6160"/>
			<description>Entry Date in SignatureBuildDataAppDict shall have type StringText</description>
			<test>containsDate == false || DateHasTypeStringText == true</test>
			<error>
				<message>Entry Date in SignatureBuildDataAppDict is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6161"/>
			<description>Entry PreRelease in SignatureBuildDataAppDict shall have type Boolean</description>
			<test>containsPreRelease == false || PreReleaseHasTypeBoolean == true</test>
			<error>
				<message>Entry PreRelease in SignatureBuildDataAppDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6162"/>
			<description>Entry Name in SignatureBuildDataAppDict shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in SignatureBuildDataAppDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6163"/>
			<description>Entry TrustedMode in SignatureBuildDataAppDict shall have type Boolean</description>
			<test>containsTrustedMode == false || TrustedModeHasTypeBoolean == true</test>
			<error>
				<message>Entry TrustedMode in SignatureBuildDataAppDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6164"/>
			<description>Entry V in SignatureBuildDataAppDict shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in SignatureBuildDataAppDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6165"/>
			<description>Entry REx in SignatureBuildDataAppDict shall have type StringText</description>
			<test>containsREx == false || RExHasTypeStringText == true</test>
			<error>
				<message>Entry REx in SignatureBuildDataAppDict is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataAppDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6166"/>
			<description>Entry R in SignatureBuildDataAppDict shall have type Number</description>
			<test>containsR == false || RHasTypeNumber == true</test>
			<error>
				<message>Entry R in SignatureBuildDataAppDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="1" testNumber="6179"/>
			<description>CollectionColors shall not contain entries except CardBorder, SecondaryText, CardBackground, Background, PrimaryText</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CardBorder' &amp;&amp; elem != 'SecondaryText' &amp;&amp; elem != 'CardBackground' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'PrimaryText').length == 0</test>
			<error>
				<message>CollectionColors contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CardBorder' &amp;&amp; elem != 'SecondaryText' &amp;&amp; elem != 'CardBackground' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'PrimaryText').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6180"/>
			<description>Entry CardBorder with type Array in CollectionColors shall be object ArrayOf_3RGBNumbers</description>
			<test>CardBorderHasTypeArray != true || CardBorder_size == 1</test>
			<error>
				<message>Entry CardBorder with type Array in CollectionColors is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6181"/>
			<description>Entry CardBorder in CollectionColors shall have type Array</description>
			<test>containsCardBorder == false || CardBorderHasTypeArray == true</test>
			<error>
				<message>Entry CardBorder in CollectionColors is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6182"/>
			<description>Entry SecondaryText with type Array in CollectionColors shall be object ArrayOf_3RGBNumbers</description>
			<test>SecondaryTextHasTypeArray != true || SecondaryText_size == 1</test>
			<error>
				<message>Entry SecondaryText with type Array in CollectionColors is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6183"/>
			<description>Entry SecondaryText in CollectionColors shall have type Array</description>
			<test>containsSecondaryText == false || SecondaryTextHasTypeArray == true</test>
			<error>
				<message>Entry SecondaryText in CollectionColors is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6184"/>
			<description>Entry CardBackground with type Array in CollectionColors shall be object ArrayOf_3RGBNumbers</description>
			<test>CardBackgroundHasTypeArray != true || CardBackground_size == 1</test>
			<error>
				<message>Entry CardBackground with type Array in CollectionColors is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6185"/>
			<description>Entry CardBackground in CollectionColors shall have type Array</description>
			<test>containsCardBackground == false || CardBackgroundHasTypeArray == true</test>
			<error>
				<message>Entry CardBackground in CollectionColors is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6186"/>
			<description>Entry Background with type Array in CollectionColors shall be object ArrayOf_3RGBNumbers</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in CollectionColors is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6187"/>
			<description>Entry Background in CollectionColors shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in CollectionColors is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6188"/>
			<description>Entry PrimaryText with type Array in CollectionColors shall be object ArrayOf_3RGBNumbers</description>
			<test>PrimaryTextHasTypeArray != true || PrimaryText_size == 1</test>
			<error>
				<message>Entry PrimaryText with type Array in CollectionColors is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionColors">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6189"/>
			<description>Entry PrimaryText in CollectionColors shall have type Array</description>
			<test>containsPrimaryText == false || PrimaryTextHasTypeArray == true</test>
			<error>
				<message>Entry PrimaryText in CollectionColors is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_7" clause="2" testNumber="6223"/>
			<description>ArrayOfOPI2InksSubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfOPI2InksSubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="6224"/>
			<description>Entry 1 with type Number in ArrayOfOPI2InksSubArray shall correspond possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOfOPI2InksSubArray doesn't correspond possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6225"/>
			<description>Entry 1 in ArrayOfOPI2InksSubArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfOPI2InksSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2InksSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6226"/>
			<description>Entry 0 in ArrayOfOPI2InksSubArray shall have type String</description>
			<test>size &lt;= 0 || entry0HasTypeString == true</test>
			<error>
				<message>Entry 0 in ArrayOfOPI2InksSubArray is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="6256"/>
			<description>ArrayOf_4Numbers shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4Numbers contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6257"/>
			<description>Entry 0 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6258"/>
			<description>Entry 2 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6259"/>
			<description>Entry 3 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6260"/>
			<description>Entry 1 in ArrayOf_4Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterJBIG2Decode">
			<id specification="ISO_32000_1_7" clause="1" testNumber="6278"/>
			<description>FilterJBIG2Decode shall not contain entries except JBIG2Globals</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'JBIG2Globals').length == 0</test>
			<error>
				<message>FilterJBIG2Decode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'JBIG2Globals').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterJBIG2Decode">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6279"/>
			<description>Entry JBIG2Globals with type Stream in FilterJBIG2Decode shall be object Stream</description>
			<test>JBIG2GlobalsHasTypeStream != true || JBIG2Globals_size == 1</test>
			<error>
				<message>Entry JBIG2Globals with type Stream in FilterJBIG2Decode is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterJBIG2Decode">
			<id specification="ISO_32000_1_7" clause="10" testNumber="6280"/>
			<description>Entry JBIG2Globals with type Stream in FilterJBIG2Decode shall be indirect</description>
			<test>JBIG2GlobalsHasTypeStream != true || isJBIG2GlobalsIndirect == true</test>
			<error>
				<message>Entry JBIG2Globals with type Stream in FilterJBIG2Decode is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterJBIG2Decode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6281"/>
			<description>Entry JBIG2Globals in FilterJBIG2Decode shall have type Stream</description>
			<test>containsJBIG2Globals == false || JBIG2GlobalsHasTypeStream == true</test>
			<error>
				<message>Entry JBIG2Globals in FilterJBIG2Decode is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="1" testNumber="6286"/>
			<description>3DMeasureLD3 shall not contain entries except AP, P, TP, TY, C, Subtype, U, V, N2, UT, S, Type, N1, A1, TS, TRL, A2</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'P' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'U' &amp;&amp; elem != 'V' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'A1' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'A2').length == 0</test>
			<error>
				<message>3DMeasureLD3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AP' &amp;&amp; elem != 'P' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'U' &amp;&amp; elem != 'V' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'A1' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'A2').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6287"/>
			<description>Entry AP with type Array in 3DMeasureLD3 shall be object ArrayOf_3Numbers</description>
			<test>APHasTypeArray != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Array in 3DMeasureLD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6288"/>
			<description>Entry AP in 3DMeasureLD3 is required</description>
			<test>containsAP == true</test>
			<error>
				<message>Entry AP in 3DMeasureLD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6289"/>
			<description>Entry AP in 3DMeasureLD3 shall have type Array</description>
			<test>containsAP == false || APHasTypeArray == true</test>
			<error>
				<message>Entry AP in 3DMeasureLD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="14" testNumber="6290"/>
			<description>Entry P with type Integer in 3DMeasureLD3 shall correspond possible value predicate: fn:Eval(@P &gt;= 0)</description>
			<test>PHasTypeInteger != true || PIntegerValue &gt;= 0</test>
			<error>
				<message>Entry P with type Integer in 3DMeasureLD3 doesn't correspond possible value predicate: fn:Eval(@P &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6291"/>
			<description>Entry P in 3DMeasureLD3 shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in 3DMeasureLD3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6292"/>
			<description>Entry TP with type Array in 3DMeasureLD3 shall be object ArrayOf_3Numbers</description>
			<test>TPHasTypeArray != true || TP_size == 1</test>
			<error>
				<message>Entry TP with type Array in 3DMeasureLD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6293"/>
			<description>Entry TP in 3DMeasureLD3 is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in 3DMeasureLD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6294"/>
			<description>Entry TP in 3DMeasureLD3 shall have type Array</description>
			<test>containsTP == false || TPHasTypeArray == true</test>
			<error>
				<message>Entry TP in 3DMeasureLD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6295"/>
			<description>Entry TY with type Array in 3DMeasureLD3 shall be object ArrayOf_3Numbers</description>
			<test>TYHasTypeArray != true || TY_size == 1</test>
			<error>
				<message>Entry TY with type Array in 3DMeasureLD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6296"/>
			<description>Entry TY in 3DMeasureLD3 is required</description>
			<test>containsTY == true</test>
			<error>
				<message>Entry TY in 3DMeasureLD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6297"/>
			<description>Entry TY in 3DMeasureLD3 shall have type Array</description>
			<test>containsTY == false || TYHasTypeArray == true</test>
			<error>
				<message>Entry TY in 3DMeasureLD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6298"/>
			<description>Entry C with type Array in 3DMeasureLD3 shall be object ArrayOf_3RGBNumbers</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in 3DMeasureLD3 is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6299"/>
			<description>Entry C in 3DMeasureLD3 shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DMeasureLD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6300"/>
			<description>Entry Subtype in 3DMeasureLD3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureLD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="6301"/>
			<description>Entry Subtype with type Name in 3DMeasureLD3 shall have value LD3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "LD3"</test>
			<error>
				<message>Entry Subtype with type Name in 3DMeasureLD3 has incorrect value %2 instead of LD3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6302"/>
			<description>Entry Subtype in 3DMeasureLD3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureLD3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6303"/>
			<description>Entry U in 3DMeasureLD3 is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in 3DMeasureLD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6304"/>
			<description>Entry U in 3DMeasureLD3 shall have type StringText</description>
			<test>containsU == false || UHasTypeStringText == true</test>
			<error>
				<message>Entry U in 3DMeasureLD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6305"/>
			<description>Entry V in 3DMeasureLD3 is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in 3DMeasureLD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6306"/>
			<description>Entry V in 3DMeasureLD3 shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in 3DMeasureLD3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6307"/>
			<description>Entry N2 in 3DMeasureLD3 shall have type StringText</description>
			<test>containsN2 == false || N2HasTypeStringText == true</test>
			<error>
				<message>Entry N2 in 3DMeasureLD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6308"/>
			<description>Entry UT in 3DMeasureLD3 shall have type StringText</description>
			<test>containsUT == false || UTHasTypeStringText == true</test>
			<error>
				<message>Entry UT in 3DMeasureLD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6309"/>
			<description>Entry S with type Dictionary in 3DMeasureLD3 shall be object AnnotProjection</description>
			<test>SHasTypeDictionary != true || S_size == 1</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasureLD3 is not object AnnotProjection</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="10" testNumber="6310"/>
			<description>Entry S with type Dictionary in 3DMeasureLD3 shall be indirect</description>
			<test>SHasTypeDictionary != true || isSIndirect == true</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasureLD3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6311"/>
			<description>Entry S in 3DMeasureLD3 shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in 3DMeasureLD3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="6312"/>
			<description>Entry Type with type Name in 3DMeasureLD3 shall have value 3DMeasure</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DMeasure"</test>
			<error>
				<message>Entry Type with type Name in 3DMeasureLD3 has incorrect value %2 instead of 3DMeasure</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6313"/>
			<description>Entry Type in 3DMeasureLD3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DMeasureLD3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6314"/>
			<description>Entry N1 in 3DMeasureLD3 shall have type StringText</description>
			<test>containsN1 == false || N1HasTypeStringText == true</test>
			<error>
				<message>Entry N1 in 3DMeasureLD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6315"/>
			<description>Entry A1 with type Array in 3DMeasureLD3 shall be object ArrayOf_3Numbers</description>
			<test>A1HasTypeArray != true || A1_size == 1</test>
			<error>
				<message>Entry A1 with type Array in 3DMeasureLD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6316"/>
			<description>Entry A1 in 3DMeasureLD3 is required</description>
			<test>containsA1 == true</test>
			<error>
				<message>Entry A1 in 3DMeasureLD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6317"/>
			<description>Entry A1 in 3DMeasureLD3 shall have type Array</description>
			<test>containsA1 == false || A1HasTypeArray == true</test>
			<error>
				<message>Entry A1 in 3DMeasureLD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6318"/>
			<description>Entry TS in 3DMeasureLD3 shall have type Number</description>
			<test>containsTS == false || TSHasTypeNumber == true</test>
			<error>
				<message>Entry TS in 3DMeasureLD3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6319"/>
			<description>Entry TRL in 3DMeasureLD3 shall have type StringText</description>
			<test>containsTRL == false || TRLHasTypeStringText == true</test>
			<error>
				<message>Entry TRL in 3DMeasureLD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6320"/>
			<description>Entry A2 with type Array in 3DMeasureLD3 shall be object ArrayOf_3Numbers</description>
			<test>A2HasTypeArray != true || A2_size == 1</test>
			<error>
				<message>Entry A2 with type Array in 3DMeasureLD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6321"/>
			<description>Entry A2 in 3DMeasureLD3 is required</description>
			<test>containsA2 == true</test>
			<error>
				<message>Entry A2 in 3DMeasureLD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureLD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6322"/>
			<description>Entry A2 in 3DMeasureLD3 shall have type Array</description>
			<test>containsA2 == false || A2HasTypeArray == true</test>
			<error>
				<message>Entry A2 in 3DMeasureLD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="6384"/>
			<description>DestDict shall not contain entries except D</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D').length == 0</test>
			<error>
				<message>DestDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6385"/>
			<description>Entry D with type Array in DestDict shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in DestDict is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6386"/>
			<description>Entry D in DestDict is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in DestDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6387"/>
			<description>Entry D in DestDict shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in DestDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="1" testNumber="6394"/>
			<description>ViewParams shall not contain entries except Instance, Data</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Instance' &amp;&amp; elem != 'Data').length == 0</test>
			<error>
				<message>ViewParams contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Instance' &amp;&amp; elem != 'Data').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6395"/>
			<description>Entry Instance with type Dictionary in ViewParams shall be object RichMediaInstance</description>
			<test>InstanceHasTypeDictionary != true || Instance_size == 1</test>
			<error>
				<message>Entry Instance with type Dictionary in ViewParams is not object RichMediaInstance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6396"/>
			<description>Entry Instance in ViewParams is required</description>
			<test>containsInstance == true</test>
			<error>
				<message>Entry Instance in ViewParams is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6397"/>
			<description>Entry Instance in ViewParams shall have type Dictionary</description>
			<test>containsInstance == false || InstanceHasTypeDictionary == true</test>
			<error>
				<message>Entry Instance in ViewParams is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6398"/>
			<description>Entry Data with type Stream in ViewParams shall be object Stream</description>
			<test>DataHasTypeStream != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Stream in ViewParams is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6399"/>
			<description>Entry Data in ViewParams is required</description>
			<test>containsData == true</test>
			<error>
				<message>Entry Data in ViewParams is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="10" testNumber="6400"/>
			<description>Entry Data with type Stream in ViewParams shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in ViewParams is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewParams">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6401"/>
			<description>Entry Data in ViewParams shall have one of types: StringText, Stream</description>
			<test>containsData == false || DataHasTypeStringText == true || DataHasTypeStream == true</test>
			<error>
				<message>Entry Data in ViewParams is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="6431"/>
			<description>ArrayOf_3RGBNumbers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_3RGBNumbers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="14" testNumber="6432"/>
			<description>Entry 0 with type Number in ArrayOf_3RGBNumbers shall correspond possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</description>
			<test>entry0HasTypeNumber != true || (entry0NumberValue &gt;= 0) &amp;&amp; (entry0NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_3RGBNumbers doesn't correspond possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6433"/>
			<description>Entry 0 in ArrayOf_3RGBNumbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3RGBNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="14" testNumber="6434"/>
			<description>Entry 1 with type Number in ArrayOf_3RGBNumbers shall correspond possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_3RGBNumbers doesn't correspond possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6435"/>
			<description>Entry 1 in ArrayOf_3RGBNumbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3RGBNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="14" testNumber="6436"/>
			<description>Entry 2 with type Number in ArrayOf_3RGBNumbers shall correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_3RGBNumbers doesn't correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3RGBNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6437"/>
			<description>Entry 2 in ArrayOf_3RGBNumbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3RGBNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="1" testNumber="6552"/>
			<description>DocTimeStamp shall not contain entries except Prop_Build, ContactInfo, Filter, SubFilter, V, Prop_AuthTime, R, Contents, Location, M, Changes, Reference, ByteRange, Prop_AuthType, Reason, ADBE_Build, Name, Type, Cert</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Prop_Build' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Prop_AuthTime' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'Reference' &amp;&amp; elem != 'ByteRange' &amp;&amp; elem != 'Prop_AuthType' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'ADBE_Build' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Cert').length == 0</test>
			<error>
				<message>DocTimeStamp contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Prop_Build' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Prop_AuthTime' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'Reference' &amp;&amp; elem != 'ByteRange' &amp;&amp; elem != 'Prop_AuthType' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'ADBE_Build' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Cert').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6553"/>
			<description>Entry Prop_Build with type Dictionary in DocTimeStamp shall be object SignatureBuildPropDict</description>
			<test>Prop_BuildHasTypeDictionary != true || Prop_Build_size == 1</test>
			<error>
				<message>Entry Prop_Build with type Dictionary in DocTimeStamp is not object SignatureBuildPropDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6554"/>
			<description>Entry Prop_Build in DocTimeStamp shall have type Dictionary</description>
			<test>containsProp_Build == false || Prop_BuildHasTypeDictionary == true</test>
			<error>
				<message>Entry Prop_Build in DocTimeStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6555"/>
			<description>Entry ContactInfo in DocTimeStamp shall have type String</description>
			<test>containsContactInfo == false || ContactInfoHasTypeString == true</test>
			<error>
				<message>Entry ContactInfo in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6556"/>
			<description>Entry Filter in DocTimeStamp is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in DocTimeStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6557"/>
			<description>Entry Filter in DocTimeStamp shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in DocTimeStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="6" testNumber="6558"/>
			<description>Entry SubFilter with type Name in DocTimeStamp shall have value ETSI.RFC3161</description>
			<test>SubFilterHasTypeName != true || SubFilterNameValue == "ETSI.RFC3161"</test>
			<error>
				<message>Entry SubFilter with type Name in DocTimeStamp has incorrect value %2 instead of ETSI.RFC3161</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6559"/>
			<description>Entry SubFilter in DocTimeStamp shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in DocTimeStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6560"/>
			<description>Entry V in DocTimeStamp shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in DocTimeStamp is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6561"/>
			<description>Entry Prop_AuthTime in DocTimeStamp shall have type Integer</description>
			<test>containsProp_AuthTime == false || Prop_AuthTimeHasTypeInteger == true</test>
			<error>
				<message>Entry Prop_AuthTime in DocTimeStamp is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6562"/>
			<description>Entry R in DocTimeStamp shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in DocTimeStamp is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6563"/>
			<description>Entry Contents in DocTimeStamp is required</description>
			<test>containsContents == true</test>
			<error>
				<message>Entry Contents in DocTimeStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6564"/>
			<description>Entry Contents in DocTimeStamp shall have type StringByte</description>
			<test>containsContents == false || ContentsHasTypeStringByte == true</test>
			<error>
				<message>Entry Contents in DocTimeStamp is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6565"/>
			<description>Entry Location in DocTimeStamp shall have type String</description>
			<test>containsLocation == false || LocationHasTypeString == true</test>
			<error>
				<message>Entry Location in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6566"/>
			<description>Entry M in DocTimeStamp shall have type Date</description>
			<test>containsM == false || MHasTypeDate == true</test>
			<error>
				<message>Entry M in DocTimeStamp is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6567"/>
			<description>Entry Changes with type Array in DocTimeStamp shall be object ArrayOf_3Integers</description>
			<test>ChangesHasTypeArray != true || Changes_size == 1</test>
			<error>
				<message>Entry Changes with type Array in DocTimeStamp is not object ArrayOf_3Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6568"/>
			<description>Entry Changes in DocTimeStamp shall have type Array</description>
			<test>containsChanges == false || ChangesHasTypeArray == true</test>
			<error>
				<message>Entry Changes in DocTimeStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6569"/>
			<description>Entry Reference with type Array in DocTimeStamp shall be object ArrayOfSignatureReferences</description>
			<test>ReferenceHasTypeArray != true || Reference_size == 1</test>
			<error>
				<message>Entry Reference with type Array in DocTimeStamp is not object ArrayOfSignatureReferences</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6570"/>
			<description>Entry Reference in DocTimeStamp shall have type Array</description>
			<test>containsReference == false || ReferenceHasTypeArray == true</test>
			<error>
				<message>Entry Reference in DocTimeStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6571"/>
			<description>Entry ByteRange with type Array in DocTimeStamp shall be object ArrayOfIntegersGeneral</description>
			<test>ByteRangeHasTypeArray != true || ByteRange_size == 1</test>
			<error>
				<message>Entry ByteRange with type Array in DocTimeStamp is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6572"/>
			<description>Entry ByteRange in DocTimeStamp shall have type Array</description>
			<test>containsByteRange == false || ByteRangeHasTypeArray == true</test>
			<error>
				<message>Entry ByteRange in DocTimeStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6573"/>
			<description>Entry Prop_AuthType in DocTimeStamp shall have type Name</description>
			<test>containsProp_AuthType == false || Prop_AuthTypeHasTypeName == true</test>
			<error>
				<message>Entry Prop_AuthType in DocTimeStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6574"/>
			<description>Entry Reason in DocTimeStamp shall have type String</description>
			<test>containsReason == false || ReasonHasTypeString == true</test>
			<error>
				<message>Entry Reason in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="5" testNumber="6575"/>
			<description>Entry ADBE_Build in DocTimeStamp is deprecated since PDF 1.5</description>
			<test>containsADBE_Build == false</test>
			<error>
				<message>Entry ADBE_Build in DocTimeStamp is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6576"/>
			<description>Entry ADBE_Build in DocTimeStamp shall have type String</description>
			<test>containsADBE_Build == false || ADBE_BuildHasTypeString == true</test>
			<error>
				<message>Entry ADBE_Build in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6577"/>
			<description>Entry Name in DocTimeStamp shall have type String</description>
			<test>containsName == false || NameHasTypeString == true</test>
			<error>
				<message>Entry Name in DocTimeStamp is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6578"/>
			<description>Entry Type in DocTimeStamp is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in DocTimeStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="6" testNumber="6579"/>
			<description>Entry Type with type Name in DocTimeStamp shall have value DocTimeStamp</description>
			<test>TypeHasTypeName != true || TypeNameValue == "DocTimeStamp"</test>
			<error>
				<message>Entry Type with type Name in DocTimeStamp has incorrect value %2 instead of DocTimeStamp</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6580"/>
			<description>Entry Type in DocTimeStamp shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in DocTimeStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6581"/>
			<description>Entry Cert with type Array in DocTimeStamp shall be object ArrayOfStringsByte</description>
			<test>CertHasTypeArray != true || Cert_size == 1</test>
			<error>
				<message>Entry Cert with type Array in DocTimeStamp is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocTimeStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6582"/>
			<description>Entry Cert in DocTimeStamp shall have one of types: Array, StringByte</description>
			<test>containsCert == false || CertHasTypeArray == true || CertHasTypeStringByte == true</test>
			<error>
				<message>Entry Cert in DocTimeStamp is not one of types: Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6635"/>
			<description>Entry with type Stream in ArrayOfStreamsGeneral shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfStreamsGeneral is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="6636"/>
			<description>Entry with type Stream in ArrayOfStreamsGeneral shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfStreamsGeneral is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6637"/>
			<description>Entry in ArrayOfStreamsGeneral shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in ArrayOfStreamsGeneral is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_7" clause="2" testNumber="6674"/>
			<description>ArrayOf_2StringsByte shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2StringsByte contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6675"/>
			<description>Entry 0 in ArrayOf_2StringsByte shall have type StringByte</description>
			<test>size &lt;= 0 || entry0HasTypeStringByte == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2StringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6676"/>
			<description>Entry 1 in ArrayOf_2StringsByte shall have type StringByte</description>
			<test>size &lt;= 1 || entry1HasTypeStringByte == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2StringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamAnnotsArrayEntry">
			<id specification="ISO_32000_1_7" clause="6" testNumber="6684"/>
			<description>Entry with type Name in URTransformParamAnnotsArray shall have one of values: Delete, Import, Copy, Create, Export, Modify, SummaryView, Online</description>
			<test>HasTypeName != true || NameValue == "Create" || NameValue == "Delete" || NameValue == "Modify" || NameValue == "Copy" || NameValue == "Import" || NameValue == "Export" || NameValue == "Online" || NameValue == "SummaryView"</test>
			<error>
				<message>Entry %1 with type Name in URTransformParamAnnotsArray has incorrect value %2 instead of Delete, Import, Copy, Create, Export, Modify, SummaryView, Online</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamAnnotsArrayEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6685"/>
			<description>Entry in URTransformParamAnnotsArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in URTransformParamAnnotsArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="1" testNumber="6706"/>
			<description>MediaOffsetFrame shall not contain entries except Type, S, F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'F').length == 0</test>
			<error>
				<message>MediaOffsetFrame contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="6" testNumber="6707"/>
			<description>Entry Type with type Name in MediaOffsetFrame shall have value MediaOffset</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaOffset"</test>
			<error>
				<message>Entry Type with type Name in MediaOffsetFrame has incorrect value %2 instead of MediaOffset</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6708"/>
			<description>Entry Type in MediaOffsetFrame shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaOffsetFrame is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6709"/>
			<description>Entry S in MediaOffsetFrame is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaOffsetFrame is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="6" testNumber="6710"/>
			<description>Entry S with type Name in MediaOffsetFrame shall have value F</description>
			<test>SHasTypeName != true || SNameValue == "F"</test>
			<error>
				<message>Entry S with type Name in MediaOffsetFrame has incorrect value %2 instead of F</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6711"/>
			<description>Entry S in MediaOffsetFrame shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaOffsetFrame is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6712"/>
			<description>Entry F in MediaOffsetFrame is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in MediaOffsetFrame is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="14" testNumber="6713"/>
			<description>Entry F with type Integer in MediaOffsetFrame shall correspond possible value predicate: fn:Eval(@F &gt;= 0)</description>
			<test>FHasTypeInteger != true || FIntegerValue &gt;= 0</test>
			<error>
				<message>Entry F with type Integer in MediaOffsetFrame doesn't correspond possible value predicate: fn:Eval(@F &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetFrame">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6714"/>
			<description>Entry F in MediaOffsetFrame shall have type Integer</description>
			<test>containsF == false || FHasTypeInteger == true</test>
			<error>
				<message>Entry F in MediaOffsetFrame is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="1" testNumber="6951"/>
			<description>FontDescriptorCIDType2 shall not contain entries except FontFile, XHeight, AvgWidth, FontName, Type, FontFamily, FontBBox, CIDSet, FD, ItalicAngle, FontStretch, MaxWidth, FontFile2, StemV, Lang, MissingWidth, CapHeight, Leading, Descent, Ascent, Flags, Style, StemH, FontWeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FontFile' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'FontWeight').length == 0</test>
			<error>
				<message>FontDescriptorCIDType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FontFile' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'FontWeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6952"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType2 shall be object FontFile</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType2 is not object FontFile</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="10" testNumber="6953"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType2 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6954"/>
			<description>Entry FontFile in FontDescriptorCIDType2 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorCIDType2 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="6955"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType2 shall correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)) &amp;&amp; fn:Not(fn:IsPresent(FontFile3)))</description>
			<test>FontFileHasTypeStream != true || (((containsFontFile2 == true)) != true &amp;&amp; ((containsFontFile3 == true)) != true)</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType2 doesn't correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)) &amp;&amp; fn:Not(fn:IsPresent(FontFile3)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6956"/>
			<description>Entry XHeight in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6957"/>
			<description>Entry AvgWidth in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6958"/>
			<description>Entry FontName in FontDescriptorCIDType2 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6959"/>
			<description>Entry FontName in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="6960"/>
			<description>Entry FontName with type Name in FontDescriptorCIDType2 shall correspond special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorCIDType2 doesn't correspond special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6961"/>
			<description>Entry Type in FontDescriptorCIDType2 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="6" testNumber="6962"/>
			<description>Entry Type with type Name in FontDescriptorCIDType2 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorCIDType2 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6963"/>
			<description>Entry Type in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6964"/>
			<description>Entry FontFamily in FontDescriptorCIDType2 shall have type String</description>
			<test>containsFontFamily == false || FontFamilyHasTypeString == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorCIDType2 is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6965"/>
			<description>Entry FontBBox in FontDescriptorCIDType2 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6966"/>
			<description>Entry FontBBox in FontDescriptorCIDType2 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType2 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6967"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType2 shall be object Stream</description>
			<test>CIDSetHasTypeStream != true || CIDSet_size == 1</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType2 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="10" testNumber="6968"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType2 shall be indirect</description>
			<test>CIDSetHasTypeStream != true || isCIDSetIndirect == true</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6969"/>
			<description>Entry CIDSet in FontDescriptorCIDType2 shall have type Stream</description>
			<test>containsCIDSet == false || CIDSetHasTypeStream == true</test>
			<error>
				<message>Entry CIDSet in FontDescriptorCIDType2 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6970"/>
			<description>Entry FD with type Dictionary in FontDescriptorCIDType2 shall be object FDDict</description>
			<test>FDHasTypeDictionary != true || FD_size == 1</test>
			<error>
				<message>Entry FD with type Dictionary in FontDescriptorCIDType2 is not object FDDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6971"/>
			<description>Entry FD in FontDescriptorCIDType2 shall have type Dictionary</description>
			<test>containsFD == false || FDHasTypeDictionary == true</test>
			<error>
				<message>Entry FD in FontDescriptorCIDType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6972"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType2 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6973"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="6" testNumber="6974"/>
			<description>Entry FontStretch with type Name in FontDescriptorCIDType2 shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorCIDType2 has incorrect value %2 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6975"/>
			<description>Entry FontStretch in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6976"/>
			<description>Entry MaxWidth in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6977"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorCIDType2 shall be object FontFile2</description>
			<test>FontFile2HasTypeStream != true || FontFile2_size == 1</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorCIDType2 is not object FontFile2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="10" testNumber="6978"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorCIDType2 shall be indirect</description>
			<test>FontFile2HasTypeStream != true || isFontFile2Indirect == true</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6979"/>
			<description>Entry FontFile2 in FontDescriptorCIDType2 shall have type Stream</description>
			<test>containsFontFile2 == false || FontFile2HasTypeStream == true</test>
			<error>
				<message>Entry FontFile2 in FontDescriptorCIDType2 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="6980"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorCIDType2 shall correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)) &amp;&amp; fn:Not(fn:IsPresent(FontFile3)))</description>
			<test>FontFile2HasTypeStream != true || (((containsFontFile == true)) != true &amp;&amp; ((containsFontFile3 == true)) != true)</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorCIDType2 doesn't correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)) &amp;&amp; fn:Not(fn:IsPresent(FontFile3)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6981"/>
			<description>Entry StemV in FontDescriptorCIDType2 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6982"/>
			<description>Entry StemV in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6983"/>
			<description>Entry Lang in FontDescriptorCIDType2 shall have type Name</description>
			<test>containsLang == false || LangHasTypeName == true</test>
			<error>
				<message>Entry Lang in FontDescriptorCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6984"/>
			<description>Entry MissingWidth in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6985"/>
			<description>Entry CapHeight in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6986"/>
			<description>Entry Leading in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6987"/>
			<description>Entry Descent in FontDescriptorCIDType2 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="14" testNumber="6988"/>
			<description>Entry Descent with type Number in FontDescriptorCIDType2 shall correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorCIDType2 doesn't correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6989"/>
			<description>Entry Descent in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6990"/>
			<description>Entry Ascent in FontDescriptorCIDType2 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6991"/>
			<description>Entry Ascent in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="6992"/>
			<description>Entry Flags in FontDescriptorCIDType2 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6993"/>
			<description>Entry Flags in FontDescriptorCIDType2 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType2 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="6994"/>
			<description>Entry Flags with type Bitmask in FontDescriptorCIDType2 shall correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorCIDType2 doesn't correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="6995"/>
			<description>Entry Style with type Dictionary in FontDescriptorCIDType2 shall be object StyleDict</description>
			<test>StyleHasTypeDictionary != true || Style_size == 1</test>
			<error>
				<message>Entry Style with type Dictionary in FontDescriptorCIDType2 is not object StyleDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6996"/>
			<description>Entry Style in FontDescriptorCIDType2 shall have type Dictionary</description>
			<test>containsStyle == false || StyleHasTypeDictionary == true</test>
			<error>
				<message>Entry Style in FontDescriptorCIDType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6997"/>
			<description>Entry StemH in FontDescriptorCIDType2 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="6" testNumber="6998"/>
			<description>Entry FontWeight with type Integer in FontDescriptorCIDType2 shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorCIDType2 has incorrect value %2 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="6999"/>
			<description>Entry FontWeight in FontDescriptorCIDType2 shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorCIDType2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="1" testNumber="7119"/>
			<description>FilterLZWDecode shall not contain entries except Colors, EarlyChange, BitsPerComponent, Predictor, Columns</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Colors' &amp;&amp; elem != 'EarlyChange' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Predictor' &amp;&amp; elem != 'Columns').length == 0</test>
			<error>
				<message>FilterLZWDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Colors' &amp;&amp; elem != 'EarlyChange' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Predictor' &amp;&amp; elem != 'Columns').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="14" testNumber="7120"/>
			<description>Entry Colors with type Integer in FilterLZWDecode shall correspond possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</description>
			<test>ColorsHasTypeInteger != true || (ColorsIntegerValue &gt;= 1) &amp;&amp; true</test>
			<error>
				<message>Entry Colors with type Integer in FilterLZWDecode doesn't correspond possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7121"/>
			<description>Entry Colors in FilterLZWDecode shall have type Integer</description>
			<test>containsColors == false || ColorsHasTypeInteger == true</test>
			<error>
				<message>Entry Colors in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="6" testNumber="7122"/>
			<description>Entry EarlyChange with type Integer in FilterLZWDecode shall have one of values: 0, 1</description>
			<test>EarlyChangeHasTypeInteger != true || EarlyChangeIntegerValue == 0 || EarlyChangeIntegerValue == 1</test>
			<error>
				<message>Entry EarlyChange with type Integer in FilterLZWDecode has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EarlyChangeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7123"/>
			<description>Entry EarlyChange in FilterLZWDecode shall have type Integer</description>
			<test>containsEarlyChange == false || EarlyChangeHasTypeInteger == true</test>
			<error>
				<message>Entry EarlyChange in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="6" testNumber="7124"/>
			<description>Entry BitsPerComponent with type Integer in FilterLZWDecode shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in FilterLZWDecode has incorrect value %2 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7125"/>
			<description>Entry BitsPerComponent in FilterLZWDecode shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="6" testNumber="7126"/>
			<description>Entry Predictor with type Integer in FilterLZWDecode shall have one of values: 11, 1, 12, 2, 13, 14, 15, 10</description>
			<test>PredictorHasTypeInteger != true || PredictorIntegerValue == 1 || PredictorIntegerValue == 2 || PredictorIntegerValue == 10 || PredictorIntegerValue == 11 || PredictorIntegerValue == 12 || PredictorIntegerValue == 13 || PredictorIntegerValue == 14 || PredictorIntegerValue == 15</test>
			<error>
				<message>Entry Predictor with type Integer in FilterLZWDecode has incorrect value %2 instead of 11, 1, 12, 2, 13, 14, 15, 10</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PredictorIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7127"/>
			<description>Entry Predictor in FilterLZWDecode shall have type Integer</description>
			<test>containsPredictor == false || PredictorHasTypeInteger == true</test>
			<error>
				<message>Entry Predictor in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7128"/>
			<description>Entry Columns in FilterLZWDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="1" testNumber="7173"/>
			<description>AddActionScreenAnnotation shall not contain entries except D, PO, PV, PC, E, U, X, PI</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'E' &amp;&amp; elem != 'U' &amp;&amp; elem != 'X' &amp;&amp; elem != 'PI').length == 0</test>
			<error>
				<message>AddActionScreenAnnotation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'E' &amp;&amp; elem != 'U' &amp;&amp; elem != 'X' &amp;&amp; elem != 'PI').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7174"/>
			<description>Entry D with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7175"/>
			<description>Entry D in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7176"/>
			<description>Entry PO with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>POHasTypeDictionary != true || PO_size == 1</test>
			<error>
				<message>Entry PO with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7177"/>
			<description>Entry PO in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsPO == false || POHasTypeDictionary == true</test>
			<error>
				<message>Entry PO in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7178"/>
			<description>Entry PV with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PVHasTypeDictionary != true || PV_size == 1</test>
			<error>
				<message>Entry PV with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7179"/>
			<description>Entry PV in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsPV == false || PVHasTypeDictionary == true</test>
			<error>
				<message>Entry PV in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7180"/>
			<description>Entry PC with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PCHasTypeDictionary != true || PC_size == 1</test>
			<error>
				<message>Entry PC with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7181"/>
			<description>Entry PC in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsPC == false || PCHasTypeDictionary == true</test>
			<error>
				<message>Entry PC in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7182"/>
			<description>Entry E with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>EHasTypeDictionary != true || E_size == 1</test>
			<error>
				<message>Entry E with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7183"/>
			<description>Entry E in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsE == false || EHasTypeDictionary == true</test>
			<error>
				<message>Entry E in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7184"/>
			<description>Entry U with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>UHasTypeDictionary != true || U_size == 1</test>
			<error>
				<message>Entry U with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7185"/>
			<description>Entry U in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsU == false || UHasTypeDictionary == true</test>
			<error>
				<message>Entry U in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7186"/>
			<description>Entry X with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>XHasTypeDictionary != true || X_size == 1</test>
			<error>
				<message>Entry X with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7187"/>
			<description>Entry X in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsX == false || XHasTypeDictionary == true</test>
			<error>
				<message>Entry X in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7188"/>
			<description>Entry PI with type Dictionary in AddActionScreenAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PIHasTypeDictionary != true || PI_size == 1</test>
			<error>
				<message>Entry PI with type Dictionary in AddActionScreenAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionScreenAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7189"/>
			<description>Entry PI in AddActionScreenAnnotation shall have type Dictionary</description>
			<test>containsPI == false || PIHasTypeDictionary == true</test>
			<error>
				<message>Entry PI in AddActionScreenAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="1" testNumber="7367"/>
			<description>AnnotStrikeOut shall not contain entries except Popup, Type, Contents, Rect, CreationDate, AP, Subtype, OC, QuadPoints, ExData, C, M, Border, T, CA, StructParent, NM, IT, AS, P, Subj, F, IRT, RC, RT</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Popup' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'C' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'T' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT').length == 0</test>
			<error>
				<message>AnnotStrikeOut contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Popup' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'C' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'T' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RT').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7368"/>
			<description>Entry Popup with type Dictionary in AnnotStrikeOut shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStrikeOut is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="10" testNumber="7369"/>
			<description>Entry Popup with type Dictionary in AnnotStrikeOut shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStrikeOut is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7370"/>
			<description>Entry Popup in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="6" testNumber="7371"/>
			<description>Entry Type with type Name in AnnotStrikeOut shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotStrikeOut has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7372"/>
			<description>Entry Type in AnnotStrikeOut shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotStrikeOut is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7373"/>
			<description>Entry Contents in AnnotStrikeOut shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotStrikeOut is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="7" testNumber="7374"/>
			<description>Entry Rect in AnnotStrikeOut is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7375"/>
			<description>Entry Rect in AnnotStrikeOut shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotStrikeOut is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7376"/>
			<description>Entry CreationDate in AnnotStrikeOut shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotStrikeOut is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7377"/>
			<description>Entry AP with type Dictionary in AnnotStrikeOut shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotStrikeOut is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="11" testNumber="7378"/>
			<description>Entry AP in AnnotStrikeOut is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7379"/>
			<description>Entry AP in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="7" testNumber="7380"/>
			<description>Entry Subtype in AnnotStrikeOut is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="6" testNumber="7381"/>
			<description>Entry Subtype with type Name in AnnotStrikeOut shall have value StrikeOut</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "StrikeOut"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotStrikeOut has incorrect value %2 instead of StrikeOut</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7382"/>
			<description>Entry Subtype in AnnotStrikeOut shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotStrikeOut is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7383"/>
			<description>Entry OC with type Dictionary in AnnotStrikeOut shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotStrikeOut is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7384"/>
			<description>Entry OC in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7385"/>
			<description>Entry QuadPoints with type Array in AnnotStrikeOut shall be object ArrayOfQuadPoints</description>
			<test>QuadPointsHasTypeArray != true || QuadPoints_size == 1</test>
			<error>
				<message>Entry QuadPoints with type Array in AnnotStrikeOut is not object ArrayOfQuadPoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="7" testNumber="7386"/>
			<description>Entry QuadPoints in AnnotStrikeOut is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7387"/>
			<description>Entry QuadPoints in AnnotStrikeOut shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotStrikeOut is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7388"/>
			<description>Entry ExData with type Dictionary in AnnotStrikeOut shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotStrikeOut is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7389"/>
			<description>Entry ExData in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7390"/>
			<description>Entry C with type Array in AnnotStrikeOut shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotStrikeOut is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7391"/>
			<description>Entry C in AnnotStrikeOut shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotStrikeOut is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7392"/>
			<description>Entry M in AnnotStrikeOut shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotStrikeOut is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7393"/>
			<description>Entry Border with type Array in AnnotStrikeOut shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotStrikeOut is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7394"/>
			<description>Entry Border in AnnotStrikeOut shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotStrikeOut is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7395"/>
			<description>Entry T in AnnotStrikeOut shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotStrikeOut is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="14" testNumber="7396"/>
			<description>Entry CA with type Number in AnnotStrikeOut shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotStrikeOut doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7397"/>
			<description>Entry CA in AnnotStrikeOut shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotStrikeOut is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7398"/>
			<description>Entry StructParent in AnnotStrikeOut shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotStrikeOut is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7399"/>
			<description>Entry NM in AnnotStrikeOut shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotStrikeOut is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7400"/>
			<description>Entry IT in AnnotStrikeOut shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotStrikeOut is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="11" testNumber="7401"/>
			<description>Entry AS in AnnotStrikeOut is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7402"/>
			<description>Entry AS in AnnotStrikeOut shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotStrikeOut is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7403"/>
			<description>Entry P with type Dictionary in AnnotStrikeOut shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStrikeOut is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="10" testNumber="7404"/>
			<description>Entry P with type Dictionary in AnnotStrikeOut shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStrikeOut is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7405"/>
			<description>Entry P in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7406"/>
			<description>Entry Subj in AnnotStrikeOut shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotStrikeOut is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7407"/>
			<description>Entry F in AnnotStrikeOut shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotStrikeOut is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="9" testNumber="7408"/>
			<description>Entry F with type Bitmask in AnnotStrikeOut shall correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotStrikeOut doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7409"/>
			<description>Entry IRT with type Dictionary in AnnotStrikeOut shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotStrikeOut is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="11" testNumber="7410"/>
			<description>Entry IRT in AnnotStrikeOut is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotStrikeOut is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7411"/>
			<description>Entry IRT in AnnotStrikeOut shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotStrikeOut is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7412"/>
			<description>Entry RC with type Stream in AnnotStrikeOut shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotStrikeOut is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="10" testNumber="7413"/>
			<description>Entry RC with type Stream in AnnotStrikeOut shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotStrikeOut is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7414"/>
			<description>Entry RC in AnnotStrikeOut shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotStrikeOut is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="6" testNumber="7415"/>
			<description>Entry RT with type Name in AnnotStrikeOut shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotStrikeOut has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStrikeOut">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7416"/>
			<description>Entry RT in AnnotStrikeOut shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotStrikeOut is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="1" testNumber="7696"/>
			<description>XObjectImageMask shall not contain entries except Alternates, Height, ImageMask, Measure, FDecodeParms, Subtype, Type, SMask, Interpolate, OPI, Metadata, Name, Width, Decode, ID, SMaskInData, Length, BitsPerComponent, PtData, DL, DecodeParms, OC, FFilter, F, Filter, Intent, StructParent</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Alternates' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'StructParent').length == 0</test>
			<error>
				<message>XObjectImageMask contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Alternates' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'StructParent').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7697"/>
			<description>Entry Alternates with type Array in XObjectImageMask shall be object ArrayOfImageAlternates</description>
			<test>AlternatesHasTypeArray != true || Alternates_size == 1</test>
			<error>
				<message>Entry Alternates with type Array in XObjectImageMask is not object ArrayOfImageAlternates</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7698"/>
			<description>Entry Alternates in XObjectImageMask shall have type Array</description>
			<test>containsAlternates == false || AlternatesHasTypeArray == true</test>
			<error>
				<message>Entry Alternates in XObjectImageMask is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="7" testNumber="7699"/>
			<description>Entry Height in XObjectImageMask is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7700"/>
			<description>Entry Height in XObjectImageMask shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="7" testNumber="7701"/>
			<description>Entry ImageMask in XObjectImageMask is required</description>
			<test>containsImageMask == true</test>
			<error>
				<message>Entry ImageMask in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7702"/>
			<description>Entry ImageMask in XObjectImageMask shall have type Boolean</description>
			<test>containsImageMask == false || ImageMaskHasTypeBoolean == true</test>
			<error>
				<message>Entry ImageMask in XObjectImageMask is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="7703"/>
			<description>Entry ImageMask with type Boolean in XObjectImageMask shall correspond special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</description>
			<test>ImageMaskHasTypeBoolean != true || (((ImageMaskBooleanValue == true) &amp;&amp; (BitsPerComponentIntegerValue == 1) &amp;&amp; ((containsColorSpace == true)) != true &amp;&amp; ((containsMask == true)) != true) || (ImageMaskBooleanValue == false))</test>
			<error>
				<message>Entry ImageMask with type Boolean in XObjectImageMask doesn't correspond special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7704"/>
			<description>Entry Measure with type Dictionary in XObjectImageMask shall be one of objects MeasureRL, MeasureGEO</description>
			<test>MeasureHasTypeDictionary != true || Measure_size == 1</test>
			<error>
				<message>Entry Measure with type Dictionary in XObjectImageMask is not one of objects MeasureRL, MeasureGEO</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7705"/>
			<description>Entry Measure in XObjectImageMask shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in XObjectImageMask is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7706"/>
			<description>Entry FDecodeParms with type Array in XObjectImageMask shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImageMask is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7707"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectImageMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectImageMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7708"/>
			<description>Entry FDecodeParms in XObjectImageMask shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectImageMask is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="7709"/>
			<description>Entry FDecodeParms with type Array in XObjectImageMask shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImageMask doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="7" testNumber="7710"/>
			<description>Entry Subtype in XObjectImageMask is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="6" testNumber="7711"/>
			<description>Entry Subtype with type Name in XObjectImageMask shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectImageMask has incorrect value %2 instead of Image</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7712"/>
			<description>Entry Subtype in XObjectImageMask shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectImageMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="6" testNumber="7713"/>
			<description>Entry Type with type Name in XObjectImageMask shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectImageMask has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7714"/>
			<description>Entry Type in XObjectImageMask shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectImageMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7715"/>
			<description>Entry SMask with type Stream in XObjectImageMask shall be object XObjectImageSoftMask</description>
			<test>SMaskHasTypeStream != true || SMask_size == 1</test>
			<error>
				<message>Entry SMask with type Stream in XObjectImageMask is not object XObjectImageSoftMask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="10" testNumber="7716"/>
			<description>Entry SMask with type Stream in XObjectImageMask shall be indirect</description>
			<test>SMaskHasTypeStream != true || isSMaskIndirect == true</test>
			<error>
				<message>Entry SMask with type Stream in XObjectImageMask is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7717"/>
			<description>Entry SMask in XObjectImageMask shall have type Stream</description>
			<test>containsSMask == false || SMaskHasTypeStream == true</test>
			<error>
				<message>Entry SMask in XObjectImageMask is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7718"/>
			<description>Entry Interpolate in XObjectImageMask shall have type Boolean</description>
			<test>containsInterpolate == false || InterpolateHasTypeBoolean == true</test>
			<error>
				<message>Entry Interpolate in XObjectImageMask is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7719"/>
			<description>Entry OPI with type Dictionary in XObjectImageMask shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectImageMask is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7720"/>
			<description>Entry OPI in XObjectImageMask shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectImageMask is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7721"/>
			<description>Entry Metadata with type Stream in XObjectImageMask shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImageMask is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="10" testNumber="7722"/>
			<description>Entry Metadata with type Stream in XObjectImageMask shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImageMask is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7723"/>
			<description>Entry Metadata in XObjectImageMask shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectImageMask is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7724"/>
			<description>Entry Name in XObjectImageMask shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectImageMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="7" testNumber="7725"/>
			<description>Entry Width in XObjectImageMask is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7726"/>
			<description>Entry Width in XObjectImageMask shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7727"/>
			<description>Entry Decode with type Array in XObjectImageMask shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in XObjectImageMask is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="20" testNumber="7728"/>
			<description>Entry Decode with type Array in XObjectImageMask shall have one of values: [1,0], [0,1]</description>
			<test>(DecodeArraySize == 2 &amp;&amp; Decode0IntegerValue == 0 &amp;&amp; Decode1IntegerValue == 1) || (DecodeArraySize == 2 &amp;&amp; Decode0IntegerValue == 1 &amp;&amp; Decode1IntegerValue == 0)</test>
			<error>
				<message>Entry Decode with type Array in XObjectImageMask has incorrect value instead of [1,0], [0,1]</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7729"/>
			<description>Entry Decode in XObjectImageMask shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in XObjectImageMask is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7730"/>
			<description>Entry ID in XObjectImageMask shall have type String</description>
			<test>containsID == false || entryIDHasTypeString == true</test>
			<error>
				<message>Entry ID in XObjectImageMask is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7731"/>
			<description>Entry SMaskInData in XObjectImageMask shall have type Integer</description>
			<test>containsSMaskInData == false || SMaskInDataHasTypeInteger == true</test>
			<error>
				<message>Entry SMaskInData in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="7" testNumber="7732"/>
			<description>Entry Length in XObjectImageMask is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7733"/>
			<description>Entry Length in XObjectImageMask shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="6" testNumber="7734"/>
			<description>Entry BitsPerComponent with type Integer in XObjectImageMask shall have value 1</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in XObjectImageMask has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7735"/>
			<description>Entry BitsPerComponent in XObjectImageMask shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7736"/>
			<description>Entry PtData with type Dictionary in XObjectImageMask shall be object PointData</description>
			<test>PtDataHasTypeDictionary != true || PtData_size == 1</test>
			<error>
				<message>Entry PtData with type Dictionary in XObjectImageMask is not object PointData</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7737"/>
			<description>Entry PtData in XObjectImageMask shall have type Dictionary</description>
			<test>containsPtData == false || PtDataHasTypeDictionary == true</test>
			<error>
				<message>Entry PtData in XObjectImageMask is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7738"/>
			<description>Entry DL in XObjectImageMask shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="7739"/>
			<description>Entry DL with type Integer in XObjectImageMask shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectImageMask doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7740"/>
			<description>Entry DecodeParms with type Array in XObjectImageMask shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImageMask is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7741"/>
			<description>Entry DecodeParms with type Dictionary in XObjectImageMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectImageMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7742"/>
			<description>Entry DecodeParms in XObjectImageMask shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectImageMask is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="7743"/>
			<description>Entry DecodeParms with type Array in XObjectImageMask shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImageMask doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7744"/>
			<description>Entry OC with type Dictionary in XObjectImageMask shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectImageMask is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7745"/>
			<description>Entry OC in XObjectImageMask shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectImageMask is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7746"/>
			<description>Entry FFilter with type Array in XObjectImageMask shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImageMask is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="6" testNumber="7747"/>
			<description>Entry FFilter with type Name in XObjectImageMask shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectImageMask has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7748"/>
			<description>Entry FFilter in XObjectImageMask shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in XObjectImageMask is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="7749"/>
			<description>Entry FFilter with type Array in XObjectImageMask shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImageMask doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7750"/>
			<description>Entry F with type Dictionary in XObjectImageMask shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectImageMask is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7751"/>
			<description>Entry F in XObjectImageMask shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectImageMask is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7752"/>
			<description>Entry Filter with type Array in XObjectImageMask shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectImageMask is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="6" testNumber="7753"/>
			<description>Entry Filter with type Name in XObjectImageMask shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectImageMask has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7754"/>
			<description>Entry Filter in XObjectImageMask shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in XObjectImageMask is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="7755"/>
			<description>Entry Filter with type Array in XObjectImageMask shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectImageMask doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7756"/>
			<description>Entry Intent in XObjectImageMask shall have type Name</description>
			<test>containsIntent == false || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in XObjectImageMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask" deferred="true">
			<id specification="ISO_32000_1_7" clause="11" testNumber="7757"/>
			<description>Entry StructParent in XObjectImageMask is required, when fn:IsRequired(fn:ImageIsStructContentItem())</description>
			<test>(containsStructParent == true || ((imageIsStructContentItem == true &amp;&amp; SubtypeNameValue == "Image")) == false)</test>
			<error>
				<message>Entry StructParent in XObjectImageMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7758"/>
			<description>Entry StructParent in XObjectImageMask shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectImageMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="2" testNumber="7888"/>
			<description>DestXYZArray shall contain exactly 5 elements</description>
			<test>size == 5</test>
			<error>
				<message>DestXYZArray contains %1 element(s) instead of 5</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="6" testNumber="7889"/>
			<description>Entry 1 with type Name in DestXYZArray shall have value XYZ</description>
			<test>entry1HasTypeName != true || entry1NameValue == "XYZ"</test>
			<error>
				<message>Entry 1 with type Name in DestXYZArray has incorrect value %2 instead of XYZ</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7890"/>
			<description>Entry 1 in DestXYZArray shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in DestXYZArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7891"/>
			<description>Entry 2 in DestXYZArray shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in DestXYZArray is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7892"/>
			<description>Entry 3 in DestXYZArray shall have one of types: Null, Number</description>
			<test>size &lt;= 3 || entry3HasTypeNull == true || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in DestXYZArray is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="17" testNumber="7893"/>
			<description>Entry 0 with type Dictionary in DestXYZArray shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in DestXYZArray is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="7894"/>
			<description>Entry 0 with type Number in DestXYZArray shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in DestXYZArray doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7895"/>
			<description>Entry 0 in DestXYZArray shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in DestXYZArray is not one of types: Dictionary, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="7896"/>
			<description>Entry 4 in DestXYZArray shall have one of types: Null, Number</description>
			<test>size &lt;= 4 || entry4HasTypeNull == true || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in DestXYZArray is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="1" testNumber="8022"/>
			<description>EmbeddedFileStream shall not contain entries except Filter, DL, FFilter, Params, F, FDecodeParms, Length, Subtype, DecodeParms, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>EmbeddedFileStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8023"/>
			<description>Entry Filter with type Array in EmbeddedFileStream shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in EmbeddedFileStream is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="8024"/>
			<description>Entry Filter with type Name in EmbeddedFileStream shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in EmbeddedFileStream has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8025"/>
			<description>Entry Filter in EmbeddedFileStream shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in EmbeddedFileStream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="8026"/>
			<description>Entry Filter with type Array in EmbeddedFileStream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in EmbeddedFileStream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8027"/>
			<description>Entry DL in EmbeddedFileStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in EmbeddedFileStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="8028"/>
			<description>Entry DL with type Integer in EmbeddedFileStream shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in EmbeddedFileStream doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8029"/>
			<description>Entry FFilter with type Array in EmbeddedFileStream shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in EmbeddedFileStream is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="8030"/>
			<description>Entry FFilter with type Name in EmbeddedFileStream shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in EmbeddedFileStream has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8031"/>
			<description>Entry FFilter in EmbeddedFileStream shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in EmbeddedFileStream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="8032"/>
			<description>Entry FFilter with type Array in EmbeddedFileStream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in EmbeddedFileStream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8033"/>
			<description>Entry Params with type Dictionary in EmbeddedFileStream shall be object EmbeddedFileParameter</description>
			<test>ParamsHasTypeDictionary != true || Params_size == 1</test>
			<error>
				<message>Entry Params with type Dictionary in EmbeddedFileStream is not object EmbeddedFileParameter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="11" testNumber="8034"/>
			<description>Entry Params in EmbeddedFileStream is required, when fn:IsRequired(fn:SinceVersion(2.0 , fn:IsAssociatedFile()))</description>
			<test>(containsParams == true || (true) == false)</test>
			<error>
				<message>Entry Params in EmbeddedFileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8035"/>
			<description>Entry Params in EmbeddedFileStream shall have type Dictionary</description>
			<test>containsParams == false || ParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry Params in EmbeddedFileStream is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8036"/>
			<description>Entry F with type Dictionary in EmbeddedFileStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in EmbeddedFileStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8037"/>
			<description>Entry F in EmbeddedFileStream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in EmbeddedFileStream is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8038"/>
			<description>Entry FDecodeParms with type Array in EmbeddedFileStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in EmbeddedFileStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8039"/>
			<description>Entry FDecodeParms with type Dictionary in EmbeddedFileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in EmbeddedFileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8040"/>
			<description>Entry FDecodeParms in EmbeddedFileStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in EmbeddedFileStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="8041"/>
			<description>Entry FDecodeParms with type Array in EmbeddedFileStream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in EmbeddedFileStream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8042"/>
			<description>Entry Length in EmbeddedFileStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in EmbeddedFileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8043"/>
			<description>Entry Length in EmbeddedFileStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in EmbeddedFileStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="11" testNumber="8044"/>
			<description>Entry Subtype in EmbeddedFileStream is required, when fn:IsRequired(fn:SinceVersion(2.0 , fn:IsAssociatedFile()))</description>
			<test>(containsSubtype == true || (true) == false)</test>
			<error>
				<message>Entry Subtype in EmbeddedFileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8045"/>
			<description>Entry Subtype in EmbeddedFileStream shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in EmbeddedFileStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8046"/>
			<description>Entry DecodeParms with type Array in EmbeddedFileStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in EmbeddedFileStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8047"/>
			<description>Entry DecodeParms with type Dictionary in EmbeddedFileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in EmbeddedFileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8048"/>
			<description>Entry DecodeParms in EmbeddedFileStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in EmbeddedFileStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="8049"/>
			<description>Entry DecodeParms with type Array in EmbeddedFileStream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in EmbeddedFileStream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="8050"/>
			<description>Entry Type with type Name in EmbeddedFileStream shall have value EmbeddedFile</description>
			<test>TypeHasTypeName != true || TypeNameValue == "EmbeddedFile"</test>
			<error>
				<message>Entry Type with type Name in EmbeddedFileStream has incorrect value %2 instead of EmbeddedFile</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8051"/>
			<description>Entry Type in EmbeddedFileStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in EmbeddedFileStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNumbersGeneralEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8089"/>
			<description>Entry in ArrayOfNumbersGeneral shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in ArrayOfNumbersGeneral is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="1" testNumber="8318"/>
			<description>FontDescriptorCIDType0 shall not contain entries except Descent, ItalicAngle, Lang, Flags, StemH, StemV, FontFile, FontBBox, Ascent, AvgWidth, FontFile3, MaxWidth, FontWeight, CIDSet, FontFamily, Type, MissingWidth, FD, FontStretch, Leading, FontName, Style, CapHeight, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Descent' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>FontDescriptorCIDType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Descent' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'CIDSet' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8319"/>
			<description>Entry Descent in FontDescriptorCIDType0 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="14" testNumber="8320"/>
			<description>Entry Descent with type Number in FontDescriptorCIDType0 shall correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorCIDType0 doesn't correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8321"/>
			<description>Entry Descent in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8322"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType0 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8323"/>
			<description>Entry ItalicAngle in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8324"/>
			<description>Entry Lang in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsLang == false || LangHasTypeName == true</test>
			<error>
				<message>Entry Lang in FontDescriptorCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8325"/>
			<description>Entry Flags in FontDescriptorCIDType0 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8326"/>
			<description>Entry Flags in FontDescriptorCIDType0 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorCIDType0 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="8327"/>
			<description>Entry Flags with type Bitmask in FontDescriptorCIDType0 shall correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorCIDType0 doesn't correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8328"/>
			<description>Entry StemH in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8329"/>
			<description>Entry StemV in FontDescriptorCIDType0 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8330"/>
			<description>Entry StemV in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8331"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType0 shall be object FontFile</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType0 is not object FontFile</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="10" testNumber="8332"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType0 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8333"/>
			<description>Entry FontFile in FontDescriptorCIDType0 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorCIDType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="8334"/>
			<description>Entry FontFile with type Stream in FontDescriptorCIDType0 shall correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)) &amp;&amp; fn:Not(fn:IsPresent(FontFile3)))</description>
			<test>FontFileHasTypeStream != true || (((containsFontFile2 == true)) != true &amp;&amp; ((containsFontFile3 == true)) != true)</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorCIDType0 doesn't correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)) &amp;&amp; fn:Not(fn:IsPresent(FontFile3)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8335"/>
			<description>Entry FontBBox in FontDescriptorCIDType0 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8336"/>
			<description>Entry FontBBox in FontDescriptorCIDType0 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorCIDType0 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8337"/>
			<description>Entry Ascent in FontDescriptorCIDType0 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8338"/>
			<description>Entry Ascent in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8339"/>
			<description>Entry AvgWidth in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8340"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorCIDType0 shall be object FontFile3CIDType0</description>
			<test>FontFile3HasTypeStream != true || FontFile3_size == 1</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorCIDType0 is not object FontFile3CIDType0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="10" testNumber="8341"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorCIDType0 shall be indirect</description>
			<test>FontFile3HasTypeStream != true || isFontFile3Indirect == true</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8342"/>
			<description>Entry FontFile3 in FontDescriptorCIDType0 shall have type Stream</description>
			<test>containsFontFile3 == false || FontFile3HasTypeStream == true</test>
			<error>
				<message>Entry FontFile3 in FontDescriptorCIDType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="8343"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorCIDType0 shall correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)) &amp;&amp; fn:Not(fn:IsPresent(FontFile2)))</description>
			<test>FontFile3HasTypeStream != true || (((containsFontFile == true)) != true &amp;&amp; ((containsFontFile2 == true)) != true)</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorCIDType0 doesn't correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)) &amp;&amp; fn:Not(fn:IsPresent(FontFile2)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8344"/>
			<description>Entry MaxWidth in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="8345"/>
			<description>Entry FontWeight with type Integer in FontDescriptorCIDType0 shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorCIDType0 has incorrect value %2 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8346"/>
			<description>Entry FontWeight in FontDescriptorCIDType0 shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorCIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8347"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType0 shall be object Stream</description>
			<test>CIDSetHasTypeStream != true || CIDSet_size == 1</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType0 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="10" testNumber="8348"/>
			<description>Entry CIDSet with type Stream in FontDescriptorCIDType0 shall be indirect</description>
			<test>CIDSetHasTypeStream != true || isCIDSetIndirect == true</test>
			<error>
				<message>Entry CIDSet with type Stream in FontDescriptorCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8349"/>
			<description>Entry CIDSet in FontDescriptorCIDType0 shall have type Stream</description>
			<test>containsCIDSet == false || CIDSetHasTypeStream == true</test>
			<error>
				<message>Entry CIDSet in FontDescriptorCIDType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8350"/>
			<description>Entry FontFamily in FontDescriptorCIDType0 shall have type String</description>
			<test>containsFontFamily == false || FontFamilyHasTypeString == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorCIDType0 is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8351"/>
			<description>Entry Type in FontDescriptorCIDType0 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="8352"/>
			<description>Entry Type with type Name in FontDescriptorCIDType0 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorCIDType0 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8353"/>
			<description>Entry Type in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8354"/>
			<description>Entry MissingWidth in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8355"/>
			<description>Entry FD with type Dictionary in FontDescriptorCIDType0 shall be object FDDict</description>
			<test>FDHasTypeDictionary != true || FD_size == 1</test>
			<error>
				<message>Entry FD with type Dictionary in FontDescriptorCIDType0 is not object FDDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8356"/>
			<description>Entry FD in FontDescriptorCIDType0 shall have type Dictionary</description>
			<test>containsFD == false || FDHasTypeDictionary == true</test>
			<error>
				<message>Entry FD in FontDescriptorCIDType0 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="8357"/>
			<description>Entry FontStretch with type Name in FontDescriptorCIDType0 shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorCIDType0 has incorrect value %2 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8358"/>
			<description>Entry FontStretch in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8359"/>
			<description>Entry Leading in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8360"/>
			<description>Entry FontName in FontDescriptorCIDType0 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8361"/>
			<description>Entry FontName in FontDescriptorCIDType0 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="8362"/>
			<description>Entry FontName with type Name in FontDescriptorCIDType0 shall correspond special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorCIDType0 doesn't correspond special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8363"/>
			<description>Entry Style with type Dictionary in FontDescriptorCIDType0 shall be object StyleDict</description>
			<test>StyleHasTypeDictionary != true || Style_size == 1</test>
			<error>
				<message>Entry Style with type Dictionary in FontDescriptorCIDType0 is not object StyleDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8364"/>
			<description>Entry Style in FontDescriptorCIDType0 shall have type Dictionary</description>
			<test>containsStyle == false || StyleHasTypeDictionary == true</test>
			<error>
				<message>Entry Style in FontDescriptorCIDType0 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8365"/>
			<description>Entry CapHeight in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8366"/>
			<description>Entry XHeight in FontDescriptorCIDType0 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8420"/>
			<description>Entry with type Dictionary in ArrayOfOCG shall be object OptContentGroup</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOCG is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8421"/>
			<description>Entry in ArrayOfOCG shall have one of types: Null, Dictionary</description>
			<test>HasTypeNull == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOCG is not one of types: Null, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8438"/>
			<description>Entry with type Dictionary in ArrayOfPageTreeNodeKids shall be one of objects PageTreeNode, PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfPageTreeNodeKids is not one of objects PageTreeNode, PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8439"/>
			<description>Entry in ArrayOfPageTreeNodeKids shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfPageTreeNodeKids is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="1" testNumber="8442"/>
			<description>ExData3DMarkup shall not contain entries except Type, Subtype, MD5, 3DA, 3DV</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'MD5' &amp;&amp; elem != '3DA' &amp;&amp; elem != '3DV').length == 0</test>
			<error>
				<message>ExData3DMarkup contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'MD5' &amp;&amp; elem != '3DA' &amp;&amp; elem != '3DV').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8443"/>
			<description>Entry Type in ExData3DMarkup is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ExData3DMarkup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="6" testNumber="8444"/>
			<description>Entry Type with type Name in ExData3DMarkup shall have value ExData</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ExData"</test>
			<error>
				<message>Entry Type with type Name in ExData3DMarkup has incorrect value %2 instead of ExData</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8445"/>
			<description>Entry Type in ExData3DMarkup shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ExData3DMarkup is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8446"/>
			<description>Entry Subtype in ExData3DMarkup is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in ExData3DMarkup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="6" testNumber="8447"/>
			<description>Entry Subtype with type Name in ExData3DMarkup shall have value Markup3D</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Markup3D"</test>
			<error>
				<message>Entry Subtype with type Name in ExData3DMarkup has incorrect value %2 instead of Markup3D</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8448"/>
			<description>Entry Subtype in ExData3DMarkup shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in ExData3DMarkup is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8449"/>
			<description>Entry MD5 in ExData3DMarkup shall have type StringByte</description>
			<test>containsMD5 == false || MD5HasTypeStringByte == true</test>
			<error>
				<message>Entry MD5 in ExData3DMarkup is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8450"/>
			<description>Entry 3DA with type Dictionary in ExData3DMarkup shall be object Annot3D</description>
			<test>entry3DAHasTypeDictionary != true || entry3DA_size == 1</test>
			<error>
				<message>Entry 3DA with type Dictionary in ExData3DMarkup is not object Annot3D</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8451"/>
			<description>Entry 3DA in ExData3DMarkup is required</description>
			<test>contains3DA == true</test>
			<error>
				<message>Entry 3DA in ExData3DMarkup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8452"/>
			<description>Entry 3DA in ExData3DMarkup shall have one of types: StringText, Dictionary</description>
			<test>contains3DA == false || entry3DAHasTypeStringText == true || entry3DAHasTypeDictionary == true</test>
			<error>
				<message>Entry 3DA in ExData3DMarkup is not one of types: StringText, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8453"/>
			<description>Entry 3DV with type Dictionary in ExData3DMarkup shall be object 3DView</description>
			<test>entry3DVHasTypeDictionary != true || entry3DV_size == 1</test>
			<error>
				<message>Entry 3DV with type Dictionary in ExData3DMarkup is not object 3DView</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8454"/>
			<description>Entry 3DV in ExData3DMarkup is required</description>
			<test>contains3DV == true</test>
			<error>
				<message>Entry 3DV in ExData3DMarkup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExData3DMarkup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8455"/>
			<description>Entry 3DV in ExData3DMarkup shall have type Dictionary</description>
			<test>contains3DV == false || entry3DVHasTypeDictionary == true</test>
			<error>
				<message>Entry 3DV in ExData3DMarkup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="1" testNumber="8686"/>
			<description>AnnotWidget shall not contain entries except OC, BS, Rect, M, Subtype, StructParent, A, Ff, AA, Parent, Kids, Contents, AS, C, MK, T, Border, TU, H, F, PMD, NM, P, AP, TM, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'OC' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'A' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'C' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'H' &amp;&amp; elem != 'F' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotWidget contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'OC' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'A' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'C' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'H' &amp;&amp; elem != 'F' &amp;&amp; elem != 'PMD' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8687"/>
			<description>Entry OC with type Dictionary in AnnotWidget shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotWidget is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8688"/>
			<description>Entry OC in AnnotWidget shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8689"/>
			<description>Entry BS with type Dictionary in AnnotWidget shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotWidget is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8690"/>
			<description>Entry BS in AnnotWidget shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8691"/>
			<description>Entry Rect in AnnotWidget is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotWidget is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8692"/>
			<description>Entry Rect in AnnotWidget shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotWidget is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8693"/>
			<description>Entry M in AnnotWidget shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotWidget is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="7" testNumber="8694"/>
			<description>Entry Subtype in AnnotWidget is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotWidget is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="6" testNumber="8695"/>
			<description>Entry Subtype with type Name in AnnotWidget shall have value Widget</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Widget"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotWidget has incorrect value %2 instead of Widget</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8696"/>
			<description>Entry Subtype in AnnotWidget shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotWidget is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8697"/>
			<description>Entry StructParent in AnnotWidget shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotWidget is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8698"/>
			<description>Entry A with type Dictionary in AnnotWidget shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotWidget is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8699"/>
			<description>Entry A in AnnotWidget shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8700"/>
			<description>Entry Ff in AnnotWidget shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in AnnotWidget is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8701"/>
			<description>Entry AA with type Dictionary in AnnotWidget shall be object AddActionWidgetAnnotation</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in AnnotWidget is not object AddActionWidgetAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8702"/>
			<description>Entry AA in AnnotWidget shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8703"/>
			<description>Entry Parent with type Dictionary in AnnotWidget shall be object Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotWidget is not object Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8704"/>
			<description>Entry Parent in AnnotWidget shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8705"/>
			<description>Entry Kids with type Array in AnnotWidget shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in AnnotWidget is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8706"/>
			<description>Entry Kids in AnnotWidget shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in AnnotWidget is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8707"/>
			<description>Entry Contents in AnnotWidget shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="11" testNumber="8708"/>
			<description>Entry AS in AnnotWidget is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotWidget is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8709"/>
			<description>Entry AS in AnnotWidget shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotWidget is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8710"/>
			<description>Entry C with type Array in AnnotWidget shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotWidget is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8711"/>
			<description>Entry C in AnnotWidget shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotWidget is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8712"/>
			<description>Entry MK with type Dictionary in AnnotWidget shall be object AppearanceCharacteristics</description>
			<test>MKHasTypeDictionary != true || MK_size == 1</test>
			<error>
				<message>Entry MK with type Dictionary in AnnotWidget is not object AppearanceCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8713"/>
			<description>Entry MK in AnnotWidget shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8714"/>
			<description>Entry T in AnnotWidget shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8715"/>
			<description>Entry Border with type Array in AnnotWidget shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotWidget is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8716"/>
			<description>Entry Border in AnnotWidget shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotWidget is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8717"/>
			<description>Entry TU in AnnotWidget shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="6" testNumber="8718"/>
			<description>Entry H with type Name in AnnotWidget shall have one of values: P, T, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P" || HNameValue == "T"</test>
			<error>
				<message>Entry H with type Name in AnnotWidget has incorrect value %2 instead of P, T, I, N, O</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8719"/>
			<description>Entry H in AnnotWidget shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotWidget is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8720"/>
			<description>Entry F in AnnotWidget shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotWidget is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="9" testNumber="8721"/>
			<description>Entry F with type Bitmask in AnnotWidget shall correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotWidget doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8722"/>
			<description>Entry PMD with type Dictionary in AnnotWidget shall be object PaperMetaData</description>
			<test>PMDHasTypeDictionary != true || PMD_size == 1</test>
			<error>
				<message>Entry PMD with type Dictionary in AnnotWidget is not object PaperMetaData</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8723"/>
			<description>Entry PMD in AnnotWidget shall have type Dictionary</description>
			<test>containsPMD == false || PMDHasTypeDictionary == true</test>
			<error>
				<message>Entry PMD in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8724"/>
			<description>Entry NM in AnnotWidget shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8725"/>
			<description>Entry P with type Dictionary in AnnotWidget shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidget is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="10" testNumber="8726"/>
			<description>Entry P with type Dictionary in AnnotWidget shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotWidget is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8727"/>
			<description>Entry P in AnnotWidget shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8728"/>
			<description>Entry AP with type Dictionary in AnnotWidget shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotWidget is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="11" testNumber="8729"/>
			<description>Entry AP in AnnotWidget is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotWidget is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8730"/>
			<description>Entry AP in AnnotWidget shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotWidget is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8731"/>
			<description>Entry TM in AnnotWidget shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in AnnotWidget is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="6" testNumber="8732"/>
			<description>Entry Type with type Name in AnnotWidget shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotWidget has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotWidget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8733"/>
			<description>Entry Type in AnnotWidget shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotWidget is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStreamNameTreeResourcesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8795"/>
			<description>Entry with type Dictionary in 3DStreamNameTreeResources shall be object _UniversalDictionary</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in 3DStreamNameTreeResources is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStreamNameTreeResourcesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8796"/>
			<description>Entry in 3DStreamNameTreeResources shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in 3DStreamNameTreeResources is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="2" testNumber="8875"/>
			<description>IndexedColorSpace shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>IndexedColorSpace contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="6" testNumber="8876"/>
			<description>Entry 0 with type Name in IndexedColorSpace shall have value Indexed</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Indexed"</test>
			<error>
				<message>Entry 0 with type Name in IndexedColorSpace has incorrect value %2 instead of Indexed</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8877"/>
			<description>Entry 0 in IndexedColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in IndexedColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="14" testNumber="8878"/>
			<description>Entry 2 with type Integer in IndexedColorSpace shall correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 255))</description>
			<test>entry2HasTypeInteger != true || (entry2IntegerValue &gt;= 0) &amp;&amp; (entry2IntegerValue &lt;= 255)</test>
			<error>
				<message>Entry 2 with type Integer in IndexedColorSpace doesn't correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 255))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8879"/>
			<description>Entry 2 in IndexedColorSpace shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in IndexedColorSpace is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8880"/>
			<description>Entry 3 with type Stream in IndexedColorSpace shall be object Stream</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in IndexedColorSpace is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="10" testNumber="8881"/>
			<description>Entry 3 with type Stream in IndexedColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in IndexedColorSpace is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8882"/>
			<description>Entry 3 in IndexedColorSpace shall have one of types: Stream, String</description>
			<test>size &lt;= 3 || entry3HasTypeStream == true || entry3HasTypeString == true</test>
			<error>
				<message>Entry 3 in IndexedColorSpace is not one of types: Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8883"/>
			<description>Entry 1 with type Array in IndexedColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in IndexedColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="6" testNumber="8884"/>
			<description>Entry 1 with type Name in IndexedColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry1HasTypeName != true || entry1NameValue == "DeviceCMYK" || entry1NameValue == "DeviceRGB" || entry1NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 1 with type Name in IndexedColorSpace has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8885"/>
			<description>Entry 1 in IndexedColorSpace shall have one of types: Name, Array</description>
			<test>size &lt;= 1 || entry1HasTypeName == true || entry1HasTypeArray == true</test>
			<error>
				<message>Entry 1 in IndexedColorSpace is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="1" testNumber="8995"/>
			<description>FileSpecification shall not contain entries except RF, DOS, F, Thumb, UF, CI, V, Mac, FS, Unix, EF, Type, Desc, ID</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'RF' &amp;&amp; elem != 'DOS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'UF' &amp;&amp; elem != 'CI' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'EF' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'ID').length == 0</test>
			<error>
				<message>FileSpecification contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'RF' &amp;&amp; elem != 'DOS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'UF' &amp;&amp; elem != 'CI' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'Unix' &amp;&amp; elem != 'EF' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'ID').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="17" testNumber="8996"/>
			<description>Entry RF with type Dictionary in FileSpecification shall be object FileSpecRF</description>
			<test>RFHasTypeDictionary != true || RF_size == 1</test>
			<error>
				<message>Entry RF with type Dictionary in FileSpecification is not object FileSpecRF</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8997"/>
			<description>Entry RF in FileSpecification shall have type Dictionary</description>
			<test>containsRF == false || RFHasTypeDictionary == true</test>
			<error>
				<message>Entry RF in FileSpecification is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="8998"/>
			<description>Entry DOS in FileSpecification shall have type StringByte</description>
			<test>containsDOS == false || DOSHasTypeStringByte == true</test>
			<error>
				<message>Entry DOS in FileSpecification is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="11" testNumber="8999"/>
			<description>Entry F in FileSpecification is required, when fn:IsRequired(fn:Not(fn:IsPresent(DOS)) &amp;&amp; fn:Not(fn:IsPresent(Mac)) &amp;&amp; fn:Not(fn:IsPresent(Unix)))</description>
			<test>(containsF == true || (((containsDOS == true)) != true &amp;&amp; ((containsMac == true)) != true &amp;&amp; ((containsUnix == true)) != true) == false)</test>
			<error>
				<message>Entry F in FileSpecification is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9000"/>
			<description>Entry F in FileSpecification shall have type String</description>
			<test>containsF == false || FHasTypeString == true</test>
			<error>
				<message>Entry F in FileSpecification is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9001"/>
			<description>Entry Thumb with type Stream in FileSpecification shall be object Thumbnail</description>
			<test>ThumbHasTypeStream != true || Thumb_size == 1</test>
			<error>
				<message>Entry Thumb with type Stream in FileSpecification is not object Thumbnail</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="10" testNumber="9002"/>
			<description>Entry Thumb with type Stream in FileSpecification shall be indirect</description>
			<test>ThumbHasTypeStream != true || isThumbIndirect == true</test>
			<error>
				<message>Entry Thumb with type Stream in FileSpecification is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9003"/>
			<description>Entry Thumb in FileSpecification shall have type Stream</description>
			<test>containsThumb == false || ThumbHasTypeStream == true</test>
			<error>
				<message>Entry Thumb in FileSpecification is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9004"/>
			<description>Entry UF in FileSpecification shall have type StringText</description>
			<test>containsUF == false || UFHasTypeStringText == true</test>
			<error>
				<message>Entry UF in FileSpecification is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9005"/>
			<description>Entry CI with type Dictionary in FileSpecification shall be object CollectionItem</description>
			<test>CIHasTypeDictionary != true || CI_size == 1</test>
			<error>
				<message>Entry CI with type Dictionary in FileSpecification is not object CollectionItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9006"/>
			<description>Entry CI in FileSpecification shall have type Dictionary</description>
			<test>containsCI == false || CIHasTypeDictionary == true</test>
			<error>
				<message>Entry CI in FileSpecification is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9007"/>
			<description>Entry V in FileSpecification shall have type Boolean</description>
			<test>containsV == false || VHasTypeBoolean == true</test>
			<error>
				<message>Entry V in FileSpecification is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9008"/>
			<description>Entry Mac in FileSpecification shall have type StringByte</description>
			<test>containsMac == false || MacHasTypeStringByte == true</test>
			<error>
				<message>Entry Mac in FileSpecification is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9009"/>
			<description>Entry FS in FileSpecification shall have type Name</description>
			<test>containsFS == false || FSHasTypeName == true</test>
			<error>
				<message>Entry FS in FileSpecification is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9010"/>
			<description>Entry Unix in FileSpecification shall have type StringByte</description>
			<test>containsUnix == false || UnixHasTypeStringByte == true</test>
			<error>
				<message>Entry Unix in FileSpecification is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9011"/>
			<description>Entry EF with type Dictionary in FileSpecification shall be object FileSpecEF</description>
			<test>EFHasTypeDictionary != true || EF_size == 1</test>
			<error>
				<message>Entry EF with type Dictionary in FileSpecification is not object FileSpecEF</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="11" testNumber="9012"/>
			<description>Entry EF in FileSpecification is required, when fn:IsRequired(fn:IsPresent(RF))</description>
			<test>(containsEF == true || ((containsRF == true)) == false)</test>
			<error>
				<message>Entry EF in FileSpecification is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9013"/>
			<description>Entry EF in FileSpecification shall have type Dictionary</description>
			<test>containsEF == false || EFHasTypeDictionary == true</test>
			<error>
				<message>Entry EF in FileSpecification is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="11" testNumber="9014"/>
			<description>Entry Type in FileSpecification is required, when fn:IsRequired(fn:IsPresent(EF) || fn:IsPresent(EP) || fn:IsPresent(RF))</description>
			<test>(containsType == true || ((containsEF == true) || (containsEP == true) || (containsRF == true)) == false)</test>
			<error>
				<message>Entry Type in FileSpecification is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9015"/>
			<description>Entry Type with type Name in FileSpecification shall have value Filespec</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Filespec"</test>
			<error>
				<message>Entry Type with type Name in FileSpecification has incorrect value %2 instead of Filespec</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9016"/>
			<description>Entry Type in FileSpecification shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FileSpecification is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9017"/>
			<description>Entry Desc in FileSpecification shall have type String</description>
			<test>containsDesc == false || DescHasTypeString == true</test>
			<error>
				<message>Entry Desc in FileSpecification is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9018"/>
			<description>Entry ID with type Array in FileSpecification shall be object ArrayOf_2StringsByte</description>
			<test>entryIDHasTypeArray != true || entryID_size == 1</test>
			<error>
				<message>Entry ID with type Array in FileSpecification is not object ArrayOf_2StringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9019"/>
			<description>Entry ID in FileSpecification shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in FileSpecification is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="2" testNumber="9091"/>
			<description>BlackpointArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>BlackpointArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="9092"/>
			<description>Entry 0 with type Number in BlackpointArray shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in BlackpointArray doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9093"/>
			<description>Entry 0 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in BlackpointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="9094"/>
			<description>Entry 2 with type Number in BlackpointArray shall correspond possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in BlackpointArray doesn't correspond possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9095"/>
			<description>Entry 2 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in BlackpointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="9096"/>
			<description>Entry 1 with type Number in BlackpointArray shall correspond possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in BlackpointArray doesn't correspond possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9097"/>
			<description>Entry 1 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in BlackpointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_7" clause="1" testNumber="9129"/>
			<description>Mac shall not contain entries except ResFork, Creator, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ResFork' &amp;&amp; elem != 'Creator' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>Mac contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ResFork' &amp;&amp; elem != 'Creator' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9130"/>
			<description>Entry ResFork with type Stream in Mac shall be object Stream</description>
			<test>ResForkHasTypeStream != true || ResFork_size == 1</test>
			<error>
				<message>Entry ResFork with type Stream in Mac is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_7" clause="10" testNumber="9131"/>
			<description>Entry ResFork with type Stream in Mac shall be indirect</description>
			<test>ResForkHasTypeStream != true || isResForkIndirect == true</test>
			<error>
				<message>Entry ResFork with type Stream in Mac is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9132"/>
			<description>Entry ResFork in Mac shall have type Stream</description>
			<test>containsResFork == false || ResForkHasTypeStream == true</test>
			<error>
				<message>Entry ResFork in Mac is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9133"/>
			<description>Entry Creator in Mac shall have type Integer</description>
			<test>containsCreator == false || CreatorHasTypeInteger == true</test>
			<error>
				<message>Entry Creator in Mac is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMac">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9134"/>
			<description>Entry Subtype in Mac shall have type Integer</description>
			<test>containsSubtype == false || SubtypeHasTypeInteger == true</test>
			<error>
				<message>Entry Subtype in Mac is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExtensionsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9141"/>
			<description>Entry with type Dictionary in Extensions shall be object DevExtensions</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in Extensions is not object DevExtensions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExtensionsEntry">
			<id specification="ISO_32000_1_7" clause="16" testNumber="9142"/>
			<description>If entry with type Dictionary in Extensions corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>HasTypeDictionary != true || (isIndirect == false)</test>
			<error>
				<message>Entry %1 with type Dictionary in Extensions is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExtensionsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9143"/>
			<description>Entry in Extensions shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in Extensions is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="1" testNumber="9200"/>
			<description>SoftMaskAlpha shall not contain entries except BC, G, TR, Type, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BC' &amp;&amp; elem != 'G' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>SoftMaskAlpha contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BC' &amp;&amp; elem != 'G' &amp;&amp; elem != 'TR' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9201"/>
			<description>Entry BC with type Array in SoftMaskAlpha shall be object ArrayOfNumbersGeneral</description>
			<test>BCHasTypeArray != true || BC_size == 1</test>
			<error>
				<message>Entry BC with type Array in SoftMaskAlpha is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9202"/>
			<description>Entry BC in SoftMaskAlpha shall have type Array</description>
			<test>containsBC == false || BCHasTypeArray == true</test>
			<error>
				<message>Entry BC in SoftMaskAlpha is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9203"/>
			<description>Entry G with type Stream in SoftMaskAlpha shall be object XObjectFormType1</description>
			<test>GHasTypeStream != true || G_size == 1</test>
			<error>
				<message>Entry G with type Stream in SoftMaskAlpha is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="7" testNumber="9204"/>
			<description>Entry G in SoftMaskAlpha is required</description>
			<test>containsG == true</test>
			<error>
				<message>Entry G in SoftMaskAlpha is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="10" testNumber="9205"/>
			<description>Entry G with type Stream in SoftMaskAlpha shall be indirect</description>
			<test>GHasTypeStream != true || isGIndirect == true</test>
			<error>
				<message>Entry G with type Stream in SoftMaskAlpha is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9206"/>
			<description>Entry G in SoftMaskAlpha shall have type Stream</description>
			<test>containsG == false || GHasTypeStream == true</test>
			<error>
				<message>Entry G in SoftMaskAlpha is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9207"/>
			<description>Entry TR with type Dictionary in SoftMaskAlpha shall be one of objects FunctionType2, FunctionType3</description>
			<test>TRHasTypeDictionary != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Dictionary in SoftMaskAlpha is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9208"/>
			<description>Entry TR with type Stream in SoftMaskAlpha shall be one of objects FunctionType0, FunctionType4</description>
			<test>TRHasTypeStream != true || TR_size == 1</test>
			<error>
				<message>Entry TR with type Stream in SoftMaskAlpha is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="10" testNumber="9209"/>
			<description>Entry TR with type Stream in SoftMaskAlpha shall be indirect</description>
			<test>TRHasTypeStream != true || isTRIndirect == true</test>
			<error>
				<message>Entry TR with type Stream in SoftMaskAlpha is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9210"/>
			<description>Entry TR with type Name in SoftMaskAlpha shall have value Identity</description>
			<test>TRHasTypeName != true || TRNameValue == "Identity"</test>
			<error>
				<message>Entry TR with type Name in SoftMaskAlpha has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TRNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9211"/>
			<description>Entry TR in SoftMaskAlpha shall have one of types: Name, Dictionary, Stream</description>
			<test>containsTR == false || TRHasTypeName == true || TRHasTypeDictionary == true || TRHasTypeStream == true</test>
			<error>
				<message>Entry TR in SoftMaskAlpha is not one of types: Name, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9212"/>
			<description>Entry Type with type Name in SoftMaskAlpha shall have value Mask</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Mask"</test>
			<error>
				<message>Entry Type with type Name in SoftMaskAlpha has incorrect value %2 instead of Mask</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9213"/>
			<description>Entry Type in SoftMaskAlpha shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SoftMaskAlpha is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="7" testNumber="9214"/>
			<description>Entry S in SoftMaskAlpha is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in SoftMaskAlpha is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9215"/>
			<description>Entry S with type Name in SoftMaskAlpha shall have value Alpha</description>
			<test>SHasTypeName != true || SNameValue == "Alpha"</test>
			<error>
				<message>Entry S with type Name in SoftMaskAlpha has incorrect value %2 instead of Alpha</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftMaskAlpha">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9216"/>
			<description>Entry S in SoftMaskAlpha shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in SoftMaskAlpha is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceSubDictEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9246"/>
			<description>Entry with type Stream in AppearanceSubDict shall be object XObjectFormType1</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in AppearanceSubDict is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceSubDictEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="9247"/>
			<description>Entry with type Stream in AppearanceSubDict shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in AppearanceSubDict is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceSubDictEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9248"/>
			<description>Entry in AppearanceSubDict shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in AppearanceSubDict is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeXFAResources">
			<id specification="ISO_32000_1_7" clause="18" testNumber="9252"/>
			<description>Entry * in NameNameTreeXFAResources shall be object NameNameTreeXFAResourcesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeXFAResources is not object NameNameTreeXFAResourcesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="1" testNumber="9330"/>
			<description>ViewerPreferences shall not contain entries except ViewArea, Direction, DisplayDocTitle, HideToolbar, HideMenubar, FitWindow, NonFullScreenPageMode, PrintPageRange, PrintClip, PrintArea, PickTrayByPDFSize, PrintScaling, ViewClip, HideWindowUI, Duplex, NumCopies, CenterWindow, Enforce</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ViewArea' &amp;&amp; elem != 'Direction' &amp;&amp; elem != 'DisplayDocTitle' &amp;&amp; elem != 'HideToolbar' &amp;&amp; elem != 'HideMenubar' &amp;&amp; elem != 'FitWindow' &amp;&amp; elem != 'NonFullScreenPageMode' &amp;&amp; elem != 'PrintPageRange' &amp;&amp; elem != 'PrintClip' &amp;&amp; elem != 'PrintArea' &amp;&amp; elem != 'PickTrayByPDFSize' &amp;&amp; elem != 'PrintScaling' &amp;&amp; elem != 'ViewClip' &amp;&amp; elem != 'HideWindowUI' &amp;&amp; elem != 'Duplex' &amp;&amp; elem != 'NumCopies' &amp;&amp; elem != 'CenterWindow' &amp;&amp; elem != 'Enforce').length == 0</test>
			<error>
				<message>ViewerPreferences contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ViewArea' &amp;&amp; elem != 'Direction' &amp;&amp; elem != 'DisplayDocTitle' &amp;&amp; elem != 'HideToolbar' &amp;&amp; elem != 'HideMenubar' &amp;&amp; elem != 'FitWindow' &amp;&amp; elem != 'NonFullScreenPageMode' &amp;&amp; elem != 'PrintPageRange' &amp;&amp; elem != 'PrintClip' &amp;&amp; elem != 'PrintArea' &amp;&amp; elem != 'PickTrayByPDFSize' &amp;&amp; elem != 'PrintScaling' &amp;&amp; elem != 'ViewClip' &amp;&amp; elem != 'HideWindowUI' &amp;&amp; elem != 'Duplex' &amp;&amp; elem != 'NumCopies' &amp;&amp; elem != 'CenterWindow' &amp;&amp; elem != 'Enforce').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9331"/>
			<description>Entry ViewArea with type Name in ViewerPreferences shall have one of values: CropBox, BleedBox, TrimBox, MediaBox, ArtBox</description>
			<test>ViewAreaHasTypeName != true || ViewAreaNameValue == "MediaBox" || ViewAreaNameValue == "CropBox" || ViewAreaNameValue == "BleedBox" || ViewAreaNameValue == "TrimBox" || ViewAreaNameValue == "ArtBox"</test>
			<error>
				<message>Entry ViewArea with type Name in ViewerPreferences has incorrect value %2 instead of CropBox, BleedBox, TrimBox, MediaBox, ArtBox</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ViewAreaNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9332"/>
			<description>Entry ViewArea in ViewerPreferences shall have type Name</description>
			<test>containsViewArea == false || ViewAreaHasTypeName == true</test>
			<error>
				<message>Entry ViewArea in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9333"/>
			<description>Entry Direction with type Name in ViewerPreferences shall have one of values: L2R, R2L</description>
			<test>DirectionHasTypeName != true || DirectionNameValue == "L2R" || DirectionNameValue == "R2L"</test>
			<error>
				<message>Entry Direction with type Name in ViewerPreferences has incorrect value %2 instead of L2R, R2L</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DirectionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9334"/>
			<description>Entry Direction in ViewerPreferences shall have type Name</description>
			<test>containsDirection == false || DirectionHasTypeName == true</test>
			<error>
				<message>Entry Direction in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9335"/>
			<description>Entry DisplayDocTitle in ViewerPreferences shall have type Boolean</description>
			<test>containsDisplayDocTitle == false || DisplayDocTitleHasTypeBoolean == true</test>
			<error>
				<message>Entry DisplayDocTitle in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9336"/>
			<description>Entry HideToolbar in ViewerPreferences shall have type Boolean</description>
			<test>containsHideToolbar == false || HideToolbarHasTypeBoolean == true</test>
			<error>
				<message>Entry HideToolbar in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9337"/>
			<description>Entry HideMenubar in ViewerPreferences shall have type Boolean</description>
			<test>containsHideMenubar == false || HideMenubarHasTypeBoolean == true</test>
			<error>
				<message>Entry HideMenubar in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9338"/>
			<description>Entry FitWindow in ViewerPreferences shall have type Boolean</description>
			<test>containsFitWindow == false || FitWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry FitWindow in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9339"/>
			<description>Entry NonFullScreenPageMode with type Name in ViewerPreferences shall have one of values: UseOutlines, UseThumbs, UseOC, UseNone</description>
			<test>NonFullScreenPageModeHasTypeName != true || NonFullScreenPageModeNameValue == "UseNone" || NonFullScreenPageModeNameValue == "UseOutlines" || NonFullScreenPageModeNameValue == "UseThumbs" || NonFullScreenPageModeNameValue == "UseOC"</test>
			<error>
				<message>Entry NonFullScreenPageMode with type Name in ViewerPreferences has incorrect value %2 instead of UseOutlines, UseThumbs, UseOC, UseNone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NonFullScreenPageModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9340"/>
			<description>Entry NonFullScreenPageMode in ViewerPreferences shall have type Name</description>
			<test>containsNonFullScreenPageMode == false || NonFullScreenPageModeHasTypeName == true</test>
			<error>
				<message>Entry NonFullScreenPageMode in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9341"/>
			<description>Entry PrintPageRange with type Array in ViewerPreferences shall be object ArrayOfIntegersGeneral</description>
			<test>PrintPageRangeHasTypeArray != true || PrintPageRange_size == 1</test>
			<error>
				<message>Entry PrintPageRange with type Array in ViewerPreferences is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9342"/>
			<description>Entry PrintPageRange in ViewerPreferences shall have type Array</description>
			<test>containsPrintPageRange == false || PrintPageRangeHasTypeArray == true</test>
			<error>
				<message>Entry PrintPageRange in ViewerPreferences is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9343"/>
			<description>Entry PrintClip with type Name in ViewerPreferences shall have one of values: CropBox, BleedBox, TrimBox, MediaBox, ArtBox</description>
			<test>PrintClipHasTypeName != true || PrintClipNameValue == "MediaBox" || PrintClipNameValue == "CropBox" || PrintClipNameValue == "BleedBox" || PrintClipNameValue == "TrimBox" || PrintClipNameValue == "ArtBox"</test>
			<error>
				<message>Entry PrintClip with type Name in ViewerPreferences has incorrect value %2 instead of CropBox, BleedBox, TrimBox, MediaBox, ArtBox</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PrintClipNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9344"/>
			<description>Entry PrintClip in ViewerPreferences shall have type Name</description>
			<test>containsPrintClip == false || PrintClipHasTypeName == true</test>
			<error>
				<message>Entry PrintClip in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9345"/>
			<description>Entry PrintArea with type Name in ViewerPreferences shall have one of values: CropBox, BleedBox, TrimBox, MediaBox, ArtBox</description>
			<test>PrintAreaHasTypeName != true || PrintAreaNameValue == "MediaBox" || PrintAreaNameValue == "CropBox" || PrintAreaNameValue == "BleedBox" || PrintAreaNameValue == "TrimBox" || PrintAreaNameValue == "ArtBox"</test>
			<error>
				<message>Entry PrintArea with type Name in ViewerPreferences has incorrect value %2 instead of CropBox, BleedBox, TrimBox, MediaBox, ArtBox</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PrintAreaNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9346"/>
			<description>Entry PrintArea in ViewerPreferences shall have type Name</description>
			<test>containsPrintArea == false || PrintAreaHasTypeName == true</test>
			<error>
				<message>Entry PrintArea in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9347"/>
			<description>Entry PickTrayByPDFSize in ViewerPreferences shall have type Boolean</description>
			<test>containsPickTrayByPDFSize == false || PickTrayByPDFSizeHasTypeBoolean == true</test>
			<error>
				<message>Entry PickTrayByPDFSize in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9348"/>
			<description>Entry PrintScaling in ViewerPreferences shall have type Name</description>
			<test>containsPrintScaling == false || PrintScalingHasTypeName == true</test>
			<error>
				<message>Entry PrintScaling in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9349"/>
			<description>Entry ViewClip with type Name in ViewerPreferences shall have one of values: CropBox, BleedBox, TrimBox, MediaBox, ArtBox</description>
			<test>ViewClipHasTypeName != true || ViewClipNameValue == "MediaBox" || ViewClipNameValue == "CropBox" || ViewClipNameValue == "BleedBox" || ViewClipNameValue == "TrimBox" || ViewClipNameValue == "ArtBox"</test>
			<error>
				<message>Entry ViewClip with type Name in ViewerPreferences has incorrect value %2 instead of CropBox, BleedBox, TrimBox, MediaBox, ArtBox</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ViewClipNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9350"/>
			<description>Entry ViewClip in ViewerPreferences shall have type Name</description>
			<test>containsViewClip == false || ViewClipHasTypeName == true</test>
			<error>
				<message>Entry ViewClip in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9351"/>
			<description>Entry HideWindowUI in ViewerPreferences shall have type Boolean</description>
			<test>containsHideWindowUI == false || HideWindowUIHasTypeBoolean == true</test>
			<error>
				<message>Entry HideWindowUI in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9352"/>
			<description>Entry Duplex with type Name in ViewerPreferences shall have one of values: Simplex, DuplexFlipShortEdge, DuplexFlipLongEdge</description>
			<test>DuplexHasTypeName != true || DuplexNameValue == "Simplex" || DuplexNameValue == "DuplexFlipShortEdge" || DuplexNameValue == "DuplexFlipLongEdge"</test>
			<error>
				<message>Entry Duplex with type Name in ViewerPreferences has incorrect value %2 instead of Simplex, DuplexFlipShortEdge, DuplexFlipLongEdge</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DuplexNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9353"/>
			<description>Entry Duplex in ViewerPreferences shall have type Name</description>
			<test>containsDuplex == false || DuplexHasTypeName == true</test>
			<error>
				<message>Entry Duplex in ViewerPreferences is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="14" testNumber="9354"/>
			<description>Entry NumCopies with type Integer in ViewerPreferences shall correspond possible value predicate: fn:Eval(@NumCopies &gt; 0)</description>
			<test>NumCopiesHasTypeInteger != true || NumCopiesIntegerValue &gt; 0</test>
			<error>
				<message>Entry NumCopies with type Integer in ViewerPreferences doesn't correspond possible value predicate: fn:Eval(@NumCopies &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9355"/>
			<description>Entry NumCopies in ViewerPreferences shall have type Integer</description>
			<test>containsNumCopies == false || NumCopiesHasTypeInteger == true</test>
			<error>
				<message>Entry NumCopies in ViewerPreferences is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9356"/>
			<description>Entry CenterWindow in ViewerPreferences shall have type Boolean</description>
			<test>containsCenterWindow == false || CenterWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry CenterWindow in ViewerPreferences is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9357"/>
			<description>Entry Enforce with type Array in ViewerPreferences shall be object ArrayOfNamesForEnforce</description>
			<test>EnforceHasTypeArray != true || Enforce_size == 1</test>
			<error>
				<message>Entry Enforce with type Array in ViewerPreferences is not object ArrayOfNamesForEnforce</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewerPreferences">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9358"/>
			<description>Entry Enforce in ViewerPreferences shall have type Array</description>
			<test>containsEnforce == false || EnforceHasTypeArray == true</test>
			<error>
				<message>Entry Enforce in ViewerPreferences is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNumberFormatsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9390"/>
			<description>Entry with type Dictionary in ArrayOfNumberFormats shall be object NumberFormat</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfNumberFormats is not object NumberFormat</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNumberFormatsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9391"/>
			<description>Entry in ArrayOfNumberFormats shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfNumberFormats is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsText">
			<id specification="ISO_32000_1_7" clause="2" testNumber="9403"/>
			<description>ArrayOf_2StringsText shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2StringsText contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9404"/>
			<description>Entry 1 in ArrayOf_2StringsText shall have type StringText</description>
			<test>size &lt;= 1 || entry1HasTypeStringText == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2StringsText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9405"/>
			<description>Entry 0 in ArrayOf_2StringsText shall have type StringText</description>
			<test>size &lt;= 0 || entry0HasTypeStringText == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2StringsText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMDPDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="9412"/>
			<description>MDPDict shall not contain entries except P</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'P').length == 0</test>
			<error>
				<message>MDPDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'P').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMDPDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9413"/>
			<description>Entry P with type Integer in MDPDict shall have one of values: 0, 1, 2, 3</description>
			<test>PHasTypeInteger != true || PIntegerValue == 0 || PIntegerValue == 1 || PIntegerValue == 2 || PIntegerValue == 3</test>
			<error>
				<message>Entry P with type Integer in MDPDict has incorrect value %2 instead of 0, 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMDPDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9414"/>
			<description>Entry P in MDPDict shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in MDPDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPM">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9422"/>
			<description>Entry GTS_Managed with type Dictionary in DPM shall be object _UniversalDictionary</description>
			<test>GTS_ManagedHasTypeDictionary != true || GTS_Managed_size == 1</test>
			<error>
				<message>Entry GTS_Managed with type Dictionary in DPM is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPM">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9423"/>
			<description>Entry GTS_Managed in DPM shall have type Dictionary</description>
			<test>containsGTS_Managed == false || GTS_ManagedHasTypeDictionary == true</test>
			<error>
				<message>Entry GTS_Managed in DPM is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPM">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9424"/>
			<description>Entry GTS_Suspect with type Dictionary in DPM shall be object _UniversalDictionary</description>
			<test>GTS_SuspectHasTypeDictionary != true || GTS_Suspect_size == 1</test>
			<error>
				<message>Entry GTS_Suspect with type Dictionary in DPM is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPM">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9425"/>
			<description>Entry GTS_Suspect in DPM shall have type Dictionary</description>
			<test>containsGTS_Suspect == false || GTS_SuspectHasTypeDictionary == true</test>
			<error>
				<message>Entry GTS_Suspect in DPM is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="4" testNumber="9491"/>
			<description>ArrayOf_4AnnotBorderCharacteristics shall contain at least 3 elements</description>
			<test>size &gt;= 3</test>
			<error>
				<message>ArrayOf_4AnnotBorderCharacteristics contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="14" testNumber="9492"/>
			<description>Entry 1 with type Number in ArrayOf_4AnnotBorderCharacteristics shall correspond possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4AnnotBorderCharacteristics doesn't correspond possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9493"/>
			<description>Entry 1 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4AnnotBorderCharacteristics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="14" testNumber="9494"/>
			<description>Entry 0 with type Number in ArrayOf_4AnnotBorderCharacteristics shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4AnnotBorderCharacteristics doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9495"/>
			<description>Entry 0 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4AnnotBorderCharacteristics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="14" testNumber="9496"/>
			<description>Entry 2 with type Number in ArrayOf_4AnnotBorderCharacteristics shall correspond possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4AnnotBorderCharacteristics doesn't correspond possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9497"/>
			<description>Entry 2 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4AnnotBorderCharacteristics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9498"/>
			<description>Entry 3 with type Array in ArrayOf_4AnnotBorderCharacteristics shall be object ArrayOf_2DashNumbers</description>
			<test>entry3HasTypeArray != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Array in ArrayOf_4AnnotBorderCharacteristics is not object ArrayOf_2DashNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9499"/>
			<description>Entry 3 in ArrayOf_4AnnotBorderCharacteristics shall have type Array</description>
			<test>size &lt;= 3 || entry3HasTypeArray == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4AnnotBorderCharacteristics is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="1" testNumber="9658"/>
			<description>FontFile2 shall not contain entries except Filter, FDecodeParms, Length, Length1, DecodeParms, FFilter, Subtype, F, Length2, Length3, DL</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'DL').length == 0</test>
			<error>
				<message>FontFile2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'DL').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9659"/>
			<description>Entry Filter with type Array in FontFile2 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFile2 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9660"/>
			<description>Entry Filter with type Name in FontFile2 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFile2 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9661"/>
			<description>Entry Filter in FontFile2 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in FontFile2 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9662"/>
			<description>Entry Filter with type Array in FontFile2 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile2 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9663"/>
			<description>Entry FDecodeParms with type Array in FontFile2 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile2 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9664"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile2 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile2 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9665"/>
			<description>Entry FDecodeParms in FontFile2 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile2 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9666"/>
			<description>Entry FDecodeParms with type Array in FontFile2 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile2 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="9667"/>
			<description>Entry Length in FontFile2 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9668"/>
			<description>Entry Length in FontFile2 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="11" testNumber="9669"/>
			<description>Entry Length1 in FontFile2 is required, when fn:IsRequired(parent::parent::@Subtype== TrueType)</description>
			<test>(containsLength1 == true || (parentparentSubtypeNameValue == "TrueType") == false)</test>
			<error>
				<message>Entry Length1 in FontFile2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9670"/>
			<description>Entry Length1 in FontFile2 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9671"/>
			<description>Entry Length1 with type Integer in FontFile2 shall correspond special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile2 doesn't correspond special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9672"/>
			<description>Entry DecodeParms with type Array in FontFile2 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile2 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9673"/>
			<description>Entry DecodeParms with type Dictionary in FontFile2 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile2 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9674"/>
			<description>Entry DecodeParms in FontFile2 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile2 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9675"/>
			<description>Entry DecodeParms with type Array in FontFile2 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile2 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9676"/>
			<description>Entry FFilter with type Array in FontFile2 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFile2 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9677"/>
			<description>Entry FFilter with type Name in FontFile2 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile2 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9678"/>
			<description>Entry FFilter in FontFile2 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in FontFile2 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9679"/>
			<description>Entry FFilter with type Array in FontFile2 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile2 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9680"/>
			<description>Entry Subtype in FontFile2 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9681"/>
			<description>Entry F with type Dictionary in FontFile2 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFile2 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9682"/>
			<description>Entry F in FontFile2 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FontFile2 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9683"/>
			<description>Entry Length2 in FontFile2 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9684"/>
			<description>Entry Length2 with type Integer in FontFile2 shall correspond special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile2 doesn't correspond special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9685"/>
			<description>Entry Length3 in FontFile2 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9686"/>
			<description>Entry Length3 with type Integer in FontFile2 shall correspond special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile2 doesn't correspond special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9687"/>
			<description>Entry DL in FontFile2 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFile2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9688"/>
			<description>Entry DL with type Integer in FontFile2 shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFile2 doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURI">
			<id specification="ISO_32000_1_7" clause="1" testNumber="9732"/>
			<description>URI shall not contain entries except Base</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Base').length == 0</test>
			<error>
				<message>URI contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Base').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURI">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9733"/>
			<description>Entry Base in URI shall have type StringAscii</description>
			<test>containsBase == false || BaseHasTypeStringAscii == true</test>
			<error>
				<message>Entry Base in URI is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="1" testNumber="9918"/>
			<description>HalftoneType16 shall not contain entries except Type, TransferFunction, DecodeParms, HalftoneType, FDecodeParms, Width2, HalftoneName, FFilter, F, Height, Filter, DL, Height2, Length, Width</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Width2' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Height2' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Width').length == 0</test>
			<error>
				<message>HalftoneType16 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'TransferFunction' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'HalftoneType' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Width2' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Height2' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Width').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9919"/>
			<description>Entry Type with type Name in HalftoneType16 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType16 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9920"/>
			<description>Entry Type in HalftoneType16 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType16 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9921"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType16 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType16 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9922"/>
			<description>Entry TransferFunction with type Stream in HalftoneType16 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType16 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="11" testNumber="9923"/>
			<description>Entry TransferFunction in HalftoneType16 is required, when fn:IsRequired(parent::@HalftoneType== 5)</description>
			<test>(containsTransferFunction == true || (parentHalftoneTypeIntegerValue == 5) == false)</test>
			<error>
				<message>Entry TransferFunction in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="10" testNumber="9924"/>
			<description>Entry TransferFunction with type Stream in HalftoneType16 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType16 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9925"/>
			<description>Entry TransferFunction with type Name in HalftoneType16 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType16 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9926"/>
			<description>Entry TransferFunction in HalftoneType16 shall have one of types: Name, Dictionary, Stream</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeName == true || TransferFunctionHasTypeDictionary == true || TransferFunctionHasTypeStream == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType16 is not one of types: Name, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9927"/>
			<description>Entry DecodeParms with type Array in HalftoneType16 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType16 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9928"/>
			<description>Entry DecodeParms with type Dictionary in HalftoneType16 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in HalftoneType16 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9929"/>
			<description>Entry DecodeParms in HalftoneType16 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in HalftoneType16 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9930"/>
			<description>Entry DecodeParms with type Array in HalftoneType16 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType16 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="7" testNumber="9931"/>
			<description>Entry HalftoneType in HalftoneType16 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9932"/>
			<description>Entry HalftoneType with type Integer in HalftoneType16 shall have value 16</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 16</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType16 has incorrect value %2 instead of 16</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9933"/>
			<description>Entry HalftoneType in HalftoneType16 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9934"/>
			<description>Entry FDecodeParms with type Array in HalftoneType16 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType16 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9935"/>
			<description>Entry FDecodeParms with type Dictionary in HalftoneType16 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in HalftoneType16 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9936"/>
			<description>Entry FDecodeParms in HalftoneType16 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in HalftoneType16 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9937"/>
			<description>Entry FDecodeParms with type Array in HalftoneType16 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType16 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="14" testNumber="9938"/>
			<description>Entry Width2 with type Integer in HalftoneType16 shall correspond possible value predicate: fn:Eval(@Width2 &gt; 0)</description>
			<test>Width2HasTypeInteger != true || Width2IntegerValue &gt; 0</test>
			<error>
				<message>Entry Width2 with type Integer in HalftoneType16 doesn't correspond possible value predicate: fn:Eval(@Width2 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9939"/>
			<description>Entry Width2 in HalftoneType16 shall have type Integer</description>
			<test>containsWidth2 == false || Width2HasTypeInteger == true</test>
			<error>
				<message>Entry Width2 in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9940"/>
			<description>Entry HalftoneName in HalftoneType16 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType16 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9941"/>
			<description>Entry FFilter with type Array in HalftoneType16 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType16 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9942"/>
			<description>Entry FFilter with type Name in HalftoneType16 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in HalftoneType16 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9943"/>
			<description>Entry FFilter in HalftoneType16 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in HalftoneType16 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9944"/>
			<description>Entry FFilter with type Array in HalftoneType16 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType16 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9945"/>
			<description>Entry F with type Dictionary in HalftoneType16 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in HalftoneType16 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9946"/>
			<description>Entry F in HalftoneType16 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in HalftoneType16 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="7" testNumber="9947"/>
			<description>Entry Height in HalftoneType16 is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="14" testNumber="9948"/>
			<description>Entry Height with type Integer in HalftoneType16 shall correspond possible value predicate: fn:Eval(@Height &gt; 0)</description>
			<test>HeightHasTypeInteger != true || HeightIntegerValue &gt; 0</test>
			<error>
				<message>Entry Height with type Integer in HalftoneType16 doesn't correspond possible value predicate: fn:Eval(@Height &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9949"/>
			<description>Entry Height in HalftoneType16 shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="17" testNumber="9950"/>
			<description>Entry Filter with type Array in HalftoneType16 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType16 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="6" testNumber="9951"/>
			<description>Entry Filter with type Name in HalftoneType16 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in HalftoneType16 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9952"/>
			<description>Entry Filter in HalftoneType16 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in HalftoneType16 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9953"/>
			<description>Entry Filter with type Array in HalftoneType16 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType16 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9954"/>
			<description>Entry DL in HalftoneType16 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9955"/>
			<description>Entry DL with type Integer in HalftoneType16 shall correspond special case: fn:Eval(fn:StreamLength(DL) == (2 * (@Width * @Height) + (@Width2 * @Height2)))</description>
			<test>DLHasTypeInteger != true || (DLStreamLength == (2 * (WidthIntegerValue * HeightIntegerValue) + (Width2IntegerValue * Height2IntegerValue)))</test>
			<error>
				<message>Entry DL with type Integer in HalftoneType16 doesn't correspond special case: fn:Eval(fn:StreamLength(DL) == (2 * (@Width * @Height) + (@Width2 * @Height2)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="14" testNumber="9956"/>
			<description>Entry Height2 with type Integer in HalftoneType16 shall correspond possible value predicate: fn:Eval(@Height2 &gt; 0)</description>
			<test>Height2HasTypeInteger != true || Height2IntegerValue &gt; 0</test>
			<error>
				<message>Entry Height2 with type Integer in HalftoneType16 doesn't correspond possible value predicate: fn:Eval(@Height2 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9957"/>
			<description>Entry Height2 in HalftoneType16 shall have type Integer</description>
			<test>containsHeight2 == false || Height2HasTypeInteger == true</test>
			<error>
				<message>Entry Height2 in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="9" testNumber="9958"/>
			<description>Entry Height2 with type Integer in HalftoneType16 shall correspond special case: fn:IsPresent(Width2)</description>
			<test>Height2HasTypeInteger != true || ((containsWidth2 == true))</test>
			<error>
				<message>Entry Height2 with type Integer in HalftoneType16 doesn't correspond special case: fn:IsPresent(Width2)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="7" testNumber="9959"/>
			<description>Entry Length in HalftoneType16 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9960"/>
			<description>Entry Length in HalftoneType16 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="7" testNumber="9961"/>
			<description>Entry Width in HalftoneType16 is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in HalftoneType16 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="14" testNumber="9962"/>
			<description>Entry Width with type Integer in HalftoneType16 shall correspond possible value predicate: fn:Eval(@Width &gt; 0)</description>
			<test>WidthHasTypeInteger != true || WidthIntegerValue &gt; 0</test>
			<error>
				<message>Entry Width with type Integer in HalftoneType16 doesn't correspond possible value predicate: fn:Eval(@Width &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType16">
			<id specification="ISO_32000_1_7" clause="8" testNumber="9963"/>
			<description>Entry Width in HalftoneType16 shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in HalftoneType16 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="1" testNumber="10037"/>
			<description>Target shall not contain entries except A, P, R, N, T</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'N' &amp;&amp; elem != 'T').length == 0</test>
			<error>
				<message>Target contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'N' &amp;&amp; elem != 'T').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="14" testNumber="10038"/>
			<description>Entry A with type Integer in Target shall correspond possible value predicate: fn:Eval((@A &gt;= 0) &amp;&amp; (@A &lt; fn:ArrayLength(fn:PageProperty(@P , Annots))))</description>
			<test>AHasTypeInteger != true || (AIntegerValue &gt;= 0) &amp;&amp; (AIntegerValue &lt; pagePAnnotsArraySize)</test>
			<error>
				<message>Entry A with type Integer in Target doesn't correspond possible value predicate: fn:Eval((@A &gt;= 0) &amp;&amp; (@A &lt; fn:ArrayLength(fn:PageProperty(@P , Annots))))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10039"/>
			<description>Entry A in Target shall have one of types: StringText, Integer</description>
			<test>containsA == false || AHasTypeStringText == true || AHasTypeInteger == true</test>
			<error>
				<message>Entry A in Target is not one of types: StringText, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="14" testNumber="10040"/>
			<description>Entry P with type Integer in Target shall correspond possible value predicate: fn:Eval((@P &gt;= 0) &amp;&amp; (@P &lt; fn:NumberOfPages()))</description>
			<test>PHasTypeInteger != true || (PIntegerValue &gt;= 0) &amp;&amp; (PIntegerValue &lt; numberOfPages)</test>
			<error>
				<message>Entry P with type Integer in Target doesn't correspond possible value predicate: fn:Eval((@P &gt;= 0) &amp;&amp; (@P &lt; fn:NumberOfPages()))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="13" testNumber="10041"/>
			<description>Entry P with type StringByte in Target shall have value (nameTreetrailerCatalogNamesDestsContainsPString == true)</description>
			<test>PHasTypeStringByte != true || PStringByteValue == (nameTreetrailerCatalogNamesDestsContainsPString == true)</test>
			<error>
				<message>Entry P with type StringByte in Target has incorrect value %2 instead of (nameTreetrailerCatalogNamesDestsContainsPString == true)</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PStringByteValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10042"/>
			<description>Entry P in Target shall have one of types: Integer, StringByte</description>
			<test>containsP == false || PHasTypeInteger == true || PHasTypeStringByte == true</test>
			<error>
				<message>Entry P in Target is not one of types: Integer, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10043"/>
			<description>Entry R in Target is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in Target is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10044"/>
			<description>Entry R with type Name in Target shall have one of values: P, C</description>
			<test>RHasTypeName != true || RNameValue == "P" || RNameValue == "C"</test>
			<error>
				<message>Entry R with type Name in Target has incorrect value %2 instead of P, C</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10045"/>
			<description>Entry R in Target shall have type Name</description>
			<test>containsR == false || RHasTypeName == true</test>
			<error>
				<message>Entry R in Target is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="11" testNumber="10046"/>
			<description>Entry N in Target is required, when fn:IsRequired((@R == C) &amp;&amp; fn:InNameTree(trailer::Catalog::Names::EmbeddedFiles))</description>
			<test>(containsN == true || ((RNameValue == "C") &amp;&amp; (nameTreetrailerCatalogNamesEmbeddedFilesContainsNString == true)) == false)</test>
			<error>
				<message>Entry N in Target is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10047"/>
			<description>Entry N in Target shall have type StringByte</description>
			<test>containsN == false || NHasTypeStringByte == true</test>
			<error>
				<message>Entry N in Target is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="9" testNumber="10048"/>
			<description>Entry N with type StringByte in Target shall correspond special case: fn:Eval(fn:Not(fn:IsPresent((@R == C) &amp;&amp; fn:InNameTree(trailer::Catalog::Names::EmbeddedFiles))))</description>
			<test>NHasTypeStringByte != true || (((((RNameValue == "C") &amp;&amp; (nameTreetrailerCatalogNamesEmbeddedFilesContainsNString == true)) == true &amp;&amp; containsN == true)) != true)</test>
			<error>
				<message>Entry N with type StringByte in Target doesn't correspond special case: fn:Eval(fn:Not(fn:IsPresent((@R == C) &amp;&amp; fn:InNameTree(trailer::Catalog::Names::EmbeddedFiles))))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10049"/>
			<description>Entry T with type Dictionary in Target shall be object Target</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in Target is not object Target</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATarget">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10050"/>
			<description>Entry T in Target shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in Target is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimeStampDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="10081"/>
			<description>TimeStampDict shall not contain entries except Ff, URL</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Ff' &amp;&amp; elem != 'URL').length == 0</test>
			<error>
				<message>TimeStampDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Ff' &amp;&amp; elem != 'URL').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimeStampDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10082"/>
			<description>Entry Ff in TimeStampDict is required</description>
			<test>containsFf == true</test>
			<error>
				<message>Entry Ff in TimeStampDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimeStampDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10083"/>
			<description>Entry Ff with type Integer in TimeStampDict shall have one of values: 0, 1</description>
			<test>FfHasTypeInteger != true || FfIntegerValue == 0 || FfIntegerValue == 1</test>
			<error>
				<message>Entry Ff with type Integer in TimeStampDict has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FfIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimeStampDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10084"/>
			<description>Entry Ff in TimeStampDict shall have type Integer</description>
			<test>containsFf == false || FfHasTypeInteger == true</test>
			<error>
				<message>Entry Ff in TimeStampDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimeStampDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10085"/>
			<description>Entry URL in TimeStampDict is required</description>
			<test>containsURL == true</test>
			<error>
				<message>Entry URL in TimeStampDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimeStampDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10086"/>
			<description>Entry URL in TimeStampDict shall have type StringAscii</description>
			<test>containsURL == false || URLHasTypeStringAscii == true</test>
			<error>
				<message>Entry URL in TimeStampDict is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionNameTreeResourcesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10093"/>
			<description>Entry with type Stream in CollectionNameTreeResources shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in CollectionNameTreeResources is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionNameTreeResourcesEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="10094"/>
			<description>Entry with type Stream in CollectionNameTreeResources shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in CollectionNameTreeResources is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionNameTreeResourcesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10095"/>
			<description>Entry in CollectionNameTreeResources shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in CollectionNameTreeResources is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10115"/>
			<description>Entry with type Dictionary in ShadingMap shall be one of objects ShadingType1, ShadingType2, ShadingType3</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ShadingMap is not one of objects ShadingType1, ShadingType2, ShadingType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10116"/>
			<description>Entry with type Stream in ShadingMap shall be one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ShadingMap is not one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="10117"/>
			<description>Entry with type Stream in ShadingMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ShadingMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingMapEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10118"/>
			<description>Entry in ShadingMap shall have one of types: Dictionary, Stream</description>
			<test>HasTypeDictionary == true || HasTypeStream == true</test>
			<error>
				<message>Entry %1 in ShadingMap is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="1" testNumber="10313"/>
			<description>FontTrueType shall not contain entries except Name, Subtype, Type, FontDescriptor, Widths, LastChar, Encoding, ToUnicode, BaseFont, FirstChar</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'FirstChar').length == 0</test>
			<error>
				<message>FontTrueType contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'FirstChar').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="11" testNumber="10314"/>
			<description>Entry Name in FontTrueType is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10315"/>
			<description>Entry Name in FontTrueType shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10316"/>
			<description>Entry Subtype in FontTrueType is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10317"/>
			<description>Entry Subtype with type Name in FontTrueType shall have value TrueType</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "TrueType"</test>
			<error>
				<message>Entry Subtype with type Name in FontTrueType has incorrect value %2 instead of TrueType</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10318"/>
			<description>Entry Subtype in FontTrueType shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10319"/>
			<description>Entry Type in FontTrueType is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10320"/>
			<description>Entry Type with type Name in FontTrueType shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontTrueType has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10321"/>
			<description>Entry Type in FontTrueType shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10322"/>
			<description>Entry FontDescriptor with type Dictionary in FontTrueType shall be object FontDescriptorTrueType</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontTrueType is not object FontDescriptorTrueType</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="11" testNumber="10323"/>
			<description>Entry FontDescriptor in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFontDescriptor == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="10" testNumber="10324"/>
			<description>Entry FontDescriptor with type Dictionary in FontTrueType shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10325"/>
			<description>Entry FontDescriptor in FontTrueType shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontTrueType is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10326"/>
			<description>Entry Widths with type Array in FontTrueType shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontTrueType is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="11" testNumber="10327"/>
			<description>Entry Widths in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsWidths == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry Widths in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10328"/>
			<description>Entry Widths in FontTrueType shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontTrueType is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="11" testNumber="10329"/>
			<description>Entry LastChar in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsLastChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry LastChar in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10330"/>
			<description>Entry LastChar in FontTrueType shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontTrueType is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10331"/>
			<description>Entry Encoding with type Dictionary in FontTrueType shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontTrueType is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10332"/>
			<description>Entry Encoding with type Name in FontTrueType shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontTrueType has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10333"/>
			<description>Entry Encoding in FontTrueType shall have one of types: Name, Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontTrueType is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10334"/>
			<description>Entry ToUnicode with type Stream in FontTrueType shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontTrueType is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="10" testNumber="10335"/>
			<description>Entry ToUnicode with type Stream in FontTrueType shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10336"/>
			<description>Entry ToUnicode in FontTrueType shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontTrueType is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10337"/>
			<description>Entry BaseFont in FontTrueType is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10338"/>
			<description>Entry BaseFont in FontTrueType shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="11" testNumber="10339"/>
			<description>Entry FirstChar in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFirstChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FirstChar in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10340"/>
			<description>Entry FirstChar in FontTrueType shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontTrueType is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="1" testNumber="10519"/>
			<description>FontCIDType0 shall not contain entries except ToUnicode, Subtype, W, W2, DW, CIDSystemInfo, DW2, FontDescriptor, BaseFont, CIDToGIDMap, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ToUnicode' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>FontCIDType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ToUnicode' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'W' &amp;&amp; elem != 'W2' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10520"/>
			<description>Entry ToUnicode with type Stream in FontCIDType0 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType0 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="10" testNumber="10521"/>
			<description>Entry ToUnicode with type Stream in FontCIDType0 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10522"/>
			<description>Entry ToUnicode in FontCIDType0 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontCIDType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10523"/>
			<description>Entry Subtype in FontCIDType0 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10524"/>
			<description>Entry Subtype with type Name in FontCIDType0 shall have value CIDFontType0</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "CIDFontType0"</test>
			<error>
				<message>Entry Subtype with type Name in FontCIDType0 has incorrect value %2 instead of CIDFontType0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10525"/>
			<description>Entry Subtype in FontCIDType0 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10526"/>
			<description>Entry W with type Array in FontCIDType0 shall be object ArrayOfCIDGlyphMetricsW</description>
			<test>WHasTypeArray != true || W_size == 1</test>
			<error>
				<message>Entry W with type Array in FontCIDType0 is not object ArrayOfCIDGlyphMetricsW</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10527"/>
			<description>Entry W in FontCIDType0 shall have type Array</description>
			<test>containsW == false || WHasTypeArray == true</test>
			<error>
				<message>Entry W in FontCIDType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10528"/>
			<description>Entry W2 with type Array in FontCIDType0 shall be object ArrayOfCIDGlyphMetricsW2</description>
			<test>W2HasTypeArray != true || W2_size == 1</test>
			<error>
				<message>Entry W2 with type Array in FontCIDType0 is not object ArrayOfCIDGlyphMetricsW2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10529"/>
			<description>Entry W2 in FontCIDType0 shall have type Array</description>
			<test>containsW2 == false || W2HasTypeArray == true</test>
			<error>
				<message>Entry W2 in FontCIDType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10530"/>
			<description>Entry DW in FontCIDType0 shall have type Number</description>
			<test>containsDW == false || DWHasTypeNumber == true</test>
			<error>
				<message>Entry DW in FontCIDType0 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10531"/>
			<description>Entry CIDSystemInfo with type Dictionary in FontCIDType0 shall be object CIDSystemInfo</description>
			<test>CIDSystemInfoHasTypeDictionary != true || CIDSystemInfo_size == 1</test>
			<error>
				<message>Entry CIDSystemInfo with type Dictionary in FontCIDType0 is not object CIDSystemInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10532"/>
			<description>Entry CIDSystemInfo in FontCIDType0 is required</description>
			<test>containsCIDSystemInfo == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10533"/>
			<description>Entry CIDSystemInfo in FontCIDType0 shall have type Dictionary</description>
			<test>containsCIDSystemInfo == false || CIDSystemInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType0 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10534"/>
			<description>Entry DW2 with type Array in FontCIDType0 shall be object ArrayOf_2Numbers</description>
			<test>DW2HasTypeArray != true || DW2_size == 1</test>
			<error>
				<message>Entry DW2 with type Array in FontCIDType0 is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10535"/>
			<description>Entry DW2 in FontCIDType0 shall have type Array</description>
			<test>containsDW2 == false || DW2HasTypeArray == true</test>
			<error>
				<message>Entry DW2 in FontCIDType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10536"/>
			<description>Entry FontDescriptor with type Dictionary in FontCIDType0 shall be object FontDescriptorCIDType0</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType0 is not object FontDescriptorCIDType0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10537"/>
			<description>Entry FontDescriptor in FontCIDType0 is required</description>
			<test>containsFontDescriptor == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="12" testNumber="10538"/>
			<description>If entry FontDescriptor with type Dictionary in FontCIDType0 corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10539"/>
			<description>Entry FontDescriptor in FontCIDType0 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType0 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10540"/>
			<description>Entry BaseFont in FontCIDType0 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10541"/>
			<description>Entry BaseFont in FontCIDType0 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10542"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType0 shall be object Stream</description>
			<test>CIDToGIDMapHasTypeStream != true || CIDToGIDMap_size == 1</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType0 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="10" testNumber="10543"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType0 shall be indirect</description>
			<test>CIDToGIDMapHasTypeStream != true || isCIDToGIDMapIndirect == true</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10544"/>
			<description>Entry CIDToGIDMap with type Name in FontCIDType0 shall have value Identity</description>
			<test>CIDToGIDMapHasTypeName != true || CIDToGIDMapNameValue == "Identity"</test>
			<error>
				<message>Entry CIDToGIDMap with type Name in FontCIDType0 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CIDToGIDMapNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10545"/>
			<description>Entry CIDToGIDMap in FontCIDType0 shall have one of types: Name, Stream</description>
			<test>containsCIDToGIDMap == false || CIDToGIDMapHasTypeName == true || CIDToGIDMapHasTypeStream == true</test>
			<error>
				<message>Entry CIDToGIDMap in FontCIDType0 is not one of types: Name, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10546"/>
			<description>Entry Type in FontCIDType0 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontCIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10547"/>
			<description>Entry Type with type Name in FontCIDType0 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontCIDType0 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10548"/>
			<description>Entry Type in FontCIDType0 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontCIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionBE">
			<id specification="ISO_32000_1_7" clause="1" testNumber="10585"/>
			<description>RenditionBE shall not contain entries except C</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C').length == 0</test>
			<error>
				<message>RenditionBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionBE">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10586"/>
			<description>Entry C with type Dictionary in RenditionBE shall be object MediaCriteria</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in RenditionBE is not object MediaCriteria</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10587"/>
			<description>Entry C in RenditionBE shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in RenditionBE is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDigestMethodEntry">
			<id specification="ISO_32000_1_7" clause="13" testNumber="10591"/>
			<description>Entry with type Name in ArrayOfDigestMethod shall have one of values: SHA256, SHA3-512, SHA1, SHAKE256, SHA384, RIPEMD160, SHA3-384, SHA3-256, SHA512</description>
			<test>HasTypeName != true || NameValue == "SHA1" || NameValue == "SHA256" || NameValue == "SHA384" || NameValue == "SHA512" || NameValue == "RIPEMD160" || NameValue == SHA3-256 || NameValue == SHA3-384 || NameValue == SHA3-512 || NameValue == SHAKE256</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfDigestMethod has incorrect value %2 instead of SHA256, SHA3-512, SHA1, SHAKE256, SHA384, RIPEMD160, SHA3-384, SHA3-256, SHA512</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDigestMethodEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10592"/>
			<description>Entry in ArrayOfDigestMethod shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfDigestMethod is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="1" testNumber="10706"/>
			<description>MovieActivation shall not contain entries except Synchronous, Volume, Duration, Mode, FWScale, Rate, Start, FWPosition, ShowControls</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Synchronous' &amp;&amp; elem != 'Volume' &amp;&amp; elem != 'Duration' &amp;&amp; elem != 'Mode' &amp;&amp; elem != 'FWScale' &amp;&amp; elem != 'Rate' &amp;&amp; elem != 'Start' &amp;&amp; elem != 'FWPosition' &amp;&amp; elem != 'ShowControls').length == 0</test>
			<error>
				<message>MovieActivation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Synchronous' &amp;&amp; elem != 'Volume' &amp;&amp; elem != 'Duration' &amp;&amp; elem != 'Mode' &amp;&amp; elem != 'FWScale' &amp;&amp; elem != 'Rate' &amp;&amp; elem != 'Start' &amp;&amp; elem != 'FWPosition' &amp;&amp; elem != 'ShowControls').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10707"/>
			<description>Entry Synchronous in MovieActivation shall have type Boolean</description>
			<test>containsSynchronous == false || SynchronousHasTypeBoolean == true</test>
			<error>
				<message>Entry Synchronous in MovieActivation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="14" testNumber="10708"/>
			<description>Entry Volume with type Number in MovieActivation shall correspond possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</description>
			<test>VolumeHasTypeNumber != true || (VolumeNumberValue &gt;= - 1) &amp;&amp; (VolumeNumberValue &lt;= 1)</test>
			<error>
				<message>Entry Volume with type Number in MovieActivation doesn't correspond possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10709"/>
			<description>Entry Volume in MovieActivation shall have type Number</description>
			<test>containsVolume == false || VolumeHasTypeNumber == true</test>
			<error>
				<message>Entry Volume in MovieActivation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10710"/>
			<description>Entry Duration with type Array in MovieActivation shall be object ArrayOfDuration</description>
			<test>DurationHasTypeArray != true || Duration_size == 1</test>
			<error>
				<message>Entry Duration with type Array in MovieActivation is not object ArrayOfDuration</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10711"/>
			<description>Entry Duration in MovieActivation shall have one of types: Array, Integer, StringByte</description>
			<test>containsDuration == false || DurationHasTypeArray == true || DurationHasTypeInteger == true || DurationHasTypeStringByte == true</test>
			<error>
				<message>Entry Duration in MovieActivation is not one of types: Array, Integer, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="10712"/>
			<description>Entry Duration with type Integer in MovieActivation shall correspond special case: fn:Eval(@Duration &gt; 0)</description>
			<test>DurationHasTypeInteger != true || (DurationIntegerValue &gt; 0)</test>
			<error>
				<message>Entry Duration with type Integer in MovieActivation doesn't correspond special case: fn:Eval(@Duration &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="10713"/>
			<description>Entry Duration with type StringByte in MovieActivation shall correspond special case: fn:Eval(fn:StringLength(Duration) == 8)</description>
			<test>DurationHasTypeStringByte != true || (DurationStringSize == 8)</test>
			<error>
				<message>Entry Duration with type StringByte in MovieActivation doesn't correspond special case: fn:Eval(fn:StringLength(Duration) == 8)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10714"/>
			<description>Entry Mode with type Name in MovieActivation shall have one of values: Palindrome, Once, Repeat, Open</description>
			<test>ModeHasTypeName != true || ModeNameValue == "Once" || ModeNameValue == "Open" || ModeNameValue == "Repeat" || ModeNameValue == "Palindrome"</test>
			<error>
				<message>Entry Mode with type Name in MovieActivation has incorrect value %2 instead of Palindrome, Once, Repeat, Open</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10715"/>
			<description>Entry Mode in MovieActivation shall have type Name</description>
			<test>containsMode == false || ModeHasTypeName == true</test>
			<error>
				<message>Entry Mode in MovieActivation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10716"/>
			<description>Entry FWScale with type Array in MovieActivation shall be object ArrayOf_2Integers</description>
			<test>FWScaleHasTypeArray != true || FWScale_size == 1</test>
			<error>
				<message>Entry FWScale with type Array in MovieActivation is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10717"/>
			<description>Entry FWScale in MovieActivation shall have type Array</description>
			<test>containsFWScale == false || FWScaleHasTypeArray == true</test>
			<error>
				<message>Entry FWScale in MovieActivation is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="10718"/>
			<description>Entry FWScale with type Array in MovieActivation shall correspond special case: fn:Eval((FWScale::@0&gt; 0) &amp;&amp; (FWScale::@1&gt; 0))</description>
			<test>FWScaleHasTypeArray != true || ((FWScale0IntegerValue &gt; 0) &amp;&amp; (FWScale1IntegerValue &gt; 0))</test>
			<error>
				<message>Entry FWScale with type Array in MovieActivation doesn't correspond special case: fn:Eval((FWScale::@0&gt; 0) &amp;&amp; (FWScale::@1&gt; 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10719"/>
			<description>Entry Rate in MovieActivation shall have type Number</description>
			<test>containsRate == false || RateHasTypeNumber == true</test>
			<error>
				<message>Entry Rate in MovieActivation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10720"/>
			<description>Entry Start with type Array in MovieActivation shall be object ArrayOfDuration</description>
			<test>StartHasTypeArray != true || Start_size == 1</test>
			<error>
				<message>Entry Start with type Array in MovieActivation is not object ArrayOfDuration</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10721"/>
			<description>Entry Start in MovieActivation shall have one of types: Array, Integer, StringByte</description>
			<test>containsStart == false || StartHasTypeArray == true || StartHasTypeInteger == true || StartHasTypeStringByte == true</test>
			<error>
				<message>Entry Start in MovieActivation is not one of types: Array, Integer, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="10722"/>
			<description>Entry Start with type Integer in MovieActivation shall correspond special case: fn:Eval(@Start &gt; 0)</description>
			<test>StartHasTypeInteger != true || (StartIntegerValue &gt; 0)</test>
			<error>
				<message>Entry Start with type Integer in MovieActivation doesn't correspond special case: fn:Eval(@Start &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="10723"/>
			<description>Entry Start with type StringByte in MovieActivation shall correspond special case: fn:Eval(fn:StringLength(Start) == 8)</description>
			<test>StartHasTypeStringByte != true || (StartStringSize == 8)</test>
			<error>
				<message>Entry Start with type StringByte in MovieActivation doesn't correspond special case: fn:Eval(fn:StringLength(Start) == 8)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10724"/>
			<description>Entry FWPosition with type Array in MovieActivation shall be object ArrayOf_2Numbers</description>
			<test>FWPositionHasTypeArray != true || FWPosition_size == 1</test>
			<error>
				<message>Entry FWPosition with type Array in MovieActivation is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10725"/>
			<description>Entry FWPosition in MovieActivation shall have type Array</description>
			<test>containsFWPosition == false || FWPositionHasTypeArray == true</test>
			<error>
				<message>Entry FWPosition in MovieActivation is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="10726"/>
			<description>Entry FWPosition with type Array in MovieActivation shall correspond special case: fn:Eval((FWPosition::@0&gt;= 0.0) &amp;&amp; (FWPosition::@0&lt;= 1.0) &amp;&amp; (FWPosition::@1&gt;= 0.0) &amp;&amp; (FWPosition::@1&lt;= 1.0))</description>
			<test>FWPositionHasTypeArray != true || ((FWPosition0NumberValue &gt;= 0.0) &amp;&amp; (FWPosition0NumberValue &lt;= 1.0) &amp;&amp; (FWPosition1NumberValue &gt;= 0.0) &amp;&amp; (FWPosition1NumberValue &lt;= 1.0))</test>
			<error>
				<message>Entry FWPosition with type Array in MovieActivation doesn't correspond special case: fn:Eval((FWPosition::@0&gt;= 0.0) &amp;&amp; (FWPosition::@0&lt;= 1.0) &amp;&amp; (FWPosition::@1&gt;= 0.0) &amp;&amp; (FWPosition::@1&lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovieActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10727"/>
			<description>Entry ShowControls in MovieActivation shall have type Boolean</description>
			<test>containsShowControls == false || ShowControlsHasTypeBoolean == true</test>
			<error>
				<message>Entry ShowControls in MovieActivation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaCuePointsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10750"/>
			<description>Entry with type Dictionary in ArrayOfRichMediaCuePoints shall be object RichMediaCuePoint</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfRichMediaCuePoints is not object RichMediaCuePoint</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaCuePointsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10751"/>
			<description>Entry in ArrayOfRichMediaCuePoints shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfRichMediaCuePoints is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="2" testNumber="10772"/>
			<description>ArrayOf_4BorderStyleNames shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4BorderStyleNames contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10773"/>
			<description>Entry 0 with type Name in ArrayOf_4BorderStyleNames shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>entry0HasTypeName != true || entry0NameValue == "None" || entry0NameValue == "Hidden" || entry0NameValue == "Dotted" || entry0NameValue == "Dashed" || entry0NameValue == "Solid" || entry0NameValue == "Double" || entry0NameValue == "Groove" || entry0NameValue == "Ridge" || entry0NameValue == "Inset" || entry0NameValue == "Outset"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOf_4BorderStyleNames has incorrect value %2 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10774"/>
			<description>Entry 0 in ArrayOf_4BorderStyleNames shall have one of types: Null, Name</description>
			<test>size &lt;= 0 || entry0HasTypeNull == true || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4BorderStyleNames is not one of types: Null, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10775"/>
			<description>Entry 2 with type Name in ArrayOf_4BorderStyleNames shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>entry2HasTypeName != true || entry2NameValue == "None" || entry2NameValue == "Hidden" || entry2NameValue == "Dotted" || entry2NameValue == "Dashed" || entry2NameValue == "Solid" || entry2NameValue == "Double" || entry2NameValue == "Groove" || entry2NameValue == "Ridge" || entry2NameValue == "Inset" || entry2NameValue == "Outset"</test>
			<error>
				<message>Entry 2 with type Name in ArrayOf_4BorderStyleNames has incorrect value %2 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10776"/>
			<description>Entry 2 in ArrayOf_4BorderStyleNames shall have one of types: Null, Name</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeName == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4BorderStyleNames is not one of types: Null, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10777"/>
			<description>Entry 3 with type Name in ArrayOf_4BorderStyleNames shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>entry3HasTypeName != true || entry3NameValue == "None" || entry3NameValue == "Hidden" || entry3NameValue == "Dotted" || entry3NameValue == "Dashed" || entry3NameValue == "Solid" || entry3NameValue == "Double" || entry3NameValue == "Groove" || entry3NameValue == "Ridge" || entry3NameValue == "Inset" || entry3NameValue == "Outset"</test>
			<error>
				<message>Entry 3 with type Name in ArrayOf_4BorderStyleNames has incorrect value %2 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry3NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10778"/>
			<description>Entry 3 in ArrayOf_4BorderStyleNames shall have one of types: Null, Name</description>
			<test>size &lt;= 3 || entry3HasTypeNull == true || entry3HasTypeName == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4BorderStyleNames is not one of types: Null, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10779"/>
			<description>Entry 1 with type Name in ArrayOf_4BorderStyleNames shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>entry1HasTypeName != true || entry1NameValue == "None" || entry1NameValue == "Hidden" || entry1NameValue == "Dotted" || entry1NameValue == "Dashed" || entry1NameValue == "Solid" || entry1NameValue == "Double" || entry1NameValue == "Groove" || entry1NameValue == "Ridge" || entry1NameValue == "Inset" || entry1NameValue == "Outset"</test>
			<error>
				<message>Entry 1 with type Name in ArrayOf_4BorderStyleNames has incorrect value %2 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderStyleNames">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10780"/>
			<description>Entry 1 in ArrayOf_4BorderStyleNames shall have one of types: Null, Name</description>
			<test>size &lt;= 1 || entry1HasTypeNull == true || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4BorderStyleNames is not one of types: Null, Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="1" testNumber="10812"/>
			<description>FieldMDPTransformParameters shall not contain entries except Action, V, Fields, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Action' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>FieldMDPTransformParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Action' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10813"/>
			<description>Entry Action with type Name in FieldMDPTransformParameters shall have one of values: All, Exclude, Include</description>
			<test>ActionHasTypeName != true || ActionNameValue == "All" || ActionNameValue == "Include" || ActionNameValue == "Exclude"</test>
			<error>
				<message>Entry Action with type Name in FieldMDPTransformParameters has incorrect value %2 instead of All, Exclude, Include</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ActionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10814"/>
			<description>Entry Action in FieldMDPTransformParameters shall have type Name</description>
			<test>containsAction == false || ActionHasTypeName == true</test>
			<error>
				<message>Entry Action in FieldMDPTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10815"/>
			<description>Entry V in FieldMDPTransformParameters is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in FieldMDPTransformParameters is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10816"/>
			<description>Entry V with type Name in FieldMDPTransformParameters shall have value 1.2</description>
			<test>VHasTypeName != true || VNameValue == "1.2"</test>
			<error>
				<message>Entry V with type Name in FieldMDPTransformParameters has incorrect value %2 instead of 1.2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10817"/>
			<description>Entry V in FieldMDPTransformParameters shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldMDPTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10818"/>
			<description>Entry Fields with type Array in FieldMDPTransformParameters shall be object ArrayOfStringsText</description>
			<test>FieldsHasTypeArray != true || Fields_size == 1</test>
			<error>
				<message>Entry Fields with type Array in FieldMDPTransformParameters is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="11" testNumber="10819"/>
			<description>Entry Fields in FieldMDPTransformParameters is required, when fn:IsRequired((@Action == Include) || (@Action == Exclude))</description>
			<test>(containsFields == true || ((ActionNameValue == "Include") || (ActionNameValue == "Exclude")) == false)</test>
			<error>
				<message>Entry Fields in FieldMDPTransformParameters is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10820"/>
			<description>Entry Fields in FieldMDPTransformParameters shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in FieldMDPTransformParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10821"/>
			<description>Entry Type with type Name in FieldMDPTransformParameters shall have value TransformParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "TransformParams"</test>
			<error>
				<message>Entry Type with type Name in FieldMDPTransformParameters has incorrect value %2 instead of TransformParams</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10822"/>
			<description>Entry Type in FieldMDPTransformParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FieldMDPTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="1" testNumber="10911"/>
			<description>Outline shall not contain entries except Type, First, Count, Last</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Last').length == 0</test>
			<error>
				<message>Outline contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'First' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Last').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="6" testNumber="10912"/>
			<description>Entry Type with type Name in Outline shall have value Outlines</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Outlines"</test>
			<error>
				<message>Entry Type with type Name in Outline has incorrect value %2 instead of Outlines</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10913"/>
			<description>Entry Type in Outline shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Outline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10914"/>
			<description>Entry First with type Dictionary in Outline shall be object OutlineItem</description>
			<test>FirstHasTypeDictionary != true || First_size == 1</test>
			<error>
				<message>Entry First with type Dictionary in Outline is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="10" testNumber="10915"/>
			<description>Entry First with type Dictionary in Outline shall be indirect</description>
			<test>FirstHasTypeDictionary != true || isFirstIndirect == true</test>
			<error>
				<message>Entry First with type Dictionary in Outline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10916"/>
			<description>Entry First in Outline shall have type Dictionary</description>
			<test>containsFirst == false || FirstHasTypeDictionary == true</test>
			<error>
				<message>Entry First in Outline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="14" testNumber="10917"/>
			<description>Entry Count with type Integer in Outline shall correspond possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in Outline doesn't correspond possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10918"/>
			<description>Entry Count in Outline shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in Outline is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10919"/>
			<description>Entry Last with type Dictionary in Outline shall be object OutlineItem</description>
			<test>LastHasTypeDictionary != true || Last_size == 1</test>
			<error>
				<message>Entry Last with type Dictionary in Outline is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="10" testNumber="10920"/>
			<description>Entry Last with type Dictionary in Outline shall be indirect</description>
			<test>LastHasTypeDictionary != true || isLastIndirect == true</test>
			<error>
				<message>Entry Last with type Dictionary in Outline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10921"/>
			<description>Entry Last in Outline shall have type Dictionary</description>
			<test>containsLast == false || LastHasTypeDictionary == true</test>
			<error>
				<message>Entry Last in Outline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsWEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="10943"/>
			<description>Entry with type Array in ArrayOfCIDGlyphMetricsW shall be object ArrayOfNumbersGeneral</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfCIDGlyphMetricsW is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCIDGlyphMetricsWEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10944"/>
			<description>Entry in ArrayOfCIDGlyphMetricsW shall have one of types: Array, Integer, Number</description>
			<test>HasTypeArray == true || HasTypeInteger == true || HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in ArrayOfCIDGlyphMetricsW is not one of types: Array, Integer, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="1" testNumber="10982"/>
			<description>CIDSystemInfo shall not contain entries except Supplement, Registry, Ordering</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Supplement' &amp;&amp; elem != 'Registry' &amp;&amp; elem != 'Ordering').length == 0</test>
			<error>
				<message>CIDSystemInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Supplement' &amp;&amp; elem != 'Registry' &amp;&amp; elem != 'Ordering').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10983"/>
			<description>Entry Supplement in CIDSystemInfo is required</description>
			<test>containsSupplement == true</test>
			<error>
				<message>Entry Supplement in CIDSystemInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10984"/>
			<description>Entry Supplement in CIDSystemInfo shall have type Integer</description>
			<test>containsSupplement == false || SupplementHasTypeInteger == true</test>
			<error>
				<message>Entry Supplement in CIDSystemInfo is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10985"/>
			<description>Entry Registry in CIDSystemInfo is required</description>
			<test>containsRegistry == true</test>
			<error>
				<message>Entry Registry in CIDSystemInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10986"/>
			<description>Entry Registry in CIDSystemInfo shall have type StringAscii</description>
			<test>containsRegistry == false || RegistryHasTypeStringAscii == true</test>
			<error>
				<message>Entry Registry in CIDSystemInfo is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="7" testNumber="10987"/>
			<description>Entry Ordering in CIDSystemInfo is required</description>
			<test>containsOrdering == true</test>
			<error>
				<message>Entry Ordering in CIDSystemInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDSystemInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="10988"/>
			<description>Entry Ordering in CIDSystemInfo shall have type StringAscii</description>
			<test>containsOrdering == false || OrderingHasTypeStringAscii == true</test>
			<error>
				<message>Entry Ordering in CIDSystemInfo is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="1" testNumber="11151"/>
			<description>FontCIDType2 shall not contain entries except DW2, FontDescriptor, DW, CIDSystemInfo, ToUnicode, BaseFont, Subtype, W, CIDToGIDMap, Type, W2</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'W' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W2').length == 0</test>
			<error>
				<message>FontCIDType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DW2' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'DW' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'W' &amp;&amp; elem != 'CIDToGIDMap' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'W2').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11152"/>
			<description>Entry DW2 with type Array in FontCIDType2 shall be object ArrayOf_2Numbers</description>
			<test>DW2HasTypeArray != true || DW2_size == 1</test>
			<error>
				<message>Entry DW2 with type Array in FontCIDType2 is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11153"/>
			<description>Entry DW2 in FontCIDType2 shall have type Array</description>
			<test>containsDW2 == false || DW2HasTypeArray == true</test>
			<error>
				<message>Entry DW2 in FontCIDType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11154"/>
			<description>Entry FontDescriptor with type Dictionary in FontCIDType2 shall be object FontDescriptorCIDType2</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType2 is not object FontDescriptorCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="11155"/>
			<description>Entry FontDescriptor in FontCIDType2 is required</description>
			<test>containsFontDescriptor == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="12" testNumber="11156"/>
			<description>If entry FontDescriptor with type Dictionary in FontCIDType2 corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11157"/>
			<description>Entry FontDescriptor in FontCIDType2 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontCIDType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11158"/>
			<description>Entry DW in FontCIDType2 shall have type Number</description>
			<test>containsDW == false || DWHasTypeNumber == true</test>
			<error>
				<message>Entry DW in FontCIDType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11159"/>
			<description>Entry CIDSystemInfo with type Dictionary in FontCIDType2 shall be object CIDSystemInfo</description>
			<test>CIDSystemInfoHasTypeDictionary != true || CIDSystemInfo_size == 1</test>
			<error>
				<message>Entry CIDSystemInfo with type Dictionary in FontCIDType2 is not object CIDSystemInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="11160"/>
			<description>Entry CIDSystemInfo in FontCIDType2 is required</description>
			<test>containsCIDSystemInfo == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11161"/>
			<description>Entry CIDSystemInfo in FontCIDType2 shall have type Dictionary</description>
			<test>containsCIDSystemInfo == false || CIDSystemInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CIDSystemInfo in FontCIDType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11162"/>
			<description>Entry ToUnicode with type Stream in FontCIDType2 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType2 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="10" testNumber="11163"/>
			<description>Entry ToUnicode with type Stream in FontCIDType2 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11164"/>
			<description>Entry ToUnicode in FontCIDType2 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontCIDType2 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="11165"/>
			<description>Entry BaseFont in FontCIDType2 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11166"/>
			<description>Entry BaseFont in FontCIDType2 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="11167"/>
			<description>Entry Subtype in FontCIDType2 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11168"/>
			<description>Entry Subtype with type Name in FontCIDType2 shall have value CIDFontType2</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "CIDFontType2"</test>
			<error>
				<message>Entry Subtype with type Name in FontCIDType2 has incorrect value %2 instead of CIDFontType2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11169"/>
			<description>Entry Subtype in FontCIDType2 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11170"/>
			<description>Entry W with type Array in FontCIDType2 shall be object ArrayOfCIDGlyphMetricsW</description>
			<test>WHasTypeArray != true || W_size == 1</test>
			<error>
				<message>Entry W with type Array in FontCIDType2 is not object ArrayOfCIDGlyphMetricsW</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11171"/>
			<description>Entry W in FontCIDType2 shall have type Array</description>
			<test>containsW == false || WHasTypeArray == true</test>
			<error>
				<message>Entry W in FontCIDType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11172"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType2 shall be object Stream</description>
			<test>CIDToGIDMapHasTypeStream != true || CIDToGIDMap_size == 1</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType2 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="11" testNumber="11173"/>
			<description>Entry CIDToGIDMap in FontCIDType2 is required, when fn:IsRequired(fn:SinceVersion(2.0) &amp;&amp; fn:IsPresent(FontDescriptor::FontFile2))</description>
			<test>(containsCIDToGIDMap == true || (false &amp;&amp; (containsFontDescriptorFontFile2 == true)) == false)</test>
			<error>
				<message>Entry CIDToGIDMap in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="10" testNumber="11174"/>
			<description>Entry CIDToGIDMap with type Stream in FontCIDType2 shall be indirect</description>
			<test>CIDToGIDMapHasTypeStream != true || isCIDToGIDMapIndirect == true</test>
			<error>
				<message>Entry CIDToGIDMap with type Stream in FontCIDType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11175"/>
			<description>Entry CIDToGIDMap with type Name in FontCIDType2 shall have value Identity</description>
			<test>CIDToGIDMapHasTypeName != true || CIDToGIDMapNameValue == "Identity"</test>
			<error>
				<message>Entry CIDToGIDMap with type Name in FontCIDType2 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CIDToGIDMapNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11176"/>
			<description>Entry CIDToGIDMap in FontCIDType2 shall have one of types: Name, Stream</description>
			<test>containsCIDToGIDMap == false || CIDToGIDMapHasTypeName == true || CIDToGIDMapHasTypeStream == true</test>
			<error>
				<message>Entry CIDToGIDMap in FontCIDType2 is not one of types: Name, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="11177"/>
			<description>Entry Type in FontCIDType2 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontCIDType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11178"/>
			<description>Entry Type with type Name in FontCIDType2 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontCIDType2 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11179"/>
			<description>Entry Type in FontCIDType2 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontCIDType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11180"/>
			<description>Entry W2 with type Array in FontCIDType2 shall be object ArrayOfCIDGlyphMetricsW2</description>
			<test>W2HasTypeArray != true || W2_size == 1</test>
			<error>
				<message>Entry W2 with type Array in FontCIDType2 is not object ArrayOfCIDGlyphMetricsW2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontCIDType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11181"/>
			<description>Entry W2 in FontCIDType2 shall have type Array</description>
			<test>containsW2 == false || W2HasTypeArray == true</test>
			<error>
				<message>Entry W2 in FontCIDType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="1" testNumber="11280"/>
			<description>Appearance shall not contain entries except D, R, N</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'R' &amp;&amp; elem != 'N').length == 0</test>
			<error>
				<message>Appearance contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'R' &amp;&amp; elem != 'N').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11281"/>
			<description>Entry D with type Dictionary in Appearance shall be object AppearanceSubDict</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in Appearance is not object AppearanceSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11282"/>
			<description>Entry D with type Stream in Appearance shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>DHasTypeStream != true || D_size == 1</test>
			<error>
				<message>Entry D with type Stream in Appearance is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="10" testNumber="11283"/>
			<description>Entry D with type Stream in Appearance shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in Appearance is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11284"/>
			<description>Entry D in Appearance shall have one of types: Dictionary, Stream</description>
			<test>containsD == false || DHasTypeDictionary == true || DHasTypeStream == true</test>
			<error>
				<message>Entry D in Appearance is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11285"/>
			<description>Entry R with type Dictionary in Appearance shall be object AppearanceSubDict</description>
			<test>RHasTypeDictionary != true || R_size == 1</test>
			<error>
				<message>Entry R with type Dictionary in Appearance is not object AppearanceSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11286"/>
			<description>Entry R with type Stream in Appearance shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>RHasTypeStream != true || R_size == 1</test>
			<error>
				<message>Entry R with type Stream in Appearance is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="10" testNumber="11287"/>
			<description>Entry R with type Stream in Appearance shall be indirect</description>
			<test>RHasTypeStream != true || isRIndirect == true</test>
			<error>
				<message>Entry R with type Stream in Appearance is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11288"/>
			<description>Entry R in Appearance shall have one of types: Dictionary, Stream</description>
			<test>containsR == false || RHasTypeDictionary == true || RHasTypeStream == true</test>
			<error>
				<message>Entry R in Appearance is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11289"/>
			<description>Entry N with type Dictionary in Appearance shall be object AppearanceSubDict</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in Appearance is not object AppearanceSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11290"/>
			<description>Entry N with type Stream in Appearance shall be one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>NHasTypeStream != true || N_size == 1</test>
			<error>
				<message>Entry N with type Stream in Appearance is not one of objects XObjectFormType1, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="7" testNumber="11291"/>
			<description>Entry N in Appearance is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in Appearance is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="10" testNumber="11292"/>
			<description>Entry N with type Stream in Appearance shall be indirect</description>
			<test>NHasTypeStream != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Stream in Appearance is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearance">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11293"/>
			<description>Entry N in Appearance shall have one of types: Dictionary, Stream</description>
			<test>containsN == false || NHasTypeDictionary == true || NHasTypeStream == true</test>
			<error>
				<message>Entry N in Appearance is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_7" clause="2" testNumber="11328"/>
			<description>ArrayOfFontAndSize shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfFontAndSize contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11329"/>
			<description>Entry 1 in ArrayOfFontAndSize shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfFontAndSize is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11330"/>
			<description>Entry 0 with type Dictionary in ArrayOfFontAndSize shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfFontAndSize is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_7" clause="10" testNumber="11331"/>
			<description>Entry 0 with type Dictionary in ArrayOfFontAndSize shall be indirect</description>
			<test>entry0HasTypeDictionary != true || isentry0Indirect == true</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfFontAndSize is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFontAndSize">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11332"/>
			<description>Entry 0 in ArrayOfFontAndSize shall have type Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOfFontAndSize is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeDestsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11348"/>
			<description>Entry with type Array in NameNameTreeDests shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in NameNameTreeDests is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeDestsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11349"/>
			<description>Entry with type Dictionary in NameNameTreeDests shall be object DestDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeDests is not object DestDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11356"/>
			<description>Entry with type Dictionary in CryptFilterMap shall be object CryptFilter</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in CryptFilterMap is not object CryptFilter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMapEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11357"/>
			<description>Entry in CryptFilterMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in CryptFilterMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_7" clause="1" testNumber="11381"/>
			<description>FilterDCTDecode shall not contain entries except ColorTransform</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorTransform').length == 0</test>
			<error>
				<message>FilterDCTDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorTransform').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11382"/>
			<description>Entry ColorTransform with type Integer in FilterDCTDecode shall have one of values: 0, 1</description>
			<test>ColorTransformHasTypeInteger != true || ColorTransformIntegerValue == 0 || ColorTransformIntegerValue == 1</test>
			<error>
				<message>Entry ColorTransform with type Integer in FilterDCTDecode has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorTransformIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11383"/>
			<description>Entry ColorTransform in FilterDCTDecode shall have type Integer</description>
			<test>containsColorTransform == false || ColorTransformHasTypeInteger == true</test>
			<error>
				<message>Entry ColorTransform in FilterDCTDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="1" testNumber="11480"/>
			<description>EncryptionPublicKey shall not contain entries except StmF, StrF, Filter, Recipients, SubFilter, V, EFF, EncryptMetadata, CF, P, Length</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'StmF' &amp;&amp; elem != 'StrF' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'V' &amp;&amp; elem != 'EFF' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'CF' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Length').length == 0</test>
			<error>
				<message>EncryptionPublicKey contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'StmF' &amp;&amp; elem != 'StrF' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'V' &amp;&amp; elem != 'EFF' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'CF' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Length').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11481"/>
			<description>Entry StmF in EncryptionPublicKey shall have type Name</description>
			<test>containsStmF == false || StmFHasTypeName == true</test>
			<error>
				<message>Entry StmF in EncryptionPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11482"/>
			<description>Entry StrF in EncryptionPublicKey shall have type Name</description>
			<test>containsStrF == false || StrFHasTypeName == true</test>
			<error>
				<message>Entry StrF in EncryptionPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="7" testNumber="11483"/>
			<description>Entry Filter in EncryptionPublicKey is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in EncryptionPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11484"/>
			<description>Entry Filter with type Name in EncryptionPublicKey shall have one of values: Adobe.PubSec, AdobePPKLite</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Adobe.PubSec" || FilterNameValue == "AdobePPKLite"</test>
			<error>
				<message>Entry Filter with type Name in EncryptionPublicKey has incorrect value %2 instead of Adobe.PubSec, AdobePPKLite</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11485"/>
			<description>Entry Filter in EncryptionPublicKey shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in EncryptionPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11486"/>
			<description>Entry Recipients with type Array in EncryptionPublicKey shall be object ArrayOfStringsByte</description>
			<test>RecipientsHasTypeArray != true || Recipients_size == 1</test>
			<error>
				<message>Entry Recipients with type Array in EncryptionPublicKey is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="11" testNumber="11487"/>
			<description>Entry Recipients in EncryptionPublicKey is required, when fn:IsRequired((@SubFilter == adbe.pkcs7.s3) || (@SubFilter == adbe.pkcs7.s4))</description>
			<test>(containsRecipients == true || ((SubFilterNameValue == "adbe.pkcs7.s3") || (SubFilterNameValue == "adbe.pkcs7.s4")) == false)</test>
			<error>
				<message>Entry Recipients in EncryptionPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11488"/>
			<description>Entry Recipients in EncryptionPublicKey shall have type Array</description>
			<test>containsRecipients == false || RecipientsHasTypeArray == true</test>
			<error>
				<message>Entry Recipients in EncryptionPublicKey is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11489"/>
			<description>Entry SubFilter with type Name in EncryptionPublicKey shall have one of values: adbe.pkcs7.s3, adbe.pkcs7.s4, adbe.pkcs7.s5</description>
			<test>SubFilterHasTypeName != true || SubFilterNameValue == "adbe.pkcs7.s3" || SubFilterNameValue == "adbe.pkcs7.s4" || SubFilterNameValue == "adbe.pkcs7.s5"</test>
			<error>
				<message>Entry SubFilter with type Name in EncryptionPublicKey has incorrect value %2 instead of adbe.pkcs7.s3, adbe.pkcs7.s4, adbe.pkcs7.s5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11490"/>
			<description>Entry SubFilter in EncryptionPublicKey shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in EncryptionPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="7" testNumber="11491"/>
			<description>Entry V in EncryptionPublicKey is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in EncryptionPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="19" testNumber="11492"/>
			<description>Entry V with type Integer in EncryptionPublicKey shouldn't have deprecated value 0</description>
			<test>VIntegerValue != 0</test>
			<error>
				<message>Entry V with type Integer in EncryptionPublicKey has deprecated value 0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="13" testNumber="11493"/>
			<description>Entry V with type Integer in EncryptionPublicKey shall have one of values: 0, 1, 2, 3, 4, 5</description>
			<test>VHasTypeInteger != true || VIntegerValue == 0 || VIntegerValue == 1 || VIntegerValue == 2 || VIntegerValue == 3 || VIntegerValue == 4 || VIntegerValue == 5</test>
			<error>
				<message>Entry V with type Integer in EncryptionPublicKey has incorrect value %2 instead of 0, 1, 2, 3, 4, 5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11494"/>
			<description>Entry V in EncryptionPublicKey shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in EncryptionPublicKey is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11495"/>
			<description>Entry EFF in EncryptionPublicKey shall have type Name</description>
			<test>containsEFF == false || EFFHasTypeName == true</test>
			<error>
				<message>Entry EFF in EncryptionPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11496"/>
			<description>Entry EncryptMetadata in EncryptionPublicKey shall have type Boolean</description>
			<test>containsEncryptMetadata == false || EncryptMetadataHasTypeBoolean == true</test>
			<error>
				<message>Entry EncryptMetadata in EncryptionPublicKey is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11497"/>
			<description>Entry CF with type Dictionary in EncryptionPublicKey shall be one of objects CryptFilterMap, CryptFilterPublicKeyMap</description>
			<test>CFHasTypeDictionary != true || CF_size == 1</test>
			<error>
				<message>Entry CF with type Dictionary in EncryptionPublicKey is not one of objects CryptFilterMap, CryptFilterPublicKeyMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11498"/>
			<description>Entry CF in EncryptionPublicKey shall have type Dictionary</description>
			<test>containsCF == false || CFHasTypeDictionary == true</test>
			<error>
				<message>Entry CF in EncryptionPublicKey is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11499"/>
			<description>Entry P in EncryptionPublicKey shall have type Bitmask</description>
			<test>containsP == false || PHasTypeBitmask == true</test>
			<error>
				<message>Entry P in EncryptionPublicKey is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="9" testNumber="11500"/>
			<description>Entry P with type Bitmask in EncryptionPublicKey shall correspond special case: fn:Eval(fn:BitsClear(13 , 32))</description>
			<test>PHasTypeBitmask != true || (((PBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry P with type Bitmask in EncryptionPublicKey doesn't correspond special case: fn:Eval(fn:BitsClear(13 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="14" testNumber="11501"/>
			<description>Entry Length with type Integer in EncryptionPublicKey shall correspond possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; (@Length &lt;= 128) &amp;&amp; ((@Length mod 8) == 0))</description>
			<test>LengthHasTypeInteger != true || (LengthIntegerValue &gt;= 40) &amp;&amp; (LengthIntegerValue &lt;= 128) &amp;&amp; ((LengthIntegerValue % 8) == 0)</test>
			<error>
				<message>Entry Length with type Integer in EncryptionPublicKey doesn't correspond possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; (@Length &lt;= 128) &amp;&amp; ((@Length mod 8) == 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11502"/>
			<description>Entry Length in EncryptionPublicKey shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in EncryptionPublicKey is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="1" testNumber="11554"/>
			<description>MeasureRL shall not contain entries except A, D, X, R, O, S, T, CYX, Subtype, Type, Y</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'D' &amp;&amp; elem != 'X' &amp;&amp; elem != 'R' &amp;&amp; elem != 'O' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'CYX' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Y').length == 0</test>
			<error>
				<message>MeasureRL contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'A' &amp;&amp; elem != 'D' &amp;&amp; elem != 'X' &amp;&amp; elem != 'R' &amp;&amp; elem != 'O' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'CYX' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Y').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11555"/>
			<description>Entry A with type Array in MeasureRL shall be object ArrayOfNumberFormats</description>
			<test>AHasTypeArray != true || A_size == 1</test>
			<error>
				<message>Entry A with type Array in MeasureRL is not object ArrayOfNumberFormats</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="7" testNumber="11556"/>
			<description>Entry A in MeasureRL is required</description>
			<test>containsA == true</test>
			<error>
				<message>Entry A in MeasureRL is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11557"/>
			<description>Entry A in MeasureRL shall have type Array</description>
			<test>containsA == false || AHasTypeArray == true</test>
			<error>
				<message>Entry A in MeasureRL is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11558"/>
			<description>Entry D with type Array in MeasureRL shall be object ArrayOfNumberFormats</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in MeasureRL is not object ArrayOfNumberFormats</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="7" testNumber="11559"/>
			<description>Entry D in MeasureRL is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in MeasureRL is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11560"/>
			<description>Entry D in MeasureRL shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in MeasureRL is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11561"/>
			<description>Entry X with type Array in MeasureRL shall be object ArrayOfNumberFormats</description>
			<test>XHasTypeArray != true || X_size == 1</test>
			<error>
				<message>Entry X with type Array in MeasureRL is not object ArrayOfNumberFormats</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="7" testNumber="11562"/>
			<description>Entry X in MeasureRL is required</description>
			<test>containsX == true</test>
			<error>
				<message>Entry X in MeasureRL is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11563"/>
			<description>Entry X in MeasureRL shall have type Array</description>
			<test>containsX == false || XHasTypeArray == true</test>
			<error>
				<message>Entry X in MeasureRL is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="7" testNumber="11564"/>
			<description>Entry R in MeasureRL is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in MeasureRL is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11565"/>
			<description>Entry R in MeasureRL shall have type StringText</description>
			<test>containsR == false || RHasTypeStringText == true</test>
			<error>
				<message>Entry R in MeasureRL is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11566"/>
			<description>Entry O with type Array in MeasureRL shall be object ArrayOf_2Numbers</description>
			<test>OHasTypeArray != true || O_size == 1</test>
			<error>
				<message>Entry O with type Array in MeasureRL is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11567"/>
			<description>Entry O in MeasureRL shall have type Array</description>
			<test>containsO == false || OHasTypeArray == true</test>
			<error>
				<message>Entry O in MeasureRL is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11568"/>
			<description>Entry S with type Array in MeasureRL shall be object ArrayOfNumberFormats</description>
			<test>SHasTypeArray != true || S_size == 1</test>
			<error>
				<message>Entry S with type Array in MeasureRL is not object ArrayOfNumberFormats</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11569"/>
			<description>Entry S in MeasureRL shall have type Array</description>
			<test>containsS == false || SHasTypeArray == true</test>
			<error>
				<message>Entry S in MeasureRL is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11570"/>
			<description>Entry T with type Array in MeasureRL shall be object ArrayOfNumberFormats</description>
			<test>THasTypeArray != true || T_size == 1</test>
			<error>
				<message>Entry T with type Array in MeasureRL is not object ArrayOfNumberFormats</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11571"/>
			<description>Entry T in MeasureRL shall have type Array</description>
			<test>containsT == false || THasTypeArray == true</test>
			<error>
				<message>Entry T in MeasureRL is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11572"/>
			<description>Entry CYX in MeasureRL shall have type Number</description>
			<test>containsCYX == false || CYXHasTypeNumber == true</test>
			<error>
				<message>Entry CYX in MeasureRL is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11573"/>
			<description>Entry Subtype with type Name in MeasureRL shall have value RL</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "RL"</test>
			<error>
				<message>Entry Subtype with type Name in MeasureRL has incorrect value %2 instead of RL</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11574"/>
			<description>Entry Subtype in MeasureRL shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in MeasureRL is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11575"/>
			<description>Entry Type with type Name in MeasureRL shall have value Measure</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Measure"</test>
			<error>
				<message>Entry Type with type Name in MeasureRL has incorrect value %2 instead of Measure</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11576"/>
			<description>Entry Type in MeasureRL shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MeasureRL is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11577"/>
			<description>Entry Y with type Array in MeasureRL shall be object ArrayOfNumberFormats</description>
			<test>YHasTypeArray != true || Y_size == 1</test>
			<error>
				<message>Entry Y with type Array in MeasureRL is not object ArrayOfNumberFormats</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureRL">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11578"/>
			<description>Entry Y in MeasureRL shall have type Array</description>
			<test>containsY == false || YHasTypeArray == true</test>
			<error>
				<message>Entry Y in MeasureRL is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="1" testNumber="11633"/>
			<description>URTransformParameters shall not contain entries except V, Annots, Signature, Msg, Document, EF, P, Form, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'Signature' &amp;&amp; elem != 'Msg' &amp;&amp; elem != 'Document' &amp;&amp; elem != 'EF' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Form' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>URTransformParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'Signature' &amp;&amp; elem != 'Msg' &amp;&amp; elem != 'Document' &amp;&amp; elem != 'EF' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Form' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11634"/>
			<description>Entry V in URTransformParameters shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in URTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11635"/>
			<description>Entry Annots with type Array in URTransformParameters shall be object URTransformParamAnnotsArray</description>
			<test>AnnotsHasTypeArray != true || Annots_size == 1</test>
			<error>
				<message>Entry Annots with type Array in URTransformParameters is not object URTransformParamAnnotsArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11636"/>
			<description>Entry Annots in URTransformParameters shall have type Array</description>
			<test>containsAnnots == false || AnnotsHasTypeArray == true</test>
			<error>
				<message>Entry Annots in URTransformParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11637"/>
			<description>Entry Signature with type Array in URTransformParameters shall be object URTransformParamSignatureArray</description>
			<test>SignatureHasTypeArray != true || Signature_size == 1</test>
			<error>
				<message>Entry Signature with type Array in URTransformParameters is not object URTransformParamSignatureArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11638"/>
			<description>Entry Signature in URTransformParameters shall have type Array</description>
			<test>containsSignature == false || SignatureHasTypeArray == true</test>
			<error>
				<message>Entry Signature in URTransformParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11639"/>
			<description>Entry Msg in URTransformParameters shall have type StringText</description>
			<test>containsMsg == false || MsgHasTypeStringText == true</test>
			<error>
				<message>Entry Msg in URTransformParameters is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11640"/>
			<description>Entry Document with type Array in URTransformParameters shall be object URTransformParamDocumentArray</description>
			<test>DocumentHasTypeArray != true || Document_size == 1</test>
			<error>
				<message>Entry Document with type Array in URTransformParameters is not object URTransformParamDocumentArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11641"/>
			<description>Entry Document in URTransformParameters shall have type Array</description>
			<test>containsDocument == false || DocumentHasTypeArray == true</test>
			<error>
				<message>Entry Document in URTransformParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11642"/>
			<description>Entry EF with type Array in URTransformParameters shall be object URTransformParamEFArray</description>
			<test>EFHasTypeArray != true || EF_size == 1</test>
			<error>
				<message>Entry EF with type Array in URTransformParameters is not object URTransformParamEFArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11643"/>
			<description>Entry EF in URTransformParameters shall have type Array</description>
			<test>containsEF == false || EFHasTypeArray == true</test>
			<error>
				<message>Entry EF in URTransformParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11644"/>
			<description>Entry P in URTransformParameters shall have type Boolean</description>
			<test>containsP == false || PHasTypeBoolean == true</test>
			<error>
				<message>Entry P in URTransformParameters is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11645"/>
			<description>Entry Form with type Array in URTransformParameters shall be object URTransformParamFormArray</description>
			<test>FormHasTypeArray != true || Form_size == 1</test>
			<error>
				<message>Entry Form with type Array in URTransformParameters is not object URTransformParamFormArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11646"/>
			<description>Entry Form in URTransformParameters shall have type Array</description>
			<test>containsForm == false || FormHasTypeArray == true</test>
			<error>
				<message>Entry Form in URTransformParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11647"/>
			<description>Entry Type with type Name in URTransformParameters shall have value TransformParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "TransformParams"</test>
			<error>
				<message>Entry Type with type Name in URTransformParameters has incorrect value %2 instead of TransformParams</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11648"/>
			<description>Entry Type in URTransformParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in URTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="11693"/>
			<description>ArrayOf_6Numbers shall contain exactly 6 elements</description>
			<test>size == 6</test>
			<error>
				<message>ArrayOf_6Numbers contains %1 element(s) instead of 6</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11694"/>
			<description>Entry 0 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11695"/>
			<description>Entry 4 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11696"/>
			<description>Entry 3 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11697"/>
			<description>Entry 5 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11698"/>
			<description>Entry 2 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_6Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11699"/>
			<description>Entry 1 in ArrayOf_6Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_6Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="1" testNumber="11763"/>
			<description>WebCaptureCommand shall not contain entries except F, L, P, CT, S, URL, H</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'L' &amp;&amp; elem != 'P' &amp;&amp; elem != 'CT' &amp;&amp; elem != 'S' &amp;&amp; elem != 'URL' &amp;&amp; elem != 'H').length == 0</test>
			<error>
				<message>WebCaptureCommand contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'L' &amp;&amp; elem != 'P' &amp;&amp; elem != 'CT' &amp;&amp; elem != 'S' &amp;&amp; elem != 'URL' &amp;&amp; elem != 'H').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11764"/>
			<description>Entry F in WebCaptureCommand shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in WebCaptureCommand is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="9" testNumber="11765"/>
			<description>Entry F with type Bitmask in WebCaptureCommand shall correspond special case: fn:Eval(fn:BitsClear(4 , 32))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in WebCaptureCommand doesn't correspond special case: fn:Eval(fn:BitsClear(4 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11766"/>
			<description>Entry L in WebCaptureCommand shall have type Integer</description>
			<test>containsL == false || LHasTypeInteger == true</test>
			<error>
				<message>Entry L in WebCaptureCommand is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="9" testNumber="11767"/>
			<description>Entry L with type Integer in WebCaptureCommand shall correspond special case: fn:Eval(@L &gt;= 1)</description>
			<test>LHasTypeInteger != true || (LIntegerValue &gt;= 1)</test>
			<error>
				<message>Entry L with type Integer in WebCaptureCommand doesn't correspond special case: fn:Eval(@L &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11768"/>
			<description>Entry P with type Stream in WebCaptureCommand shall be object Stream</description>
			<test>PHasTypeStream != true || P_size == 1</test>
			<error>
				<message>Entry P with type Stream in WebCaptureCommand is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="10" testNumber="11769"/>
			<description>Entry P with type Stream in WebCaptureCommand shall be indirect</description>
			<test>PHasTypeStream != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Stream in WebCaptureCommand is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11770"/>
			<description>Entry P in WebCaptureCommand shall have one of types: Stream, String</description>
			<test>containsP == false || PHasTypeStream == true || PHasTypeString == true</test>
			<error>
				<message>Entry P in WebCaptureCommand is not one of types: Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11771"/>
			<description>Entry CT in WebCaptureCommand shall have type StringAscii</description>
			<test>containsCT == false || CTHasTypeStringAscii == true</test>
			<error>
				<message>Entry CT in WebCaptureCommand is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="17" testNumber="11772"/>
			<description>Entry S with type Dictionary in WebCaptureCommand shall be object WebCaptureCommandSettings</description>
			<test>SHasTypeDictionary != true || S_size == 1</test>
			<error>
				<message>Entry S with type Dictionary in WebCaptureCommand is not object WebCaptureCommandSettings</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11773"/>
			<description>Entry S in WebCaptureCommand shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in WebCaptureCommand is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="7" testNumber="11774"/>
			<description>Entry URL in WebCaptureCommand is required</description>
			<test>containsURL == true</test>
			<error>
				<message>Entry URL in WebCaptureCommand is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11775"/>
			<description>Entry URL in WebCaptureCommand shall have type StringAscii</description>
			<test>containsURL == false || URLHasTypeStringAscii == true</test>
			<error>
				<message>Entry URL in WebCaptureCommand is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommand">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11776"/>
			<description>Entry H in WebCaptureCommand shall have type String</description>
			<test>containsH == false || HHasTypeString == true</test>
			<error>
				<message>Entry H in WebCaptureCommand is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="1" testNumber="11887"/>
			<description>Transition shall not contain entries except Di, M, Type, Dm, SS, B, S, D</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Di' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Dm' &amp;&amp; elem != 'SS' &amp;&amp; elem != 'B' &amp;&amp; elem != 'S' &amp;&amp; elem != 'D').length == 0</test>
			<error>
				<message>Transition contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Di' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Dm' &amp;&amp; elem != 'SS' &amp;&amp; elem != 'B' &amp;&amp; elem != 'S' &amp;&amp; elem != 'D').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11888"/>
			<description>Entry Di with type Name in Transition shall have value None</description>
			<test>DiHasTypeName != true || DiNameValue == "None"</test>
			<error>
				<message>Entry Di with type Name in Transition has incorrect value %2 instead of None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DiNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11889"/>
			<description>Entry Di with type Integer in Transition shall have one of values: 0, 90, 315, 180, 270</description>
			<test>DiHasTypeInteger != true || DiIntegerValue == 0 || DiIntegerValue == 90 || DiIntegerValue == 180 || DiIntegerValue == 270 || DiIntegerValue == 315</test>
			<error>
				<message>Entry Di with type Integer in Transition has incorrect value %2 instead of 0, 90, 315, 180, 270</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DiIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11890"/>
			<description>Entry Di in Transition shall have one of types: Name, Integer</description>
			<test>containsDi == false || DiHasTypeName == true || DiHasTypeInteger == true</test>
			<error>
				<message>Entry Di in Transition is not one of types: Name, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="9" testNumber="11891"/>
			<description>Entry Di with type Name in Transition shall correspond special case: fn:Eval(((@Di == None) &amp;&amp; (@S == Fly) &amp;&amp; (@SS != 1.0)))</description>
			<test>DiHasTypeName != true || (((DiNameValue == "None") &amp;&amp; (SNameValue == "Fly") &amp;&amp; (SSNumberValue != 1.0)))</test>
			<error>
				<message>Entry Di with type Name in Transition doesn't correspond special case: fn:Eval(((@Di == None) &amp;&amp; (@S == Fly) &amp;&amp; (@SS != 1.0)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="9" testNumber="11892"/>
			<description>Entry Di with type Integer in Transition shall correspond special case: fn:Eval((((@Di == 90) || (@Di == 180)) &amp;&amp; (@S == Wipe)) || ((@Di == 315) &amp;&amp; (@S == Glitter)))</description>
			<test>DiHasTypeInteger != true || ((((DiIntegerValue == 90) || (DiIntegerValue == 180)) &amp;&amp; (SNameValue == "Wipe")) || ((DiIntegerValue == 315) &amp;&amp; (SNameValue == "Glitter")))</test>
			<error>
				<message>Entry Di with type Integer in Transition doesn't correspond special case: fn:Eval((((@Di == 90) || (@Di == 180)) &amp;&amp; (@S == Wipe)) || ((@Di == 315) &amp;&amp; (@S == Glitter)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11893"/>
			<description>Entry M with type Name in Transition shall have one of values: I, O</description>
			<test>MHasTypeName != true || MNameValue == "I" || MNameValue == "O"</test>
			<error>
				<message>Entry M with type Name in Transition has incorrect value %2 instead of I, O</message>
				<arguments>
					<argument>keyName</argument>
					<argument>MNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11894"/>
			<description>Entry M in Transition shall have type Name</description>
			<test>containsM == false || MHasTypeName == true</test>
			<error>
				<message>Entry M in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11895"/>
			<description>Entry Type with type Name in Transition shall have value Trans</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Trans"</test>
			<error>
				<message>Entry Type with type Name in Transition has incorrect value %2 instead of Trans</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11896"/>
			<description>Entry Type in Transition shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11897"/>
			<description>Entry Dm with type Name in Transition shall have one of values: V, H</description>
			<test>DmHasTypeName != true || DmNameValue == "H" || DmNameValue == "V"</test>
			<error>
				<message>Entry Dm with type Name in Transition has incorrect value %2 instead of V, H</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DmNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11898"/>
			<description>Entry Dm in Transition shall have type Name</description>
			<test>containsDm == false || DmHasTypeName == true</test>
			<error>
				<message>Entry Dm in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11899"/>
			<description>Entry SS in Transition shall have type Number</description>
			<test>containsSS == false || SSHasTypeNumber == true</test>
			<error>
				<message>Entry SS in Transition is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11900"/>
			<description>Entry B in Transition shall have type Boolean</description>
			<test>containsB == false || BHasTypeBoolean == true</test>
			<error>
				<message>Entry B in Transition is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="6" testNumber="11901"/>
			<description>Entry S with type Name in Transition shall have one of values: Uncover, Glitter, R, Fly, Cover, Dissolve, Box, Split, Push, Blinds, Fade, Wipe</description>
			<test>SHasTypeName != true || SNameValue == "Split" || SNameValue == "Blinds" || SNameValue == "Box" || SNameValue == "Wipe" || SNameValue == "Dissolve" || SNameValue == "Glitter" || SNameValue == "R" || SNameValue == "Fly" || SNameValue == "Push" || SNameValue == "Cover" || SNameValue == "Uncover" || SNameValue == "Fade"</test>
			<error>
				<message>Entry S with type Name in Transition has incorrect value %2 instead of Uncover, Glitter, R, Fly, Cover, Dissolve, Box, Split, Push, Blinds, Fade, Wipe</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11902"/>
			<description>Entry S in Transition shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="14" testNumber="11903"/>
			<description>Entry D with type Number in Transition shall correspond possible value predicate: fn:Eval(@D &gt;= 0)</description>
			<test>DHasTypeNumber != true || DNumberValue &gt;= 0</test>
			<error>
				<message>Entry D with type Number in Transition doesn't correspond possible value predicate: fn:Eval(@D &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="11904"/>
			<description>Entry D in Transition shall have type Number</description>
			<test>containsD == false || DHasTypeNumber == true</test>
			<error>
				<message>Entry D in Transition is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeJavaScript">
			<id specification="ISO_32000_1_7" clause="18" testNumber="11927"/>
			<description>Entry * in NameNameTreeJavaScript shall be object NameNameTreeJavaScriptEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeJavaScript is not object NameNameTreeJavaScriptEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="1" testNumber="12256"/>
			<description>PageObject shall not contain entries except LastModified, TemplateInstantiated, ArtBox, BleedBox, Trans, Rotate, UserUnit, Annots, TrimBox, StructParents, CropBox, Tabs, VP, PresSteps, BoxColorInfo, MediaBox, Resources, B, Dur, PieceInfo, Parent, DPart, Hid, ID, PZ, SeparationInfo, Contents, Group, Metadata, AA, Thumb, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'LastModified' &amp;&amp; elem != 'TemplateInstantiated' &amp;&amp; elem != 'ArtBox' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'UserUnit' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'TrimBox' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Tabs' &amp;&amp; elem != 'VP' &amp;&amp; elem != 'PresSteps' &amp;&amp; elem != 'BoxColorInfo' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'B' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'DPart' &amp;&amp; elem != 'Hid' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'PZ' &amp;&amp; elem != 'SeparationInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PageObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'LastModified' &amp;&amp; elem != 'TemplateInstantiated' &amp;&amp; elem != 'ArtBox' &amp;&amp; elem != 'BleedBox' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'UserUnit' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'TrimBox' &amp;&amp; elem != 'StructParents' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Tabs' &amp;&amp; elem != 'VP' &amp;&amp; elem != 'PresSteps' &amp;&amp; elem != 'BoxColorInfo' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'B' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'DPart' &amp;&amp; elem != 'Hid' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'PZ' &amp;&amp; elem != 'SeparationInfo' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="11" testNumber="12257"/>
			<description>Entry LastModified in PageObject is required, when fn:IsRequired(fn:IsPresent(PieceInfo))</description>
			<test>(containsLastModified == true || ((containsPieceInfo == true)) == false)</test>
			<error>
				<message>Entry LastModified in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12258"/>
			<description>Entry LastModified in PageObject shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in PageObject is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="11" testNumber="12259"/>
			<description>Entry TemplateInstantiated in PageObject is required, when fn:IsRequired(fn:InNameTree(trailer::Catalog::Names::Pages) || fn:InNameTree(trailer::Catalog::Names::Templates))</description>
			<test>(containsTemplateInstantiated == true || ((nameTreetrailerCatalogNamesPagesContainsTemplateInstantiatedString == true) || (nameTreetrailerCatalogNamesTemplatesContainsTemplateInstantiatedString == true)) == false)</test>
			<error>
				<message>Entry TemplateInstantiated in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12260"/>
			<description>Entry TemplateInstantiated in PageObject shall have type Name</description>
			<test>containsTemplateInstantiated == false || TemplateInstantiatedHasTypeName == true</test>
			<error>
				<message>Entry TemplateInstantiated in PageObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12261"/>
			<description>Entry ArtBox in PageObject shall have type Rectangle</description>
			<test>containsArtBox == false || ArtBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry ArtBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12262"/>
			<description>Entry BleedBox in PageObject shall have type Rectangle</description>
			<test>containsBleedBox == false || BleedBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BleedBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12263"/>
			<description>Entry Trans with type Dictionary in PageObject shall be object Transition</description>
			<test>TransHasTypeDictionary != true || Trans_size == 1</test>
			<error>
				<message>Entry Trans with type Dictionary in PageObject is not object Transition</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12264"/>
			<description>Entry Trans in PageObject shall have type Dictionary</description>
			<test>containsTrans == false || TransHasTypeDictionary == true</test>
			<error>
				<message>Entry Trans in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="14" testNumber="12265"/>
			<description>Entry Rotate with type Integer in PageObject shall correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageObject doesn't correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12266"/>
			<description>Entry Rotate in PageObject shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12267"/>
			<description>Entry UserUnit in PageObject shall have type Number</description>
			<test>containsUserUnit == false || UserUnitHasTypeNumber == true</test>
			<error>
				<message>Entry UserUnit in PageObject is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12268"/>
			<description>Entry Annots with type Array in PageObject shall be object ArrayOfAnnots</description>
			<test>AnnotsHasTypeArray != true || Annots_size == 1</test>
			<error>
				<message>Entry Annots with type Array in PageObject is not object ArrayOfAnnots</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12269"/>
			<description>Entry Annots in PageObject shall have type Array</description>
			<test>containsAnnots == false || AnnotsHasTypeArray == true</test>
			<error>
				<message>Entry Annots in PageObject is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12270"/>
			<description>Entry TrimBox in PageObject shall have type Rectangle</description>
			<test>containsTrimBox == false || TrimBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry TrimBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="11" testNumber="12271"/>
			<description>Entry StructParents in PageObject is required, when fn:IsRequired(fn:PageContainsStructContentItems())</description>
			<test>(containsStructParents == true || ((pageContainsStructContentItems == true)) == false)</test>
			<error>
				<message>Entry StructParents in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12272"/>
			<description>Entry StructParents in PageObject shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in PageObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12273"/>
			<description>Entry CropBox in PageObject shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="13" testNumber="12274"/>
			<description>Entry Tabs with type Name in PageObject shall have one of values: A, R, C, S, W</description>
			<test>TabsHasTypeName != true || TabsNameValue == "R" || TabsNameValue == "C" || TabsNameValue == "S" || TabsNameValue == A || TabsNameValue == W</test>
			<error>
				<message>Entry Tabs with type Name in PageObject has incorrect value %2 instead of A, R, C, S, W</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TabsNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12275"/>
			<description>Entry Tabs in PageObject shall have type Name</description>
			<test>containsTabs == false || TabsHasTypeName == true</test>
			<error>
				<message>Entry Tabs in PageObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12276"/>
			<description>Entry VP with type Array in PageObject shall be object ArrayOfViewports</description>
			<test>VPHasTypeArray != true || VP_size == 1</test>
			<error>
				<message>Entry VP with type Array in PageObject is not object ArrayOfViewports</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12277"/>
			<description>Entry VP in PageObject shall have type Array</description>
			<test>containsVP == false || VPHasTypeArray == true</test>
			<error>
				<message>Entry VP in PageObject is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12278"/>
			<description>Entry PresSteps with type Dictionary in PageObject shall be object NavNode</description>
			<test>PresStepsHasTypeDictionary != true || PresSteps_size == 1</test>
			<error>
				<message>Entry PresSteps with type Dictionary in PageObject is not object NavNode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12279"/>
			<description>Entry PresSteps in PageObject shall have type Dictionary</description>
			<test>containsPresSteps == false || PresStepsHasTypeDictionary == true</test>
			<error>
				<message>Entry PresSteps in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12280"/>
			<description>Entry BoxColorInfo with type Dictionary in PageObject shall be object BoxColorInfo</description>
			<test>BoxColorInfoHasTypeDictionary != true || BoxColorInfo_size == 1</test>
			<error>
				<message>Entry BoxColorInfo with type Dictionary in PageObject is not object BoxColorInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12281"/>
			<description>Entry BoxColorInfo in PageObject shall have type Dictionary</description>
			<test>containsBoxColorInfo == false || BoxColorInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry BoxColorInfo in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="7" testNumber="12282"/>
			<description>Entry MediaBox in PageObject is required</description>
			<test>containsMediaBox == true</test>
			<error>
				<message>Entry MediaBox in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12283"/>
			<description>Entry MediaBox in PageObject shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12284"/>
			<description>Entry Resources with type Dictionary in PageObject shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PageObject is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="7" testNumber="12285"/>
			<description>Entry Resources in PageObject is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12286"/>
			<description>Entry Resources in PageObject shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12287"/>
			<description>Entry B with type Array in PageObject shall be object ArrayOfBeads</description>
			<test>BHasTypeArray != true || B_size == 1</test>
			<error>
				<message>Entry B with type Array in PageObject is not object ArrayOfBeads</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12288"/>
			<description>Entry B in PageObject shall have type Array</description>
			<test>containsB == false || BHasTypeArray == true</test>
			<error>
				<message>Entry B in PageObject is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="9" testNumber="12289"/>
			<description>Entry B with type Array in PageObject shall correspond special case: fn:Not(fn:IsPresent(@Type == Template))</description>
			<test>BHasTypeArray != true || ((((TypeNameValue == "Template") == true &amp;&amp; containsB == true)) != true)</test>
			<error>
				<message>Entry B with type Array in PageObject doesn't correspond special case: fn:Not(fn:IsPresent(@Type == Template))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12290"/>
			<description>Entry Dur in PageObject shall have type Number</description>
			<test>containsDur == false || DurHasTypeNumber == true</test>
			<error>
				<message>Entry Dur in PageObject is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12291"/>
			<description>Entry PieceInfo with type Dictionary in PageObject shall be object PagePiece</description>
			<test>PieceInfoHasTypeDictionary != true || PieceInfo_size == 1</test>
			<error>
				<message>Entry PieceInfo with type Dictionary in PageObject is not object PagePiece</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12292"/>
			<description>Entry PieceInfo in PageObject shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12293"/>
			<description>Entry Parent with type Dictionary in PageObject shall be one of objects PageTreeNode, PageTreeNodeRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject is not one of objects PageTreeNode, PageTreeNodeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="11" testNumber="12294"/>
			<description>Entry Parent in PageObject is required, when fn:IsRequired(@Type != Template)</description>
			<test>(containsParent == true || (TypeNameValue != "Template") == false)</test>
			<error>
				<message>Entry Parent in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="10" testNumber="12295"/>
			<description>Entry Parent with type Dictionary in PageObject shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12296"/>
			<description>Entry Parent in PageObject shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="9" testNumber="12297"/>
			<description>Entry Parent with type Dictionary in PageObject shall correspond special case: fn:Not(fn:IsPresent(@Type == Template))</description>
			<test>ParentHasTypeDictionary != true || ((((TypeNameValue == "Template") == true &amp;&amp; containsParent == true)) != true)</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject doesn't correspond special case: fn:Not(fn:IsPresent(@Type == Template))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12298"/>
			<description>Entry DPart with type Dictionary in PageObject shall be object DPart</description>
			<test>DPartHasTypeDictionary != true || DPart_size == 1</test>
			<error>
				<message>Entry DPart with type Dictionary in PageObject is not object DPart</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12299"/>
			<description>Entry DPart in PageObject shall have type Dictionary</description>
			<test>containsDPart == false || DPartHasTypeDictionary == true</test>
			<error>
				<message>Entry DPart in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="5" testNumber="12300"/>
			<description>Entry Hid in PageObject is deprecated since PDF 1.3</description>
			<test>containsHid == false</test>
			<error>
				<message>Entry Hid in PageObject is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12301"/>
			<description>Entry Hid in PageObject shall have type Boolean</description>
			<test>containsHid == false || HidHasTypeBoolean == true</test>
			<error>
				<message>Entry Hid in PageObject is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12302"/>
			<description>Entry ID in PageObject shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in PageObject is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12303"/>
			<description>Entry PZ in PageObject shall have type Number</description>
			<test>containsPZ == false || PZHasTypeNumber == true</test>
			<error>
				<message>Entry PZ in PageObject is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12304"/>
			<description>Entry SeparationInfo with type Dictionary in PageObject shall be object Separation</description>
			<test>SeparationInfoHasTypeDictionary != true || SeparationInfo_size == 1</test>
			<error>
				<message>Entry SeparationInfo with type Dictionary in PageObject is not object Separation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12305"/>
			<description>Entry SeparationInfo in PageObject shall have type Dictionary</description>
			<test>containsSeparationInfo == false || SeparationInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry SeparationInfo in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12306"/>
			<description>Entry Contents with type Array in PageObject shall be object ArrayOfStreamsGeneral</description>
			<test>ContentsHasTypeArray != true || Contents_size == 1</test>
			<error>
				<message>Entry Contents with type Array in PageObject is not object ArrayOfStreamsGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12307"/>
			<description>Entry Contents with type Stream in PageObject shall be object Stream</description>
			<test>ContentsHasTypeStream != true || Contents_size == 1</test>
			<error>
				<message>Entry Contents with type Stream in PageObject is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="10" testNumber="12308"/>
			<description>Entry Contents with type Stream in PageObject shall be indirect</description>
			<test>ContentsHasTypeStream != true || isContentsIndirect == true</test>
			<error>
				<message>Entry Contents with type Stream in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12309"/>
			<description>Entry Contents in PageObject shall have one of types: Array, Stream</description>
			<test>containsContents == false || ContentsHasTypeArray == true || ContentsHasTypeStream == true</test>
			<error>
				<message>Entry Contents in PageObject is not one of types: Array, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12310"/>
			<description>Entry Group with type Dictionary in PageObject shall be object GroupAttributes</description>
			<test>GroupHasTypeDictionary != true || Group_size == 1</test>
			<error>
				<message>Entry Group with type Dictionary in PageObject is not object GroupAttributes</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12311"/>
			<description>Entry Group in PageObject shall have type Dictionary</description>
			<test>containsGroup == false || GroupHasTypeDictionary == true</test>
			<error>
				<message>Entry Group in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12312"/>
			<description>Entry Metadata with type Stream in PageObject shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in PageObject is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="10" testNumber="12313"/>
			<description>Entry Metadata with type Stream in PageObject shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12314"/>
			<description>Entry Metadata in PageObject shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in PageObject is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12315"/>
			<description>Entry AA with type Dictionary in PageObject shall be object AddActionPageObject</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in PageObject is not object AddActionPageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12316"/>
			<description>Entry AA in PageObject shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12317"/>
			<description>Entry Thumb with type Stream in PageObject shall be object Thumbnail</description>
			<test>ThumbHasTypeStream != true || Thumb_size == 1</test>
			<error>
				<message>Entry Thumb with type Stream in PageObject is not object Thumbnail</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="10" testNumber="12318"/>
			<description>Entry Thumb with type Stream in PageObject shall be indirect</description>
			<test>ThumbHasTypeStream != true || isThumbIndirect == true</test>
			<error>
				<message>Entry Thumb with type Stream in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12319"/>
			<description>Entry Thumb in PageObject shall have type Stream</description>
			<test>containsThumb == false || ThumbHasTypeStream == true</test>
			<error>
				<message>Entry Thumb in PageObject is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="7" testNumber="12320"/>
			<description>Entry Type in PageObject is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="6" testNumber="12321"/>
			<description>Entry Type with type Name in PageObject shall have one of values: Page, Template</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Page" || TypeNameValue == "Template"</test>
			<error>
				<message>Entry Type with type Name in PageObject has incorrect value %2 instead of Page, Template</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12322"/>
			<description>Entry Type in PageObject shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="1" testNumber="12485"/>
			<description>ActionSound shall not contain entries except Next, Synchronous, Mix, Repeat, Sound, S, Volume, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Mix' &amp;&amp; elem != 'Repeat' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Volume' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionSound contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'Synchronous' &amp;&amp; elem != 'Mix' &amp;&amp; elem != 'Repeat' &amp;&amp; elem != 'Sound' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Volume' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12486"/>
			<description>Entry Next with type Array in ActionSound shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionSound is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12487"/>
			<description>Entry Next with type Dictionary in ActionSound shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionSound is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12488"/>
			<description>Entry Next in ActionSound shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionSound is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12489"/>
			<description>Entry Synchronous in ActionSound shall have type Boolean</description>
			<test>containsSynchronous == false || SynchronousHasTypeBoolean == true</test>
			<error>
				<message>Entry Synchronous in ActionSound is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12490"/>
			<description>Entry Mix in ActionSound shall have type Boolean</description>
			<test>containsMix == false || MixHasTypeBoolean == true</test>
			<error>
				<message>Entry Mix in ActionSound is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12491"/>
			<description>Entry Repeat in ActionSound shall have type Boolean</description>
			<test>containsRepeat == false || RepeatHasTypeBoolean == true</test>
			<error>
				<message>Entry Repeat in ActionSound is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12492"/>
			<description>Entry Sound with type Stream in ActionSound shall be object SoundObject</description>
			<test>SoundHasTypeStream != true || Sound_size == 1</test>
			<error>
				<message>Entry Sound with type Stream in ActionSound is not object SoundObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="7" testNumber="12493"/>
			<description>Entry Sound in ActionSound is required</description>
			<test>containsSound == true</test>
			<error>
				<message>Entry Sound in ActionSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="10" testNumber="12494"/>
			<description>Entry Sound with type Stream in ActionSound shall be indirect</description>
			<test>SoundHasTypeStream != true || isSoundIndirect == true</test>
			<error>
				<message>Entry Sound with type Stream in ActionSound is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12495"/>
			<description>Entry Sound in ActionSound shall have type Stream</description>
			<test>containsSound == false || SoundHasTypeStream == true</test>
			<error>
				<message>Entry Sound in ActionSound is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="7" testNumber="12496"/>
			<description>Entry S in ActionSound is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSound is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="6" testNumber="12497"/>
			<description>Entry S with type Name in ActionSound shall have value Sound</description>
			<test>SHasTypeName != true || SNameValue == "Sound"</test>
			<error>
				<message>Entry S with type Name in ActionSound has incorrect value %2 instead of Sound</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12498"/>
			<description>Entry S in ActionSound shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="14" testNumber="12499"/>
			<description>Entry Volume with type Number in ActionSound shall correspond possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</description>
			<test>VolumeHasTypeNumber != true || (VolumeNumberValue &gt;= - 1) &amp;&amp; (VolumeNumberValue &lt;= 1)</test>
			<error>
				<message>Entry Volume with type Number in ActionSound doesn't correspond possible value predicate: fn:Eval((@Volume &gt;= -1) &amp;&amp; (@Volume &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12500"/>
			<description>Entry Volume in ActionSound shall have type Number</description>
			<test>containsVolume == false || VolumeHasTypeNumber == true</test>
			<error>
				<message>Entry Volume in ActionSound is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="6" testNumber="12501"/>
			<description>Entry Type with type Name in ActionSound shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionSound has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSound">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12502"/>
			<description>Entry Type in ActionSound shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionSound is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="1" testNumber="12585"/>
			<description>StructTreeRoot shall not contain entries except K, ClassMap, IDTree, ParentTreeNextKey, ParentTree, Type, RoleMap</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'K' &amp;&amp; elem != 'ClassMap' &amp;&amp; elem != 'IDTree' &amp;&amp; elem != 'ParentTreeNextKey' &amp;&amp; elem != 'ParentTree' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'RoleMap').length == 0</test>
			<error>
				<message>StructTreeRoot contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'K' &amp;&amp; elem != 'ClassMap' &amp;&amp; elem != 'IDTree' &amp;&amp; elem != 'ParentTreeNextKey' &amp;&amp; elem != 'ParentTree' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'RoleMap').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12586"/>
			<description>Entry K with type Array in StructTreeRoot shall be object ArrayOfStructElem</description>
			<test>KHasTypeArray != true || K_size == 1</test>
			<error>
				<message>Entry K with type Array in StructTreeRoot is not object ArrayOfStructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12587"/>
			<description>Entry K with type Dictionary in StructTreeRoot shall be object StructElem</description>
			<test>KHasTypeDictionary != true || K_size == 1</test>
			<error>
				<message>Entry K with type Dictionary in StructTreeRoot is not object StructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12588"/>
			<description>Entry K in StructTreeRoot shall have one of types: Array, Dictionary</description>
			<test>containsK == false || KHasTypeArray == true || KHasTypeDictionary == true</test>
			<error>
				<message>Entry K in StructTreeRoot is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12589"/>
			<description>Entry ClassMap with type Dictionary in StructTreeRoot shall be object ClassMap</description>
			<test>ClassMapHasTypeDictionary != true || ClassMap_size == 1</test>
			<error>
				<message>Entry ClassMap with type Dictionary in StructTreeRoot is not object ClassMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12590"/>
			<description>Entry ClassMap in StructTreeRoot shall have type Dictionary</description>
			<test>containsClassMap == false || ClassMapHasTypeDictionary == true</test>
			<error>
				<message>Entry ClassMap in StructTreeRoot is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12591"/>
			<description>Entry IDTree with type NameTree in StructTreeRoot shall be object StructTreeRootNameTreeIDTree</description>
			<test>IDTreeHasTypeNameTree != true || IDTree_size == 1</test>
			<error>
				<message>Entry IDTree with type NameTree in StructTreeRoot is not object StructTreeRootNameTreeIDTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12592"/>
			<description>Entry IDTree in StructTreeRoot shall have type NameTree</description>
			<test>containsIDTree == false || IDTreeHasTypeNameTree == true</test>
			<error>
				<message>Entry IDTree in StructTreeRoot is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12593"/>
			<description>Entry ParentTreeNextKey in StructTreeRoot shall have type Integer</description>
			<test>containsParentTreeNextKey == false || ParentTreeNextKeyHasTypeInteger == true</test>
			<error>
				<message>Entry ParentTreeNextKey in StructTreeRoot is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12594"/>
			<description>Entry ParentTree with type NumberTree in StructTreeRoot shall be object StructTreeRootNumberTreeParentTree</description>
			<test>ParentTreeHasTypeNumberTree != true || ParentTree_size == 1</test>
			<error>
				<message>Entry ParentTree with type NumberTree in StructTreeRoot is not object StructTreeRootNumberTreeParentTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12595"/>
			<description>Entry ParentTree in StructTreeRoot shall have type NumberTree</description>
			<test>containsParentTree == false || ParentTreeHasTypeNumberTree == true</test>
			<error>
				<message>Entry ParentTree in StructTreeRoot is not of type NumberTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="7" testNumber="12596"/>
			<description>Entry Type in StructTreeRoot is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in StructTreeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="6" testNumber="12597"/>
			<description>Entry Type with type Name in StructTreeRoot shall have value StructTreeRoot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "StructTreeRoot"</test>
			<error>
				<message>Entry Type with type Name in StructTreeRoot has incorrect value %2 instead of StructTreeRoot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12598"/>
			<description>Entry Type in StructTreeRoot shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in StructTreeRoot is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12599"/>
			<description>Entry RoleMap with type Dictionary in StructTreeRoot shall be object RoleMap</description>
			<test>RoleMapHasTypeDictionary != true || RoleMap_size == 1</test>
			<error>
				<message>Entry RoleMap with type Dictionary in StructTreeRoot is not object RoleMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12600"/>
			<description>Entry RoleMap in StructTreeRoot shall have type Dictionary</description>
			<test>containsRoleMap == false || RoleMapHasTypeDictionary == true</test>
			<error>
				<message>Entry RoleMap in StructTreeRoot is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_7" clause="2" testNumber="12703"/>
			<description>Dest1Array shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>Dest1Array contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12704"/>
			<description>Entry 0 with type Dictionary in Dest1Array shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in Dest1Array is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_7" clause="14" testNumber="12705"/>
			<description>Entry 0 with type Number in Dest1Array shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest1Array doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12706"/>
			<description>Entry 0 in Dest1Array shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in Dest1Array is not one of types: Dictionary, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_7" clause="6" testNumber="12707"/>
			<description>Entry 1 with type Name in Dest1Array shall have one of values: FitV, FitH, FitBH, FitBV</description>
			<test>entry1HasTypeName != true || entry1NameValue == "FitH" || entry1NameValue == "FitV" || entry1NameValue == "FitBH" || entry1NameValue == "FitBV"</test>
			<error>
				<message>Entry 1 with type Name in Dest1Array has incorrect value %2 instead of FitV, FitH, FitBH, FitBV</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12708"/>
			<description>Entry 1 in Dest1Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest1Array is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12709"/>
			<description>Entry 2 in Dest1Array shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in Dest1Array is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="12737"/>
			<description>SignatureBuildDataSigQDict shall not contain entries except TrustedMode, Date, PreRelease, Preview, R, V, Name, NonEFontNoWarn, OS</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'TrustedMode' &amp;&amp; elem != 'Date' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'Preview' &amp;&amp; elem != 'R' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS').length == 0</test>
			<error>
				<message>SignatureBuildDataSigQDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'TrustedMode' &amp;&amp; elem != 'Date' &amp;&amp; elem != 'PreRelease' &amp;&amp; elem != 'Preview' &amp;&amp; elem != 'R' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'NonEFontNoWarn' &amp;&amp; elem != 'OS').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12738"/>
			<description>Entry TrustedMode in SignatureBuildDataSigQDict shall have type Boolean</description>
			<test>containsTrustedMode == false || TrustedModeHasTypeBoolean == true</test>
			<error>
				<message>Entry TrustedMode in SignatureBuildDataSigQDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12739"/>
			<description>Entry Date in SignatureBuildDataSigQDict shall have type StringText</description>
			<test>containsDate == false || DateHasTypeStringText == true</test>
			<error>
				<message>Entry Date in SignatureBuildDataSigQDict is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12740"/>
			<description>Entry PreRelease in SignatureBuildDataSigQDict shall have type Boolean</description>
			<test>containsPreRelease == false || PreReleaseHasTypeBoolean == true</test>
			<error>
				<message>Entry PreRelease in SignatureBuildDataSigQDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12741"/>
			<description>Entry Preview in SignatureBuildDataSigQDict shall have type Boolean</description>
			<test>containsPreview == false || PreviewHasTypeBoolean == true</test>
			<error>
				<message>Entry Preview in SignatureBuildDataSigQDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12742"/>
			<description>Entry R in SignatureBuildDataSigQDict shall have type Number</description>
			<test>containsR == false || RHasTypeNumber == true</test>
			<error>
				<message>Entry R in SignatureBuildDataSigQDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12743"/>
			<description>Entry V in SignatureBuildDataSigQDict shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in SignatureBuildDataSigQDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12744"/>
			<description>Entry Name in SignatureBuildDataSigQDict shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in SignatureBuildDataSigQDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12745"/>
			<description>Entry NonEFontNoWarn in SignatureBuildDataSigQDict shall have type Boolean</description>
			<test>containsNonEFontNoWarn == false || NonEFontNoWarnHasTypeBoolean == true</test>
			<error>
				<message>Entry NonEFontNoWarn in SignatureBuildDataSigQDict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12746"/>
			<description>Entry OS with type Array in SignatureBuildDataSigQDict shall be object ArrayOfStringsText</description>
			<test>OSHasTypeArray != true || OS_size == 1</test>
			<error>
				<message>Entry OS with type Array in SignatureBuildDataSigQDict is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildDataSigQDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12747"/>
			<description>Entry OS in SignatureBuildDataSigQDict shall have type Array</description>
			<test>containsOS == false || OSHasTypeArray == true</test>
			<error>
				<message>Entry OS in SignatureBuildDataSigQDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamFormArrayEntry">
			<id specification="ISO_32000_1_7" clause="6" testNumber="12764"/>
			<description>Entry with type Name in URTransformParamFormArray shall have one of values: Add, Delete, Import, BarcodePlaintext, FillIn, Export, SubmitStandalone, Online, SpawnTemplate</description>
			<test>HasTypeName != true || NameValue == "Add" || NameValue == "Delete" || NameValue == "FillIn" || NameValue == "Import" || NameValue == "Export" || NameValue == "SubmitStandalone" || NameValue == "SpawnTemplate" || NameValue == "BarcodePlaintext" || NameValue == "Online"</test>
			<error>
				<message>Entry %1 with type Name in URTransformParamFormArray has incorrect value %2 instead of Add, Delete, Import, BarcodePlaintext, FillIn, Export, SubmitStandalone, Online, SpawnTemplate</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamFormArrayEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12765"/>
			<description>Entry in URTransformParamFormArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in URTransformParamFormArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="1" testNumber="12883"/>
			<description>FieldBtnRadio shall not contain entries except Q, T, V, Parent, DV, TM, AA, DS, Opt, Ff, FT, Kids, TU, RV, DA</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'DA').length == 0</test>
			<error>
				<message>FieldBtnRadio contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Q' &amp;&amp; elem != 'T' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'DA').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="6" testNumber="12884"/>
			<description>Entry Q with type Integer in FieldBtnRadio shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldBtnRadio has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12885"/>
			<description>Entry Q in FieldBtnRadio shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldBtnRadio is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12886"/>
			<description>Entry T in FieldBtnRadio shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldBtnRadio is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12887"/>
			<description>Entry V in FieldBtnRadio shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldBtnRadio is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12888"/>
			<description>Entry Parent with type Dictionary in FieldBtnRadio shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldBtnRadio is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12889"/>
			<description>Entry Parent in FieldBtnRadio shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldBtnRadio is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12890"/>
			<description>Entry DV in FieldBtnRadio shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in FieldBtnRadio is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12891"/>
			<description>Entry TM in FieldBtnRadio shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldBtnRadio is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12892"/>
			<description>Entry AA with type Dictionary in FieldBtnRadio shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldBtnRadio is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12893"/>
			<description>Entry AA in FieldBtnRadio shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldBtnRadio is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12894"/>
			<description>Entry DS in FieldBtnRadio shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldBtnRadio is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12895"/>
			<description>Entry Opt with type Array in FieldBtnRadio shall be object ArrayOfStringsText</description>
			<test>OptHasTypeArray != true || Opt_size == 1</test>
			<error>
				<message>Entry Opt with type Array in FieldBtnRadio is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12896"/>
			<description>Entry Opt in FieldBtnRadio shall have type Array</description>
			<test>containsOpt == false || OptHasTypeArray == true</test>
			<error>
				<message>Entry Opt in FieldBtnRadio is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12897"/>
			<description>Entry Ff in FieldBtnRadio shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldBtnRadio is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="9" testNumber="12898"/>
			<description>Entry Ff with type Bitmask in FieldBtnRadio shall correspond special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitSet(16) &amp;&amp; fn:BitsClear(17 , 25) &amp;&amp; fn:BitsClear(27 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 1 &amp;&amp; ((FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldBtnRadio doesn't correspond special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitSet(16) &amp;&amp; fn:BitsClear(17 , 25) &amp;&amp; fn:BitsClear(27 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="7" testNumber="12899"/>
			<description>Entry FT in FieldBtnRadio is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldBtnRadio is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="6" testNumber="12900"/>
			<description>Entry FT with type Name in FieldBtnRadio shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in FieldBtnRadio has incorrect value %2 instead of Btn</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12901"/>
			<description>Entry FT in FieldBtnRadio shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldBtnRadio is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12902"/>
			<description>Entry Kids with type Array in FieldBtnRadio shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldBtnRadio is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12903"/>
			<description>Entry Kids in FieldBtnRadio shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldBtnRadio is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12904"/>
			<description>Entry TU in FieldBtnRadio shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldBtnRadio is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12905"/>
			<description>Entry RV with type Stream in FieldBtnRadio shall be object Stream</description>
			<test>RVHasTypeStream != true || RV_size == 1</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnRadio is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="10" testNumber="12906"/>
			<description>Entry RV with type Stream in FieldBtnRadio shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnRadio is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12907"/>
			<description>Entry RV in FieldBtnRadio shall have one of types: StringText, Stream</description>
			<test>containsRV == false || RVHasTypeStringText == true || RVHasTypeStream == true</test>
			<error>
				<message>Entry RV in FieldBtnRadio is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="7" testNumber="12908"/>
			<description>Entry DA in FieldBtnRadio is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldBtnRadio is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnRadio">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12909"/>
			<description>Entry DA in FieldBtnRadio shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldBtnRadio is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="1" testNumber="12937"/>
			<description>PointData shall not contain entries except XPTS, Subtype, Names, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'XPTS' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Names' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PointData contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'XPTS' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Names' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12938"/>
			<description>Entry XPTS with type Array in PointData shall be object ArrayOfArraysXPTSValues</description>
			<test>XPTSHasTypeArray != true || XPTS_size == 1</test>
			<error>
				<message>Entry XPTS with type Array in PointData is not object ArrayOfArraysXPTSValues</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="12939"/>
			<description>Entry XPTS in PointData is required</description>
			<test>containsXPTS == true</test>
			<error>
				<message>Entry XPTS in PointData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12940"/>
			<description>Entry XPTS in PointData shall have type Array</description>
			<test>containsXPTS == false || XPTSHasTypeArray == true</test>
			<error>
				<message>Entry XPTS in PointData is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="12941"/>
			<description>Entry Subtype in PointData is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in PointData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="6" testNumber="12942"/>
			<description>Entry Subtype with type Name in PointData shall have value Cloud</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Cloud"</test>
			<error>
				<message>Entry Subtype with type Name in PointData has incorrect value %2 instead of Cloud</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12943"/>
			<description>Entry Subtype in PointData shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in PointData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="12944"/>
			<description>Entry Names with type Array in PointData shall be object ArrayOfNamesInPtData</description>
			<test>NamesHasTypeArray != true || Names_size == 1</test>
			<error>
				<message>Entry Names with type Array in PointData is not object ArrayOfNamesInPtData</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="12945"/>
			<description>Entry Names in PointData is required</description>
			<test>containsNames == true</test>
			<error>
				<message>Entry Names in PointData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12946"/>
			<description>Entry Names in PointData shall have type Array</description>
			<test>containsNames == false || NamesHasTypeArray == true</test>
			<error>
				<message>Entry Names in PointData is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="12947"/>
			<description>Entry Type in PointData is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PointData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="6" testNumber="12948"/>
			<description>Entry Type with type Name in PointData shall have value PtData</description>
			<test>TypeHasTypeName != true || TypeNameValue == "PtData"</test>
			<error>
				<message>Entry Type with type Name in PointData has incorrect value %2 instead of PtData</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APointData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="12949"/>
			<description>Entry Type in PointData shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PointData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="1" testNumber="13043"/>
			<description>ActionHide shall not contain entries except H, T, Next, Type, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>ActionHide contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13044"/>
			<description>Entry H in ActionHide shall have type Boolean</description>
			<test>containsH == false || HHasTypeBoolean == true</test>
			<error>
				<message>Entry H in ActionHide is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13045"/>
			<description>Entry T with type Array in ActionHide shall be object ArrayOfActionHideAnnots</description>
			<test>THasTypeArray != true || T_size == 1</test>
			<error>
				<message>Entry T with type Array in ActionHide is not object ArrayOfActionHideAnnots</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13046"/>
			<description>Entry T with type Dictionary in ActionHide shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in ActionHide is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="7" testNumber="13047"/>
			<description>Entry T in ActionHide is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in ActionHide is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="10" testNumber="13048"/>
			<description>Entry T with type Dictionary in ActionHide shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in ActionHide is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13049"/>
			<description>Entry T in ActionHide shall have one of types: Array, StringText, Dictionary</description>
			<test>containsT == false || THasTypeArray == true || THasTypeStringText == true || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in ActionHide is not one of types: Array, StringText, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="9" testNumber="13050"/>
			<description>Entry T with type StringText in ActionHide shall correspond special case: fn:Eval(fn:IsFieldName(@T))</description>
			<test>THasTypeStringText != true || (TIsFieldName == true)</test>
			<error>
				<message>Entry T with type StringText in ActionHide doesn't correspond special case: fn:Eval(fn:IsFieldName(@T))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13051"/>
			<description>Entry Next with type Array in ActionHide shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionHide is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13052"/>
			<description>Entry Next with type Dictionary in ActionHide shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionHide is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13053"/>
			<description>Entry Next in ActionHide shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionHide is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="6" testNumber="13054"/>
			<description>Entry Type with type Name in ActionHide shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionHide has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13055"/>
			<description>Entry Type in ActionHide shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionHide is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="7" testNumber="13056"/>
			<description>Entry S in ActionHide is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionHide is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="6" testNumber="13057"/>
			<description>Entry S with type Name in ActionHide shall have value Hide</description>
			<test>SHasTypeName != true || SNameValue == "Hide"</test>
			<error>
				<message>Entry S with type Name in ActionHide has incorrect value %2 instead of Hide</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionHide">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13058"/>
			<description>Entry S in ActionHide shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionHide is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_7" clause="1" testNumber="13085"/>
			<description>OptContentLanguage shall not contain entries except Lang, Preferred</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Lang' &amp;&amp; elem != 'Preferred').length == 0</test>
			<error>
				<message>OptContentLanguage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Lang' &amp;&amp; elem != 'Preferred').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_7" clause="7" testNumber="13086"/>
			<description>Entry Lang in OptContentLanguage is required</description>
			<test>containsLang == true</test>
			<error>
				<message>Entry Lang in OptContentLanguage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13087"/>
			<description>Entry Lang in OptContentLanguage shall have type String</description>
			<test>containsLang == false || LangHasTypeString == true</test>
			<error>
				<message>Entry Lang in OptContentLanguage is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_7" clause="6" testNumber="13088"/>
			<description>Entry Preferred with type Name in OptContentLanguage shall have one of values: OFF, ON</description>
			<test>PreferredHasTypeName != true || PreferredNameValue == "ON" || PreferredNameValue == "OFF"</test>
			<error>
				<message>Entry Preferred with type Name in OptContentLanguage has incorrect value %2 instead of OFF, ON</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PreferredNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentLanguage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13089"/>
			<description>Entry Preferred in OptContentLanguage shall have type Name</description>
			<test>containsPreferred == false || PreferredHasTypeName == true</test>
			<error>
				<message>Entry Preferred in OptContentLanguage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="1" testNumber="13265"/>
			<description>AnnotCircle shall not contain entries except NM, T, AP, IT, AS, IRT, StructParent, C, RT, OC, F, Popup, ExData, P, BS, Border, Contents, RC, RD, CA, M, Subj, CreationDate, Subtype, IC, Rect, Type, BE</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'NM' &amp;&amp; elem != 'T' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'C' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'P' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'BE').length == 0</test>
			<error>
				<message>AnnotCircle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'NM' &amp;&amp; elem != 'T' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'C' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'P' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'BE').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13266"/>
			<description>Entry NM in AnnotCircle shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotCircle is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13267"/>
			<description>Entry T in AnnotCircle shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotCircle is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13268"/>
			<description>Entry AP with type Dictionary in AnnotCircle shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotCircle is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="11" testNumber="13269"/>
			<description>Entry AP in AnnotCircle is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13270"/>
			<description>Entry AP in AnnotCircle shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13271"/>
			<description>Entry IT in AnnotCircle shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotCircle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="11" testNumber="13272"/>
			<description>Entry AS in AnnotCircle is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13273"/>
			<description>Entry AS in AnnotCircle shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotCircle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13274"/>
			<description>Entry IRT with type Dictionary in AnnotCircle shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotCircle is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="11" testNumber="13275"/>
			<description>Entry IRT in AnnotCircle is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13276"/>
			<description>Entry IRT in AnnotCircle shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13277"/>
			<description>Entry StructParent in AnnotCircle shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotCircle is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13278"/>
			<description>Entry C with type Array in AnnotCircle shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotCircle is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13279"/>
			<description>Entry C in AnnotCircle shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotCircle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="6" testNumber="13280"/>
			<description>Entry RT with type Name in AnnotCircle shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotCircle has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13281"/>
			<description>Entry RT in AnnotCircle shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotCircle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13282"/>
			<description>Entry OC with type Dictionary in AnnotCircle shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotCircle is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13283"/>
			<description>Entry OC in AnnotCircle shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13284"/>
			<description>Entry F in AnnotCircle shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotCircle is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="9" testNumber="13285"/>
			<description>Entry F with type Bitmask in AnnotCircle shall correspond special case: fn:Eval(fn:IsPDFVersion(1.3 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotCircle doesn't correspond special case: fn:Eval(fn:IsPDFVersion(1.3 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13286"/>
			<description>Entry Popup with type Dictionary in AnnotCircle shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotCircle is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="10" testNumber="13287"/>
			<description>Entry Popup with type Dictionary in AnnotCircle shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotCircle is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13288"/>
			<description>Entry Popup in AnnotCircle shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13289"/>
			<description>Entry ExData with type Dictionary in AnnotCircle shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotCircle is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13290"/>
			<description>Entry ExData in AnnotCircle shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13291"/>
			<description>Entry P with type Dictionary in AnnotCircle shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotCircle is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="10" testNumber="13292"/>
			<description>Entry P with type Dictionary in AnnotCircle shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotCircle is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13293"/>
			<description>Entry P in AnnotCircle shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13294"/>
			<description>Entry BS with type Dictionary in AnnotCircle shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotCircle is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13295"/>
			<description>Entry BS in AnnotCircle shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13296"/>
			<description>Entry Border with type Array in AnnotCircle shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotCircle is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13297"/>
			<description>Entry Border in AnnotCircle shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotCircle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13298"/>
			<description>Entry Contents in AnnotCircle shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotCircle is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13299"/>
			<description>Entry RC with type Stream in AnnotCircle shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotCircle is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="10" testNumber="13300"/>
			<description>Entry RC with type Stream in AnnotCircle shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotCircle is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13301"/>
			<description>Entry RC in AnnotCircle shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotCircle is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13302"/>
			<description>Entry RD in AnnotCircle shall have type Rectangle</description>
			<test>containsRD == false || RDHasTypeRectangle == true</test>
			<error>
				<message>Entry RD in AnnotCircle is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="9" testNumber="13303"/>
			<description>Entry RD with type Rectangle in AnnotCircle shall correspond special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</description>
			<test>RDHasTypeRectangle != true || ((RD0NumberValue &gt;= 0) &amp;&amp; (RD1NumberValue &gt;= 0) &amp;&amp; (RD2NumberValue &gt;= 0) &amp;&amp; (RD3NumberValue &gt;= 0) &amp;&amp; ((RD1NumberValue + RD3NumberValue) &lt; RectRectHeight) &amp;&amp; ((RD0NumberValue + RD2NumberValue) &lt; RectRectWidth))</test>
			<error>
				<message>Entry RD with type Rectangle in AnnotCircle doesn't correspond special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="14" testNumber="13304"/>
			<description>Entry CA with type Number in AnnotCircle shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotCircle doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13305"/>
			<description>Entry CA in AnnotCircle shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotCircle is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13306"/>
			<description>Entry M in AnnotCircle shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotCircle is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13307"/>
			<description>Entry Subj in AnnotCircle shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotCircle is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13308"/>
			<description>Entry CreationDate in AnnotCircle shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotCircle is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="7" testNumber="13309"/>
			<description>Entry Subtype in AnnotCircle is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="6" testNumber="13310"/>
			<description>Entry Subtype with type Name in AnnotCircle shall have value Circle</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Circle"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotCircle has incorrect value %2 instead of Circle</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13311"/>
			<description>Entry Subtype in AnnotCircle shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotCircle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13312"/>
			<description>Entry IC with type Array in AnnotCircle shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>ICHasTypeArray != true || IC_size == 1</test>
			<error>
				<message>Entry IC with type Array in AnnotCircle is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13313"/>
			<description>Entry IC in AnnotCircle shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotCircle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="7" testNumber="13314"/>
			<description>Entry Rect in AnnotCircle is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotCircle is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13315"/>
			<description>Entry Rect in AnnotCircle shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotCircle is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="6" testNumber="13316"/>
			<description>Entry Type with type Name in AnnotCircle shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotCircle has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13317"/>
			<description>Entry Type in AnnotCircle shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotCircle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13318"/>
			<description>Entry BE with type Dictionary in AnnotCircle shall be object BorderEffect</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in AnnotCircle is not object BorderEffect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCircle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13319"/>
			<description>Entry BE in AnnotCircle shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotCircle is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13403"/>
			<description>Entry with type Dictionary in ArrayOfFunctions shall be one of objects FunctionType2, FunctionType3</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfFunctions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13404"/>
			<description>Entry with type Stream in ArrayOfFunctions shall be one of objects FunctionType0, FunctionType4</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfFunctions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="13405"/>
			<description>Entry with type Stream in ArrayOfFunctions shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfFunctions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13406"/>
			<description>Entry in ArrayOfFunctions shall have one of types: Dictionary, Stream</description>
			<test>HasTypeDictionary == true || HasTypeStream == true</test>
			<error>
				<message>Entry %1 in ArrayOfFunctions is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_7" clause="1" testNumber="13436"/>
			<description>AddActionPageObject shall not contain entries except O, C</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'O' &amp;&amp; elem != 'C').length == 0</test>
			<error>
				<message>AddActionPageObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'O' &amp;&amp; elem != 'C').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13437"/>
			<description>Entry O with type Dictionary in AddActionPageObject shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>OHasTypeDictionary != true || O_size == 1</test>
			<error>
				<message>Entry O with type Dictionary in AddActionPageObject is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13438"/>
			<description>Entry O in AddActionPageObject shall have type Dictionary</description>
			<test>containsO == false || OHasTypeDictionary == true</test>
			<error>
				<message>Entry O in AddActionPageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13439"/>
			<description>Entry C with type Dictionary in AddActionPageObject shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in AddActionPageObject is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionPageObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13440"/>
			<description>Entry C in AddActionPageObject shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in AddActionPageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Integers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="13461"/>
			<description>ArrayOf_2Integers shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2Integers contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Integers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13462"/>
			<description>Entry 0 in ArrayOf_2Integers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Integers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13463"/>
			<description>Entry 1 in ArrayOf_2Integers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="1" testNumber="13660"/>
			<description>XObjectFormPS shall not contain entries except Level1, FDecodeParms, Length, Type, Filter, Subtype, F, DecodeParms, FFilter</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Level1' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'F' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FFilter').length == 0</test>
			<error>
				<message>XObjectFormPS contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Level1' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'F' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FFilter').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13661"/>
			<description>Entry Level1 with type Stream in XObjectFormPS shall be object Stream</description>
			<test>Level1HasTypeStream != true || Level1_size == 1</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPS is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="5" testNumber="13662"/>
			<description>Entry Level1 in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsLevel1 == false</test>
			<error>
				<message>Entry Level1 in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="10" testNumber="13663"/>
			<description>Entry Level1 with type Stream in XObjectFormPS shall be indirect</description>
			<test>Level1HasTypeStream != true || isLevel1Indirect == true</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPS is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13664"/>
			<description>Entry Level1 in XObjectFormPS shall have type Stream</description>
			<test>containsLevel1 == false || Level1HasTypeStream == true</test>
			<error>
				<message>Entry Level1 in XObjectFormPS is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13665"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPS shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPS is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13666"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormPS shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormPS is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="5" testNumber="13667"/>
			<description>Entry FDecodeParms in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsFDecodeParms == false</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13668"/>
			<description>Entry FDecodeParms in XObjectFormPS shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPS is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="9" testNumber="13669"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPS shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPS doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="7" testNumber="13670"/>
			<description>Entry Length in XObjectFormPS is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormPS is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="5" testNumber="13671"/>
			<description>Entry Length in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsLength == false</test>
			<error>
				<message>Entry Length in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13672"/>
			<description>Entry Length in XObjectFormPS shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormPS is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="5" testNumber="13673"/>
			<description>Entry Type in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsType == false</test>
			<error>
				<message>Entry Type in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="6" testNumber="13674"/>
			<description>Entry Type with type Name in XObjectFormPS shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormPS has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13675"/>
			<description>Entry Type in XObjectFormPS shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormPS is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13676"/>
			<description>Entry Filter with type Array in XObjectFormPS shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPS is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="5" testNumber="13677"/>
			<description>Entry Filter in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsFilter == false</test>
			<error>
				<message>Entry Filter in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="6" testNumber="13678"/>
			<description>Entry Filter with type Name in XObjectFormPS shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormPS has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13679"/>
			<description>Entry Filter in XObjectFormPS shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in XObjectFormPS is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="9" testNumber="13680"/>
			<description>Entry Filter with type Array in XObjectFormPS shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPS doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="7" testNumber="13681"/>
			<description>Entry Subtype in XObjectFormPS is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPS is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="5" testNumber="13682"/>
			<description>Entry Subtype in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsSubtype == false</test>
			<error>
				<message>Entry Subtype in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="6" testNumber="13683"/>
			<description>Entry Subtype with type Name in XObjectFormPS shall have value PS</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PS"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormPS has incorrect value %2 instead of PS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13684"/>
			<description>Entry Subtype in XObjectFormPS shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPS is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13685"/>
			<description>Entry F with type Dictionary in XObjectFormPS shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormPS is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="5" testNumber="13686"/>
			<description>Entry F in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsF == false</test>
			<error>
				<message>Entry F in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13687"/>
			<description>Entry F in XObjectFormPS shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectFormPS is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13688"/>
			<description>Entry DecodeParms with type Array in XObjectFormPS shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPS is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13689"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormPS shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormPS is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="5" testNumber="13690"/>
			<description>Entry DecodeParms in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsDecodeParms == false</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13691"/>
			<description>Entry DecodeParms in XObjectFormPS shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPS is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="9" testNumber="13692"/>
			<description>Entry DecodeParms with type Array in XObjectFormPS shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPS doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13693"/>
			<description>Entry FFilter with type Array in XObjectFormPS shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPS is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="5" testNumber="13694"/>
			<description>Entry FFilter in XObjectFormPS is deprecated since PDF 1.3</description>
			<test>containsFFilter == false</test>
			<error>
				<message>Entry FFilter in XObjectFormPS is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="6" testNumber="13695"/>
			<description>Entry FFilter with type Name in XObjectFormPS shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormPS has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13696"/>
			<description>Entry FFilter in XObjectFormPS shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in XObjectFormPS is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_7" clause="9" testNumber="13697"/>
			<description>Entry FFilter with type Array in XObjectFormPS shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPS doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="13795"/>
			<description>LabDict shall not contain entries except Range, WhitePoint, BlackPoint</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Range' &amp;&amp; elem != 'WhitePoint' &amp;&amp; elem != 'BlackPoint').length == 0</test>
			<error>
				<message>LabDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Range' &amp;&amp; elem != 'WhitePoint' &amp;&amp; elem != 'BlackPoint').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13796"/>
			<description>Entry Range with type Array in LabDict shall be object LabRangeArray</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in LabDict is not object LabRangeArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13797"/>
			<description>Entry Range in LabDict shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in LabDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13798"/>
			<description>Entry WhitePoint with type Array in LabDict shall be object WhitepointArray</description>
			<test>WhitePointHasTypeArray != true || WhitePoint_size == 1</test>
			<error>
				<message>Entry WhitePoint with type Array in LabDict is not object WhitepointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="13799"/>
			<description>Entry WhitePoint in LabDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in LabDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13800"/>
			<description>Entry WhitePoint in LabDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in LabDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13801"/>
			<description>Entry BlackPoint with type Array in LabDict shall be object BlackpointArray</description>
			<test>BlackPointHasTypeArray != true || BlackPoint_size == 1</test>
			<error>
				<message>Entry BlackPoint with type Array in LabDict is not object BlackpointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13802"/>
			<description>Entry BlackPoint in LabDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in LabDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShowNameTreeResourcesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13814"/>
			<description>Entry with type Stream in SlideShowNameTreeResources shall be one of objects XObjectImage, EmbeddedFileStream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in SlideShowNameTreeResources is not one of objects XObjectImage, EmbeddedFileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="1" testNumber="13977"/>
			<description>FontFileType1 shall not contain entries except FFilter, Subtype, Filter, Length2, DecodeParms, Length, DL, Length3, FDecodeParms, F, Length1</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FFilter' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Length1').length == 0</test>
			<error>
				<message>FontFileType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FFilter' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Length1').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13978"/>
			<description>Entry FFilter with type Array in FontFileType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFileType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="13979"/>
			<description>Entry FFilter with type Name in FontFileType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFileType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13980"/>
			<description>Entry FFilter in FontFileType1 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in FontFileType1 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="13981"/>
			<description>Entry FFilter with type Array in FontFileType1 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFileType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13982"/>
			<description>Entry Subtype in FontFileType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFileType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13983"/>
			<description>Entry Filter with type Array in FontFileType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFileType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="13984"/>
			<description>Entry Filter with type Name in FontFileType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFileType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13985"/>
			<description>Entry Filter in FontFileType1 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in FontFileType1 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="13986"/>
			<description>Entry Filter with type Array in FontFileType1 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFileType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="13987"/>
			<description>Entry Length2 in FontFileType1 is required</description>
			<test>containsLength2 == true</test>
			<error>
				<message>Entry Length2 in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13988"/>
			<description>Entry Length2 in FontFileType1 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="13989"/>
			<description>Entry Length2 with type Integer in FontFileType1 shall correspond special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFileType1 doesn't correspond special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13990"/>
			<description>Entry DecodeParms with type Array in FontFileType1 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFileType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="13991"/>
			<description>Entry DecodeParms with type Dictionary in FontFileType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFileType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13992"/>
			<description>Entry DecodeParms in FontFileType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFileType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="13993"/>
			<description>Entry DecodeParms with type Array in FontFileType1 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFileType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="13994"/>
			<description>Entry Length in FontFileType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13995"/>
			<description>Entry Length in FontFileType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13996"/>
			<description>Entry DL in FontFileType1 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="13997"/>
			<description>Entry DL with type Integer in FontFileType1 shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFileType1 doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="13998"/>
			<description>Entry Length3 in FontFileType1 is required</description>
			<test>containsLength3 == true</test>
			<error>
				<message>Entry Length3 in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="13999"/>
			<description>Entry Length3 in FontFileType1 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="14000"/>
			<description>Entry Length3 with type Integer in FontFileType1 shall correspond special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFileType1 doesn't correspond special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14001"/>
			<description>Entry FDecodeParms with type Array in FontFileType1 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFileType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14002"/>
			<description>Entry FDecodeParms with type Dictionary in FontFileType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFileType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14003"/>
			<description>Entry FDecodeParms in FontFileType1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFileType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="14004"/>
			<description>Entry FDecodeParms with type Array in FontFileType1 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFileType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14005"/>
			<description>Entry F with type Dictionary in FontFileType1 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFileType1 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14006"/>
			<description>Entry F in FontFileType1 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FontFileType1 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="14007"/>
			<description>Entry Length1 in FontFileType1 is required</description>
			<test>containsLength1 == true</test>
			<error>
				<message>Entry Length1 in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14008"/>
			<description>Entry Length1 in FontFileType1 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="14009"/>
			<description>Entry Length1 with type Integer in FontFileType1 shall correspond special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFileType1 doesn't correspond special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DViewAddEntries">
			<id specification="ISO_32000_1_7" clause="1" testNumber="14043"/>
			<description>3DViewAddEntries shall not contain entries except Params, Snapshot</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Params' &amp;&amp; elem != 'Snapshot').length == 0</test>
			<error>
				<message>3DViewAddEntries contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Params' &amp;&amp; elem != 'Snapshot').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DViewAddEntries">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14044"/>
			<description>Entry Params with type Array in 3DViewAddEntries shall be object ArrayOfViewParams</description>
			<test>ParamsHasTypeArray != true || Params_size == 1</test>
			<error>
				<message>Entry Params with type Array in 3DViewAddEntries is not object ArrayOfViewParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DViewAddEntries">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14045"/>
			<description>Entry Params in 3DViewAddEntries shall have type Array</description>
			<test>containsParams == false || ParamsHasTypeArray == true</test>
			<error>
				<message>Entry Params in 3DViewAddEntries is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DViewAddEntries">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14046"/>
			<description>Entry Snapshot with type Stream in 3DViewAddEntries shall be object XObjectImage</description>
			<test>SnapshotHasTypeStream != true || Snapshot_size == 1</test>
			<error>
				<message>Entry Snapshot with type Stream in 3DViewAddEntries is not object XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DViewAddEntries">
			<id specification="ISO_32000_1_7" clause="10" testNumber="14047"/>
			<description>Entry Snapshot with type Stream in 3DViewAddEntries shall be indirect</description>
			<test>SnapshotHasTypeStream != true || isSnapshotIndirect == true</test>
			<error>
				<message>Entry Snapshot with type Stream in 3DViewAddEntries is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DViewAddEntries">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14048"/>
			<description>Entry Snapshot in 3DViewAddEntries shall have type Stream</description>
			<test>containsSnapshot == false || SnapshotHasTypeStream == true</test>
			<error>
				<message>Entry Snapshot in 3DViewAddEntries is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="1" testNumber="14086"/>
			<description>ProjectedCoordinateSystem shall not contain entries except Type, EPSG, WKT</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'EPSG' &amp;&amp; elem != 'WKT').length == 0</test>
			<error>
				<message>ProjectedCoordinateSystem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'EPSG' &amp;&amp; elem != 'WKT').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="7" testNumber="14087"/>
			<description>Entry Type in ProjectedCoordinateSystem is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ProjectedCoordinateSystem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14088"/>
			<description>Entry Type with type Name in ProjectedCoordinateSystem shall have value PROJCS</description>
			<test>TypeHasTypeName != true || TypeNameValue == "PROJCS"</test>
			<error>
				<message>Entry Type with type Name in ProjectedCoordinateSystem has incorrect value %2 instead of PROJCS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14089"/>
			<description>Entry Type in ProjectedCoordinateSystem shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ProjectedCoordinateSystem is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="11" testNumber="14090"/>
			<description>Entry EPSG in ProjectedCoordinateSystem is required, when fn:IsRequired(fn:Not(fn:IsPresent(WKT)))</description>
			<test>(containsEPSG == true || (((containsWKT == true)) != true) == false)</test>
			<error>
				<message>Entry EPSG in ProjectedCoordinateSystem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14091"/>
			<description>Entry EPSG in ProjectedCoordinateSystem shall have type Integer</description>
			<test>containsEPSG == false || EPSGHasTypeInteger == true</test>
			<error>
				<message>Entry EPSG in ProjectedCoordinateSystem is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="11" testNumber="14092"/>
			<description>Entry WKT in ProjectedCoordinateSystem is required, when fn:IsRequired(fn:Not(fn:IsPresent(EPSG)))</description>
			<test>(containsWKT == true || (((containsEPSG == true)) != true) == false)</test>
			<error>
				<message>Entry WKT in ProjectedCoordinateSystem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjectedCoordinateSystem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14093"/>
			<description>Entry WKT in ProjectedCoordinateSystem shall have type StringAscii</description>
			<test>containsWKT == false || WKTHasTypeStringAscii == true</test>
			<error>
				<message>Entry WKT in ProjectedCoordinateSystem is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASolidities">
			<id specification="ISO_32000_1_7" clause="14" testNumber="14104"/>
			<description>Entry Default with type Number in Solidities shall correspond possible value predicate: fn:Eval((@Default &gt;= 0) &amp;&amp; (@Default &lt;= 1))</description>
			<test>DefaultHasTypeNumber != true || (DefaultNumberValue &gt;= 0) &amp;&amp; (DefaultNumberValue &lt;= 1)</test>
			<error>
				<message>Entry Default with type Number in Solidities doesn't correspond possible value predicate: fn:Eval((@Default &gt;= 0) &amp;&amp; (@Default &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASolidities">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14105"/>
			<description>Entry Default in Solidities shall have type Number</description>
			<test>containsDefault == false || DefaultHasTypeNumber == true</test>
			<error>
				<message>Entry Default in Solidities is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="1" testNumber="14286"/>
			<description>HalftoneType10 shall not contain entries except HalftoneType, Filter, Ysquare, FFilter, HalftoneName, Type, DL, FDecodeParms, Length, Xsquare, DecodeParms, F, TransferFunction</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'HalftoneType' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Ysquare' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Xsquare' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'TransferFunction').length == 0</test>
			<error>
				<message>HalftoneType10 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'HalftoneType' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Ysquare' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'HalftoneName' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Xsquare' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'TransferFunction').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="7" testNumber="14287"/>
			<description>Entry HalftoneType in HalftoneType10 is required</description>
			<test>containsHalftoneType == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14288"/>
			<description>Entry HalftoneType with type Integer in HalftoneType10 shall have value 10</description>
			<test>HalftoneTypeHasTypeInteger != true || HalftoneTypeIntegerValue == 10</test>
			<error>
				<message>Entry HalftoneType with type Integer in HalftoneType10 has incorrect value %2 instead of 10</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HalftoneTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14289"/>
			<description>Entry HalftoneType in HalftoneType10 shall have type Integer</description>
			<test>containsHalftoneType == false || HalftoneTypeHasTypeInteger == true</test>
			<error>
				<message>Entry HalftoneType in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14290"/>
			<description>Entry Filter with type Array in HalftoneType10 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType10 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14291"/>
			<description>Entry Filter with type Name in HalftoneType10 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in HalftoneType10 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14292"/>
			<description>Entry Filter in HalftoneType10 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in HalftoneType10 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="9" testNumber="14293"/>
			<description>Entry Filter with type Array in HalftoneType10 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in HalftoneType10 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="7" testNumber="14294"/>
			<description>Entry Ysquare in HalftoneType10 is required</description>
			<test>containsYsquare == true</test>
			<error>
				<message>Entry Ysquare in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="14" testNumber="14295"/>
			<description>Entry Ysquare with type Integer in HalftoneType10 shall correspond possible value predicate: fn:Eval(@Ysquare &gt; 0)</description>
			<test>YsquareHasTypeInteger != true || YsquareIntegerValue &gt; 0</test>
			<error>
				<message>Entry Ysquare with type Integer in HalftoneType10 doesn't correspond possible value predicate: fn:Eval(@Ysquare &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14296"/>
			<description>Entry Ysquare in HalftoneType10 shall have type Integer</description>
			<test>containsYsquare == false || YsquareHasTypeInteger == true</test>
			<error>
				<message>Entry Ysquare in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14297"/>
			<description>Entry FFilter with type Array in HalftoneType10 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType10 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14298"/>
			<description>Entry FFilter with type Name in HalftoneType10 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in HalftoneType10 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14299"/>
			<description>Entry FFilter in HalftoneType10 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in HalftoneType10 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="9" testNumber="14300"/>
			<description>Entry FFilter with type Array in HalftoneType10 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in HalftoneType10 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14301"/>
			<description>Entry HalftoneName in HalftoneType10 shall have type StringByte</description>
			<test>containsHalftoneName == false || HalftoneNameHasTypeStringByte == true</test>
			<error>
				<message>Entry HalftoneName in HalftoneType10 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14302"/>
			<description>Entry Type with type Name in HalftoneType10 shall have value Halftone</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Halftone"</test>
			<error>
				<message>Entry Type with type Name in HalftoneType10 has incorrect value %2 instead of Halftone</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14303"/>
			<description>Entry Type in HalftoneType10 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in HalftoneType10 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14304"/>
			<description>Entry DL in HalftoneType10 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="9" testNumber="14305"/>
			<description>Entry DL with type Integer in HalftoneType10 shall correspond special case: fn:Eval(fn:StreamLength(DL) == ((@Xsquare * @Xsquare) + (@Ysquare * @Ysquare)))</description>
			<test>DLHasTypeInteger != true || (DLStreamLength == ((XsquareIntegerValue * XsquareIntegerValue) + (YsquareIntegerValue * YsquareIntegerValue)))</test>
			<error>
				<message>Entry DL with type Integer in HalftoneType10 doesn't correspond special case: fn:Eval(fn:StreamLength(DL) == ((@Xsquare * @Xsquare) + (@Ysquare * @Ysquare)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14306"/>
			<description>Entry FDecodeParms with type Array in HalftoneType10 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType10 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14307"/>
			<description>Entry FDecodeParms with type Dictionary in HalftoneType10 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in HalftoneType10 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14308"/>
			<description>Entry FDecodeParms in HalftoneType10 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in HalftoneType10 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="9" testNumber="14309"/>
			<description>Entry FDecodeParms with type Array in HalftoneType10 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in HalftoneType10 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="7" testNumber="14310"/>
			<description>Entry Length in HalftoneType10 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14311"/>
			<description>Entry Length in HalftoneType10 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="7" testNumber="14312"/>
			<description>Entry Xsquare in HalftoneType10 is required</description>
			<test>containsXsquare == true</test>
			<error>
				<message>Entry Xsquare in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="14" testNumber="14313"/>
			<description>Entry Xsquare with type Integer in HalftoneType10 shall correspond possible value predicate: fn:Eval(@Xsquare &gt; 0)</description>
			<test>XsquareHasTypeInteger != true || XsquareIntegerValue &gt; 0</test>
			<error>
				<message>Entry Xsquare with type Integer in HalftoneType10 doesn't correspond possible value predicate: fn:Eval(@Xsquare &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14314"/>
			<description>Entry Xsquare in HalftoneType10 shall have type Integer</description>
			<test>containsXsquare == false || XsquareHasTypeInteger == true</test>
			<error>
				<message>Entry Xsquare in HalftoneType10 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14315"/>
			<description>Entry DecodeParms with type Array in HalftoneType10 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType10 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14316"/>
			<description>Entry DecodeParms with type Dictionary in HalftoneType10 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in HalftoneType10 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14317"/>
			<description>Entry DecodeParms in HalftoneType10 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in HalftoneType10 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="9" testNumber="14318"/>
			<description>Entry DecodeParms with type Array in HalftoneType10 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in HalftoneType10 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14319"/>
			<description>Entry F with type Dictionary in HalftoneType10 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in HalftoneType10 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14320"/>
			<description>Entry F in HalftoneType10 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in HalftoneType10 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14321"/>
			<description>Entry TransferFunction with type Dictionary in HalftoneType10 shall be one of objects FunctionType2, FunctionType3</description>
			<test>TransferFunctionHasTypeDictionary != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Dictionary in HalftoneType10 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14322"/>
			<description>Entry TransferFunction with type Stream in HalftoneType10 shall be one of objects FunctionType0, FunctionType4</description>
			<test>TransferFunctionHasTypeStream != true || TransferFunction_size == 1</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType10 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="11" testNumber="14323"/>
			<description>Entry TransferFunction in HalftoneType10 is required, when fn:IsRequired(parent::@HalftoneType== 5)</description>
			<test>(containsTransferFunction == true || (parentHalftoneTypeIntegerValue == 5) == false)</test>
			<error>
				<message>Entry TransferFunction in HalftoneType10 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="10" testNumber="14324"/>
			<description>Entry TransferFunction with type Stream in HalftoneType10 shall be indirect</description>
			<test>TransferFunctionHasTypeStream != true || isTransferFunctionIndirect == true</test>
			<error>
				<message>Entry TransferFunction with type Stream in HalftoneType10 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14325"/>
			<description>Entry TransferFunction with type Name in HalftoneType10 shall have value Identity</description>
			<test>TransferFunctionHasTypeName != true || TransferFunctionNameValue == "Identity"</test>
			<error>
				<message>Entry TransferFunction with type Name in HalftoneType10 has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransferFunctionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType10">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14326"/>
			<description>Entry TransferFunction in HalftoneType10 shall have one of types: Name, Dictionary, Stream</description>
			<test>containsTransferFunction == false || TransferFunctionHasTypeName == true || TransferFunctionHasTypeDictionary == true || TransferFunctionHasTypeStream == true</test>
			<error>
				<message>Entry TransferFunction in HalftoneType10 is not one of types: Name, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="1" testNumber="14381"/>
			<description>DevExtensions shall not contain entries except ExtensionLevel, Type, BaseVersion</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ExtensionLevel' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'BaseVersion').length == 0</test>
			<error>
				<message>DevExtensions contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ExtensionLevel' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'BaseVersion').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="7" testNumber="14382"/>
			<description>Entry ExtensionLevel in DevExtensions is required</description>
			<test>containsExtensionLevel == true</test>
			<error>
				<message>Entry ExtensionLevel in DevExtensions is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="16" testNumber="14383"/>
			<description>If entry ExtensionLevel with type Integer in DevExtensions corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>ExtensionLevelHasTypeInteger != true || (isExtensionLevelIndirect == false)</test>
			<error>
				<message>Entry ExtensionLevel with type Integer in DevExtensions is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14384"/>
			<description>Entry ExtensionLevel in DevExtensions shall have type Integer</description>
			<test>containsExtensionLevel == false || ExtensionLevelHasTypeInteger == true</test>
			<error>
				<message>Entry ExtensionLevel in DevExtensions is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="16" testNumber="14385"/>
			<description>If entry Type with type Name in DevExtensions corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>TypeHasTypeName != true || (isTypeIndirect == false)</test>
			<error>
				<message>Entry Type with type Name in DevExtensions is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14386"/>
			<description>Entry Type with type Name in DevExtensions shall have value DeveloperExtensions</description>
			<test>TypeHasTypeName != true || TypeNameValue == "DeveloperExtensions"</test>
			<error>
				<message>Entry Type with type Name in DevExtensions has incorrect value %2 instead of DeveloperExtensions</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14387"/>
			<description>Entry Type in DevExtensions shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in DevExtensions is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="7" testNumber="14388"/>
			<description>Entry BaseVersion in DevExtensions is required</description>
			<test>containsBaseVersion == true</test>
			<error>
				<message>Entry BaseVersion in DevExtensions is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="16" testNumber="14389"/>
			<description>If entry BaseVersion with type Name in DevExtensions corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>BaseVersionHasTypeName != true || (isBaseVersionIndirect == false)</test>
			<error>
				<message>Entry BaseVersion with type Name in DevExtensions is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14390"/>
			<description>Entry BaseVersion with type Name in DevExtensions shall have one of values: 2.0, 1.7</description>
			<test>BaseVersionHasTypeName != true || BaseVersionNameValue == "1.7" || BaseVersionNameValue == "2.0"</test>
			<error>
				<message>Entry BaseVersion with type Name in DevExtensions has incorrect value %2 instead of 2.0, 1.7</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BaseVersionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADevExtensions">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14391"/>
			<description>Entry BaseVersion in DevExtensions shall have type Name</description>
			<test>containsBaseVersion == false || BaseVersionHasTypeName == true</test>
			<error>
				<message>Entry BaseVersion in DevExtensions is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDPartsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14410"/>
			<description>Entry with type Dictionary in ArrayOfDParts shall be object DPart</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfDParts is not object DPart</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDPartsEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="14411"/>
			<description>Entry with type Dictionary in ArrayOfDParts shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfDParts is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDPartsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14412"/>
			<description>Entry in ArrayOfDParts shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfDParts is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFDDictEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14434"/>
			<description>Entry with type Dictionary in FDDict shall be object CIDFontDescriptorMetrics</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in FDDict is not object CIDFontDescriptorMetrics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFDDictEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14435"/>
			<description>Entry in FDDict shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in FDDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Booleans">
			<id specification="ISO_32000_1_7" clause="2" testNumber="14450"/>
			<description>ArrayOf_2Booleans shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2Booleans contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Booleans">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14451"/>
			<description>Entry 1 in ArrayOf_2Booleans shall have type Boolean</description>
			<test>size &lt;= 1 || entry1HasTypeBoolean == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2Booleans is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Booleans">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14452"/>
			<description>Entry 0 in ArrayOf_2Booleans shall have type Boolean</description>
			<test>size &lt;= 0 || entry0HasTypeBoolean == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2Booleans is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="1" testNumber="14476"/>
			<description>DPart shall not contain entries except Parent, Start, End, Type, DPM, DParts</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Parent' &amp;&amp; elem != 'Start' &amp;&amp; elem != 'End' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DPM' &amp;&amp; elem != 'DParts').length == 0</test>
			<error>
				<message>DPart contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Parent' &amp;&amp; elem != 'Start' &amp;&amp; elem != 'End' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DPM' &amp;&amp; elem != 'DParts').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14477"/>
			<description>Entry Parent with type Dictionary in DPart shall be one of objects DPart, DPartRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in DPart is not one of objects DPart, DPartRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="7" testNumber="14478"/>
			<description>Entry Parent in DPart is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in DPart is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="10" testNumber="14479"/>
			<description>Entry Parent with type Dictionary in DPart shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in DPart is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14480"/>
			<description>Entry Parent in DPart shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in DPart is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14481"/>
			<description>Entry Start with type Dictionary in DPart shall be object PageObject</description>
			<test>StartHasTypeDictionary != true || Start_size == 1</test>
			<error>
				<message>Entry Start with type Dictionary in DPart is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="11" testNumber="14482"/>
			<description>Entry Start in DPart is required, when fn:IsRequired(fn:Not(fn:IsPresent(DParts)))</description>
			<test>(containsStart == true || (((containsDParts == true)) != true) == false)</test>
			<error>
				<message>Entry Start in DPart is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="10" testNumber="14483"/>
			<description>Entry Start with type Dictionary in DPart shall be indirect</description>
			<test>StartHasTypeDictionary != true || isStartIndirect == true</test>
			<error>
				<message>Entry Start with type Dictionary in DPart is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14484"/>
			<description>Entry Start in DPart shall have type Dictionary</description>
			<test>containsStart == false || StartHasTypeDictionary == true</test>
			<error>
				<message>Entry Start in DPart is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14485"/>
			<description>Entry End with type Dictionary in DPart shall be object PageObject</description>
			<test>EndHasTypeDictionary != true || End_size == 1</test>
			<error>
				<message>Entry End with type Dictionary in DPart is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="10" testNumber="14486"/>
			<description>Entry End with type Dictionary in DPart shall be indirect</description>
			<test>EndHasTypeDictionary != true || isEndIndirect == true</test>
			<error>
				<message>Entry End with type Dictionary in DPart is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14487"/>
			<description>Entry End in DPart shall have type Dictionary</description>
			<test>containsEnd == false || EndHasTypeDictionary == true</test>
			<error>
				<message>Entry End in DPart is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14488"/>
			<description>Entry Type with type Name in DPart shall have value DPart</description>
			<test>TypeHasTypeName != true || TypeNameValue == "DPart"</test>
			<error>
				<message>Entry Type with type Name in DPart has incorrect value %2 instead of DPart</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14489"/>
			<description>Entry Type in DPart shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in DPart is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14490"/>
			<description>Entry DPM with type Dictionary in DPart shall be object DPM</description>
			<test>DPMHasTypeDictionary != true || DPM_size == 1</test>
			<error>
				<message>Entry DPM with type Dictionary in DPart is not object DPM</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14491"/>
			<description>Entry DPM in DPart shall have type Dictionary</description>
			<test>containsDPM == false || DPMHasTypeDictionary == true</test>
			<error>
				<message>Entry DPM in DPart is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14492"/>
			<description>Entry DParts with type Array in DPart shall be object ArrayOfDPartArrays</description>
			<test>DPartsHasTypeArray != true || DParts_size == 1</test>
			<error>
				<message>Entry DParts with type Array in DPart is not object ArrayOfDPartArrays</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="11" testNumber="14493"/>
			<description>Entry DParts in DPart is required, when fn:IsRequired(fn:Not(fn:IsPresent(Start)))</description>
			<test>(containsDParts == true || (((containsStart == true)) != true) == false)</test>
			<error>
				<message>Entry DParts in DPart is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14494"/>
			<description>Entry DParts in DPart shall have type Array</description>
			<test>containsDParts == false || DPartsHasTypeArray == true</test>
			<error>
				<message>Entry DParts in DPart is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPart">
			<id specification="ISO_32000_1_7" clause="9" testNumber="14495"/>
			<description>Entry DParts with type Array in DPart shall correspond special case: fn:Eval(fn:ArrayLength(DParts) &gt; 0)</description>
			<test>DPartsHasTypeArray != true || (DPartsArraySize &gt; 0)</test>
			<error>
				<message>Entry DParts with type Array in DPart doesn't correspond special case: fn:Eval(fn:ArrayLength(DParts) &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSoftwareVersionsEntry">
			<id specification="ISO_32000_1_7" clause="14" testNumber="14525"/>
			<description>Entry with type Integer in ArrayOfSoftwareVersions shall correspond possible value predicate: fn:Eval(@* &gt;= 0)</description>
			<test>HasTypeInteger != true || IntegerValue &gt;= 0</test>
			<error>
				<message>Entry %1 with type Integer in ArrayOfSoftwareVersions doesn't correspond possible value predicate: fn:Eval(@* &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSoftwareVersionsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14526"/>
			<description>Entry in ArrayOfSoftwareVersions shall have type Integer</description>
			<test>HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfSoftwareVersions is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="1" testNumber="14529"/>
			<description>3DUnits shall not contain entries except DSm, DU, USn, UU, TSm, USm, DSn, TU, TSn</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DSm' &amp;&amp; elem != 'DU' &amp;&amp; elem != 'USn' &amp;&amp; elem != 'UU' &amp;&amp; elem != 'TSm' &amp;&amp; elem != 'USm' &amp;&amp; elem != 'DSn' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'TSn').length == 0</test>
			<error>
				<message>3DUnits contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DSm' &amp;&amp; elem != 'DU' &amp;&amp; elem != 'USn' &amp;&amp; elem != 'UU' &amp;&amp; elem != 'TSm' &amp;&amp; elem != 'USm' &amp;&amp; elem != 'DSn' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'TSn').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14530"/>
			<description>Entry DSm in 3DUnits shall have type Number</description>
			<test>containsDSm == false || DSmHasTypeNumber == true</test>
			<error>
				<message>Entry DSm in 3DUnits is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="11" testNumber="14531"/>
			<description>Entry DU in 3DUnits is required, when fn:IsRequired(fn:IsPresent(DSm) || fn:IsPresent(DSn))</description>
			<test>(containsDU == true || ((containsDSm == true) || (containsDSn == true)) == false)</test>
			<error>
				<message>Entry DU in 3DUnits is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14532"/>
			<description>Entry DU in 3DUnits shall have type StringText</description>
			<test>containsDU == false || DUHasTypeStringText == true</test>
			<error>
				<message>Entry DU in 3DUnits is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14533"/>
			<description>Entry USn in 3DUnits shall have type Number</description>
			<test>containsUSn == false || USnHasTypeNumber == true</test>
			<error>
				<message>Entry USn in 3DUnits is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="11" testNumber="14534"/>
			<description>Entry UU in 3DUnits is required, when fn:IsRequired(fn:IsPresent(USm) || fn:IsPresent(USn))</description>
			<test>(containsUU == true || ((containsUSm == true) || (containsUSn == true)) == false)</test>
			<error>
				<message>Entry UU in 3DUnits is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14535"/>
			<description>Entry UU in 3DUnits shall have type StringText</description>
			<test>containsUU == false || UUHasTypeStringText == true</test>
			<error>
				<message>Entry UU in 3DUnits is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14536"/>
			<description>Entry TSm in 3DUnits shall have type Number</description>
			<test>containsTSm == false || TSmHasTypeNumber == true</test>
			<error>
				<message>Entry TSm in 3DUnits is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14537"/>
			<description>Entry USm in 3DUnits shall have type Number</description>
			<test>containsUSm == false || USmHasTypeNumber == true</test>
			<error>
				<message>Entry USm in 3DUnits is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14538"/>
			<description>Entry DSn in 3DUnits shall have type Number</description>
			<test>containsDSn == false || DSnHasTypeNumber == true</test>
			<error>
				<message>Entry DSn in 3DUnits is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="11" testNumber="14539"/>
			<description>Entry TU in 3DUnits is required, when fn:IsRequired(fn:IsPresent(TSm) || fn:IsPresent(TSn))</description>
			<test>(containsTU == true || ((containsTSm == true) || (containsTSn == true)) == false)</test>
			<error>
				<message>Entry TU in 3DUnits is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14540"/>
			<description>Entry TU in 3DUnits shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in 3DUnits is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DUnits">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14541"/>
			<description>Entry TSn in 3DUnits shall have type Number</description>
			<test>containsTSn == false || TSnHasTypeNumber == true</test>
			<error>
				<message>Entry TSn in 3DUnits is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="1" testNumber="14555"/>
			<description>Collection shall not contain entries except D, Sort, View, Resources, Folders, Colors, Split, Type, Navigator, Schema</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'Sort' &amp;&amp; elem != 'View' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Folders' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Split' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Navigator' &amp;&amp; elem != 'Schema').length == 0</test>
			<error>
				<message>Collection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'Sort' &amp;&amp; elem != 'View' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Folders' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Split' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Navigator' &amp;&amp; elem != 'Schema').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="11" testNumber="14556"/>
			<description>Entry D in Collection is required, when fn:IsRequired(fn:SinceVersion(2.0 , fn:IsEncryptedWrapper()))</description>
			<test>(containsD == true || (true) == false)</test>
			<error>
				<message>Entry D in Collection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14557"/>
			<description>Entry D in Collection shall have type StringByte</description>
			<test>containsD == false || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in Collection is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14558"/>
			<description>Entry Sort with type Dictionary in Collection shall be object CollectionSort</description>
			<test>SortHasTypeDictionary != true || Sort_size == 1</test>
			<error>
				<message>Entry Sort with type Dictionary in Collection is not object CollectionSort</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14559"/>
			<description>Entry Sort in Collection shall have type Dictionary</description>
			<test>containsSort == false || SortHasTypeDictionary == true</test>
			<error>
				<message>Entry Sort in Collection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="11" testNumber="14560"/>
			<description>Entry View in Collection is required, when fn:IsRequired(fn:SinceVersion(2.0 , fn:IsEncryptedWrapper()))</description>
			<test>(containsView == true || (true) == false)</test>
			<error>
				<message>Entry View in Collection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="13" testNumber="14561"/>
			<description>Entry View with type Name in Collection shall have one of values: C, D, T, H</description>
			<test>ViewHasTypeName != true || ViewNameValue == "D" || ViewNameValue == "T" || ViewNameValue == "H" || ViewNameValue == C</test>
			<error>
				<message>Entry View with type Name in Collection has incorrect value %2 instead of C, D, T, H</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ViewNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14562"/>
			<description>Entry View in Collection shall have type Name</description>
			<test>containsView == false || ViewHasTypeName == true</test>
			<error>
				<message>Entry View in Collection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="9" testNumber="14563"/>
			<description>Entry View with type Name in Collection shall correspond special case: fn:Eval(fn:SinceVersion(2.0 , ((fn:IsEncryptedWrapper() &amp;&amp; (@View == H)) || (fn:IsPresent(Navigator) &amp;&amp; (@View == C)) || (@View != C))))</description>
			<test>ViewHasTypeName != true || (true)</test>
			<error>
				<message>Entry View with type Name in Collection doesn't correspond special case: fn:Eval(fn:SinceVersion(2.0 , ((fn:IsEncryptedWrapper() &amp;&amp; (@View == H)) || (fn:IsPresent(Navigator) &amp;&amp; (@View == C)) || (@View != C))))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14564"/>
			<description>Entry Resources with type NameTree in Collection shall be object CollectionNameTreeResources</description>
			<test>ResourcesHasTypeNameTree != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type NameTree in Collection is not object CollectionNameTreeResources</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="10" testNumber="14565"/>
			<description>Entry Resources with type NameTree in Collection shall be indirect</description>
			<test>ResourcesHasTypeNameTree != true || isResourcesIndirect == true</test>
			<error>
				<message>Entry Resources with type NameTree in Collection is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14566"/>
			<description>Entry Resources in Collection shall have type NameTree</description>
			<test>containsResources == false || ResourcesHasTypeNameTree == true</test>
			<error>
				<message>Entry Resources in Collection is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14567"/>
			<description>Entry Folders with type Dictionary in Collection shall be object CollectionFolder</description>
			<test>FoldersHasTypeDictionary != true || Folders_size == 1</test>
			<error>
				<message>Entry Folders with type Dictionary in Collection is not object CollectionFolder</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="10" testNumber="14568"/>
			<description>Entry Folders with type Dictionary in Collection shall be indirect</description>
			<test>FoldersHasTypeDictionary != true || isFoldersIndirect == true</test>
			<error>
				<message>Entry Folders with type Dictionary in Collection is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14569"/>
			<description>Entry Folders in Collection shall have type Dictionary</description>
			<test>containsFolders == false || FoldersHasTypeDictionary == true</test>
			<error>
				<message>Entry Folders in Collection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14570"/>
			<description>Entry Colors with type Dictionary in Collection shall be object CollectionColors</description>
			<test>ColorsHasTypeDictionary != true || Colors_size == 1</test>
			<error>
				<message>Entry Colors with type Dictionary in Collection is not object CollectionColors</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14571"/>
			<description>Entry Colors in Collection shall have type Dictionary</description>
			<test>containsColors == false || ColorsHasTypeDictionary == true</test>
			<error>
				<message>Entry Colors in Collection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14572"/>
			<description>Entry Split with type Dictionary in Collection shall be object CollectionSplit</description>
			<test>SplitHasTypeDictionary != true || Split_size == 1</test>
			<error>
				<message>Entry Split with type Dictionary in Collection is not object CollectionSplit</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14573"/>
			<description>Entry Split in Collection shall have type Dictionary</description>
			<test>containsSplit == false || SplitHasTypeDictionary == true</test>
			<error>
				<message>Entry Split in Collection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14574"/>
			<description>Entry Type with type Name in Collection shall have value Collection</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Collection"</test>
			<error>
				<message>Entry Type with type Name in Collection has incorrect value %2 instead of Collection</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14575"/>
			<description>Entry Type in Collection shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Collection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14576"/>
			<description>Entry Navigator with type Dictionary in Collection shall be object Navigator</description>
			<test>NavigatorHasTypeDictionary != true || Navigator_size == 1</test>
			<error>
				<message>Entry Navigator with type Dictionary in Collection is not object Navigator</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="11" testNumber="14577"/>
			<description>Entry Navigator in Collection is required, when fn:IsRequired(@View == C)</description>
			<test>(containsNavigator == true || (ViewNameValue == "C") == false)</test>
			<error>
				<message>Entry Navigator in Collection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="10" testNumber="14578"/>
			<description>Entry Navigator with type Dictionary in Collection shall be indirect</description>
			<test>NavigatorHasTypeDictionary != true || isNavigatorIndirect == true</test>
			<error>
				<message>Entry Navigator with type Dictionary in Collection is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14579"/>
			<description>Entry Navigator in Collection shall have type Dictionary</description>
			<test>containsNavigator == false || NavigatorHasTypeDictionary == true</test>
			<error>
				<message>Entry Navigator in Collection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14580"/>
			<description>Entry Schema with type Dictionary in Collection shall be object CollectionSchema</description>
			<test>SchemaHasTypeDictionary != true || Schema_size == 1</test>
			<error>
				<message>Entry Schema with type Dictionary in Collection is not object CollectionSchema</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14581"/>
			<description>Entry Schema in Collection shall have type Dictionary</description>
			<test>containsSchema == false || SchemaHasTypeDictionary == true</test>
			<error>
				<message>Entry Schema in Collection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14623"/>
			<description>Entry with type Dictionary in ArrayOfAnnots shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork, AnnotWatermark, Annot3D, AnnotRedact, fn:Extension(ADBE_Extn3 , AnnotProjection), fn:Extension(ADBE_Extn3 , AnnotRichMedia)</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfAnnots is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork, AnnotWatermark, Annot3D, AnnotRedact, fn:Extension(ADBE_Extn3 , AnnotProjection), fn:Extension(ADBE_Extn3 , AnnotRichMedia)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14624"/>
			<description>Entry in ArrayOfAnnots shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfAnnots is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTagsSubArray">
			<id specification="ISO_32000_1_7" clause="2" testNumber="14642"/>
			<description>ArrayOfTagsSubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfTagsSubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTagsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14643"/>
			<description>Entry 0 in ArrayOfTagsSubArray shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOfTagsSubArray is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTagsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14644"/>
			<description>Entry 1 in ArrayOfTagsSubArray shall have type StringAscii</description>
			<test>size &lt;= 1 || entry1HasTypeStringAscii == true</test>
			<error>
				<message>Entry 1 in ArrayOfTagsSubArray is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSignatureSubFilterNamesEntry">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14652"/>
			<description>Entry with type Name in ArrayOfSignatureSubFilterNames shall have one of values: adbe.pkcs7.detached, adbe.x509.rsa_sha1, adbe.pkcs7.sha1</description>
			<test>HasTypeName != true || NameValue == "adbe.pkcs7.detached" || NameValue == "adbe.pkcs7.sha1" || NameValue == "adbe.x509.rsa_sha1"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfSignatureSubFilterNames has incorrect value %2 instead of adbe.pkcs7.detached, adbe.x509.rsa_sha1, adbe.pkcs7.sha1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSignatureSubFilterNamesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14653"/>
			<description>Entry in ArrayOfSignatureSubFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfSignatureSubFilterNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14718"/>
			<description>Entry Producer in DocInfo shall have type StringText</description>
			<test>containsProducer == false || ProducerHasTypeStringText == true</test>
			<error>
				<message>Entry Producer in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14719"/>
			<description>Entry Title in DocInfo shall have type StringText</description>
			<test>containsTitle == false || TitleHasTypeStringText == true</test>
			<error>
				<message>Entry Title in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14720"/>
			<description>Entry CreationDate in DocInfo shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in DocInfo is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14721"/>
			<description>Entry Trapped with type Name in DocInfo shall have one of values: Unknown, True, False</description>
			<test>TrappedHasTypeName != true || TrappedNameValue == "True" || TrappedNameValue == "False" || TrappedNameValue == "Unknown"</test>
			<error>
				<message>Entry Trapped with type Name in DocInfo has incorrect value %2 instead of Unknown, True, False</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TrappedNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14722"/>
			<description>Entry Trapped in DocInfo shall have type Name</description>
			<test>containsTrapped == false || TrappedHasTypeName == true</test>
			<error>
				<message>Entry Trapped in DocInfo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14723"/>
			<description>Entry Keywords in DocInfo shall have type StringText</description>
			<test>containsKeywords == false || KeywordsHasTypeStringText == true</test>
			<error>
				<message>Entry Keywords in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14724"/>
			<description>Entry Subject in DocInfo shall have type StringText</description>
			<test>containsSubject == false || SubjectHasTypeStringText == true</test>
			<error>
				<message>Entry Subject in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14725"/>
			<description>Entry Creator in DocInfo shall have type StringText</description>
			<test>containsCreator == false || CreatorHasTypeStringText == true</test>
			<error>
				<message>Entry Creator in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14726"/>
			<description>Entry Author in DocInfo shall have type StringText</description>
			<test>containsAuthor == false || AuthorHasTypeStringText == true</test>
			<error>
				<message>Entry Author in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14727"/>
			<description>Entry ModDate in DocInfo shall have type Date</description>
			<test>containsModDate == false || ModDateHasTypeDate == true</test>
			<error>
				<message>Entry ModDate in DocInfo is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRequirementsHandlersEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14738"/>
			<description>Entry with type Dictionary in ArrayOfRequirementsHandlers shall be object RequirementsHandler</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfRequirementsHandlers is not object RequirementsHandler</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRequirementsHandlersEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14739"/>
			<description>Entry in ArrayOfRequirementsHandlers shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfRequirementsHandlers is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="1" testNumber="14760"/>
			<description>MediaOffsetTime shall not contain entries except T, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'T' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MediaOffsetTime contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'T' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14761"/>
			<description>Entry T with type Dictionary in MediaOffsetTime shall be object Timespan</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in MediaOffsetTime is not object Timespan</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="7" testNumber="14762"/>
			<description>Entry T in MediaOffsetTime is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in MediaOffsetTime is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14763"/>
			<description>Entry T in MediaOffsetTime shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in MediaOffsetTime is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="7" testNumber="14764"/>
			<description>Entry S in MediaOffsetTime is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaOffsetTime is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14765"/>
			<description>Entry S with type Name in MediaOffsetTime shall have value T</description>
			<test>SHasTypeName != true || SNameValue == "T"</test>
			<error>
				<message>Entry S with type Name in MediaOffsetTime has incorrect value %2 instead of T</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14766"/>
			<description>Entry S in MediaOffsetTime shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaOffsetTime is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14767"/>
			<description>Entry Type with type Name in MediaOffsetTime shall have value MediaOffset</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaOffset"</test>
			<error>
				<message>Entry Type with type Name in MediaOffsetTime has incorrect value %2 instead of MediaOffset</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetTime">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14768"/>
			<description>Entry Type in MediaOffsetTime shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaOffsetTime is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="1" testNumber="14778"/>
			<description>RichMediaParams shall not contain entries except FlashVars, Seetings, Binding, BindingMaterial, CuePoints, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FlashVars' &amp;&amp; elem != 'Seetings' &amp;&amp; elem != 'Binding' &amp;&amp; elem != 'BindingMaterial' &amp;&amp; elem != 'CuePoints' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>RichMediaParams contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FlashVars' &amp;&amp; elem != 'Seetings' &amp;&amp; elem != 'Binding' &amp;&amp; elem != 'BindingMaterial' &amp;&amp; elem != 'CuePoints' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14779"/>
			<description>Entry FlashVars with type Stream in RichMediaParams shall be object Stream</description>
			<test>FlashVarsHasTypeStream != true || FlashVars_size == 1</test>
			<error>
				<message>Entry FlashVars with type Stream in RichMediaParams is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="10" testNumber="14780"/>
			<description>Entry FlashVars with type Stream in RichMediaParams shall be indirect</description>
			<test>FlashVarsHasTypeStream != true || isFlashVarsIndirect == true</test>
			<error>
				<message>Entry FlashVars with type Stream in RichMediaParams is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14781"/>
			<description>Entry FlashVars in RichMediaParams shall have one of types: StringText, Stream</description>
			<test>containsFlashVars == false || FlashVarsHasTypeStringText == true || FlashVarsHasTypeStream == true</test>
			<error>
				<message>Entry FlashVars in RichMediaParams is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14782"/>
			<description>Entry Seetings with type Stream in RichMediaParams shall be object Stream</description>
			<test>SeetingsHasTypeStream != true || Seetings_size == 1</test>
			<error>
				<message>Entry Seetings with type Stream in RichMediaParams is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="10" testNumber="14783"/>
			<description>Entry Seetings with type Stream in RichMediaParams shall be indirect</description>
			<test>SeetingsHasTypeStream != true || isSeetingsIndirect == true</test>
			<error>
				<message>Entry Seetings with type Stream in RichMediaParams is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14784"/>
			<description>Entry Seetings in RichMediaParams shall have one of types: StringText, Stream</description>
			<test>containsSeetings == false || SeetingsHasTypeStringText == true || SeetingsHasTypeStream == true</test>
			<error>
				<message>Entry Seetings in RichMediaParams is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14785"/>
			<description>Entry Binding with type Name in RichMediaParams shall have one of values: Background, Foreground, Material, None</description>
			<test>BindingHasTypeName != true || BindingNameValue == "None" || BindingNameValue == "Foreground" || BindingNameValue == "Background" || BindingNameValue == "Material"</test>
			<error>
				<message>Entry Binding with type Name in RichMediaParams has incorrect value %2 instead of Background, Foreground, Material, None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BindingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14786"/>
			<description>Entry Binding in RichMediaParams shall have type Name</description>
			<test>containsBinding == false || BindingHasTypeName == true</test>
			<error>
				<message>Entry Binding in RichMediaParams is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="11" testNumber="14787"/>
			<description>Entry BindingMaterial in RichMediaParams is required, when fn:IsRequired(@Binding == Material)</description>
			<test>(containsBindingMaterial == true || (BindingNameValue == "Material") == false)</test>
			<error>
				<message>Entry BindingMaterial in RichMediaParams is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14788"/>
			<description>Entry BindingMaterial in RichMediaParams shall have type StringText</description>
			<test>containsBindingMaterial == false || BindingMaterialHasTypeStringText == true</test>
			<error>
				<message>Entry BindingMaterial in RichMediaParams is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="17" testNumber="14789"/>
			<description>Entry CuePoints with type Array in RichMediaParams shall be object ArrayOfRichMediaCuePoints</description>
			<test>CuePointsHasTypeArray != true || CuePoints_size == 1</test>
			<error>
				<message>Entry CuePoints with type Array in RichMediaParams is not object ArrayOfRichMediaCuePoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14790"/>
			<description>Entry CuePoints in RichMediaParams shall have type Array</description>
			<test>containsCuePoints == false || CuePointsHasTypeArray == true</test>
			<error>
				<message>Entry CuePoints in RichMediaParams is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="6" testNumber="14791"/>
			<description>Entry Type with type Name in RichMediaParams shall have value RichMediaParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaParams"</test>
			<error>
				<message>Entry Type with type Name in RichMediaParams has incorrect value %2 instead of RichMediaParams</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaParams">
			<id specification="ISO_32000_1_7" clause="8" testNumber="14792"/>
			<description>Entry Type in RichMediaParams shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaParams is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="1" testNumber="15037"/>
			<description>XObjectFormTrapNet shall not contain entries except StructParents, OPI, Group, Metadata, Measure, PCM, SeparationColorNames, DecodeParms, Ref, TrapRegions, DL, Type, FFilter, PtData, PieceInfo, BBox, Subtype, TrapStyles, Filter, FormType, Matrix, F, FDecodeParms, Name, OC, Resources, Length, LastModified, StructParent</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'StructParents' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'PCM' &amp;&amp; elem != 'SeparationColorNames' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'TrapRegions' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TrapStyles' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'StructParent').length == 0</test>
			<error>
				<message>XObjectFormTrapNet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'StructParents' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'PCM' &amp;&amp; elem != 'SeparationColorNames' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'TrapRegions' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TrapStyles' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'StructParent').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15038"/>
			<description>Entry StructParents in XObjectFormTrapNet shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15039"/>
			<description>Entry OPI with type Dictionary in XObjectFormTrapNet shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectFormTrapNet is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15040"/>
			<description>Entry OPI in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15041"/>
			<description>Entry Group with type Dictionary in XObjectFormTrapNet shall be object GroupAttributes</description>
			<test>GroupHasTypeDictionary != true || Group_size == 1</test>
			<error>
				<message>Entry Group with type Dictionary in XObjectFormTrapNet is not object GroupAttributes</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15042"/>
			<description>Entry Group in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsGroup == false || GroupHasTypeDictionary == true</test>
			<error>
				<message>Entry Group in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15043"/>
			<description>Entry Metadata with type Stream in XObjectFormTrapNet shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormTrapNet is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="10" testNumber="15044"/>
			<description>Entry Metadata with type Stream in XObjectFormTrapNet shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormTrapNet is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15045"/>
			<description>Entry Metadata in XObjectFormTrapNet shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectFormTrapNet is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15046"/>
			<description>Entry Measure with type Dictionary in XObjectFormTrapNet shall be object MeasureRL</description>
			<test>MeasureHasTypeDictionary != true || Measure_size == 1</test>
			<error>
				<message>Entry Measure with type Dictionary in XObjectFormTrapNet is not object MeasureRL</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15047"/>
			<description>Entry Measure in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="15048"/>
			<description>Entry PCM in XObjectFormTrapNet is required</description>
			<test>containsPCM == true</test>
			<error>
				<message>Entry PCM in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15049"/>
			<description>Entry PCM with type Name in XObjectFormTrapNet shall have one of values: DeviceGray, DeviceRGBK, DeviceRGB, DeviceN, DeviceCMYK, DeviceCMY</description>
			<test>PCMHasTypeName != true || PCMNameValue == "DeviceGray" || PCMNameValue == "DeviceRGB" || PCMNameValue == "DeviceCMYK" || PCMNameValue == "DeviceCMY" || PCMNameValue == "DeviceRGBK" || PCMNameValue == "DeviceN"</test>
			<error>
				<message>Entry PCM with type Name in XObjectFormTrapNet has incorrect value %2 instead of DeviceGray, DeviceRGBK, DeviceRGB, DeviceN, DeviceCMYK, DeviceCMY</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PCMNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15050"/>
			<description>Entry PCM in XObjectFormTrapNet shall have type Name</description>
			<test>containsPCM == false || PCMHasTypeName == true</test>
			<error>
				<message>Entry PCM in XObjectFormTrapNet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15051"/>
			<description>Entry SeparationColorNames with type Array in XObjectFormTrapNet shall be object ArrayOfNamesGeneral</description>
			<test>SeparationColorNamesHasTypeArray != true || SeparationColorNames_size == 1</test>
			<error>
				<message>Entry SeparationColorNames with type Array in XObjectFormTrapNet is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15052"/>
			<description>Entry SeparationColorNames in XObjectFormTrapNet shall have type Array</description>
			<test>containsSeparationColorNames == false || SeparationColorNamesHasTypeArray == true</test>
			<error>
				<message>Entry SeparationColorNames in XObjectFormTrapNet is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15053"/>
			<description>Entry DecodeParms with type Array in XObjectFormTrapNet shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormTrapNet is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15054"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormTrapNet shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormTrapNet is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15055"/>
			<description>Entry DecodeParms in XObjectFormTrapNet shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormTrapNet is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="9" testNumber="15056"/>
			<description>Entry DecodeParms with type Array in XObjectFormTrapNet shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormTrapNet doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15057"/>
			<description>Entry Ref with type Dictionary in XObjectFormTrapNet shall be object Reference</description>
			<test>RefHasTypeDictionary != true || Ref_size == 1</test>
			<error>
				<message>Entry Ref with type Dictionary in XObjectFormTrapNet is not object Reference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15058"/>
			<description>Entry Ref in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsRef == false || RefHasTypeDictionary == true</test>
			<error>
				<message>Entry Ref in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15059"/>
			<description>Entry TrapRegions with type Array in XObjectFormTrapNet shall be object ArrayOfTrapRegions</description>
			<test>TrapRegionsHasTypeArray != true || TrapRegions_size == 1</test>
			<error>
				<message>Entry TrapRegions with type Array in XObjectFormTrapNet is not object ArrayOfTrapRegions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15060"/>
			<description>Entry TrapRegions in XObjectFormTrapNet shall have type Array</description>
			<test>containsTrapRegions == false || TrapRegionsHasTypeArray == true</test>
			<error>
				<message>Entry TrapRegions in XObjectFormTrapNet is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15061"/>
			<description>Entry DL in XObjectFormTrapNet shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="9" testNumber="15062"/>
			<description>Entry DL with type Integer in XObjectFormTrapNet shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectFormTrapNet doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15063"/>
			<description>Entry Type with type Name in XObjectFormTrapNet shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormTrapNet has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15064"/>
			<description>Entry Type in XObjectFormTrapNet shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormTrapNet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15065"/>
			<description>Entry FFilter with type Array in XObjectFormTrapNet shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormTrapNet is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15066"/>
			<description>Entry FFilter with type Name in XObjectFormTrapNet shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormTrapNet has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15067"/>
			<description>Entry FFilter in XObjectFormTrapNet shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in XObjectFormTrapNet is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="9" testNumber="15068"/>
			<description>Entry FFilter with type Array in XObjectFormTrapNet shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormTrapNet doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15069"/>
			<description>Entry PtData with type Dictionary in XObjectFormTrapNet shall be object PointData</description>
			<test>PtDataHasTypeDictionary != true || PtData_size == 1</test>
			<error>
				<message>Entry PtData with type Dictionary in XObjectFormTrapNet is not object PointData</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15070"/>
			<description>Entry PtData in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsPtData == false || PtDataHasTypeDictionary == true</test>
			<error>
				<message>Entry PtData in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15071"/>
			<description>Entry PieceInfo with type Dictionary in XObjectFormTrapNet shall be object PagePiece</description>
			<test>PieceInfoHasTypeDictionary != true || PieceInfo_size == 1</test>
			<error>
				<message>Entry PieceInfo with type Dictionary in XObjectFormTrapNet is not object PagePiece</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15072"/>
			<description>Entry PieceInfo in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="15073"/>
			<description>Entry BBox in XObjectFormTrapNet is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15074"/>
			<description>Entry BBox in XObjectFormTrapNet shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormTrapNet is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="15075"/>
			<description>Entry Subtype in XObjectFormTrapNet is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15076"/>
			<description>Entry Subtype with type Name in XObjectFormTrapNet shall have value Form</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Form"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormTrapNet has incorrect value %2 instead of Form</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15077"/>
			<description>Entry Subtype in XObjectFormTrapNet shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormTrapNet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15078"/>
			<description>Entry TrapStyles in XObjectFormTrapNet shall have type StringText</description>
			<test>containsTrapStyles == false || TrapStylesHasTypeStringText == true</test>
			<error>
				<message>Entry TrapStyles in XObjectFormTrapNet is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15079"/>
			<description>Entry Filter with type Array in XObjectFormTrapNet shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormTrapNet is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15080"/>
			<description>Entry Filter with type Name in XObjectFormTrapNet shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormTrapNet has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15081"/>
			<description>Entry Filter in XObjectFormTrapNet shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in XObjectFormTrapNet is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="9" testNumber="15082"/>
			<description>Entry Filter with type Array in XObjectFormTrapNet shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormTrapNet doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15083"/>
			<description>Entry FormType with type Integer in XObjectFormTrapNet shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormTrapNet has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15084"/>
			<description>Entry FormType in XObjectFormTrapNet shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15085"/>
			<description>Entry Matrix in XObjectFormTrapNet shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormTrapNet is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15086"/>
			<description>Entry F with type Dictionary in XObjectFormTrapNet shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormTrapNet is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15087"/>
			<description>Entry F in XObjectFormTrapNet shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectFormTrapNet is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15088"/>
			<description>Entry FDecodeParms with type Array in XObjectFormTrapNet shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormTrapNet is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15089"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormTrapNet shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormTrapNet is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15090"/>
			<description>Entry FDecodeParms in XObjectFormTrapNet shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormTrapNet is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="9" testNumber="15091"/>
			<description>Entry FDecodeParms with type Array in XObjectFormTrapNet shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormTrapNet doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15092"/>
			<description>Entry Name in XObjectFormTrapNet shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectFormTrapNet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15093"/>
			<description>Entry OC with type Dictionary in XObjectFormTrapNet shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectFormTrapNet is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15094"/>
			<description>Entry OC in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15095"/>
			<description>Entry Resources with type Dictionary in XObjectFormTrapNet shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in XObjectFormTrapNet is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15096"/>
			<description>Entry Resources in XObjectFormTrapNet shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in XObjectFormTrapNet is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="15097"/>
			<description>Entry Length in XObjectFormTrapNet is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15098"/>
			<description>Entry Length in XObjectFormTrapNet shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="11" testNumber="15099"/>
			<description>Entry LastModified in XObjectFormTrapNet is required, when fn:IsRequired(fn:IsPresent(PieceInfo))</description>
			<test>(containsLastModified == true || ((containsPieceInfo == true)) == false)</test>
			<error>
				<message>Entry LastModified in XObjectFormTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15100"/>
			<description>Entry LastModified in XObjectFormTrapNet shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in XObjectFormTrapNet is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15101"/>
			<description>Entry StructParent in XObjectFormTrapNet shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectFormTrapNet is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="1" testNumber="15239"/>
			<description>ActionGoTo shall not contain entries except S, D, Next, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionGoTo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="7" testNumber="15240"/>
			<description>Entry S in ActionGoTo is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoTo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15241"/>
			<description>Entry S with type Name in ActionGoTo shall have value GoTo</description>
			<test>SHasTypeName != true || SNameValue == "GoTo"</test>
			<error>
				<message>Entry S with type Name in ActionGoTo has incorrect value %2 instead of GoTo</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15242"/>
			<description>Entry S in ActionGoTo shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoTo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15243"/>
			<description>Entry D with type Array in ActionGoTo shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in ActionGoTo is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="7" testNumber="15244"/>
			<description>Entry D in ActionGoTo is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionGoTo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15245"/>
			<description>Entry D in ActionGoTo shall have one of types: Name, Array, StringByte</description>
			<test>containsD == false || DHasTypeName == true || DHasTypeArray == true || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in ActionGoTo is not one of types: Name, Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15246"/>
			<description>Entry Next with type Array in ActionGoTo shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionGoTo is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15247"/>
			<description>Entry Next with type Dictionary in ActionGoTo shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionGoTo is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15248"/>
			<description>Entry Next in ActionGoTo shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionGoTo is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15249"/>
			<description>Entry Type with type Name in ActionGoTo shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoTo has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15250"/>
			<description>Entry Type in ActionGoTo shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoTo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="2" testNumber="15319"/>
			<description>LabRangeArray shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>LabRangeArray contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="15320"/>
			<description>Entry 2 with type Number in LabRangeArray shall correspond possible value predicate: fn:Eval(@2 &lt;= @3)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &lt;= entry3NumberValue</test>
			<error>
				<message>Entry 2 with type Number in LabRangeArray doesn't correspond possible value predicate: fn:Eval(@2 &lt;= @3)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15321"/>
			<description>Entry 2 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="15322"/>
			<description>Entry 0 with type Number in LabRangeArray shall correspond possible value predicate: fn:Eval(@0 &lt;= @1)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &lt;= entry1NumberValue</test>
			<error>
				<message>Entry 0 with type Number in LabRangeArray doesn't correspond possible value predicate: fn:Eval(@0 &lt;= @1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15323"/>
			<description>Entry 0 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="15324"/>
			<description>Entry 3 with type Number in LabRangeArray shall correspond possible value predicate: fn:Eval(@3 &gt;= @2)</description>
			<test>entry3HasTypeNumber != true || entry3NumberValue &gt;= entry2NumberValue</test>
			<error>
				<message>Entry 3 with type Number in LabRangeArray doesn't correspond possible value predicate: fn:Eval(@3 &gt;= @2)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15325"/>
			<description>Entry 3 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="15326"/>
			<description>Entry 1 with type Number in LabRangeArray shall correspond possible value predicate: fn:Eval(@1 &gt;= @0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= entry0NumberValue</test>
			<error>
				<message>Entry 1 with type Number in LabRangeArray doesn't correspond possible value predicate: fn:Eval(@1 &gt;= @0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15327"/>
			<description>Entry 1 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APagePieceEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15345"/>
			<description>Entry with type Dictionary in PagePiece shall be object Data</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in PagePiece is not object Data</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APagePieceEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15346"/>
			<description>Entry in PagePiece shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in PagePiece is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="1" testNumber="15464"/>
			<description>AnnotPopup shall not contain entries except Rect, F, C, NM, Open, AS, StructParent, Contents, Parent, OC, Type, AP, P, Border, M, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Rect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'C' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>AnnotPopup contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Rect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'C' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="7" testNumber="15465"/>
			<description>Entry Rect in AnnotPopup is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotPopup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15466"/>
			<description>Entry Rect in AnnotPopup shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotPopup is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15467"/>
			<description>Entry F in AnnotPopup shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotPopup is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="9" testNumber="15468"/>
			<description>Entry F with type Bitmask in AnnotPopup shall correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotPopup doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15469"/>
			<description>Entry C with type Array in AnnotPopup shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotPopup is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15470"/>
			<description>Entry C in AnnotPopup shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotPopup is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15471"/>
			<description>Entry NM in AnnotPopup shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotPopup is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15472"/>
			<description>Entry Open in AnnotPopup shall have type Boolean</description>
			<test>containsOpen == false || OpenHasTypeBoolean == true</test>
			<error>
				<message>Entry Open in AnnotPopup is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="11" testNumber="15473"/>
			<description>Entry AS in AnnotPopup is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotPopup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15474"/>
			<description>Entry AS in AnnotPopup shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotPopup is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15475"/>
			<description>Entry StructParent in AnnotPopup shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotPopup is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15476"/>
			<description>Entry Contents in AnnotPopup shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotPopup is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15477"/>
			<description>Entry Parent with type Dictionary in AnnotPopup shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in AnnotPopup is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15478"/>
			<description>Entry Parent in AnnotPopup shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in AnnotPopup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15479"/>
			<description>Entry OC with type Dictionary in AnnotPopup shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotPopup is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15480"/>
			<description>Entry OC in AnnotPopup shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotPopup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15481"/>
			<description>Entry Type with type Name in AnnotPopup shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotPopup has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15482"/>
			<description>Entry Type in AnnotPopup shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotPopup is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15483"/>
			<description>Entry AP with type Dictionary in AnnotPopup shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotPopup is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15484"/>
			<description>Entry AP in AnnotPopup shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotPopup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15485"/>
			<description>Entry P with type Dictionary in AnnotPopup shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPopup is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="10" testNumber="15486"/>
			<description>Entry P with type Dictionary in AnnotPopup shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPopup is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15487"/>
			<description>Entry P in AnnotPopup shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotPopup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15488"/>
			<description>Entry Border with type Array in AnnotPopup shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotPopup is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15489"/>
			<description>Entry Border in AnnotPopup shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotPopup is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15490"/>
			<description>Entry M in AnnotPopup shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotPopup is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="7" testNumber="15491"/>
			<description>Entry Subtype in AnnotPopup is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotPopup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15492"/>
			<description>Entry Subtype with type Name in AnnotPopup shall have value Popup</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Popup"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotPopup has incorrect value %2 instead of Popup</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPopup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15493"/>
			<description>Entry Subtype in AnnotPopup shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotPopup is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15567"/>
			<description>Entry DefaultCMYK with type Array in ColorSpaceMap shall be one of objects ICCBasedColorSpace, DeviceNColorSpace</description>
			<test>DefaultCMYKHasTypeArray != true || DefaultCMYK_size == 1</test>
			<error>
				<message>Entry DefaultCMYK with type Array in ColorSpaceMap is not one of objects ICCBasedColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15568"/>
			<description>Entry DefaultCMYK in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultCMYK == false || DefaultCMYKHasTypeArray == true</test>
			<error>
				<message>Entry DefaultCMYK in ColorSpaceMap is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15569"/>
			<description>Entry DefaultGray with type Array in ColorSpaceMap shall be one of objects CalGrayColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>DefaultGrayHasTypeArray != true || DefaultGray_size == 1</test>
			<error>
				<message>Entry DefaultGray with type Array in ColorSpaceMap is not one of objects CalGrayColorSpace, ICCBasedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15570"/>
			<description>Entry DefaultGray in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultGray == false || DefaultGrayHasTypeArray == true</test>
			<error>
				<message>Entry DefaultGray in ColorSpaceMap is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15571"/>
			<description>Entry DefaultRGB with type Array in ColorSpaceMap shall be one of objects CalRGBColorSpace, ICCBasedColorSpace, DeviceNColorSpace</description>
			<test>DefaultRGBHasTypeArray != true || DefaultRGB_size == 1</test>
			<error>
				<message>Entry DefaultRGB with type Array in ColorSpaceMap is not one of objects CalRGBColorSpace, ICCBasedColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15572"/>
			<description>Entry DefaultRGB in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultRGB == false || DefaultRGBHasTypeArray == true</test>
			<error>
				<message>Entry DefaultRGB in ColorSpaceMap is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOutputIntentsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15585"/>
			<description>Entry with type Dictionary in ArrayOfOutputIntents shall be object OutputIntents</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOutputIntents is not object OutputIntents</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOutputIntentsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15586"/>
			<description>Entry in ArrayOfOutputIntents shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOutputIntents is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="1" testNumber="15764"/>
			<description>AnnotFreeText shall not contain entries except BS, Subtype, AP, AS, LE, CL, Q, NM, T, IT, F, CA, DA, DS, ExData, Rect, BE, Type, Contents, Subj, OC, C, IRT, M, RT, Popup, RC, P, StructParent, CreationDate, RD, Border</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BS' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'CL' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'T' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'F' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'C' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'Border').length == 0</test>
			<error>
				<message>AnnotFreeText contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BS' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'CL' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'T' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'F' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'C' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'P' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'Border').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15765"/>
			<description>Entry BS with type Dictionary in AnnotFreeText shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotFreeText is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15766"/>
			<description>Entry BS in AnnotFreeText shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="7" testNumber="15767"/>
			<description>Entry Subtype in AnnotFreeText is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15768"/>
			<description>Entry Subtype with type Name in AnnotFreeText shall have value FreeText</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "FreeText"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotFreeText has incorrect value %2 instead of FreeText</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15769"/>
			<description>Entry Subtype in AnnotFreeText shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotFreeText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15770"/>
			<description>Entry AP with type Dictionary in AnnotFreeText shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotFreeText is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="11" testNumber="15771"/>
			<description>Entry AP in AnnotFreeText is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15772"/>
			<description>Entry AP in AnnotFreeText shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="11" testNumber="15773"/>
			<description>Entry AS in AnnotFreeText is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15774"/>
			<description>Entry AS in AnnotFreeText shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotFreeText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15775"/>
			<description>Entry LE with type Name in AnnotFreeText shall have one of values: ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</description>
			<test>LEHasTypeName != true || LENameValue == "Square" || LENameValue == "Circle" || LENameValue == "Diamond" || LENameValue == "OpenArrow" || LENameValue == "ClosedArrow" || LENameValue == "None" || LENameValue == "Butt" || LENameValue == "ROpenArrow" || LENameValue == "RClosedArrow" || LENameValue == "Slash"</test>
			<error>
				<message>Entry LE with type Name in AnnotFreeText has incorrect value %2 instead of ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</message>
				<arguments>
					<argument>keyName</argument>
					<argument>LENameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15776"/>
			<description>Entry LE in AnnotFreeText shall have type Name</description>
			<test>containsLE == false || LEHasTypeName == true</test>
			<error>
				<message>Entry LE in AnnotFreeText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15777"/>
			<description>Entry CL with type Array in AnnotFreeText shall be object ArrayOf_3or4CalloutLineNumbers</description>
			<test>CLHasTypeArray != true || CL_size == 1</test>
			<error>
				<message>Entry CL with type Array in AnnotFreeText is not object ArrayOf_3or4CalloutLineNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15778"/>
			<description>Entry CL in AnnotFreeText shall have type Array</description>
			<test>containsCL == false || CLHasTypeArray == true</test>
			<error>
				<message>Entry CL in AnnotFreeText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15779"/>
			<description>Entry Q with type Integer in AnnotFreeText shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in AnnotFreeText has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15780"/>
			<description>Entry Q in AnnotFreeText shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in AnnotFreeText is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15781"/>
			<description>Entry NM in AnnotFreeText shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotFreeText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15782"/>
			<description>Entry T in AnnotFreeText shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotFreeText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15783"/>
			<description>Entry IT with type Name in AnnotFreeText shall have one of values: FreeText, FreeTextCallout, FreeTextTypeWriter</description>
			<test>ITHasTypeName != true || ITNameValue == "FreeText" || ITNameValue == "FreeTextCallout" || ITNameValue == "FreeTextTypeWriter"</test>
			<error>
				<message>Entry IT with type Name in AnnotFreeText has incorrect value %2 instead of FreeText, FreeTextCallout, FreeTextTypeWriter</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ITNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15784"/>
			<description>Entry IT in AnnotFreeText shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotFreeText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15785"/>
			<description>Entry F in AnnotFreeText shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotFreeText is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="9" testNumber="15786"/>
			<description>Entry F with type Bitmask in AnnotFreeText shall correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotFreeText doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="14" testNumber="15787"/>
			<description>Entry CA with type Number in AnnotFreeText shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotFreeText doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15788"/>
			<description>Entry CA in AnnotFreeText shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotFreeText is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="7" testNumber="15789"/>
			<description>Entry DA in AnnotFreeText is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15790"/>
			<description>Entry DA in AnnotFreeText shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in AnnotFreeText is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15791"/>
			<description>Entry DS in AnnotFreeText shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in AnnotFreeText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15792"/>
			<description>Entry ExData with type Dictionary in AnnotFreeText shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotFreeText is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15793"/>
			<description>Entry ExData in AnnotFreeText shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="7" testNumber="15794"/>
			<description>Entry Rect in AnnotFreeText is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15795"/>
			<description>Entry Rect in AnnotFreeText shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotFreeText is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15796"/>
			<description>Entry BE with type Dictionary in AnnotFreeText shall be object BorderEffect</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in AnnotFreeText is not object BorderEffect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15797"/>
			<description>Entry BE in AnnotFreeText shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15798"/>
			<description>Entry Type with type Name in AnnotFreeText shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotFreeText has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15799"/>
			<description>Entry Type in AnnotFreeText shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotFreeText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15800"/>
			<description>Entry Contents in AnnotFreeText shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotFreeText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15801"/>
			<description>Entry Subj in AnnotFreeText shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotFreeText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15802"/>
			<description>Entry OC with type Dictionary in AnnotFreeText shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotFreeText is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15803"/>
			<description>Entry OC in AnnotFreeText shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15804"/>
			<description>Entry C with type Array in AnnotFreeText shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotFreeText is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15805"/>
			<description>Entry C in AnnotFreeText shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotFreeText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15806"/>
			<description>Entry IRT with type Dictionary in AnnotFreeText shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotFreeText is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="11" testNumber="15807"/>
			<description>Entry IRT in AnnotFreeText is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotFreeText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15808"/>
			<description>Entry IRT in AnnotFreeText shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15809"/>
			<description>Entry M in AnnotFreeText shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotFreeText is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15810"/>
			<description>Entry RT with type Name in AnnotFreeText shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotFreeText has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15811"/>
			<description>Entry RT in AnnotFreeText shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotFreeText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15812"/>
			<description>Entry Popup with type Dictionary in AnnotFreeText shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFreeText is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="10" testNumber="15813"/>
			<description>Entry Popup with type Dictionary in AnnotFreeText shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFreeText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15814"/>
			<description>Entry Popup in AnnotFreeText shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15815"/>
			<description>Entry RC with type Stream in AnnotFreeText shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotFreeText is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="10" testNumber="15816"/>
			<description>Entry RC with type Stream in AnnotFreeText shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotFreeText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15817"/>
			<description>Entry RC in AnnotFreeText shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotFreeText is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15818"/>
			<description>Entry P with type Dictionary in AnnotFreeText shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFreeText is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="10" testNumber="15819"/>
			<description>Entry P with type Dictionary in AnnotFreeText shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFreeText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15820"/>
			<description>Entry P in AnnotFreeText shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotFreeText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15821"/>
			<description>Entry StructParent in AnnotFreeText shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotFreeText is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15822"/>
			<description>Entry CreationDate in AnnotFreeText shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotFreeText is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15823"/>
			<description>Entry RD in AnnotFreeText shall have type Rectangle</description>
			<test>containsRD == false || RDHasTypeRectangle == true</test>
			<error>
				<message>Entry RD in AnnotFreeText is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="9" testNumber="15824"/>
			<description>Entry RD with type Rectangle in AnnotFreeText shall correspond special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</description>
			<test>RDHasTypeRectangle != true || ((RD0NumberValue &gt;= 0) &amp;&amp; (RD1NumberValue &gt;= 0) &amp;&amp; (RD2NumberValue &gt;= 0) &amp;&amp; (RD3NumberValue &gt;= 0) &amp;&amp; ((RD1NumberValue + RD3NumberValue) &lt; RectRectHeight) &amp;&amp; ((RD0NumberValue + RD2NumberValue) &lt; RectRectWidth))</test>
			<error>
				<message>Entry RD with type Rectangle in AnnotFreeText doesn't correspond special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15825"/>
			<description>Entry Border with type Array in AnnotFreeText shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotFreeText is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFreeText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15826"/>
			<description>Entry Border in AnnotFreeText shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotFreeText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSplit">
			<id specification="ISO_32000_1_7" clause="1" testNumber="15899"/>
			<description>CollectionSplit shall not contain entries except Position, Direction</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Position' &amp;&amp; elem != 'Direction').length == 0</test>
			<error>
				<message>CollectionSplit contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Position' &amp;&amp; elem != 'Direction').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSplit">
			<id specification="ISO_32000_1_7" clause="14" testNumber="15900"/>
			<description>Entry Position with type Number in CollectionSplit shall correspond possible value predicate: fn:Eval((@Position &gt;= 0) &amp;&amp; (@Position &lt;= 100))</description>
			<test>PositionHasTypeNumber != true || (PositionNumberValue &gt;= 0) &amp;&amp; (PositionNumberValue &lt;= 100)</test>
			<error>
				<message>Entry Position with type Number in CollectionSplit doesn't correspond possible value predicate: fn:Eval((@Position &gt;= 0) &amp;&amp; (@Position &lt;= 100))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSplit">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15901"/>
			<description>Entry Position in CollectionSplit shall have type Number</description>
			<test>containsPosition == false || PositionHasTypeNumber == true</test>
			<error>
				<message>Entry Position in CollectionSplit is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSplit">
			<id specification="ISO_32000_1_7" clause="6" testNumber="15902"/>
			<description>Entry Direction with type Name in CollectionSplit shall have one of values: V, H, N</description>
			<test>DirectionHasTypeName != true || DirectionNameValue == "H" || DirectionNameValue == "V" || DirectionNameValue == "N"</test>
			<error>
				<message>Entry Direction with type Name in CollectionSplit has incorrect value %2 instead of V, H, N</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DirectionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSplit">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15903"/>
			<description>Entry Direction in CollectionSplit shall have type Name</description>
			<test>containsDirection == false || DirectionHasTypeName == true</test>
			<error>
				<message>Entry Direction in CollectionSplit is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMarkSubDictEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="15920"/>
			<description>Entry with type Stream in AppearancePrinterMarkSubDict shall be object XObjectFormPrinterMark</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in AppearancePrinterMarkSubDict is not object XObjectFormPrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMarkSubDictEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="15921"/>
			<description>Entry with type Stream in AppearancePrinterMarkSubDict shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in AppearancePrinterMarkSubDict is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearancePrinterMarkSubDictEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="15922"/>
			<description>Entry in AppearancePrinterMarkSubDict shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in AppearancePrinterMarkSubDict is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="1" testNumber="16052"/>
			<description>BeadFirst shall not contain entries except V, P, T, R, Type, N</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'P' &amp;&amp; elem != 'T' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'N').length == 0</test>
			<error>
				<message>BeadFirst contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'P' &amp;&amp; elem != 'T' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'N').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16053"/>
			<description>Entry V with type Dictionary in BeadFirst shall be one of objects BeadFirst, Bead</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in BeadFirst is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16054"/>
			<description>Entry V in BeadFirst is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="10" testNumber="16055"/>
			<description>Entry V with type Dictionary in BeadFirst shall be indirect</description>
			<test>VHasTypeDictionary != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16056"/>
			<description>Entry V in BeadFirst shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16057"/>
			<description>Entry P with type Dictionary in BeadFirst shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in BeadFirst is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16058"/>
			<description>Entry P in BeadFirst is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="10" testNumber="16059"/>
			<description>Entry P with type Dictionary in BeadFirst shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16060"/>
			<description>Entry P in BeadFirst shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16061"/>
			<description>Entry T with type Dictionary in BeadFirst shall be object Thread</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in BeadFirst is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16062"/>
			<description>Entry T in BeadFirst is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="10" testNumber="16063"/>
			<description>Entry T with type Dictionary in BeadFirst shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16064"/>
			<description>Entry T in BeadFirst shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16065"/>
			<description>Entry R in BeadFirst is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16066"/>
			<description>Entry R in BeadFirst shall have type Rectangle</description>
			<test>containsR == false || RHasTypeRectangle == true</test>
			<error>
				<message>Entry R in BeadFirst is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16067"/>
			<description>Entry Type with type Name in BeadFirst shall have value Bead</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Bead"</test>
			<error>
				<message>Entry Type with type Name in BeadFirst has incorrect value %2 instead of Bead</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16068"/>
			<description>Entry Type in BeadFirst shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in BeadFirst is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16069"/>
			<description>Entry N with type Dictionary in BeadFirst shall be one of objects BeadFirst, Bead</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in BeadFirst is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16070"/>
			<description>Entry N in BeadFirst is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="10" testNumber="16071"/>
			<description>Entry N with type Dictionary in BeadFirst shall be indirect</description>
			<test>NHasTypeDictionary != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16072"/>
			<description>Entry N in BeadFirst shall have type Dictionary</description>
			<test>containsN == false || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfViewportsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16096"/>
			<description>Entry with type Dictionary in ArrayOfViewports shall be object Viewport</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfViewports is not object Viewport</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfViewportsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16097"/>
			<description>Entry in ArrayOfViewports shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfViewports is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_7" clause="1" testNumber="16133"/>
			<description>TrapRegion shall not contain entries except TP, TZ</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'TP' &amp;&amp; elem != 'TZ').length == 0</test>
			<error>
				<message>TrapRegion contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'TP' &amp;&amp; elem != 'TZ').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16134"/>
			<description>Entry TP in TrapRegion is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in TrapRegion is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16135"/>
			<description>Entry TP in TrapRegion shall have type Name</description>
			<test>containsTP == false || TPHasTypeName == true</test>
			<error>
				<message>Entry TP in TrapRegion is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16136"/>
			<description>Entry TZ with type Array in TrapRegion shall be object ArrayOf_ArrayOfNumbers</description>
			<test>TZHasTypeArray != true || TZ_size == 1</test>
			<error>
				<message>Entry TZ with type Array in TrapRegion is not object ArrayOf_ArrayOfNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATrapRegion">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16137"/>
			<description>Entry TZ in TrapRegion shall have type Array</description>
			<test>containsTZ == false || TZHasTypeArray == true</test>
			<error>
				<message>Entry TZ in TrapRegion is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNumberTreeParentTreeEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16151"/>
			<description>Entry with type Array in StructTreeRootNumberTreeParentTree shall be object ArrayOfStructElem</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in StructTreeRootNumberTreeParentTree is not object ArrayOfStructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNumberTreeParentTreeEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16152"/>
			<description>Entry with type Dictionary in StructTreeRootNumberTreeParentTree shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in StructTreeRootNumberTreeParentTree is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="1" testNumber="16263"/>
			<description>FieldSig shall not contain entries except DV, Ff, DA, FT, TM, Kids, Lock, DS, AA, SV, TU, T, V, RV, Parent, Q</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DV' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Lock' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'SV' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'T' &amp;&amp; elem != 'V' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q').length == 0</test>
			<error>
				<message>FieldSig contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DV' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Lock' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'SV' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'T' &amp;&amp; elem != 'V' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16264"/>
			<description>Entry DV with type Dictionary in FieldSig shall be one of objects Signature, DocTimeStamp</description>
			<test>DVHasTypeDictionary != true || DV_size == 1</test>
			<error>
				<message>Entry DV with type Dictionary in FieldSig is not one of objects Signature, DocTimeStamp</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16265"/>
			<description>Entry DV in FieldSig shall have type Dictionary</description>
			<test>containsDV == false || DVHasTypeDictionary == true</test>
			<error>
				<message>Entry DV in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16266"/>
			<description>Entry Ff in FieldSig shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldSig is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="9" testNumber="16267"/>
			<description>Entry Ff with type Bitmask in FieldSig shall correspond special case: fn:Eval(fn:BitsClear(4 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldSig doesn't correspond special case: fn:Eval(fn:BitsClear(4 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16268"/>
			<description>Entry DA in FieldSig shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldSig is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16269"/>
			<description>Entry FT in FieldSig is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldSig is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16270"/>
			<description>Entry FT with type Name in FieldSig shall have value Sig</description>
			<test>FTHasTypeName != true || FTNameValue == "Sig"</test>
			<error>
				<message>Entry FT with type Name in FieldSig has incorrect value %2 instead of Sig</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16271"/>
			<description>Entry FT in FieldSig shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldSig is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16272"/>
			<description>Entry TM in FieldSig shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldSig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16273"/>
			<description>Entry Kids with type Array in FieldSig shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldSig is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16274"/>
			<description>Entry Kids in FieldSig shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldSig is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16275"/>
			<description>Entry Lock with type Dictionary in FieldSig shall be object SigFieldLock</description>
			<test>LockHasTypeDictionary != true || Lock_size == 1</test>
			<error>
				<message>Entry Lock with type Dictionary in FieldSig is not object SigFieldLock</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="10" testNumber="16276"/>
			<description>Entry Lock with type Dictionary in FieldSig shall be indirect</description>
			<test>LockHasTypeDictionary != true || isLockIndirect == true</test>
			<error>
				<message>Entry Lock with type Dictionary in FieldSig is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16277"/>
			<description>Entry Lock in FieldSig shall have type Dictionary</description>
			<test>containsLock == false || LockHasTypeDictionary == true</test>
			<error>
				<message>Entry Lock in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16278"/>
			<description>Entry DS in FieldSig shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldSig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16279"/>
			<description>Entry AA with type Dictionary in FieldSig shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldSig is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16280"/>
			<description>Entry AA in FieldSig shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16281"/>
			<description>Entry SV with type Dictionary in FieldSig shall be object SigFieldSeedValue</description>
			<test>SVHasTypeDictionary != true || SV_size == 1</test>
			<error>
				<message>Entry SV with type Dictionary in FieldSig is not object SigFieldSeedValue</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="10" testNumber="16282"/>
			<description>Entry SV with type Dictionary in FieldSig shall be indirect</description>
			<test>SVHasTypeDictionary != true || isSVIndirect == true</test>
			<error>
				<message>Entry SV with type Dictionary in FieldSig is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16283"/>
			<description>Entry SV in FieldSig shall have type Dictionary</description>
			<test>containsSV == false || SVHasTypeDictionary == true</test>
			<error>
				<message>Entry SV in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16284"/>
			<description>Entry TU in FieldSig shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldSig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16285"/>
			<description>Entry T in FieldSig shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldSig is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16286"/>
			<description>Entry V with type Dictionary in FieldSig shall be one of objects Signature, DocTimeStamp</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in FieldSig is not one of objects Signature, DocTimeStamp</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16287"/>
			<description>Entry V in FieldSig shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16288"/>
			<description>Entry RV with type Stream in FieldSig shall be object Stream</description>
			<test>RVHasTypeStream != true || RV_size == 1</test>
			<error>
				<message>Entry RV with type Stream in FieldSig is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="10" testNumber="16289"/>
			<description>Entry RV with type Stream in FieldSig shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldSig is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16290"/>
			<description>Entry RV in FieldSig shall have one of types: StringText, Stream</description>
			<test>containsRV == false || RVHasTypeStringText == true || RVHasTypeStream == true</test>
			<error>
				<message>Entry RV in FieldSig is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16291"/>
			<description>Entry Parent with type Dictionary in FieldSig shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldSig is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16292"/>
			<description>Entry Parent in FieldSig shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldSig is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16293"/>
			<description>Entry Q with type Integer in FieldSig shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldSig has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldSig">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16294"/>
			<description>Entry Q in FieldSig shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldSig is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_7" clause="2" testNumber="16362"/>
			<description>RelatedFilesArraySubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>RelatedFilesArraySubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16363"/>
			<description>Entry 1 with type Stream in RelatedFilesArraySubArray shall be object EmbeddedFileStream</description>
			<test>entry1HasTypeStream != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Stream in RelatedFilesArraySubArray is not object EmbeddedFileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_7" clause="10" testNumber="16364"/>
			<description>Entry 1 with type Stream in RelatedFilesArraySubArray shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in RelatedFilesArraySubArray is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16365"/>
			<description>Entry 1 in RelatedFilesArraySubArray shall have type Stream</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in RelatedFilesArraySubArray is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArraySubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16366"/>
			<description>Entry 0 in RelatedFilesArraySubArray shall have type String</description>
			<test>size &lt;= 0 || entry0HasTypeString == true</test>
			<error>
				<message>Entry 0 in RelatedFilesArraySubArray is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DLightingScheme">
			<id specification="ISO_32000_1_7" clause="1" testNumber="16372"/>
			<description>3DLightingScheme shall not contain entries except Type, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>3DLightingScheme contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DLightingScheme">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16373"/>
			<description>Entry Type with type Name in 3DLightingScheme shall have value 3DLightingScheme</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DLightingScheme"</test>
			<error>
				<message>Entry Type with type Name in 3DLightingScheme has incorrect value %2 instead of 3DLightingScheme</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DLightingScheme">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16374"/>
			<description>Entry Type in 3DLightingScheme shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DLightingScheme is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DLightingScheme">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16375"/>
			<description>Entry Subtype in 3DLightingScheme is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DLightingScheme is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DLightingScheme">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16376"/>
			<description>Entry Subtype with type Name in 3DLightingScheme shall have one of values: Red, Artwork, White, Night, Blue, Cube, Primary, CAD, Hard, Headlamp, None, Day</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Artwork" || SubtypeNameValue == "None" || SubtypeNameValue == "White" || SubtypeNameValue == "Day" || SubtypeNameValue == "Night" || SubtypeNameValue == "Hard" || SubtypeNameValue == "Primary" || SubtypeNameValue == "Blue" || SubtypeNameValue == "Red" || SubtypeNameValue == "Cube" || SubtypeNameValue == "CAD" || SubtypeNameValue == "Headlamp"</test>
			<error>
				<message>Entry Subtype with type Name in 3DLightingScheme has incorrect value %2 instead of Red, Artwork, White, Night, Blue, Cube, Primary, CAD, Hard, Headlamp, None, Day</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DLightingScheme">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16377"/>
			<description>Entry Subtype in 3DLightingScheme shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DLightingScheme is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="1" testNumber="16384"/>
			<description>ActionRichMediaExecute shall not contain entries except Next, Type, S, CMD, TA, TI</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'CMD' &amp;&amp; elem != 'TA' &amp;&amp; elem != 'TI').length == 0</test>
			<error>
				<message>ActionRichMediaExecute contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'CMD' &amp;&amp; elem != 'TA' &amp;&amp; elem != 'TI').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16385"/>
			<description>Entry Next with type Array in ActionRichMediaExecute shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionRichMediaExecute is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16386"/>
			<description>Entry Next with type Dictionary in ActionRichMediaExecute shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript, ActionRichMediaExecute</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionRichMediaExecute is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript, ActionRichMediaExecute</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16387"/>
			<description>Entry Next in ActionRichMediaExecute shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionRichMediaExecute is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16388"/>
			<description>Entry Type with type Name in ActionRichMediaExecute shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionRichMediaExecute has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16389"/>
			<description>Entry Type in ActionRichMediaExecute shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionRichMediaExecute is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16390"/>
			<description>Entry S in ActionRichMediaExecute is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionRichMediaExecute is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16391"/>
			<description>Entry S with type Name in ActionRichMediaExecute shall have value RichMediaExecute</description>
			<test>SHasTypeName != true || SNameValue == "RichMediaExecute"</test>
			<error>
				<message>Entry S with type Name in ActionRichMediaExecute has incorrect value %2 instead of RichMediaExecute</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16392"/>
			<description>Entry S in ActionRichMediaExecute shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionRichMediaExecute is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16393"/>
			<description>Entry CMD with type Dictionary in ActionRichMediaExecute shall be object RichMediaCommand</description>
			<test>CMDHasTypeDictionary != true || CMD_size == 1</test>
			<error>
				<message>Entry CMD with type Dictionary in ActionRichMediaExecute is not object RichMediaCommand</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16394"/>
			<description>Entry CMD in ActionRichMediaExecute is required</description>
			<test>containsCMD == true</test>
			<error>
				<message>Entry CMD in ActionRichMediaExecute is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16395"/>
			<description>Entry CMD in ActionRichMediaExecute shall have type Dictionary</description>
			<test>containsCMD == false || CMDHasTypeDictionary == true</test>
			<error>
				<message>Entry CMD in ActionRichMediaExecute is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16396"/>
			<description>Entry TA with type Dictionary in ActionRichMediaExecute shall be object AnnotRichMedia</description>
			<test>TAHasTypeDictionary != true || TA_size == 1</test>
			<error>
				<message>Entry TA with type Dictionary in ActionRichMediaExecute is not object AnnotRichMedia</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16397"/>
			<description>Entry TA in ActionRichMediaExecute is required</description>
			<test>containsTA == true</test>
			<error>
				<message>Entry TA in ActionRichMediaExecute is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="10" testNumber="16398"/>
			<description>Entry TA with type Dictionary in ActionRichMediaExecute shall be indirect</description>
			<test>TAHasTypeDictionary != true || isTAIndirect == true</test>
			<error>
				<message>Entry TA with type Dictionary in ActionRichMediaExecute is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16399"/>
			<description>Entry TA in ActionRichMediaExecute shall have type Dictionary</description>
			<test>containsTA == false || TAHasTypeDictionary == true</test>
			<error>
				<message>Entry TA in ActionRichMediaExecute is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16400"/>
			<description>Entry TI with type Dictionary in ActionRichMediaExecute shall be object RichMediaInstance</description>
			<test>TIHasTypeDictionary != true || TI_size == 1</test>
			<error>
				<message>Entry TI with type Dictionary in ActionRichMediaExecute is not object RichMediaInstance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="10" testNumber="16401"/>
			<description>Entry TI with type Dictionary in ActionRichMediaExecute shall be indirect</description>
			<test>TIHasTypeDictionary != true || isTIIndirect == true</test>
			<error>
				<message>Entry TI with type Dictionary in ActionRichMediaExecute is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRichMediaExecute">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16402"/>
			<description>Entry TI in ActionRichMediaExecute shall have type Dictionary</description>
			<test>containsTI == false || TIHasTypeDictionary == true</test>
			<error>
				<message>Entry TI in ActionRichMediaExecute is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="1" testNumber="16527"/>
			<description>ActionGoToR shall not contain entries except NewWindow, S, Type, F, Next, D</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'NewWindow' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'D').length == 0</test>
			<error>
				<message>ActionGoToR contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'NewWindow' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'D').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16528"/>
			<description>Entry NewWindow in ActionGoToR shall have type Boolean</description>
			<test>containsNewWindow == false || NewWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry NewWindow in ActionGoToR is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16529"/>
			<description>Entry S in ActionGoToR is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoToR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16530"/>
			<description>Entry S with type Name in ActionGoToR shall have value GoToR</description>
			<test>SHasTypeName != true || SNameValue == "GoToR"</test>
			<error>
				<message>Entry S with type Name in ActionGoToR has incorrect value %2 instead of GoToR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16531"/>
			<description>Entry S in ActionGoToR shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoToR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16532"/>
			<description>Entry Type with type Name in ActionGoToR shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoToR has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16533"/>
			<description>Entry Type in ActionGoToR shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoToR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16534"/>
			<description>Entry F with type Dictionary in ActionGoToR shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionGoToR is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16535"/>
			<description>Entry F in ActionGoToR is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in ActionGoToR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16536"/>
			<description>Entry F in ActionGoToR shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionGoToR is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16537"/>
			<description>Entry Next with type Array in ActionGoToR shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionGoToR is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16538"/>
			<description>Entry Next with type Dictionary in ActionGoToR shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionGoToR is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16539"/>
			<description>Entry Next in ActionGoToR shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionGoToR is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16540"/>
			<description>Entry D with type Array in ActionGoToR shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in ActionGoToR is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16541"/>
			<description>Entry D in ActionGoToR is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionGoToR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16542"/>
			<description>Entry D in ActionGoToR shall have one of types: Name, Array, StringByte</description>
			<test>containsD == false || DHasTypeName == true || DHasTypeArray == true || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in ActionGoToR is not one of types: Name, Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="16584"/>
			<description>DeviceNDict shall not contain entries except Colorants, MixingHints, Subtype, Process</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Colorants' &amp;&amp; elem != 'MixingHints' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Process').length == 0</test>
			<error>
				<message>DeviceNDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Colorants' &amp;&amp; elem != 'MixingHints' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Process').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16585"/>
			<description>Entry Colorants with type Dictionary in DeviceNDict shall be object ColorantsDict</description>
			<test>ColorantsHasTypeDictionary != true || Colorants_size == 1</test>
			<error>
				<message>Entry Colorants with type Dictionary in DeviceNDict is not object ColorantsDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="11" testNumber="16586"/>
			<description>Entry Colorants in DeviceNDict is required, when fn:IsRequired(fn:SinceVersion(1.6 , (@Subtype == NChannel)) &amp;&amp; fn:HasSpotColorants(parent::1))</description>
			<test>(containsColorants == true || ((SubtypeNameValue == "NChannel") &amp;&amp; (parent1EntriesString != null &amp;&amp; parent1EntriesString.split('&amp;').filter(elem =&gt; elem != "Cyan" &amp;&amp; elem != "Magenta" &amp;&amp; elem != "Yellow" &amp;&amp; elem != "Black").length &gt; 0)) == false)</test>
			<error>
				<message>Entry Colorants in DeviceNDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16587"/>
			<description>Entry Colorants in DeviceNDict shall have type Dictionary</description>
			<test>containsColorants == false || ColorantsHasTypeDictionary == true</test>
			<error>
				<message>Entry Colorants in DeviceNDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16588"/>
			<description>Entry MixingHints with type Dictionary in DeviceNDict shall be object DeviceNMixingHints</description>
			<test>MixingHintsHasTypeDictionary != true || MixingHints_size == 1</test>
			<error>
				<message>Entry MixingHints with type Dictionary in DeviceNDict is not object DeviceNMixingHints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16589"/>
			<description>Entry MixingHints in DeviceNDict shall have type Dictionary</description>
			<test>containsMixingHints == false || MixingHintsHasTypeDictionary == true</test>
			<error>
				<message>Entry MixingHints in DeviceNDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16590"/>
			<description>Entry Subtype with type Name in DeviceNDict shall have one of values: DeviceN, NChannel</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "DeviceN" || SubtypeNameValue == "NChannel"</test>
			<error>
				<message>Entry Subtype with type Name in DeviceNDict has incorrect value %2 instead of DeviceN, NChannel</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16591"/>
			<description>Entry Subtype in DeviceNDict shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in DeviceNDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16592"/>
			<description>Entry Process with type Dictionary in DeviceNDict shall be object DeviceNProcess</description>
			<test>ProcessHasTypeDictionary != true || Process_size == 1</test>
			<error>
				<message>Entry Process with type Dictionary in DeviceNDict is not object DeviceNProcess</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="11" testNumber="16593"/>
			<description>Entry Process in DeviceNDict is required, when fn:IsRequired((@Subtype == NChannel) &amp;&amp; fn:HasProcessColorants(parent::1))</description>
			<test>(containsProcess == true || ((SubtypeNameValue == "NChannel") &amp;&amp; (parent1EntriesString != null &amp;&amp; parent1EntriesString.split('&amp;').filter(elem =&gt; elem == "Cyan" || elem == "Magenta" || elem == "Yellow" || elem == "Black").length &gt; 0)) == false)</test>
			<error>
				<message>Entry Process in DeviceNDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16594"/>
			<description>Entry Process in DeviceNDict shall have type Dictionary</description>
			<test>containsProcess == false || ProcessHasTypeDictionary == true</test>
			<error>
				<message>Entry Process in DeviceNDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="1" testNumber="16682"/>
			<description>WebCapturePageSet shall not contain entries except O, ID, S, T, CT, SI, TID, TS, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'O' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'CT' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'TID' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>WebCapturePageSet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'O' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'S' &amp;&amp; elem != 'T' &amp;&amp; elem != 'CT' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'TID' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16683"/>
			<description>Entry O with type Array in WebCapturePageSet shall be object ArrayOfWebCapturePages</description>
			<test>OHasTypeArray != true || O_size == 1</test>
			<error>
				<message>Entry O with type Array in WebCapturePageSet is not object ArrayOfWebCapturePages</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16684"/>
			<description>Entry O in WebCapturePageSet is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in WebCapturePageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16685"/>
			<description>Entry O in WebCapturePageSet shall have type Array</description>
			<test>containsO == false || OHasTypeArray == true</test>
			<error>
				<message>Entry O in WebCapturePageSet is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16686"/>
			<description>Entry ID in WebCapturePageSet is required</description>
			<test>containsID == true</test>
			<error>
				<message>Entry ID in WebCapturePageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16687"/>
			<description>Entry ID in WebCapturePageSet shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in WebCapturePageSet is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16688"/>
			<description>Entry S in WebCapturePageSet is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in WebCapturePageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16689"/>
			<description>Entry S with type Name in WebCapturePageSet shall have value SPS</description>
			<test>SHasTypeName != true || SNameValue == "SPS"</test>
			<error>
				<message>Entry S with type Name in WebCapturePageSet has incorrect value %2 instead of SPS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16690"/>
			<description>Entry S in WebCapturePageSet shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in WebCapturePageSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16691"/>
			<description>Entry T in WebCapturePageSet shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in WebCapturePageSet is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16692"/>
			<description>Entry CT in WebCapturePageSet shall have type StringAscii</description>
			<test>containsCT == false || CTHasTypeStringAscii == true</test>
			<error>
				<message>Entry CT in WebCapturePageSet is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16693"/>
			<description>Entry SI with type Array in WebCapturePageSet shall be object ArrayOfSourceInformation</description>
			<test>SIHasTypeArray != true || SI_size == 1</test>
			<error>
				<message>Entry SI with type Array in WebCapturePageSet is not object ArrayOfSourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16694"/>
			<description>Entry SI with type Dictionary in WebCapturePageSet shall be object SourceInformation</description>
			<test>SIHasTypeDictionary != true || SI_size == 1</test>
			<error>
				<message>Entry SI with type Dictionary in WebCapturePageSet is not object SourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16695"/>
			<description>Entry SI in WebCapturePageSet is required</description>
			<test>containsSI == true</test>
			<error>
				<message>Entry SI in WebCapturePageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16696"/>
			<description>Entry SI in WebCapturePageSet shall have one of types: Array, Dictionary</description>
			<test>containsSI == false || SIHasTypeArray == true || SIHasTypeDictionary == true</test>
			<error>
				<message>Entry SI in WebCapturePageSet is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16697"/>
			<description>Entry TID in WebCapturePageSet shall have type StringByte</description>
			<test>containsTID == false || TIDHasTypeStringByte == true</test>
			<error>
				<message>Entry TID in WebCapturePageSet is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16698"/>
			<description>Entry TS in WebCapturePageSet shall have type Date</description>
			<test>containsTS == false || TSHasTypeDate == true</test>
			<error>
				<message>Entry TS in WebCapturePageSet is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16699"/>
			<description>Entry Type with type Name in WebCapturePageSet shall have value SpiderContentSet</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SpiderContentSet"</test>
			<error>
				<message>Entry Type with type Name in WebCapturePageSet has incorrect value %2 instead of SpiderContentSet</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCapturePageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16700"/>
			<description>Entry Type in WebCapturePageSet shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in WebCapturePageSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfMediaPlayerInfoEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16724"/>
			<description>Entry with type Dictionary in ArrayOfMediaPlayerInfo shall be object MediaPlayerInfo</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfMediaPlayerInfo is not object MediaPlayerInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfMediaPlayerInfoEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16725"/>
			<description>Entry in ArrayOfMediaPlayerInfo shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfMediaPlayerInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArrayEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16731"/>
			<description>Entry with type Array in VisibilityExpressionArray shall be object VisibilityExpressionArray</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in VisibilityExpressionArray is not object VisibilityExpressionArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArrayEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16732"/>
			<description>Entry with type Dictionary in VisibilityExpressionArray shall be object OptContentGroup</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in VisibilityExpressionArray is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArrayEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16733"/>
			<description>Entry in VisibilityExpressionArray shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in VisibilityExpressionArray is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="1" testNumber="16882"/>
			<description>ICCProfileStream shall not contain entries except DestOutputProfile, F, Metadata, DL, Filter, FDecodeParms, DecodeParms, N, Alternate, FFilter, Range, Length</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DestOutputProfile' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Alternate' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'Length').length == 0</test>
			<error>
				<message>ICCProfileStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DestOutputProfile' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Alternate' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'Length').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16883"/>
			<description>Entry DestOutputProfile with type Array in ICCProfileStream shall be object ArrayOfDecodeParams</description>
			<test>DestOutputProfileHasTypeArray != true || DestOutputProfile_size == 1</test>
			<error>
				<message>Entry DestOutputProfile with type Array in ICCProfileStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16884"/>
			<description>Entry DestOutputProfile with type Dictionary in ICCProfileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DestOutputProfileHasTypeDictionary != true || DestOutputProfile_size == 1</test>
			<error>
				<message>Entry DestOutputProfile with type Dictionary in ICCProfileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16885"/>
			<description>Entry DestOutputProfile in ICCProfileStream shall have one of types: Array, Dictionary</description>
			<test>containsDestOutputProfile == false || DestOutputProfileHasTypeArray == true || DestOutputProfileHasTypeDictionary == true</test>
			<error>
				<message>Entry DestOutputProfile in ICCProfileStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16886"/>
			<description>Entry F with type Dictionary in ICCProfileStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ICCProfileStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16887"/>
			<description>Entry F in ICCProfileStream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ICCProfileStream is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16888"/>
			<description>Entry Metadata with type Stream in ICCProfileStream shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in ICCProfileStream is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="10" testNumber="16889"/>
			<description>Entry Metadata with type Stream in ICCProfileStream shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in ICCProfileStream is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16890"/>
			<description>Entry Metadata in ICCProfileStream shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in ICCProfileStream is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16891"/>
			<description>Entry DL in ICCProfileStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ICCProfileStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="16892"/>
			<description>Entry DL with type Integer in ICCProfileStream shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ICCProfileStream doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16893"/>
			<description>Entry Filter with type Array in ICCProfileStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ICCProfileStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16894"/>
			<description>Entry Filter with type Name in ICCProfileStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ICCProfileStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16895"/>
			<description>Entry Filter in ICCProfileStream shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in ICCProfileStream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="16896"/>
			<description>Entry Filter with type Array in ICCProfileStream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ICCProfileStream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16897"/>
			<description>Entry FDecodeParms with type Array in ICCProfileStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ICCProfileStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16898"/>
			<description>Entry FDecodeParms with type Dictionary in ICCProfileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ICCProfileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16899"/>
			<description>Entry FDecodeParms in ICCProfileStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ICCProfileStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="16900"/>
			<description>Entry FDecodeParms with type Array in ICCProfileStream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ICCProfileStream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16901"/>
			<description>Entry DecodeParms with type Array in ICCProfileStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ICCProfileStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16902"/>
			<description>Entry DecodeParms with type Dictionary in ICCProfileStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ICCProfileStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16903"/>
			<description>Entry DecodeParms in ICCProfileStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ICCProfileStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="16904"/>
			<description>Entry DecodeParms with type Array in ICCProfileStream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ICCProfileStream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16905"/>
			<description>Entry N in ICCProfileStream is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in ICCProfileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16906"/>
			<description>Entry N with type Integer in ICCProfileStream shall have one of values: 1, 3, 4</description>
			<test>NHasTypeInteger != true || NIntegerValue == 1 || NIntegerValue == 3 || NIntegerValue == 4</test>
			<error>
				<message>Entry N with type Integer in ICCProfileStream has incorrect value %2 instead of 1, 3, 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16907"/>
			<description>Entry N in ICCProfileStream shall have type Integer</description>
			<test>containsN == false || NHasTypeInteger == true</test>
			<error>
				<message>Entry N in ICCProfileStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16908"/>
			<description>Entry Alternate with type Array in ICCProfileStream shall be one of objects CalGrayColorSpace, CalRGBColorSpace, DeviceNColorSpace, IndexedColorSpace, LabColorSpace, SeparationColorSpace</description>
			<test>AlternateHasTypeArray != true || Alternate_size == 1</test>
			<error>
				<message>Entry Alternate with type Array in ICCProfileStream is not one of objects CalGrayColorSpace, CalRGBColorSpace, DeviceNColorSpace, IndexedColorSpace, LabColorSpace, SeparationColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16909"/>
			<description>Entry Alternate with type Name in ICCProfileStream shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>AlternateHasTypeName != true || AlternateNameValue == "DeviceGray" || AlternateNameValue == "DeviceRGB" || AlternateNameValue == "DeviceCMYK"</test>
			<error>
				<message>Entry Alternate with type Name in ICCProfileStream has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>AlternateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16910"/>
			<description>Entry Alternate in ICCProfileStream shall have one of types: Name, Array</description>
			<test>containsAlternate == false || AlternateHasTypeName == true || AlternateHasTypeArray == true</test>
			<error>
				<message>Entry Alternate in ICCProfileStream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16911"/>
			<description>Entry FFilter with type Array in ICCProfileStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ICCProfileStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="16912"/>
			<description>Entry FFilter with type Name in ICCProfileStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ICCProfileStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16913"/>
			<description>Entry FFilter in ICCProfileStream shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in ICCProfileStream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="16914"/>
			<description>Entry FFilter with type Array in ICCProfileStream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ICCProfileStream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="16915"/>
			<description>Entry Range with type Array in ICCProfileStream shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in ICCProfileStream is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16916"/>
			<description>Entry Range in ICCProfileStream shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in ICCProfileStream is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="16917"/>
			<description>Entry Range with type Array in ICCProfileStream shall correspond special case: fn:Eval(fn:ArrayLength(Range) == (2 * @N))</description>
			<test>RangeHasTypeArray != true || (RangeArraySize == (2 * NIntegerValue))</test>
			<error>
				<message>Entry Range with type Array in ICCProfileStream doesn't correspond special case: fn:Eval(fn:ArrayLength(Range) == (2 * @N))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="16918"/>
			<description>Entry Length in ICCProfileStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ICCProfileStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AICCProfileStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="16919"/>
			<description>Entry Length in ICCProfileStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ICCProfileStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="1" testNumber="17168"/>
			<description>Thumbnail shall not contain entries except Width, BitsPerComponent, Length, ColorSpace, DL, F, Type, FDecodeParms, Filter, Subtype, Decode, FFilter, DecodeParms, Height</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Width' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Height').length == 0</test>
			<error>
				<message>Thumbnail contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Width' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Height').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17169"/>
			<description>Entry Width in Thumbnail is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17170"/>
			<description>Entry Width in Thumbnail shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17171"/>
			<description>Entry BitsPerComponent in Thumbnail is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17172"/>
			<description>Entry BitsPerComponent with type Integer in Thumbnail shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in Thumbnail has incorrect value %2 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17173"/>
			<description>Entry BitsPerComponent in Thumbnail shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17174"/>
			<description>Entry Length in Thumbnail is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17175"/>
			<description>Entry Length in Thumbnail shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17176"/>
			<description>Entry ColorSpace with type Array in Thumbnail shall be object IndexedColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in Thumbnail is not object IndexedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17177"/>
			<description>Entry ColorSpace in Thumbnail is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17178"/>
			<description>Entry ColorSpace with type Name in Thumbnail shall have one of values: DeviceGray, DeviceRGB</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in Thumbnail has incorrect value %2 instead of DeviceGray, DeviceRGB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17179"/>
			<description>Entry ColorSpace in Thumbnail shall have one of types: Name, Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in Thumbnail is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17180"/>
			<description>Entry DL in Thumbnail shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="9" testNumber="17181"/>
			<description>Entry DL with type Integer in Thumbnail shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in Thumbnail doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17182"/>
			<description>Entry F with type Dictionary in Thumbnail shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Thumbnail is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17183"/>
			<description>Entry F in Thumbnail shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in Thumbnail is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17184"/>
			<description>Entry Type with type Name in Thumbnail shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in Thumbnail has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17185"/>
			<description>Entry Type in Thumbnail shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Thumbnail is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17186"/>
			<description>Entry FDecodeParms with type Array in Thumbnail shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in Thumbnail is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17187"/>
			<description>Entry FDecodeParms with type Dictionary in Thumbnail shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in Thumbnail is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17188"/>
			<description>Entry FDecodeParms in Thumbnail shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in Thumbnail is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="9" testNumber="17189"/>
			<description>Entry FDecodeParms with type Array in Thumbnail shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in Thumbnail doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17190"/>
			<description>Entry Filter with type Array in Thumbnail shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in Thumbnail is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17191"/>
			<description>Entry Filter with type Name in Thumbnail shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in Thumbnail has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17192"/>
			<description>Entry Filter in Thumbnail shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in Thumbnail is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="9" testNumber="17193"/>
			<description>Entry Filter with type Array in Thumbnail shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in Thumbnail doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17194"/>
			<description>Entry Subtype with type Name in Thumbnail shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in Thumbnail has incorrect value %2 instead of Image</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17195"/>
			<description>Entry Subtype in Thumbnail shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in Thumbnail is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17196"/>
			<description>Entry Decode with type Array in Thumbnail shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in Thumbnail is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17197"/>
			<description>Entry Decode in Thumbnail shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in Thumbnail is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17198"/>
			<description>Entry FFilter with type Array in Thumbnail shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in Thumbnail is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17199"/>
			<description>Entry FFilter with type Name in Thumbnail shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in Thumbnail has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17200"/>
			<description>Entry FFilter in Thumbnail shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in Thumbnail is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="9" testNumber="17201"/>
			<description>Entry FFilter with type Array in Thumbnail shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in Thumbnail doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17202"/>
			<description>Entry DecodeParms with type Array in Thumbnail shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in Thumbnail is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17203"/>
			<description>Entry DecodeParms with type Dictionary in Thumbnail shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in Thumbnail is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17204"/>
			<description>Entry DecodeParms in Thumbnail shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in Thumbnail is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="9" testNumber="17205"/>
			<description>Entry DecodeParms with type Array in Thumbnail shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in Thumbnail doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17206"/>
			<description>Entry Height in Thumbnail is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17207"/>
			<description>Entry Height in Thumbnail shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARoleMapEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17252"/>
			<description>Entry in RoleMap shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in RoleMap is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeTemplatesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17262"/>
			<description>Entry with type Dictionary in NameNameTreeTemplates shall be object PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeTemplates is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeTemplatesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17263"/>
			<description>Entry in NameNameTreeTemplates shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in NameNameTreeTemplates is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_7" clause="2" testNumber="17282"/>
			<description>ArrayOfGSPDashPatterns shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfGSPDashPatterns contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17283"/>
			<description>Entry 0 with type Array in ArrayOfGSPDashPatterns shall be object ArrayOfDashPatterns</description>
			<test>entry0HasTypeArray != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Array in ArrayOfGSPDashPatterns is not object ArrayOfDashPatterns</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17284"/>
			<description>Entry 0 in ArrayOfGSPDashPatterns shall have type Array</description>
			<test>size &lt;= 0 || entry0HasTypeArray == true</test>
			<error>
				<message>Entry 0 in ArrayOfGSPDashPatterns is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfGSPDashPatterns">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17285"/>
			<description>Entry 1 in ArrayOfGSPDashPatterns shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfGSPDashPatterns is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="2" testNumber="17326"/>
			<description>ArrayOfQuadPointsSubArray shall contain exactly 8 elements</description>
			<test>size == 8</test>
			<error>
				<message>ArrayOfQuadPointsSubArray contains %1 element(s) instead of 8</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17327"/>
			<description>Entry 0 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17328"/>
			<description>Entry 1 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17329"/>
			<description>Entry 3 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17330"/>
			<description>Entry 5 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17331"/>
			<description>Entry 6 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17332"/>
			<description>Entry 4 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17333"/>
			<description>Entry 2 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPointsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17334"/>
			<description>Entry 7 in ArrayOfQuadPointsSubArray shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOfQuadPointsSubArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDashPatternsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17349"/>
			<description>Entry in ArrayOfDashPatterns shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in ArrayOfDashPatterns is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeJavaScriptEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17359"/>
			<description>Entry with type Dictionary in NameNameTreeJavaScript shall be object ActionECMAScript</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeJavaScript is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeJavaScriptEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17360"/>
			<description>Entry in NameNameTreeJavaScript shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in NameNameTreeJavaScript is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="1" testNumber="17381"/>
			<description>ActionGoToE shall not contain entries except S, Next, T, D, NewWindow, F, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'T' &amp;&amp; elem != 'D' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionGoToE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'T' &amp;&amp; elem != 'D' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17382"/>
			<description>Entry S in ActionGoToE is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoToE is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17383"/>
			<description>Entry S with type Name in ActionGoToE shall have value GoToE</description>
			<test>SHasTypeName != true || SNameValue == "GoToE"</test>
			<error>
				<message>Entry S with type Name in ActionGoToE has incorrect value %2 instead of GoToE</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17384"/>
			<description>Entry S in ActionGoToE shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoToE is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17385"/>
			<description>Entry Next with type Array in ActionGoToE shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionGoToE is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17386"/>
			<description>Entry Next with type Dictionary in ActionGoToE shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionGoToE is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17387"/>
			<description>Entry Next in ActionGoToE shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionGoToE is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17388"/>
			<description>Entry T with type Dictionary in ActionGoToE shall be object Target</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in ActionGoToE is not object Target</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="11" testNumber="17389"/>
			<description>Entry T in ActionGoToE is required, when fn:IsRequired(fn:Not(fn:IsPresent(F)))</description>
			<test>(containsT == true || (((containsF == true)) != true) == false)</test>
			<error>
				<message>Entry T in ActionGoToE is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17390"/>
			<description>Entry T in ActionGoToE shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in ActionGoToE is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17391"/>
			<description>Entry D with type Array in ActionGoToE shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in ActionGoToE is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17392"/>
			<description>Entry D in ActionGoToE is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionGoToE is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17393"/>
			<description>Entry D in ActionGoToE shall have one of types: Name, Array, StringByte</description>
			<test>containsD == false || DHasTypeName == true || DHasTypeArray == true || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in ActionGoToE is not one of types: Name, Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17394"/>
			<description>Entry NewWindow in ActionGoToE shall have type Boolean</description>
			<test>containsNewWindow == false || NewWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry NewWindow in ActionGoToE is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17395"/>
			<description>Entry F with type Dictionary in ActionGoToE shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionGoToE is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17396"/>
			<description>Entry F in ActionGoToE shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionGoToE is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17397"/>
			<description>Entry Type with type Name in ActionGoToE shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoToE has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17398"/>
			<description>Entry Type in ActionGoToE shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoToE is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="1" testNumber="17517"/>
			<description>FontType0 shall not contain entries except DescendantFonts, Subtype, ToUnicode, BaseFont, Encoding, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DescendantFonts' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>FontType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DescendantFonts' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17518"/>
			<description>Entry DescendantFonts with type Array in FontType0 shall be object ArrayOfDescendantFonts</description>
			<test>DescendantFontsHasTypeArray != true || DescendantFonts_size == 1</test>
			<error>
				<message>Entry DescendantFonts with type Array in FontType0 is not object ArrayOfDescendantFonts</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17519"/>
			<description>Entry DescendantFonts in FontType0 is required</description>
			<test>containsDescendantFonts == true</test>
			<error>
				<message>Entry DescendantFonts in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17520"/>
			<description>Entry DescendantFonts in FontType0 shall have type Array</description>
			<test>containsDescendantFonts == false || DescendantFontsHasTypeArray == true</test>
			<error>
				<message>Entry DescendantFonts in FontType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17521"/>
			<description>Entry Subtype in FontType0 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17522"/>
			<description>Entry Subtype with type Name in FontType0 shall have value Type0</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type0"</test>
			<error>
				<message>Entry Subtype with type Name in FontType0 has incorrect value %2 instead of Type0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17523"/>
			<description>Entry Subtype in FontType0 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17524"/>
			<description>Entry ToUnicode with type Stream in FontType0 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType0 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="10" testNumber="17525"/>
			<description>Entry ToUnicode with type Stream in FontType0 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17526"/>
			<description>Entry ToUnicode in FontType0 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontType0 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17527"/>
			<description>Entry BaseFont in FontType0 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17528"/>
			<description>Entry BaseFont in FontType0 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17529"/>
			<description>Entry Encoding with type Stream in FontType0 shall be object CMapStream</description>
			<test>EncodingHasTypeStream != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Stream in FontType0 is not object CMapStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17530"/>
			<description>Entry Encoding in FontType0 is required</description>
			<test>containsEncoding == true</test>
			<error>
				<message>Entry Encoding in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="10" testNumber="17531"/>
			<description>Entry Encoding with type Stream in FontType0 shall be indirect</description>
			<test>EncodingHasTypeStream != true || isEncodingIndirect == true</test>
			<error>
				<message>Entry Encoding with type Stream in FontType0 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17532"/>
			<description>Entry Encoding with type Name in FontType0 shall have one of values: GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "GB-EUC-H" || EncodingNameValue == "GB-EUC-V" || EncodingNameValue == "GBpc-EUC-H" || EncodingNameValue == "GBpc-EUC-V" || EncodingNameValue == "GBK-EUC-H" || EncodingNameValue == "GBK-EUC-V" || EncodingNameValue == "GBKp-EUC-H" || EncodingNameValue == "GBKp-EUC-V" || EncodingNameValue == "GBK2K-H" || EncodingNameValue == "GBK2K-V" || EncodingNameValue == "UniGB-UCS2-H" || EncodingNameValue == "UniGB-UCS2-V" || EncodingNameValue == "UniGB-UTF16-H" || EncodingNameValue == "UniGB-UTF16-V" || EncodingNameValue == "B5pc-H" || EncodingNameValue == "B5pc-V" || EncodingNameValue == "HKscs-B5-H" || EncodingNameValue == "HKscs-B5-V" || EncodingNameValue == "ETen-B5-H" || EncodingNameValue == "ETen-B5-V" || EncodingNameValue == "ETenms-B5-H" || EncodingNameValue == "ETenms-B5-V" || EncodingNameValue == "CNS-EUC-H" || EncodingNameValue == "CNS-EUC-V" || EncodingNameValue == "UniCNS-UCS2-H" || EncodingNameValue == "UniCNS-UCS2-V" || EncodingNameValue == "UniCNS-UTF16-H" || EncodingNameValue == "UniCNS-UTF16-V" || EncodingNameValue == "83pv-RKSJ-H" || EncodingNameValue == "90ms-RKSJ-H" || EncodingNameValue == "90ms-RKSJ-V" || EncodingNameValue == "90msp-RKSJ-H" || EncodingNameValue == "90msp-RKSJ-V" || EncodingNameValue == "90pv-RKSJ-H" || EncodingNameValue == "Add-RKSJ-H" || EncodingNameValue == "Add-RKSJ-V" || EncodingNameValue == "EUC-H" || EncodingNameValue == "EUC-V" || EncodingNameValue == "Ext-RKSJ-H" || EncodingNameValue == "Ext-RKSJ-V" || EncodingNameValue == "H" || EncodingNameValue == "V" || EncodingNameValue == "UniJIS-UCS2-H" || EncodingNameValue == "UniJIS-UCS2-V" || EncodingNameValue == "UniJIS-UCS2-HW-H" || EncodingNameValue == "UniJIS-UCS2-HW-V" || EncodingNameValue == "UniJIS-UTF16-H" || EncodingNameValue == "UniJIS-UTF16-V" || EncodingNameValue == "KSC-EUC-H" || EncodingNameValue == "KSC-EUC-V" || EncodingNameValue == "KSCms-UHC-H" || EncodingNameValue == "KSCms-UHC-V" || EncodingNameValue == "KSCms-UHC-HW-H" || EncodingNameValue == "KSCms-UHC-HW-V" || EncodingNameValue == "KSCpc-EUC-H" || EncodingNameValue == "UniKS-UCS2-H" || EncodingNameValue == "UniKS-UCS2-V" || EncodingNameValue == "UniKS-UTF16-H" || EncodingNameValue == "UniKS-UTF16-V" || EncodingNameValue == "Identity-H" || EncodingNameValue == "Identity-V"</test>
			<error>
				<message>Entry Encoding with type Name in FontType0 has incorrect value %2 instead of GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17533"/>
			<description>Entry Encoding in FontType0 shall have one of types: Name, Stream</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeStream == true</test>
			<error>
				<message>Entry Encoding in FontType0 is not one of types: Name, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17534"/>
			<description>Entry Type in FontType0 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17535"/>
			<description>Entry Type with type Name in FontType0 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType0 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17536"/>
			<description>Entry Type in FontType0 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="1" testNumber="17645"/>
			<description>WebCaptureImageSet shall not contain entries except S, Type, O, R, TS, ID, SI, CT</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'O' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'CT').length == 0</test>
			<error>
				<message>WebCaptureImageSet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'O' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'SI' &amp;&amp; elem != 'CT').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17646"/>
			<description>Entry S in WebCaptureImageSet is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17647"/>
			<description>Entry S with type Name in WebCaptureImageSet shall have value SIS</description>
			<test>SHasTypeName != true || SNameValue == "SIS"</test>
			<error>
				<message>Entry S with type Name in WebCaptureImageSet has incorrect value %2 instead of SIS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17648"/>
			<description>Entry S in WebCaptureImageSet shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in WebCaptureImageSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17649"/>
			<description>Entry Type with type Name in WebCaptureImageSet shall have value SpiderContentSet</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SpiderContentSet"</test>
			<error>
				<message>Entry Type with type Name in WebCaptureImageSet has incorrect value %2 instead of SpiderContentSet</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17650"/>
			<description>Entry Type in WebCaptureImageSet shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in WebCaptureImageSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17651"/>
			<description>Entry O with type Array in WebCaptureImageSet shall be object ArrayOfWebCaptureImages</description>
			<test>OHasTypeArray != true || O_size == 1</test>
			<error>
				<message>Entry O with type Array in WebCaptureImageSet is not object ArrayOfWebCaptureImages</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17652"/>
			<description>Entry O in WebCaptureImageSet is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17653"/>
			<description>Entry O in WebCaptureImageSet shall have type Array</description>
			<test>containsO == false || OHasTypeArray == true</test>
			<error>
				<message>Entry O in WebCaptureImageSet is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17654"/>
			<description>Entry R with type Array in WebCaptureImageSet shall be object ArrayOfIntegersGeneral</description>
			<test>RHasTypeArray != true || R_size == 1</test>
			<error>
				<message>Entry R with type Array in WebCaptureImageSet is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17655"/>
			<description>Entry R in WebCaptureImageSet is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17656"/>
			<description>Entry R in WebCaptureImageSet shall have one of types: Array, Integer</description>
			<test>containsR == false || RHasTypeArray == true || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in WebCaptureImageSet is not one of types: Array, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="9" testNumber="17657"/>
			<description>Entry R with type Array in WebCaptureImageSet shall correspond special case: fn:Eval(fn:ArrayLength(O) == fn:ArrayLength(R))</description>
			<test>RHasTypeArray != true || (OArraySize == RArraySize)</test>
			<error>
				<message>Entry R with type Array in WebCaptureImageSet doesn't correspond special case: fn:Eval(fn:ArrayLength(O) == fn:ArrayLength(R))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="9" testNumber="17658"/>
			<description>Entry R with type Integer in WebCaptureImageSet shall correspond special case: fn:Eval(@R &gt; 0)</description>
			<test>RHasTypeInteger != true || (RIntegerValue &gt; 0)</test>
			<error>
				<message>Entry R with type Integer in WebCaptureImageSet doesn't correspond special case: fn:Eval(@R &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17659"/>
			<description>Entry TS in WebCaptureImageSet shall have type Date</description>
			<test>containsTS == false || TSHasTypeDate == true</test>
			<error>
				<message>Entry TS in WebCaptureImageSet is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17660"/>
			<description>Entry ID in WebCaptureImageSet is required</description>
			<test>containsID == true</test>
			<error>
				<message>Entry ID in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17661"/>
			<description>Entry ID in WebCaptureImageSet shall have type String</description>
			<test>containsID == false || entryIDHasTypeString == true</test>
			<error>
				<message>Entry ID in WebCaptureImageSet is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17662"/>
			<description>Entry SI with type Array in WebCaptureImageSet shall be object ArrayOfSourceInformation</description>
			<test>SIHasTypeArray != true || SI_size == 1</test>
			<error>
				<message>Entry SI with type Array in WebCaptureImageSet is not object ArrayOfSourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17663"/>
			<description>Entry SI with type Dictionary in WebCaptureImageSet shall be object SourceInformation</description>
			<test>SIHasTypeDictionary != true || SI_size == 1</test>
			<error>
				<message>Entry SI with type Dictionary in WebCaptureImageSet is not object SourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17664"/>
			<description>Entry SI in WebCaptureImageSet is required</description>
			<test>containsSI == true</test>
			<error>
				<message>Entry SI in WebCaptureImageSet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17665"/>
			<description>Entry SI in WebCaptureImageSet shall have one of types: Array, Dictionary</description>
			<test>containsSI == false || SIHasTypeArray == true || SIHasTypeDictionary == true</test>
			<error>
				<message>Entry SI in WebCaptureImageSet is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureImageSet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17666"/>
			<description>Entry CT in WebCaptureImageSet shall have type String</description>
			<test>containsCT == false || CTHasTypeString == true</test>
			<error>
				<message>Entry CT in WebCaptureImageSet is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="1" testNumber="17886"/>
			<description>FontType1 shall not contain entries except BaseFont, Subtype, Widths, Encoding, Name, LastChar, FontDescriptor, FirstChar, ToUnicode, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>FontType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseFont' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17887"/>
			<description>Entry BaseFont in FontType1 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17888"/>
			<description>Entry BaseFont in FontType1 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17889"/>
			<description>Entry Subtype in FontType1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17890"/>
			<description>Entry Subtype with type Name in FontType1 shall have value Type1</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1"</test>
			<error>
				<message>Entry Subtype with type Name in FontType1 has incorrect value %2 instead of Type1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17891"/>
			<description>Entry Subtype in FontType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17892"/>
			<description>Entry Widths with type Array in FontType1 shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontType1 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="11" testNumber="17893"/>
			<description>Entry Widths in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsWidths == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry Widths in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17894"/>
			<description>Entry Widths in FontType1 shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="17895"/>
			<description>Entry Widths with type Array in FontType1 shall correspond special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</description>
			<test>WidthsHasTypeArray != true || (WidthsArraySize == (1 + (LastCharIntegerValue - FirstCharIntegerValue)))</test>
			<error>
				<message>Entry Widths with type Array in FontType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17896"/>
			<description>Entry Encoding with type Dictionary in FontType1 shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontType1 is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17897"/>
			<description>Entry Encoding with type Name in FontType1 shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontType1 has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17898"/>
			<description>Entry Encoding in FontType1 shall have one of types: Name, Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontType1 is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="11" testNumber="17899"/>
			<description>Entry Name in FontType1 is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17900"/>
			<description>Entry Name in FontType1 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="11" testNumber="17901"/>
			<description>Entry LastChar in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsLastChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry LastChar in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17902"/>
			<description>Entry LastChar in FontType1 shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17903"/>
			<description>Entry FontDescriptor with type Dictionary in FontType1 shall be object FontDescriptorType1</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType1 is not object FontDescriptorType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="11" testNumber="17904"/>
			<description>Entry FontDescriptor in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFontDescriptor == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="12" testNumber="17905"/>
			<description>If entry FontDescriptor with type Dictionary in FontType1 corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17906"/>
			<description>Entry FontDescriptor in FontType1 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="11" testNumber="17907"/>
			<description>Entry FirstChar in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFirstChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FirstChar in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17908"/>
			<description>Entry FirstChar in FontType1 shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17909"/>
			<description>Entry ToUnicode with type Stream in FontType1 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType1 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="10" testNumber="17910"/>
			<description>Entry ToUnicode with type Stream in FontType1 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17911"/>
			<description>Entry ToUnicode in FontType1 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontType1 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="17912"/>
			<description>Entry Type in FontType1 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17913"/>
			<description>Entry Type with type Name in FontType1 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType1 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17914"/>
			<description>Entry Type in FontType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_7" clause="2" testNumber="17974"/>
			<description>CalRGBColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>CalRGBColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="17975"/>
			<description>Entry 1 with type Dictionary in CalRGBColorSpace shall be object CalRGBDict</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in CalRGBColorSpace is not object CalRGBDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17976"/>
			<description>Entry 1 in CalRGBColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in CalRGBColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_7" clause="6" testNumber="17977"/>
			<description>Entry 0 with type Name in CalRGBColorSpace shall have value CalRGB</description>
			<test>entry0HasTypeName != true || entry0NameValue == "CalRGB"</test>
			<error>
				<message>Entry 0 with type Name in CalRGBColorSpace has incorrect value %2 instead of CalRGB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17978"/>
			<description>Entry 0 in CalRGBColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in CalRGBColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesGeneralEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="17988"/>
			<description>Entry in ArrayOfNamesGeneral shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfNamesGeneral is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="1" testNumber="18232"/>
			<description>FontType3 shall not contain entries except FontMatrix, Name, Resources, Subtype, Type, CharProcs, Encoding, FontBBox, LastChar, Widths, FontDescriptor, FirstChar, ToUnicode</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FontMatrix' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'CharProcs' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'ToUnicode').length == 0</test>
			<error>
				<message>FontType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FontMatrix' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'CharProcs' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'ToUnicode').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18233"/>
			<description>Entry FontMatrix in FontType3 is required</description>
			<test>containsFontMatrix == true</test>
			<error>
				<message>Entry FontMatrix in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18234"/>
			<description>Entry FontMatrix in FontType3 shall have type Matrix</description>
			<test>containsFontMatrix == false || FontMatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry FontMatrix in FontType3 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="11" testNumber="18235"/>
			<description>Entry Name in FontType3 is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18236"/>
			<description>Entry Name in FontType3 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18237"/>
			<description>Entry Resources with type Dictionary in FontType3 shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in FontType3 is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18238"/>
			<description>Entry Resources in FontType3 shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18239"/>
			<description>Entry Subtype in FontType3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18240"/>
			<description>Entry Subtype with type Name in FontType3 shall have value Type3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type3"</test>
			<error>
				<message>Entry Subtype with type Name in FontType3 has incorrect value %2 instead of Type3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18241"/>
			<description>Entry Subtype in FontType3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18242"/>
			<description>Entry Type in FontType3 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18243"/>
			<description>Entry Type with type Name in FontType3 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType3 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18244"/>
			<description>Entry Type in FontType3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18245"/>
			<description>Entry CharProcs with type Dictionary in FontType3 shall be object CharProcMap</description>
			<test>CharProcsHasTypeDictionary != true || CharProcs_size == 1</test>
			<error>
				<message>Entry CharProcs with type Dictionary in FontType3 is not object CharProcMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18246"/>
			<description>Entry CharProcs in FontType3 is required</description>
			<test>containsCharProcs == true</test>
			<error>
				<message>Entry CharProcs in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18247"/>
			<description>Entry CharProcs in FontType3 shall have type Dictionary</description>
			<test>containsCharProcs == false || CharProcsHasTypeDictionary == true</test>
			<error>
				<message>Entry CharProcs in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18248"/>
			<description>Entry Encoding with type Dictionary in FontType3 shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontType3 is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18249"/>
			<description>Entry Encoding in FontType3 is required</description>
			<test>containsEncoding == true</test>
			<error>
				<message>Entry Encoding in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18250"/>
			<description>Entry Encoding in FontType3 shall have type Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18251"/>
			<description>Entry FontBBox in FontType3 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18252"/>
			<description>Entry FontBBox in FontType3 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontType3 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18253"/>
			<description>Entry LastChar in FontType3 is required</description>
			<test>containsLastChar == true</test>
			<error>
				<message>Entry LastChar in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18254"/>
			<description>Entry LastChar in FontType3 shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18255"/>
			<description>Entry Widths with type Array in FontType3 shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18256"/>
			<description>Entry Widths in FontType3 is required</description>
			<test>containsWidths == true</test>
			<error>
				<message>Entry Widths in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18257"/>
			<description>Entry Widths in FontType3 shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="9" testNumber="18258"/>
			<description>Entry Widths with type Array in FontType3 shall correspond special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</description>
			<test>WidthsHasTypeArray != true || (WidthsArraySize == (1 + (LastCharIntegerValue - FirstCharIntegerValue)))</test>
			<error>
				<message>Entry Widths with type Array in FontType3 doesn't correspond special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18259"/>
			<description>Entry FontDescriptor with type Dictionary in FontType3 shall be object FontDescriptorType3</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType3 is not object FontDescriptorType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="11" testNumber="18260"/>
			<description>Entry FontDescriptor in FontType3 is required, when fn:IsRequired(fn:IsPDFTagged())</description>
			<test>(containsFontDescriptor == true || (isPDFTagged) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="12" testNumber="18261"/>
			<description>If entry FontDescriptor with type Dictionary in FontType3 corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18262"/>
			<description>Entry FontDescriptor in FontType3 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18263"/>
			<description>Entry FirstChar in FontType3 is required</description>
			<test>containsFirstChar == true</test>
			<error>
				<message>Entry FirstChar in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18264"/>
			<description>Entry FirstChar in FontType3 shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18265"/>
			<description>Entry ToUnicode with type Stream in FontType3 shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType3 is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="10" testNumber="18266"/>
			<description>Entry ToUnicode with type Stream in FontType3 shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontType3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18267"/>
			<description>Entry ToUnicode in FontType3 shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontType3 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="1" testNumber="18395"/>
			<description>FilterCCITTFaxDecode shall not contain entries except Columns, EncodedByteAlign, EndOfBlock, BlackIs1, DamagedRowsBeforeError, Rows, EndOfLine, K, Blackls1</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Columns' &amp;&amp; elem != 'EncodedByteAlign' &amp;&amp; elem != 'EndOfBlock' &amp;&amp; elem != 'BlackIs1' &amp;&amp; elem != 'DamagedRowsBeforeError' &amp;&amp; elem != 'Rows' &amp;&amp; elem != 'EndOfLine' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Blackls1').length == 0</test>
			<error>
				<message>FilterCCITTFaxDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Columns' &amp;&amp; elem != 'EncodedByteAlign' &amp;&amp; elem != 'EndOfBlock' &amp;&amp; elem != 'BlackIs1' &amp;&amp; elem != 'DamagedRowsBeforeError' &amp;&amp; elem != 'Rows' &amp;&amp; elem != 'EndOfLine' &amp;&amp; elem != 'K' &amp;&amp; elem != 'Blackls1').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="14" testNumber="18396"/>
			<description>Entry Columns with type Integer in FilterCCITTFaxDecode shall correspond possible value predicate: fn:Eval(@Columns &gt;= 0)</description>
			<test>ColumnsHasTypeInteger != true || ColumnsIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Columns with type Integer in FilterCCITTFaxDecode doesn't correspond possible value predicate: fn:Eval(@Columns &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18397"/>
			<description>Entry Columns in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18398"/>
			<description>Entry EncodedByteAlign in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEncodedByteAlign == false || EncodedByteAlignHasTypeBoolean == true</test>
			<error>
				<message>Entry EncodedByteAlign in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18399"/>
			<description>Entry EndOfBlock in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEndOfBlock == false || EndOfBlockHasTypeBoolean == true</test>
			<error>
				<message>Entry EndOfBlock in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18400"/>
			<description>Entry BlackIs1 in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsBlackIs1 == false || BlackIs1HasTypeBoolean == true</test>
			<error>
				<message>Entry BlackIs1 in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="14" testNumber="18401"/>
			<description>Entry DamagedRowsBeforeError with type Integer in FilterCCITTFaxDecode shall correspond possible value predicate: fn:Eval(@DamagedRowsBeforeError &gt;= 0)</description>
			<test>DamagedRowsBeforeErrorHasTypeInteger != true || DamagedRowsBeforeErrorIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DamagedRowsBeforeError with type Integer in FilterCCITTFaxDecode doesn't correspond possible value predicate: fn:Eval(@DamagedRowsBeforeError &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18402"/>
			<description>Entry DamagedRowsBeforeError in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsDamagedRowsBeforeError == false || DamagedRowsBeforeErrorHasTypeInteger == true</test>
			<error>
				<message>Entry DamagedRowsBeforeError in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="14" testNumber="18403"/>
			<description>Entry Rows with type Integer in FilterCCITTFaxDecode shall correspond possible value predicate: fn:Eval(@Rows &gt;= 0)</description>
			<test>RowsHasTypeInteger != true || RowsIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Rows with type Integer in FilterCCITTFaxDecode doesn't correspond possible value predicate: fn:Eval(@Rows &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18404"/>
			<description>Entry Rows in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsRows == false || RowsHasTypeInteger == true</test>
			<error>
				<message>Entry Rows in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18405"/>
			<description>Entry EndOfLine in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEndOfLine == false || EndOfLineHasTypeBoolean == true</test>
			<error>
				<message>Entry EndOfLine in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18406"/>
			<description>Entry K in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsK == false || KHasTypeInteger == true</test>
			<error>
				<message>Entry K in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18407"/>
			<description>Entry Blackls1 in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsBlackls1 == false || Blackls1HasTypeBoolean == true</test>
			<error>
				<message>Entry Blackls1 in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="1" testNumber="18441"/>
			<description>FileSpecRF shall not contain entries except F, UF</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'UF').length == 0</test>
			<error>
				<message>FileSpecRF contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'UF').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18442"/>
			<description>Entry F with type Array in FileSpecRF shall be object RelatedFilesArray</description>
			<test>FHasTypeArray != true || F_size == 1</test>
			<error>
				<message>Entry F with type Array in FileSpecRF is not object RelatedFilesArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="10" testNumber="18443"/>
			<description>Entry F with type Array in FileSpecRF shall be indirect</description>
			<test>FHasTypeArray != true || isFIndirect == true</test>
			<error>
				<message>Entry F with type Array in FileSpecRF is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18444"/>
			<description>Entry F in FileSpecRF shall have type Array</description>
			<test>containsF == false || FHasTypeArray == true</test>
			<error>
				<message>Entry F in FileSpecRF is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="9" testNumber="18445"/>
			<description>Entry F with type Array in FileSpecRF shall correspond special case: fn:Eval((fn:ArrayLength(F) mod 2) == 0)</description>
			<test>FHasTypeArray != true || ((FArraySize % 2) == 0)</test>
			<error>
				<message>Entry F with type Array in FileSpecRF doesn't correspond special case: fn:Eval((fn:ArrayLength(F) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18446"/>
			<description>Entry UF with type Array in FileSpecRF shall be object RelatedFilesArray</description>
			<test>UFHasTypeArray != true || UF_size == 1</test>
			<error>
				<message>Entry UF with type Array in FileSpecRF is not object RelatedFilesArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="10" testNumber="18447"/>
			<description>Entry UF with type Array in FileSpecRF shall be indirect</description>
			<test>UFHasTypeArray != true || isUFIndirect == true</test>
			<error>
				<message>Entry UF with type Array in FileSpecRF is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18448"/>
			<description>Entry UF in FileSpecRF shall have type Array</description>
			<test>containsUF == false || UFHasTypeArray == true</test>
			<error>
				<message>Entry UF in FileSpecRF is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecRF">
			<id specification="ISO_32000_1_7" clause="9" testNumber="18449"/>
			<description>Entry UF with type Array in FileSpecRF shall correspond special case: fn:Eval((fn:ArrayLength(UF) mod 2) == 0)</description>
			<test>UFHasTypeArray != true || ((UFArraySize % 2) == 0)</test>
			<error>
				<message>Entry UF with type Array in FileSpecRF doesn't correspond special case: fn:Eval((fn:ArrayLength(UF) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaConfigurationEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18459"/>
			<description>Entry with type Dictionary in ArrayOfRichMediaConfiguration shall be object RichMediaConfiguration</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfRichMediaConfiguration is not object RichMediaConfiguration</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaConfigurationEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="18460"/>
			<description>Entry with type Dictionary in ArrayOfRichMediaConfiguration shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfRichMediaConfiguration is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaConfigurationEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18461"/>
			<description>Entry in ArrayOfRichMediaConfiguration shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfRichMediaConfiguration is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSchema">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18465"/>
			<description>Entry Type with type Name in CollectionSchema shall have value CollectionSchema</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CollectionSchema"</test>
			<error>
				<message>Entry Type with type Name in CollectionSchema has incorrect value %2 instead of CollectionSchema</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSchema">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18466"/>
			<description>Entry Type in CollectionSchema shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CollectionSchema is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="1" testNumber="18584"/>
			<description>FieldBtnCheckbox shall not contain entries except FT, Kids, DA, TM, V, DS, RV, Ff, AA, TU, Opt, T, DV, Parent, Q</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FT' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'V' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'T' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q').length == 0</test>
			<error>
				<message>FieldBtnCheckbox contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FT' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'V' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'T' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Q').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18585"/>
			<description>Entry FT in FieldBtnCheckbox is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldBtnCheckbox is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18586"/>
			<description>Entry FT with type Name in FieldBtnCheckbox shall have value Btn</description>
			<test>FTHasTypeName != true || FTNameValue == "Btn"</test>
			<error>
				<message>Entry FT with type Name in FieldBtnCheckbox has incorrect value %2 instead of Btn</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18587"/>
			<description>Entry FT in FieldBtnCheckbox shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldBtnCheckbox is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18588"/>
			<description>Entry Kids with type Array in FieldBtnCheckbox shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldBtnCheckbox is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18589"/>
			<description>Entry Kids in FieldBtnCheckbox shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldBtnCheckbox is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18590"/>
			<description>Entry DA in FieldBtnCheckbox is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldBtnCheckbox is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18591"/>
			<description>Entry DA in FieldBtnCheckbox shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldBtnCheckbox is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18592"/>
			<description>Entry TM in FieldBtnCheckbox shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldBtnCheckbox is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18593"/>
			<description>Entry V in FieldBtnCheckbox shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in FieldBtnCheckbox is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18594"/>
			<description>Entry DS in FieldBtnCheckbox shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldBtnCheckbox is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18595"/>
			<description>Entry RV with type Stream in FieldBtnCheckbox shall be object Stream</description>
			<test>RVHasTypeStream != true || RV_size == 1</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnCheckbox is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="10" testNumber="18596"/>
			<description>Entry RV with type Stream in FieldBtnCheckbox shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldBtnCheckbox is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18597"/>
			<description>Entry RV in FieldBtnCheckbox shall have one of types: StringText, Stream</description>
			<test>containsRV == false || RVHasTypeStringText == true || RVHasTypeStream == true</test>
			<error>
				<message>Entry RV in FieldBtnCheckbox is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18598"/>
			<description>Entry Ff in FieldBtnCheckbox shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldBtnCheckbox is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="9" testNumber="18599"/>
			<description>Entry Ff with type Bitmask in FieldBtnCheckbox shall correspond special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitsClear(16 , 25) &amp;&amp; fn:BitsClear(27 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0) &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldBtnCheckbox doesn't correspond special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitsClear(16 , 25) &amp;&amp; fn:BitsClear(27 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18600"/>
			<description>Entry AA with type Dictionary in FieldBtnCheckbox shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldBtnCheckbox is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18601"/>
			<description>Entry AA in FieldBtnCheckbox shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldBtnCheckbox is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18602"/>
			<description>Entry TU in FieldBtnCheckbox shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldBtnCheckbox is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18603"/>
			<description>Entry Opt with type Array in FieldBtnCheckbox shall be object ArrayOfStringsText</description>
			<test>OptHasTypeArray != true || Opt_size == 1</test>
			<error>
				<message>Entry Opt with type Array in FieldBtnCheckbox is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18604"/>
			<description>Entry Opt in FieldBtnCheckbox shall have type Array</description>
			<test>containsOpt == false || OptHasTypeArray == true</test>
			<error>
				<message>Entry Opt in FieldBtnCheckbox is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18605"/>
			<description>Entry T in FieldBtnCheckbox shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldBtnCheckbox is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18606"/>
			<description>Entry DV in FieldBtnCheckbox shall have type Name</description>
			<test>containsDV == false || DVHasTypeName == true</test>
			<error>
				<message>Entry DV in FieldBtnCheckbox is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18607"/>
			<description>Entry Parent with type Dictionary in FieldBtnCheckbox shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldBtnCheckbox is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18608"/>
			<description>Entry Parent in FieldBtnCheckbox shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldBtnCheckbox is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18609"/>
			<description>Entry Q with type Integer in FieldBtnCheckbox shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldBtnCheckbox has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldBtnCheckbox">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18610"/>
			<description>Entry Q in FieldBtnCheckbox shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldBtnCheckbox is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="1" testNumber="18660"/>
			<description>MediaScreenParametersMHBE shall not contain entries except O, W, B, M, F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'O' &amp;&amp; elem != 'W' &amp;&amp; elem != 'B' &amp;&amp; elem != 'M' &amp;&amp; elem != 'F').length == 0</test>
			<error>
				<message>MediaScreenParametersMHBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'O' &amp;&amp; elem != 'W' &amp;&amp; elem != 'B' &amp;&amp; elem != 'M' &amp;&amp; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="14" testNumber="18661"/>
			<description>Entry O with type Number in MediaScreenParametersMHBE shall correspond possible value predicate: fn:Eval((@O &gt;= 0.0) &amp;&amp; (@O &lt;= 1.0))</description>
			<test>OHasTypeNumber != true || (ONumberValue &gt;= 0.0) &amp;&amp; (ONumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry O with type Number in MediaScreenParametersMHBE doesn't correspond possible value predicate: fn:Eval((@O &gt;= 0.0) &amp;&amp; (@O &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18662"/>
			<description>Entry O in MediaScreenParametersMHBE shall have type Number</description>
			<test>containsO == false || OHasTypeNumber == true</test>
			<error>
				<message>Entry O in MediaScreenParametersMHBE is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18663"/>
			<description>Entry W with type Integer in MediaScreenParametersMHBE shall have one of values: 0, 1, 2, 3</description>
			<test>WHasTypeInteger != true || WIntegerValue == 0 || WIntegerValue == 1 || WIntegerValue == 2 || WIntegerValue == 3</test>
			<error>
				<message>Entry W with type Integer in MediaScreenParametersMHBE has incorrect value %2 instead of 0, 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>WIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18664"/>
			<description>Entry W in MediaScreenParametersMHBE shall have type Integer</description>
			<test>containsW == false || WHasTypeInteger == true</test>
			<error>
				<message>Entry W in MediaScreenParametersMHBE is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18665"/>
			<description>Entry B with type Array in MediaScreenParametersMHBE shall be object ArrayOf_3RGBNumbers</description>
			<test>BHasTypeArray != true || B_size == 1</test>
			<error>
				<message>Entry B with type Array in MediaScreenParametersMHBE is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18666"/>
			<description>Entry B in MediaScreenParametersMHBE shall have type Array</description>
			<test>containsB == false || BHasTypeArray == true</test>
			<error>
				<message>Entry B in MediaScreenParametersMHBE is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18667"/>
			<description>Entry M with type Integer in MediaScreenParametersMHBE shall have one of values: 0, 1, 2, 3, 4, 5, 6</description>
			<test>MHasTypeInteger != true || MIntegerValue == 0 || MIntegerValue == 1 || MIntegerValue == 2 || MIntegerValue == 3 || MIntegerValue == 4 || MIntegerValue == 5 || MIntegerValue == 6</test>
			<error>
				<message>Entry M with type Integer in MediaScreenParametersMHBE has incorrect value %2 instead of 0, 1, 2, 3, 4, 5, 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>MIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18668"/>
			<description>Entry M in MediaScreenParametersMHBE shall have type Integer</description>
			<test>containsM == false || MHasTypeInteger == true</test>
			<error>
				<message>Entry M in MediaScreenParametersMHBE is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18669"/>
			<description>Entry F with type Dictionary in MediaScreenParametersMHBE shall be object FloatingWindowParameters</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in MediaScreenParametersMHBE is not object FloatingWindowParameters</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParametersMHBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18670"/>
			<description>Entry F in MediaScreenParametersMHBE shall have type Dictionary</description>
			<test>containsF == false || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in MediaScreenParametersMHBE is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18686"/>
			<description>Entry with type Dictionary in DictionaryOfFunctions shall be one of objects FunctionType2, FunctionType3</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in DictionaryOfFunctions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18687"/>
			<description>Entry with type Stream in DictionaryOfFunctions shall be one of objects FunctionType0, FunctionType4</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in DictionaryOfFunctions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="18688"/>
			<description>Entry with type Stream in DictionaryOfFunctions shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in DictionaryOfFunctions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctionsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18689"/>
			<description>Entry in DictionaryOfFunctions shall have one of types: Dictionary, Stream</description>
			<test>HasTypeDictionary == true || HasTypeStream == true</test>
			<error>
				<message>Entry %1 in DictionaryOfFunctions is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="1" testNumber="18890"/>
			<description>ShadingType4 shall not contain entries except Background, BitsPerFlag, DecodeParms, Length, AntiAlias, F, Decode, BitsPerComponent, FFilter, ColorSpace, Function, Filter, BBox, ShadingType, FDecodeParms, BitsPerCoordinate, DL</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Background' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'AntiAlias' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'DL').length == 0</test>
			<error>
				<message>ShadingType4 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Background' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'AntiAlias' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'DL').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18891"/>
			<description>Entry Background with type Array in ShadingType4 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType4 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18892"/>
			<description>Entry Background in ShadingType4 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType4 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18893"/>
			<description>Entry BitsPerFlag in ShadingType4 is required</description>
			<test>containsBitsPerFlag == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18894"/>
			<description>Entry BitsPerFlag with type Integer in ShadingType4 shall have one of values: 2, 4, 8</description>
			<test>BitsPerFlagHasTypeInteger != true || BitsPerFlagIntegerValue == 2 || BitsPerFlagIntegerValue == 4 || BitsPerFlagIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerFlag with type Integer in ShadingType4 has incorrect value %2 instead of 2, 4, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerFlagIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18895"/>
			<description>Entry BitsPerFlag in ShadingType4 shall have type Integer</description>
			<test>containsBitsPerFlag == false || BitsPerFlagHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18896"/>
			<description>Entry DecodeParms with type Array in ShadingType4 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType4 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18897"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType4 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType4 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18898"/>
			<description>Entry DecodeParms in ShadingType4 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType4 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="9" testNumber="18899"/>
			<description>Entry DecodeParms with type Array in ShadingType4 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType4 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18900"/>
			<description>Entry Length in ShadingType4 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18901"/>
			<description>Entry Length in ShadingType4 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18902"/>
			<description>Entry AntiAlias in ShadingType4 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType4 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18903"/>
			<description>Entry F with type Dictionary in ShadingType4 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ShadingType4 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18904"/>
			<description>Entry F in ShadingType4 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ShadingType4 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18905"/>
			<description>Entry Decode with type Array in ShadingType4 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in ShadingType4 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18906"/>
			<description>Entry Decode in ShadingType4 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType4 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18907"/>
			<description>Entry BitsPerComponent in ShadingType4 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18908"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType4 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType4 has incorrect value %2 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18909"/>
			<description>Entry BitsPerComponent in ShadingType4 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18910"/>
			<description>Entry FFilter with type Array in ShadingType4 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType4 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18911"/>
			<description>Entry FFilter with type Name in ShadingType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType4 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18912"/>
			<description>Entry FFilter in ShadingType4 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in ShadingType4 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="9" testNumber="18913"/>
			<description>Entry FFilter with type Array in ShadingType4 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType4 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18914"/>
			<description>Entry ColorSpace with type Array in ShadingType4 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType4 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18915"/>
			<description>Entry ColorSpace in ShadingType4 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18916"/>
			<description>Entry ColorSpace with type Name in ShadingType4 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType4 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18917"/>
			<description>Entry ColorSpace in ShadingType4 shall have one of types: Name, Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType4 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18918"/>
			<description>Entry Function with type Array in ShadingType4 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType4 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18919"/>
			<description>Entry Function with type Dictionary in ShadingType4 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType4 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18920"/>
			<description>Entry Function with type Stream in ShadingType4 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType4 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="10" testNumber="18921"/>
			<description>Entry Function with type Stream in ShadingType4 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType4 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18922"/>
			<description>Entry Function in ShadingType4 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType4 is not one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18923"/>
			<description>Entry Filter with type Array in ShadingType4 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ShadingType4 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18924"/>
			<description>Entry Filter with type Name in ShadingType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType4 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18925"/>
			<description>Entry Filter in ShadingType4 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in ShadingType4 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="9" testNumber="18926"/>
			<description>Entry Filter with type Array in ShadingType4 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType4 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18927"/>
			<description>Entry BBox in ShadingType4 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType4 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18928"/>
			<description>Entry ShadingType in ShadingType4 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18929"/>
			<description>Entry ShadingType with type Integer in ShadingType4 shall have value 4</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 4</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType4 has incorrect value %2 instead of 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18930"/>
			<description>Entry ShadingType in ShadingType4 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18931"/>
			<description>Entry FDecodeParms with type Array in ShadingType4 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType4 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="18932"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType4 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType4 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18933"/>
			<description>Entry FDecodeParms in ShadingType4 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType4 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="9" testNumber="18934"/>
			<description>Entry FDecodeParms with type Array in ShadingType4 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType4 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="7" testNumber="18935"/>
			<description>Entry BitsPerCoordinate in ShadingType4 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="6" testNumber="18936"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType4 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType4 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18937"/>
			<description>Entry BitsPerCoordinate in ShadingType4 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="18938"/>
			<description>Entry DL in ShadingType4 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ShadingType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType4">
			<id specification="ISO_32000_1_7" clause="9" testNumber="18939"/>
			<description>Entry DL with type Integer in ShadingType4 shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ShadingType4 doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="1" testNumber="19004"/>
			<description>OptContentZoom shall not contain entries except max, min</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'max' &amp;&amp; elem != 'min').length == 0</test>
			<error>
				<message>OptContentZoom contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'max' &amp;&amp; elem != 'min').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="11" testNumber="19005"/>
			<description>Entry max in OptContentZoom is required, when fn:IsRequired(fn:Not(fn:IsPresent(min)))</description>
			<test>(containsmax == true || (((containsmin == true)) != true) == false)</test>
			<error>
				<message>Entry max in OptContentZoom is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="14" testNumber="19006"/>
			<description>Entry max with type Number in OptContentZoom shall correspond possible value predicate: fn:Eval((@max &gt;= 0.0) &amp;&amp; (@max &gt;= @min))</description>
			<test>maxHasTypeNumber != true || (maxNumberValue &gt;= 0.0) &amp;&amp; (maxNumberValue &gt;= minNumberValue)</test>
			<error>
				<message>Entry max with type Number in OptContentZoom doesn't correspond possible value predicate: fn:Eval((@max &gt;= 0.0) &amp;&amp; (@max &gt;= @min))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19007"/>
			<description>Entry max in OptContentZoom shall have type Number</description>
			<test>containsmax == false || maxHasTypeNumber == true</test>
			<error>
				<message>Entry max in OptContentZoom is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="11" testNumber="19008"/>
			<description>Entry min in OptContentZoom is required, when fn:IsRequired(fn:Not(fn:IsPresent(max)))</description>
			<test>(containsmin == true || (((containsmax == true)) != true) == false)</test>
			<error>
				<message>Entry min in OptContentZoom is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="14" testNumber="19009"/>
			<description>Entry min with type Number in OptContentZoom shall correspond possible value predicate: fn:Eval((@min &gt;= 0.0) &amp;&amp; (@min &lt;= @max))</description>
			<test>minHasTypeNumber != true || (minNumberValue &gt;= 0.0) &amp;&amp; (minNumberValue &lt;= maxNumberValue)</test>
			<error>
				<message>Entry min with type Number in OptContentZoom doesn't correspond possible value predicate: fn:Eval((@min &gt;= 0.0) &amp;&amp; (@min &lt;= @max))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentZoom">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19010"/>
			<description>Entry min in OptContentZoom shall have type Number</description>
			<test>containsmin == false || minHasTypeNumber == true</test>
			<error>
				<message>Entry min in OptContentZoom is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="1" testNumber="19046"/>
			<description>SignatureReferenceIdentity shall not contain entries except Data, TransformMethod, Type, DigestMethod</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DigestMethod').length == 0</test>
			<error>
				<message>SignatureReferenceIdentity contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'TransformMethod' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DigestMethod').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19047"/>
			<description>Entry Data with type Array in SignatureReferenceIdentity shall be object _UniversalArray</description>
			<test>DataHasTypeArray != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Array in SignatureReferenceIdentity is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19048"/>
			<description>Entry Data with type Dictionary in SignatureReferenceIdentity shall be object _UniversalDictionary</description>
			<test>DataHasTypeDictionary != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Dictionary in SignatureReferenceIdentity is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19049"/>
			<description>Entry Data with type Stream in SignatureReferenceIdentity shall be object Stream</description>
			<test>DataHasTypeStream != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceIdentity is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19050"/>
			<description>Entry Data in SignatureReferenceIdentity is required</description>
			<test>containsData == true</test>
			<error>
				<message>Entry Data in SignatureReferenceIdentity is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="10" testNumber="19051"/>
			<description>Entry Data with type Stream in SignatureReferenceIdentity shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceIdentity is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19052"/>
			<description>Entry Data in SignatureReferenceIdentity shall have one of types: Name, Array, Boolean, Integer, Dictionary, Stream, String</description>
			<test>containsData == false || DataHasTypeName == true || DataHasTypeArray == true || DataHasTypeBoolean == true || DataHasTypeInteger == true || DataHasTypeDictionary == true || DataHasTypeStream == true || DataHasTypeString == true</test>
			<error>
				<message>Entry Data in SignatureReferenceIdentity is not one of types: Name, Array, Boolean, Integer, Dictionary, Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19053"/>
			<description>Entry TransformMethod in SignatureReferenceIdentity is required</description>
			<test>containsTransformMethod == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceIdentity is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19054"/>
			<description>Entry TransformMethod with type Name in SignatureReferenceIdentity shall have value Identity</description>
			<test>TransformMethodHasTypeName != true || TransformMethodNameValue == "Identity"</test>
			<error>
				<message>Entry TransformMethod with type Name in SignatureReferenceIdentity has incorrect value %2 instead of Identity</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransformMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19055"/>
			<description>Entry TransformMethod in SignatureReferenceIdentity shall have type Name</description>
			<test>containsTransformMethod == false || TransformMethodHasTypeName == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceIdentity is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19056"/>
			<description>Entry Type with type Name in SignatureReferenceIdentity shall have value SigRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigRef"</test>
			<error>
				<message>Entry Type with type Name in SignatureReferenceIdentity has incorrect value %2 instead of SigRef</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19057"/>
			<description>Entry Type in SignatureReferenceIdentity shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SignatureReferenceIdentity is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="13" testNumber="19058"/>
			<description>Entry DigestMethod with type Name in SignatureReferenceIdentity shall have one of values: SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</description>
			<test>DigestMethodHasTypeName != true || DigestMethodNameValue == "MD5" || DigestMethodNameValue == "SHA1" || DigestMethodNameValue == SHA3-256 || DigestMethodNameValue == SHA3-384 || DigestMethodNameValue == SHA3-512 || DigestMethodNameValue == SHAKE256</test>
			<error>
				<message>Entry DigestMethod with type Name in SignatureReferenceIdentity has incorrect value %2 instead of SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DigestMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceIdentity">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19059"/>
			<description>Entry DigestMethod in SignatureReferenceIdentity shall have type Name</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeName == true</test>
			<error>
				<message>Entry DigestMethod in SignatureReferenceIdentity is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeAP">
			<id specification="ISO_32000_1_7" clause="18" testNumber="19084"/>
			<description>Entry * in NameNameTreeAP shall be object NameNameTreeAPEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeAP is not object NameNameTreeAPEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="1" testNumber="19282"/>
			<description>ShadingType5 shall not contain entries except Filter, BBox, BitsPerComponent, ShadingType, AntiAlias, FDecodeParms, Background, VerticesPerRow, ColorSpace, Length, Function, Decode, BitsPerCoordinate, FFilter, DecodeParms, F, DL</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'AntiAlias' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'VerticesPerRow' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'DL').length == 0</test>
			<error>
				<message>ShadingType5 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'AntiAlias' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'VerticesPerRow' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'DL').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19283"/>
			<description>Entry Filter with type Array in ShadingType5 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ShadingType5 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19284"/>
			<description>Entry Filter with type Name in ShadingType5 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType5 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19285"/>
			<description>Entry Filter in ShadingType5 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in ShadingType5 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19286"/>
			<description>Entry Filter with type Array in ShadingType5 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType5 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19287"/>
			<description>Entry BBox in ShadingType5 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType5 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19288"/>
			<description>Entry BitsPerComponent in ShadingType5 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19289"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType5 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType5 has incorrect value %2 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19290"/>
			<description>Entry BitsPerComponent in ShadingType5 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19291"/>
			<description>Entry ShadingType in ShadingType5 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19292"/>
			<description>Entry ShadingType with type Integer in ShadingType5 shall have value 5</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 5</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType5 has incorrect value %2 instead of 5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19293"/>
			<description>Entry ShadingType in ShadingType5 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19294"/>
			<description>Entry AntiAlias in ShadingType5 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType5 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19295"/>
			<description>Entry FDecodeParms with type Array in ShadingType5 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType5 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19296"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType5 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType5 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19297"/>
			<description>Entry FDecodeParms in ShadingType5 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType5 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19298"/>
			<description>Entry FDecodeParms with type Array in ShadingType5 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType5 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19299"/>
			<description>Entry Background with type Array in ShadingType5 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType5 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19300"/>
			<description>Entry Background in ShadingType5 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType5 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19301"/>
			<description>Entry VerticesPerRow in ShadingType5 is required</description>
			<test>containsVerticesPerRow == true</test>
			<error>
				<message>Entry VerticesPerRow in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="14" testNumber="19302"/>
			<description>Entry VerticesPerRow with type Integer in ShadingType5 shall correspond possible value predicate: fn:Eval(@VerticesPerRow &gt;= 2)</description>
			<test>VerticesPerRowHasTypeInteger != true || VerticesPerRowIntegerValue &gt;= 2</test>
			<error>
				<message>Entry VerticesPerRow with type Integer in ShadingType5 doesn't correspond possible value predicate: fn:Eval(@VerticesPerRow &gt;= 2)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19303"/>
			<description>Entry VerticesPerRow in ShadingType5 shall have type Integer</description>
			<test>containsVerticesPerRow == false || VerticesPerRowHasTypeInteger == true</test>
			<error>
				<message>Entry VerticesPerRow in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19304"/>
			<description>Entry ColorSpace with type Array in ShadingType5 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType5 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19305"/>
			<description>Entry ColorSpace in ShadingType5 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19306"/>
			<description>Entry ColorSpace with type Name in ShadingType5 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType5 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19307"/>
			<description>Entry ColorSpace in ShadingType5 shall have one of types: Name, Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType5 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19308"/>
			<description>Entry Length in ShadingType5 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19309"/>
			<description>Entry Length in ShadingType5 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19310"/>
			<description>Entry Function with type Array in ShadingType5 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType5 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19311"/>
			<description>Entry Function with type Dictionary in ShadingType5 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType5 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19312"/>
			<description>Entry Function with type Stream in ShadingType5 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType5 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="10" testNumber="19313"/>
			<description>Entry Function with type Stream in ShadingType5 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType5 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19314"/>
			<description>Entry Function in ShadingType5 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType5 is not one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19315"/>
			<description>Entry Decode with type Array in ShadingType5 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in ShadingType5 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19316"/>
			<description>Entry Decode in ShadingType5 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType5 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19317"/>
			<description>Entry BitsPerCoordinate in ShadingType5 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType5 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19318"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType5 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType5 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19319"/>
			<description>Entry BitsPerCoordinate in ShadingType5 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19320"/>
			<description>Entry FFilter with type Array in ShadingType5 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType5 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19321"/>
			<description>Entry FFilter with type Name in ShadingType5 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType5 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19322"/>
			<description>Entry FFilter in ShadingType5 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in ShadingType5 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19323"/>
			<description>Entry FFilter with type Array in ShadingType5 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType5 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19324"/>
			<description>Entry DecodeParms with type Array in ShadingType5 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType5 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19325"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType5 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType5 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19326"/>
			<description>Entry DecodeParms in ShadingType5 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType5 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19327"/>
			<description>Entry DecodeParms with type Array in ShadingType5 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType5 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19328"/>
			<description>Entry F with type Dictionary in ShadingType5 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ShadingType5 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19329"/>
			<description>Entry F in ShadingType5 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ShadingType5 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19330"/>
			<description>Entry DL in ShadingType5 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ShadingType5 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType5">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19331"/>
			<description>Entry DL with type Integer in ShadingType5 shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ShadingType5 doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="1" testNumber="19574"/>
			<description>ShadingType6 shall not contain entries except ShadingType, BitsPerComponent, FFilter, BitsPerFlag, DecodeParms, Length, Filter, Background, BBox, Decode, DL, FDecodeParms, F, AntiAlias, ColorSpace, Function, BitsPerCoordinate</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ShadingType' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'AntiAlias' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'BitsPerCoordinate').length == 0</test>
			<error>
				<message>ShadingType6 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ShadingType' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'AntiAlias' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'BitsPerCoordinate').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19575"/>
			<description>Entry ShadingType in ShadingType6 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19576"/>
			<description>Entry ShadingType with type Integer in ShadingType6 shall have value 6</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 6</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType6 has incorrect value %2 instead of 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19577"/>
			<description>Entry ShadingType in ShadingType6 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19578"/>
			<description>Entry BitsPerComponent in ShadingType6 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19579"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType6 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType6 has incorrect value %2 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19580"/>
			<description>Entry BitsPerComponent in ShadingType6 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19581"/>
			<description>Entry FFilter with type Array in ShadingType6 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType6 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19582"/>
			<description>Entry FFilter with type Name in ShadingType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType6 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19583"/>
			<description>Entry FFilter in ShadingType6 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in ShadingType6 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19584"/>
			<description>Entry FFilter with type Array in ShadingType6 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType6 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19585"/>
			<description>Entry BitsPerFlag in ShadingType6 is required</description>
			<test>containsBitsPerFlag == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19586"/>
			<description>Entry BitsPerFlag in ShadingType6 shall have type Integer</description>
			<test>containsBitsPerFlag == false || BitsPerFlagHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19587"/>
			<description>Entry DecodeParms with type Array in ShadingType6 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType6 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19588"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType6 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType6 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19589"/>
			<description>Entry DecodeParms in ShadingType6 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType6 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19590"/>
			<description>Entry DecodeParms with type Array in ShadingType6 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType6 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19591"/>
			<description>Entry Length in ShadingType6 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19592"/>
			<description>Entry Length in ShadingType6 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19593"/>
			<description>Entry Filter with type Array in ShadingType6 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ShadingType6 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19594"/>
			<description>Entry Filter with type Name in ShadingType6 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType6 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19595"/>
			<description>Entry Filter in ShadingType6 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in ShadingType6 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19596"/>
			<description>Entry Filter with type Array in ShadingType6 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType6 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19597"/>
			<description>Entry Background with type Array in ShadingType6 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType6 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19598"/>
			<description>Entry Background in ShadingType6 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType6 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19599"/>
			<description>Entry BBox in ShadingType6 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType6 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19600"/>
			<description>Entry Decode with type Array in ShadingType6 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in ShadingType6 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19601"/>
			<description>Entry Decode in ShadingType6 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType6 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19602"/>
			<description>Entry DL in ShadingType6 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19603"/>
			<description>Entry DL with type Integer in ShadingType6 shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ShadingType6 doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19604"/>
			<description>Entry FDecodeParms with type Array in ShadingType6 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType6 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19605"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType6 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType6 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19606"/>
			<description>Entry FDecodeParms in ShadingType6 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType6 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19607"/>
			<description>Entry FDecodeParms with type Array in ShadingType6 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType6 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19608"/>
			<description>Entry F with type Dictionary in ShadingType6 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ShadingType6 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19609"/>
			<description>Entry F in ShadingType6 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ShadingType6 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19610"/>
			<description>Entry AntiAlias in ShadingType6 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType6 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19611"/>
			<description>Entry ColorSpace with type Array in ShadingType6 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType6 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19612"/>
			<description>Entry ColorSpace in ShadingType6 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19613"/>
			<description>Entry ColorSpace with type Name in ShadingType6 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType6 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19614"/>
			<description>Entry ColorSpace in ShadingType6 shall have one of types: Name, Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType6 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19615"/>
			<description>Entry Function with type Array in ShadingType6 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType6 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19616"/>
			<description>Entry Function with type Dictionary in ShadingType6 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType6 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19617"/>
			<description>Entry Function with type Stream in ShadingType6 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType6 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="10" testNumber="19618"/>
			<description>Entry Function with type Stream in ShadingType6 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType6 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19619"/>
			<description>Entry Function in ShadingType6 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType6 is not one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19620"/>
			<description>Entry BitsPerCoordinate in ShadingType6 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType6 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19621"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType6 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType6 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType6">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19622"/>
			<description>Entry BitsPerCoordinate in ShadingType6 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType6 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeRenditionsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19674"/>
			<description>Entry with type Dictionary in NameNameTreeRenditions shall be one of objects RenditionMedia, RenditionSelector</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeRenditions is not one of objects RenditionMedia, RenditionSelector</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="1" testNumber="19868"/>
			<description>ShadingType7 shall not contain entries except BitsPerCoordinate, BitsPerFlag, Decode, Length, FFilter, DL, BBox, ShadingType, Function, AntiAlias, DecodeParms, ColorSpace, FDecodeParms, BitsPerComponent, F, Filter, Background</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'AntiAlias' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Background').length == 0</test>
			<error>
				<message>ShadingType7 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerCoordinate' &amp;&amp; elem != 'BitsPerFlag' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'AntiAlias' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Background').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19869"/>
			<description>Entry BitsPerCoordinate in ShadingType7 is required</description>
			<test>containsBitsPerCoordinate == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19870"/>
			<description>Entry BitsPerCoordinate with type Integer in ShadingType7 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerCoordinateHasTypeInteger != true || BitsPerCoordinateIntegerValue == 1 || BitsPerCoordinateIntegerValue == 2 || BitsPerCoordinateIntegerValue == 4 || BitsPerCoordinateIntegerValue == 8 || BitsPerCoordinateIntegerValue == 12 || BitsPerCoordinateIntegerValue == 16 || BitsPerCoordinateIntegerValue == 24 || BitsPerCoordinateIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerCoordinate with type Integer in ShadingType7 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerCoordinateIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19871"/>
			<description>Entry BitsPerCoordinate in ShadingType7 shall have type Integer</description>
			<test>containsBitsPerCoordinate == false || BitsPerCoordinateHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerCoordinate in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19872"/>
			<description>Entry BitsPerFlag in ShadingType7 is required</description>
			<test>containsBitsPerFlag == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19873"/>
			<description>Entry BitsPerFlag in ShadingType7 shall have type Integer</description>
			<test>containsBitsPerFlag == false || BitsPerFlagHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerFlag in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19874"/>
			<description>Entry Decode with type Array in ShadingType7 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in ShadingType7 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19875"/>
			<description>Entry Decode in ShadingType7 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in ShadingType7 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19876"/>
			<description>Entry Length in ShadingType7 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19877"/>
			<description>Entry Length in ShadingType7 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19878"/>
			<description>Entry FFilter with type Array in ShadingType7 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType7 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19879"/>
			<description>Entry FFilter with type Name in ShadingType7 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ShadingType7 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19880"/>
			<description>Entry FFilter in ShadingType7 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in ShadingType7 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19881"/>
			<description>Entry FFilter with type Array in ShadingType7 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ShadingType7 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19882"/>
			<description>Entry DL in ShadingType7 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19883"/>
			<description>Entry DL with type Integer in ShadingType7 shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ShadingType7 doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19884"/>
			<description>Entry BBox in ShadingType7 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType7 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19885"/>
			<description>Entry ShadingType in ShadingType7 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19886"/>
			<description>Entry ShadingType with type Integer in ShadingType7 shall have value 7</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 7</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType7 has incorrect value %2 instead of 7</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19887"/>
			<description>Entry ShadingType in ShadingType7 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19888"/>
			<description>Entry Function with type Array in ShadingType7 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType7 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19889"/>
			<description>Entry Function with type Dictionary in ShadingType7 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType7 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19890"/>
			<description>Entry Function with type Stream in ShadingType7 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType7 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="10" testNumber="19891"/>
			<description>Entry Function with type Stream in ShadingType7 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType7 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19892"/>
			<description>Entry Function in ShadingType7 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType7 is not one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19893"/>
			<description>Entry AntiAlias in ShadingType7 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType7 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19894"/>
			<description>Entry DecodeParms with type Array in ShadingType7 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType7 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19895"/>
			<description>Entry DecodeParms with type Dictionary in ShadingType7 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ShadingType7 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19896"/>
			<description>Entry DecodeParms in ShadingType7 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ShadingType7 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19897"/>
			<description>Entry DecodeParms with type Array in ShadingType7 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ShadingType7 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19898"/>
			<description>Entry ColorSpace with type Array in ShadingType7 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType7 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19899"/>
			<description>Entry ColorSpace in ShadingType7 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19900"/>
			<description>Entry ColorSpace with type Name in ShadingType7 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType7 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19901"/>
			<description>Entry ColorSpace in ShadingType7 shall have one of types: Name, Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType7 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19902"/>
			<description>Entry FDecodeParms with type Array in ShadingType7 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType7 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19903"/>
			<description>Entry FDecodeParms with type Dictionary in ShadingType7 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ShadingType7 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19904"/>
			<description>Entry FDecodeParms in ShadingType7 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ShadingType7 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19905"/>
			<description>Entry FDecodeParms with type Array in ShadingType7 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ShadingType7 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19906"/>
			<description>Entry BitsPerComponent in ShadingType7 is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType7 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19907"/>
			<description>Entry BitsPerComponent with type Integer in ShadingType7 shall have one of values: 1, 12, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 12 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in ShadingType7 has incorrect value %2 instead of 1, 12, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19908"/>
			<description>Entry BitsPerComponent in ShadingType7 shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in ShadingType7 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19909"/>
			<description>Entry F with type Dictionary in ShadingType7 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ShadingType7 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19910"/>
			<description>Entry F in ShadingType7 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ShadingType7 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19911"/>
			<description>Entry Filter with type Array in ShadingType7 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ShadingType7 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19912"/>
			<description>Entry Filter with type Name in ShadingType7 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ShadingType7 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19913"/>
			<description>Entry Filter in ShadingType7 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in ShadingType7 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="9" testNumber="19914"/>
			<description>Entry Filter with type Array in ShadingType7 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ShadingType7 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19915"/>
			<description>Entry Background with type Array in ShadingType7 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType7 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType7">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19916"/>
			<description>Entry Background in ShadingType7 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType7 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_7" clause="1" testNumber="19978"/>
			<description>OptContentUser shall not contain entries except Type, Name</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Name').length == 0</test>
			<error>
				<message>OptContentUser contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Name').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_7" clause="7" testNumber="19979"/>
			<description>Entry Type in OptContentUser is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in OptContentUser is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_7" clause="6" testNumber="19980"/>
			<description>Entry Type with type Name in OptContentUser shall have one of values: Org, Ttl, Ind</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Ind" || TypeNameValue == "Ttl" || TypeNameValue == "Org"</test>
			<error>
				<message>Entry Type with type Name in OptContentUser has incorrect value %2 instead of Org, Ttl, Ind</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19981"/>
			<description>Entry Type in OptContentUser shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OptContentUser is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_7" clause="17" testNumber="19982"/>
			<description>Entry Name with type Array in OptContentUser shall be object ArrayOfStringsText</description>
			<test>NameHasTypeArray != true || Name_size == 1</test>
			<error>
				<message>Entry Name with type Array in OptContentUser is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUser">
			<id specification="ISO_32000_1_7" clause="8" testNumber="19983"/>
			<description>Entry Name in OptContentUser shall have one of types: Array, StringText</description>
			<test>containsName == false || NameHasTypeArray == true || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in OptContentUser is not one of types: Array, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="1" testNumber="20154"/>
			<description>AnnotSquare shall not contain entries except OC, Contents, IRT, AS, BE, C, RC, Border, Popup, AP, StructParent, Subtype, BS, RD, NM, Subj, IT, ExData, RT, Rect, F, T, IC, M, CreationDate, P, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'OC' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'C' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'T' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'M' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotSquare contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'OC' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'C' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'T' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'M' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20155"/>
			<description>Entry OC with type Dictionary in AnnotSquare shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotSquare is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20156"/>
			<description>Entry OC in AnnotSquare shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20157"/>
			<description>Entry Contents in AnnotSquare shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotSquare is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20158"/>
			<description>Entry IRT with type Dictionary in AnnotSquare shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotSquare is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="11" testNumber="20159"/>
			<description>Entry IRT in AnnotSquare is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20160"/>
			<description>Entry IRT in AnnotSquare shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="11" testNumber="20161"/>
			<description>Entry AS in AnnotSquare is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20162"/>
			<description>Entry AS in AnnotSquare shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotSquare is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20163"/>
			<description>Entry BE with type Dictionary in AnnotSquare shall be object BorderEffect</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in AnnotSquare is not object BorderEffect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20164"/>
			<description>Entry BE in AnnotSquare shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20165"/>
			<description>Entry C with type Array in AnnotSquare shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotSquare is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20166"/>
			<description>Entry C in AnnotSquare shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotSquare is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20167"/>
			<description>Entry RC with type Stream in AnnotSquare shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotSquare is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="10" testNumber="20168"/>
			<description>Entry RC with type Stream in AnnotSquare shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotSquare is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20169"/>
			<description>Entry RC in AnnotSquare shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotSquare is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20170"/>
			<description>Entry Border with type Array in AnnotSquare shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotSquare is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20171"/>
			<description>Entry Border in AnnotSquare shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotSquare is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20172"/>
			<description>Entry Popup with type Dictionary in AnnotSquare shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSquare is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="10" testNumber="20173"/>
			<description>Entry Popup with type Dictionary in AnnotSquare shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSquare is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20174"/>
			<description>Entry Popup in AnnotSquare shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20175"/>
			<description>Entry AP with type Dictionary in AnnotSquare shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotSquare is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="11" testNumber="20176"/>
			<description>Entry AP in AnnotSquare is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20177"/>
			<description>Entry AP in AnnotSquare shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20178"/>
			<description>Entry StructParent in AnnotSquare shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotSquare is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="7" testNumber="20179"/>
			<description>Entry Subtype in AnnotSquare is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="6" testNumber="20180"/>
			<description>Entry Subtype with type Name in AnnotSquare shall have value Square</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Square"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotSquare has incorrect value %2 instead of Square</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20181"/>
			<description>Entry Subtype in AnnotSquare shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotSquare is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20182"/>
			<description>Entry BS with type Dictionary in AnnotSquare shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotSquare is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20183"/>
			<description>Entry BS in AnnotSquare shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20184"/>
			<description>Entry RD in AnnotSquare shall have type Rectangle</description>
			<test>containsRD == false || RDHasTypeRectangle == true</test>
			<error>
				<message>Entry RD in AnnotSquare is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="9" testNumber="20185"/>
			<description>Entry RD with type Rectangle in AnnotSquare shall correspond special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</description>
			<test>RDHasTypeRectangle != true || ((RD0NumberValue &gt;= 0) &amp;&amp; (RD1NumberValue &gt;= 0) &amp;&amp; (RD2NumberValue &gt;= 0) &amp;&amp; (RD3NumberValue &gt;= 0) &amp;&amp; ((RD1NumberValue + RD3NumberValue) &lt; RectRectHeight) &amp;&amp; ((RD0NumberValue + RD2NumberValue) &lt; RectRectWidth))</test>
			<error>
				<message>Entry RD with type Rectangle in AnnotSquare doesn't correspond special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20186"/>
			<description>Entry NM in AnnotSquare shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotSquare is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20187"/>
			<description>Entry Subj in AnnotSquare shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotSquare is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20188"/>
			<description>Entry IT in AnnotSquare shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotSquare is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20189"/>
			<description>Entry ExData with type Dictionary in AnnotSquare shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotSquare is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20190"/>
			<description>Entry ExData in AnnotSquare shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="6" testNumber="20191"/>
			<description>Entry RT with type Name in AnnotSquare shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotSquare has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20192"/>
			<description>Entry RT in AnnotSquare shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotSquare is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="7" testNumber="20193"/>
			<description>Entry Rect in AnnotSquare is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotSquare is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20194"/>
			<description>Entry Rect in AnnotSquare shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotSquare is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20195"/>
			<description>Entry F in AnnotSquare shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotSquare is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="9" testNumber="20196"/>
			<description>Entry F with type Bitmask in AnnotSquare shall correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotSquare doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20197"/>
			<description>Entry T in AnnotSquare shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotSquare is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20198"/>
			<description>Entry IC with type Array in AnnotSquare shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>ICHasTypeArray != true || IC_size == 1</test>
			<error>
				<message>Entry IC with type Array in AnnotSquare is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20199"/>
			<description>Entry IC in AnnotSquare shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotSquare is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20200"/>
			<description>Entry M in AnnotSquare shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotSquare is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20201"/>
			<description>Entry CreationDate in AnnotSquare shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotSquare is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20202"/>
			<description>Entry P with type Dictionary in AnnotSquare shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSquare is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="10" testNumber="20203"/>
			<description>Entry P with type Dictionary in AnnotSquare shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSquare is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20204"/>
			<description>Entry P in AnnotSquare shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotSquare is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="6" testNumber="20205"/>
			<description>Entry Type with type Name in AnnotSquare shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotSquare has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquare">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20206"/>
			<description>Entry Type in AnnotSquare shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotSquare is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamSignatureArrayEntry">
			<id specification="ISO_32000_1_7" clause="6" testNumber="20275"/>
			<description>Entry with type Name in URTransformParamSignatureArray shall have value Modify</description>
			<test>HasTypeName != true || NameValue == "Modify"</test>
			<error>
				<message>Entry %1 with type Name in URTransformParamSignatureArray has incorrect value %2 instead of Modify</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURTransformParamSignatureArrayEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20276"/>
			<description>Entry in URTransformParamSignatureArray shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in URTransformParamSignatureArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBooleansGeneralEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20279"/>
			<description>Entry in ArrayOfBooleansGeneral shall have type Boolean</description>
			<test>HasTypeBoolean == true</test>
			<error>
				<message>Entry %1 in ArrayOfBooleansGeneral is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="1" testNumber="20305"/>
			<description>ActionTransition shall not contain entries except Next, Type, Trans, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>ActionTransition contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Next' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20306"/>
			<description>Entry Next with type Array in ActionTransition shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionTransition is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20307"/>
			<description>Entry Next with type Dictionary in ActionTransition shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionTransition is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20308"/>
			<description>Entry Next in ActionTransition shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionTransition is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="6" testNumber="20309"/>
			<description>Entry Type with type Name in ActionTransition shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionTransition has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20310"/>
			<description>Entry Type in ActionTransition shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionTransition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20311"/>
			<description>Entry Trans with type Dictionary in ActionTransition shall be object Transition</description>
			<test>TransHasTypeDictionary != true || Trans_size == 1</test>
			<error>
				<message>Entry Trans with type Dictionary in ActionTransition is not object Transition</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="7" testNumber="20312"/>
			<description>Entry Trans in ActionTransition is required</description>
			<test>containsTrans == true</test>
			<error>
				<message>Entry Trans in ActionTransition is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20313"/>
			<description>Entry Trans in ActionTransition shall have type Dictionary</description>
			<test>containsTrans == false || TransHasTypeDictionary == true</test>
			<error>
				<message>Entry Trans in ActionTransition is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="7" testNumber="20314"/>
			<description>Entry S in ActionTransition is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionTransition is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="6" testNumber="20315"/>
			<description>Entry S with type Name in ActionTransition shall have value Trans</description>
			<test>SHasTypeName != true || SNameValue == "Trans"</test>
			<error>
				<message>Entry S with type Name in ActionTransition has incorrect value %2 instead of Trans</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionTransition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20316"/>
			<description>Entry S in ActionTransition shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionTransition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="1" testNumber="20341"/>
			<description>UserProperty shall not contain entries except H, N, V, F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'N' &amp;&amp; elem != 'V' &amp;&amp; elem != 'F').length == 0</test>
			<error>
				<message>UserProperty contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'N' &amp;&amp; elem != 'V' &amp;&amp; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20342"/>
			<description>Entry H in UserProperty shall have type Boolean</description>
			<test>containsH == false || HHasTypeBoolean == true</test>
			<error>
				<message>Entry H in UserProperty is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="7" testNumber="20343"/>
			<description>Entry N in UserProperty is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in UserProperty is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20344"/>
			<description>Entry N in UserProperty shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in UserProperty is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="9" testNumber="20345"/>
			<description>Entry N with type StringText in UserProperty shall correspond special case: fn:Eval(trailer::Catalog::MarkInfo::@UserProperties== true)</description>
			<test>NHasTypeStringText != true || (trailerCatalogMarkInfoUserPropertiesBooleanValue == true)</test>
			<error>
				<message>Entry N with type StringText in UserProperty doesn't correspond special case: fn:Eval(trailer::Catalog::MarkInfo::@UserProperties== true)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20346"/>
			<description>Entry V with type Array in UserProperty shall be object _UniversalArray</description>
			<test>VHasTypeArray != true || V_size == 1</test>
			<error>
				<message>Entry V with type Array in UserProperty is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20347"/>
			<description>Entry V with type Dictionary in UserProperty shall be object _UniversalDictionary</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in UserProperty is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20348"/>
			<description>Entry V with type Stream in UserProperty shall be object Stream</description>
			<test>VHasTypeStream != true || V_size == 1</test>
			<error>
				<message>Entry V with type Stream in UserProperty is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="7" testNumber="20349"/>
			<description>Entry V in UserProperty is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in UserProperty is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="10" testNumber="20350"/>
			<description>Entry V with type Stream in UserProperty shall be indirect</description>
			<test>VHasTypeStream != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Stream in UserProperty is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20351"/>
			<description>Entry V in UserProperty shall have one of types: Null, Name, Array, Boolean, Dictionary, Number, Stream, String</description>
			<test>containsV == false || VHasTypeNull == true || VHasTypeName == true || VHasTypeArray == true || VHasTypeBoolean == true || VHasTypeDictionary == true || VHasTypeNumber == true || VHasTypeStream == true || VHasTypeString == true</test>
			<error>
				<message>Entry V in UserProperty is not one of types: Null, Name, Array, Boolean, Dictionary, Number, Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AUserProperty">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20352"/>
			<description>Entry F in UserProperty shall have type StringText</description>
			<test>containsF == false || FHasTypeStringText == true</test>
			<error>
				<message>Entry F in UserProperty is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2UnencryptedStringsByte">
			<id specification="ISO_32000_1_7" clause="2" testNumber="20383"/>
			<description>ArrayOf_2UnencryptedStringsByte shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2UnencryptedStringsByte contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2UnencryptedStringsByte">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20384"/>
			<description>Entry 1 in ArrayOf_2UnencryptedStringsByte shall have type StringByte</description>
			<test>size &lt;= 1 || entry1HasTypeStringByte == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2UnencryptedStringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2UnencryptedStringsByte">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20385"/>
			<description>Entry 0 in ArrayOf_2UnencryptedStringsByte shall have type StringByte</description>
			<test>size &lt;= 0 || entry0HasTypeStringByte == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2UnencryptedStringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="1" testNumber="20459"/>
			<description>AnnotScreen shall not contain entries except AA, T, MK, StructParent, P, Type, Border, F, M, C, Subtype, A, NM, AP, AS, OC, Contents, Rect</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'T' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'A' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Rect').length == 0</test>
			<error>
				<message>AnnotScreen contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AA' &amp;&amp; elem != 'T' &amp;&amp; elem != 'MK' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'F' &amp;&amp; elem != 'M' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'A' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Rect').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20460"/>
			<description>Entry AA with type Dictionary in AnnotScreen shall be object AddActionScreenAnnotation</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in AnnotScreen is not object AddActionScreenAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20461"/>
			<description>Entry AA in AnnotScreen shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in AnnotScreen is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20462"/>
			<description>Entry T in AnnotScreen shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotScreen is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20463"/>
			<description>Entry MK with type Dictionary in AnnotScreen shall be object AppearanceCharacteristics</description>
			<test>MKHasTypeDictionary != true || MK_size == 1</test>
			<error>
				<message>Entry MK with type Dictionary in AnnotScreen is not object AppearanceCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20464"/>
			<description>Entry MK in AnnotScreen shall have type Dictionary</description>
			<test>containsMK == false || MKHasTypeDictionary == true</test>
			<error>
				<message>Entry MK in AnnotScreen is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20465"/>
			<description>Entry StructParent in AnnotScreen shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotScreen is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20466"/>
			<description>Entry P with type Dictionary in AnnotScreen shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotScreen is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="10" testNumber="20467"/>
			<description>Entry P with type Dictionary in AnnotScreen shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotScreen is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20468"/>
			<description>Entry P in AnnotScreen shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotScreen is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="6" testNumber="20469"/>
			<description>Entry Type with type Name in AnnotScreen shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotScreen has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20470"/>
			<description>Entry Type in AnnotScreen shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotScreen is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20471"/>
			<description>Entry Border with type Array in AnnotScreen shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotScreen is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20472"/>
			<description>Entry Border in AnnotScreen shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotScreen is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20473"/>
			<description>Entry F in AnnotScreen shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotScreen is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="9" testNumber="20474"/>
			<description>Entry F with type Bitmask in AnnotScreen shall correspond special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotScreen doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20475"/>
			<description>Entry M in AnnotScreen shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotScreen is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20476"/>
			<description>Entry C with type Array in AnnotScreen shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotScreen is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20477"/>
			<description>Entry C in AnnotScreen shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotScreen is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="7" testNumber="20478"/>
			<description>Entry Subtype in AnnotScreen is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotScreen is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="6" testNumber="20479"/>
			<description>Entry Subtype with type Name in AnnotScreen shall have value Screen</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Screen"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotScreen has incorrect value %2 instead of Screen</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20480"/>
			<description>Entry Subtype in AnnotScreen shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotScreen is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20481"/>
			<description>Entry A with type Dictionary in AnnotScreen shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotScreen is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20482"/>
			<description>Entry A in AnnotScreen shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotScreen is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20483"/>
			<description>Entry NM in AnnotScreen shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotScreen is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20484"/>
			<description>Entry AP with type Dictionary in AnnotScreen shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotScreen is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="11" testNumber="20485"/>
			<description>Entry AP in AnnotScreen is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotScreen is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20486"/>
			<description>Entry AP in AnnotScreen shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotScreen is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="11" testNumber="20487"/>
			<description>Entry AS in AnnotScreen is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotScreen is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20488"/>
			<description>Entry AS in AnnotScreen shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotScreen is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20489"/>
			<description>Entry OC with type Dictionary in AnnotScreen shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotScreen is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20490"/>
			<description>Entry OC in AnnotScreen shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotScreen is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20491"/>
			<description>Entry Contents in AnnotScreen shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotScreen is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="7" testNumber="20492"/>
			<description>Entry Rect in AnnotScreen is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotScreen is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotScreen">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20493"/>
			<description>Entry Rect in AnnotScreen shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotScreen is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20565"/>
			<description>Entry with type Array in _UniversalArray shall be object _UniversalArray</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in _UniversalArray is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20566"/>
			<description>Entry with type Dictionary in _UniversalArray shall be object _UniversalDictionary</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in _UniversalArray is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20567"/>
			<description>Entry with type Stream in _UniversalArray shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in _UniversalArray is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="20568"/>
			<description>Entry with type Stream in _UniversalArray shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in _UniversalArray is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A_UniversalArrayEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20569"/>
			<description>Entry in _UniversalArray shall have one of types: Null, Name, Array, Boolean, Dictionary, Number, Stream, String</description>
			<test>HasTypeNull == true || HasTypeName == true || HasTypeArray == true || HasTypeBoolean == true || HasTypeDictionary == true || HasTypeNumber == true || HasTypeStream == true || HasTypeString == true</test>
			<error>
				<message>Entry %1 in _UniversalArray is not one of types: Null, Name, Array, Boolean, Dictionary, Number, Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="1" testNumber="20739"/>
			<description>AnnotFileAttachment shall not contain entries except F, ExData, OC, RT, CA, IRT, FS, NM, Contents, Border, T, IT, CreationDate, RC, M, Type, Subtype, Name, Rect, P, AP, Subj, StructParent, Popup, C, AS</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'T' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'C' &amp;&amp; elem != 'AS').length == 0</test>
			<error>
				<message>AnnotFileAttachment contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'T' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'C' &amp;&amp; elem != 'AS').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20740"/>
			<description>Entry F in AnnotFileAttachment shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotFileAttachment is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="9" testNumber="20741"/>
			<description>Entry F with type Bitmask in AnnotFileAttachment shall correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotFileAttachment doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20742"/>
			<description>Entry ExData with type Dictionary in AnnotFileAttachment shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotFileAttachment is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20743"/>
			<description>Entry ExData in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20744"/>
			<description>Entry OC with type Dictionary in AnnotFileAttachment shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotFileAttachment is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20745"/>
			<description>Entry OC in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="6" testNumber="20746"/>
			<description>Entry RT with type Name in AnnotFileAttachment shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotFileAttachment has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20747"/>
			<description>Entry RT in AnnotFileAttachment shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="14" testNumber="20748"/>
			<description>Entry CA with type Number in AnnotFileAttachment shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotFileAttachment doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20749"/>
			<description>Entry CA in AnnotFileAttachment shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotFileAttachment is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20750"/>
			<description>Entry IRT with type Dictionary in AnnotFileAttachment shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotFileAttachment is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="11" testNumber="20751"/>
			<description>Entry IRT in AnnotFileAttachment is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20752"/>
			<description>Entry IRT in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20753"/>
			<description>Entry FS with type Dictionary in AnnotFileAttachment shall be object FileSpecification</description>
			<test>FSHasTypeDictionary != true || FS_size == 1</test>
			<error>
				<message>Entry FS with type Dictionary in AnnotFileAttachment is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="7" testNumber="20754"/>
			<description>Entry FS in AnnotFileAttachment is required</description>
			<test>containsFS == true</test>
			<error>
				<message>Entry FS in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20755"/>
			<description>Entry FS in AnnotFileAttachment shall have one of types: Dictionary, String</description>
			<test>containsFS == false || FSHasTypeDictionary == true || FSHasTypeString == true</test>
			<error>
				<message>Entry FS in AnnotFileAttachment is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20756"/>
			<description>Entry NM in AnnotFileAttachment shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotFileAttachment is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20757"/>
			<description>Entry Contents in AnnotFileAttachment shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotFileAttachment is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20758"/>
			<description>Entry Border with type Array in AnnotFileAttachment shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotFileAttachment is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20759"/>
			<description>Entry Border in AnnotFileAttachment shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotFileAttachment is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20760"/>
			<description>Entry T in AnnotFileAttachment shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotFileAttachment is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20761"/>
			<description>Entry IT in AnnotFileAttachment shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20762"/>
			<description>Entry CreationDate in AnnotFileAttachment shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotFileAttachment is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20763"/>
			<description>Entry RC with type Stream in AnnotFileAttachment shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotFileAttachment is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="10" testNumber="20764"/>
			<description>Entry RC with type Stream in AnnotFileAttachment shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotFileAttachment is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20765"/>
			<description>Entry RC in AnnotFileAttachment shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotFileAttachment is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20766"/>
			<description>Entry M in AnnotFileAttachment shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotFileAttachment is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="6" testNumber="20767"/>
			<description>Entry Type with type Name in AnnotFileAttachment shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotFileAttachment has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20768"/>
			<description>Entry Type in AnnotFileAttachment shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="7" testNumber="20769"/>
			<description>Entry Subtype in AnnotFileAttachment is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="6" testNumber="20770"/>
			<description>Entry Subtype with type Name in AnnotFileAttachment shall have value FileAttachment</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "FileAttachment"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotFileAttachment has incorrect value %2 instead of FileAttachment</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20771"/>
			<description>Entry Subtype in AnnotFileAttachment shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20772"/>
			<description>Entry Name in AnnotFileAttachment shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="7" testNumber="20773"/>
			<description>Entry Rect in AnnotFileAttachment is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20774"/>
			<description>Entry Rect in AnnotFileAttachment shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotFileAttachment is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20775"/>
			<description>Entry P with type Dictionary in AnnotFileAttachment shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFileAttachment is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="10" testNumber="20776"/>
			<description>Entry P with type Dictionary in AnnotFileAttachment shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotFileAttachment is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20777"/>
			<description>Entry P in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20778"/>
			<description>Entry AP with type Dictionary in AnnotFileAttachment shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotFileAttachment is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="11" testNumber="20779"/>
			<description>Entry AP in AnnotFileAttachment is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20780"/>
			<description>Entry AP in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20781"/>
			<description>Entry Subj in AnnotFileAttachment shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotFileAttachment is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20782"/>
			<description>Entry StructParent in AnnotFileAttachment shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotFileAttachment is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20783"/>
			<description>Entry Popup with type Dictionary in AnnotFileAttachment shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFileAttachment is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="10" testNumber="20784"/>
			<description>Entry Popup with type Dictionary in AnnotFileAttachment shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotFileAttachment is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20785"/>
			<description>Entry Popup in AnnotFileAttachment shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotFileAttachment is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="17" testNumber="20786"/>
			<description>Entry C with type Array in AnnotFileAttachment shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotFileAttachment is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20787"/>
			<description>Entry C in AnnotFileAttachment shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotFileAttachment is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="11" testNumber="20788"/>
			<description>Entry AS in AnnotFileAttachment is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotFileAttachment is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotFileAttachment">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20789"/>
			<description>Entry AS in AnnotFileAttachment shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotFileAttachment is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="20910"/>
			<description>ArrayOf_9Numbers shall contain exactly 9 elements</description>
			<test>size == 9</test>
			<error>
				<message>ArrayOf_9Numbers contains %1 element(s) instead of 9</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20911"/>
			<description>Entry 0 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20912"/>
			<description>Entry 2 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20913"/>
			<description>Entry 6 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20914"/>
			<description>Entry 1 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20915"/>
			<description>Entry 5 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20916"/>
			<description>Entry 8 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 8 || entry8HasTypeNumber == true</test>
			<error>
				<message>Entry 8 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20917"/>
			<description>Entry 4 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20918"/>
			<description>Entry 7 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20919"/>
			<description>Entry 3 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="2" testNumber="20930"/>
			<description>ArrayOf_4ColourSpaceEntries shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4ColourSpaceEntries contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="14" testNumber="20931"/>
			<description>Entry 2 with type Number in ArrayOf_4ColourSpaceEntries shall correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4ColourSpaceEntries doesn't correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20932"/>
			<description>Entry 2 in ArrayOf_4ColourSpaceEntries shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4ColourSpaceEntries is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="6" testNumber="20933"/>
			<description>Entry 0 with type Name in ArrayOf_4ColourSpaceEntries shall have value DeviceRGB</description>
			<test>entry0HasTypeName != true || entry0NameValue == "DeviceRGB"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOf_4ColourSpaceEntries has incorrect value %2 instead of DeviceRGB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20934"/>
			<description>Entry 0 in ArrayOf_4ColourSpaceEntries shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4ColourSpaceEntries is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="14" testNumber="20935"/>
			<description>Entry 3 with type Number in ArrayOf_4ColourSpaceEntries shall correspond possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</description>
			<test>entry3HasTypeNumber != true || (entry3NumberValue &gt;= 0) &amp;&amp; (entry3NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 3 with type Number in ArrayOf_4ColourSpaceEntries doesn't correspond possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20936"/>
			<description>Entry 3 in ArrayOf_4ColourSpaceEntries shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4ColourSpaceEntries is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="14" testNumber="20937"/>
			<description>Entry 1 with type Number in ArrayOf_4ColourSpaceEntries shall correspond possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4ColourSpaceEntries doesn't correspond possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4ColourSpaceEntries">
			<id specification="ISO_32000_1_7" clause="8" testNumber="20938"/>
			<description>Entry 1 in ArrayOf_4ColourSpaceEntries shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4ColourSpaceEntries is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="1" testNumber="21032"/>
			<description>ShadingType1 shall not contain entries except Background, Function, ColorSpace, Domain, BBox, Matrix, ShadingType, AntiAlias</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Background' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'AntiAlias').length == 0</test>
			<error>
				<message>ShadingType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Background' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'AntiAlias').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21033"/>
			<description>Entry Background with type Array in ShadingType1 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType1 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21034"/>
			<description>Entry Background in ShadingType1 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21035"/>
			<description>Entry Function with type Array in ShadingType1 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType1 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21036"/>
			<description>Entry Function with type Dictionary in ShadingType1 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType1 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21037"/>
			<description>Entry Function with type Stream in ShadingType1 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType1 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21038"/>
			<description>Entry Function in ShadingType1 is required</description>
			<test>containsFunction == true</test>
			<error>
				<message>Entry Function in ShadingType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="10" testNumber="21039"/>
			<description>Entry Function with type Stream in ShadingType1 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21040"/>
			<description>Entry Function in ShadingType1 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType1 is not one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21041"/>
			<description>Entry ColorSpace with type Array in ShadingType1 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType1 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21042"/>
			<description>Entry ColorSpace in ShadingType1 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21043"/>
			<description>Entry ColorSpace with type Name in ShadingType1 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType1 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21044"/>
			<description>Entry ColorSpace in ShadingType1 shall have one of types: Name, Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType1 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21045"/>
			<description>Entry Domain with type Array in ShadingType1 shall be object ArrayOf_4Numbers</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in ShadingType1 is not object ArrayOf_4Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21046"/>
			<description>Entry Domain in ShadingType1 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in ShadingType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21047"/>
			<description>Entry BBox in ShadingType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21048"/>
			<description>Entry Matrix in ShadingType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in ShadingType1 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21049"/>
			<description>Entry ShadingType in ShadingType1 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21050"/>
			<description>Entry ShadingType with type Integer in ShadingType1 shall have value 1</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 1</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType1 has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21051"/>
			<description>Entry ShadingType in ShadingType1 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21052"/>
			<description>Entry AntiAlias in ShadingType1 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType1 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="1" testNumber="21174"/>
			<description>ShadingType2 shall not contain entries except Background, ShadingType, AntiAlias, ColorSpace, Function, Domain, Extend, BBox, Coords</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Background' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'AntiAlias' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Coords').length == 0</test>
			<error>
				<message>ShadingType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Background' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'AntiAlias' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Coords').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21175"/>
			<description>Entry Background with type Array in ShadingType2 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21176"/>
			<description>Entry Background in ShadingType2 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21177"/>
			<description>Entry ShadingType in ShadingType2 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21178"/>
			<description>Entry ShadingType with type Integer in ShadingType2 shall have value 2</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 2</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType2 has incorrect value %2 instead of 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21179"/>
			<description>Entry ShadingType in ShadingType2 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21180"/>
			<description>Entry AntiAlias in ShadingType2 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType2 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21181"/>
			<description>Entry ColorSpace with type Array in ShadingType2 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType2 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21182"/>
			<description>Entry ColorSpace in ShadingType2 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21183"/>
			<description>Entry ColorSpace with type Name in ShadingType2 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType2 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21184"/>
			<description>Entry ColorSpace in ShadingType2 shall have one of types: Name, Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType2 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21185"/>
			<description>Entry Function with type Array in ShadingType2 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType2 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21186"/>
			<description>Entry Function with type Dictionary in ShadingType2 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType2 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21187"/>
			<description>Entry Function with type Stream in ShadingType2 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType2 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21188"/>
			<description>Entry Function in ShadingType2 is required</description>
			<test>containsFunction == true</test>
			<error>
				<message>Entry Function in ShadingType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="10" testNumber="21189"/>
			<description>Entry Function with type Stream in ShadingType2 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21190"/>
			<description>Entry Function in ShadingType2 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType2 is not one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21191"/>
			<description>Entry Domain with type Array in ShadingType2 shall be object ArrayOf_2Numbers</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in ShadingType2 is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21192"/>
			<description>Entry Domain in ShadingType2 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in ShadingType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21193"/>
			<description>Entry Extend with type Array in ShadingType2 shall be object ArrayOf_2Booleans</description>
			<test>ExtendHasTypeArray != true || Extend_size == 1</test>
			<error>
				<message>Entry Extend with type Array in ShadingType2 is not object ArrayOf_2Booleans</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21194"/>
			<description>Entry Extend in ShadingType2 shall have type Array</description>
			<test>containsExtend == false || ExtendHasTypeArray == true</test>
			<error>
				<message>Entry Extend in ShadingType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21195"/>
			<description>Entry BBox in ShadingType2 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType2 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21196"/>
			<description>Entry Coords with type Array in ShadingType2 shall be object ArrayOf_4Numbers</description>
			<test>CoordsHasTypeArray != true || Coords_size == 1</test>
			<error>
				<message>Entry Coords with type Array in ShadingType2 is not object ArrayOf_4Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21197"/>
			<description>Entry Coords in ShadingType2 is required</description>
			<test>containsCoords == true</test>
			<error>
				<message>Entry Coords in ShadingType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21198"/>
			<description>Entry Coords in ShadingType2 shall have type Array</description>
			<test>containsCoords == false || CoordsHasTypeArray == true</test>
			<error>
				<message>Entry Coords in ShadingType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="1" testNumber="21324"/>
			<description>ShadingType3 shall not contain entries except BBox, ColorSpace, ShadingType, Extend, Background, Function, Coords, AntiAlias, Domain</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'AntiAlias' &amp;&amp; elem != 'Domain').length == 0</test>
			<error>
				<message>ShadingType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BBox' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'ShadingType' &amp;&amp; elem != 'Extend' &amp;&amp; elem != 'Background' &amp;&amp; elem != 'Function' &amp;&amp; elem != 'Coords' &amp;&amp; elem != 'AntiAlias' &amp;&amp; elem != 'Domain').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21325"/>
			<description>Entry BBox in ShadingType3 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in ShadingType3 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21326"/>
			<description>Entry ColorSpace with type Array in ShadingType3 shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in ShadingType3 is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21327"/>
			<description>Entry ColorSpace in ShadingType3 is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21328"/>
			<description>Entry ColorSpace with type Name in ShadingType3 shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in ShadingType3 has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21329"/>
			<description>Entry ColorSpace in ShadingType3 shall have one of types: Name, Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in ShadingType3 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21330"/>
			<description>Entry ShadingType in ShadingType3 is required</description>
			<test>containsShadingType == true</test>
			<error>
				<message>Entry ShadingType in ShadingType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21331"/>
			<description>Entry ShadingType with type Integer in ShadingType3 shall have value 3</description>
			<test>ShadingTypeHasTypeInteger != true || ShadingTypeIntegerValue == 3</test>
			<error>
				<message>Entry ShadingType with type Integer in ShadingType3 has incorrect value %2 instead of 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ShadingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21332"/>
			<description>Entry ShadingType in ShadingType3 shall have type Integer</description>
			<test>containsShadingType == false || ShadingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry ShadingType in ShadingType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21333"/>
			<description>Entry Extend with type Array in ShadingType3 shall be object ArrayOf_2Booleans</description>
			<test>ExtendHasTypeArray != true || Extend_size == 1</test>
			<error>
				<message>Entry Extend with type Array in ShadingType3 is not object ArrayOf_2Booleans</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21334"/>
			<description>Entry Extend in ShadingType3 shall have type Array</description>
			<test>containsExtend == false || ExtendHasTypeArray == true</test>
			<error>
				<message>Entry Extend in ShadingType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21335"/>
			<description>Entry Background with type Array in ShadingType3 shall be object ArrayOfNumbersGeneral</description>
			<test>BackgroundHasTypeArray != true || Background_size == 1</test>
			<error>
				<message>Entry Background with type Array in ShadingType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21336"/>
			<description>Entry Background in ShadingType3 shall have type Array</description>
			<test>containsBackground == false || BackgroundHasTypeArray == true</test>
			<error>
				<message>Entry Background in ShadingType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21337"/>
			<description>Entry Function with type Array in ShadingType3 shall be object ArrayOfFunctions</description>
			<test>FunctionHasTypeArray != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Array in ShadingType3 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21338"/>
			<description>Entry Function with type Dictionary in ShadingType3 shall be one of objects FunctionType2, FunctionType3</description>
			<test>FunctionHasTypeDictionary != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Dictionary in ShadingType3 is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21339"/>
			<description>Entry Function with type Stream in ShadingType3 shall be one of objects FunctionType0, FunctionType4</description>
			<test>FunctionHasTypeStream != true || Function_size == 1</test>
			<error>
				<message>Entry Function with type Stream in ShadingType3 is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21340"/>
			<description>Entry Function in ShadingType3 is required</description>
			<test>containsFunction == true</test>
			<error>
				<message>Entry Function in ShadingType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="10" testNumber="21341"/>
			<description>Entry Function with type Stream in ShadingType3 shall be indirect</description>
			<test>FunctionHasTypeStream != true || isFunctionIndirect == true</test>
			<error>
				<message>Entry Function with type Stream in ShadingType3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21342"/>
			<description>Entry Function in ShadingType3 shall have one of types: Array, Dictionary, Stream</description>
			<test>containsFunction == false || FunctionHasTypeArray == true || FunctionHasTypeDictionary == true || FunctionHasTypeStream == true</test>
			<error>
				<message>Entry Function in ShadingType3 is not one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21343"/>
			<description>Entry Coords with type Array in ShadingType3 shall be object ArrayOf_6Numbers</description>
			<test>CoordsHasTypeArray != true || Coords_size == 1</test>
			<error>
				<message>Entry Coords with type Array in ShadingType3 is not object ArrayOf_6Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21344"/>
			<description>Entry Coords in ShadingType3 is required</description>
			<test>containsCoords == true</test>
			<error>
				<message>Entry Coords in ShadingType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21345"/>
			<description>Entry Coords in ShadingType3 shall have type Array</description>
			<test>containsCoords == false || CoordsHasTypeArray == true</test>
			<error>
				<message>Entry Coords in ShadingType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21346"/>
			<description>Entry AntiAlias in ShadingType3 shall have type Boolean</description>
			<test>containsAntiAlias == false || AntiAliasHasTypeBoolean == true</test>
			<error>
				<message>Entry AntiAlias in ShadingType3 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21347"/>
			<description>Entry Domain with type Array in ShadingType3 shall be object ArrayOf_2Numbers</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in ShadingType3 is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AShadingType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21348"/>
			<description>Entry Domain in ShadingType3 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in ShadingType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCapturePagesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21386"/>
			<description>Entry with type Dictionary in ArrayOfWebCapturePages shall be object PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfWebCapturePages is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCapturePagesEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="21387"/>
			<description>Entry with type Dictionary in ArrayOfWebCapturePages shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfWebCapturePages is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCapturePagesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21388"/>
			<description>Entry in ArrayOfWebCapturePages shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfWebCapturePages is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeObjectsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21400"/>
			<description>Entry with type Dictionary in ArrayOfAttributeObjects shall be object StructureAttributesDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfAttributeObjects is not object StructureAttributesDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeObjectsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21401"/>
			<description>Entry in ArrayOfAttributeObjects shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfAttributeObjects is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21422"/>
			<description>Entry with type Array in DestsMap shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in DestsMap is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21423"/>
			<description>Entry with type Dictionary in DestsMap shall be object DestDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in DestsMap is not object DestDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21424"/>
			<description>Entry in DestsMap shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in DestsMap is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_7" clause="1" testNumber="21438"/>
			<description>MediaPermissions shall not contain entries except Type, TF</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'TF').length == 0</test>
			<error>
				<message>MediaPermissions contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'TF').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21439"/>
			<description>Entry Type with type Name in MediaPermissions shall have value MediaPermissions</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaPermissions"</test>
			<error>
				<message>Entry Type with type Name in MediaPermissions has incorrect value %2 instead of MediaPermissions</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21440"/>
			<description>Entry Type in MediaPermissions shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaPermissions is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21441"/>
			<description>Entry TF with type StringAscii in MediaPermissions shall have one of values: TEMPALWAYS, TEMPEXTRACT, TEMPACCESS, TEMPNEVER</description>
			<test>TFHasTypeStringAscii != true || TFStringAsciiValue == "TEMPNEVER" || TFStringAsciiValue == "TEMPALWAYS" || TFStringAsciiValue == "TEMPEXTRACT" || TFStringAsciiValue == "TEMPACCESS"</test>
			<error>
				<message>Entry TF with type StringAscii in MediaPermissions has incorrect value %2 instead of TEMPALWAYS, TEMPEXTRACT, TEMPACCESS, TEMPNEVER</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TFStringAsciiValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPermissions">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21442"/>
			<description>Entry TF in MediaPermissions shall have type StringAscii</description>
			<test>containsTF == false || TFHasTypeStringAscii == true</test>
			<error>
				<message>Entry TF in MediaPermissions is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="1" testNumber="21474"/>
			<description>SoftwareIdentifier shall not contain entries except H, U, L, LI, HI, OS, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'U' &amp;&amp; elem != 'L' &amp;&amp; elem != 'LI' &amp;&amp; elem != 'HI' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>SoftwareIdentifier contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'H' &amp;&amp; elem != 'U' &amp;&amp; elem != 'L' &amp;&amp; elem != 'LI' &amp;&amp; elem != 'HI' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21475"/>
			<description>Entry H with type Array in SoftwareIdentifier shall be object ArrayOfSoftwareVersions</description>
			<test>HHasTypeArray != true || H_size == 1</test>
			<error>
				<message>Entry H with type Array in SoftwareIdentifier is not object ArrayOfSoftwareVersions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21476"/>
			<description>Entry H in SoftwareIdentifier shall have type Array</description>
			<test>containsH == false || HHasTypeArray == true</test>
			<error>
				<message>Entry H in SoftwareIdentifier is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21477"/>
			<description>Entry U in SoftwareIdentifier is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in SoftwareIdentifier is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21478"/>
			<description>Entry U in SoftwareIdentifier shall have type StringAscii</description>
			<test>containsU == false || UHasTypeStringAscii == true</test>
			<error>
				<message>Entry U in SoftwareIdentifier is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21479"/>
			<description>Entry L with type Array in SoftwareIdentifier shall be object ArrayOfSoftwareVersions</description>
			<test>LHasTypeArray != true || L_size == 1</test>
			<error>
				<message>Entry L with type Array in SoftwareIdentifier is not object ArrayOfSoftwareVersions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21480"/>
			<description>Entry L in SoftwareIdentifier shall have type Array</description>
			<test>containsL == false || LHasTypeArray == true</test>
			<error>
				<message>Entry L in SoftwareIdentifier is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21481"/>
			<description>Entry LI in SoftwareIdentifier shall have type Boolean</description>
			<test>containsLI == false || LIHasTypeBoolean == true</test>
			<error>
				<message>Entry LI in SoftwareIdentifier is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21482"/>
			<description>Entry HI in SoftwareIdentifier shall have type Boolean</description>
			<test>containsHI == false || HIHasTypeBoolean == true</test>
			<error>
				<message>Entry HI in SoftwareIdentifier is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21483"/>
			<description>Entry OS with type Array in SoftwareIdentifier shall be object ArrayOfStringsByte</description>
			<test>OSHasTypeArray != true || OS_size == 1</test>
			<error>
				<message>Entry OS with type Array in SoftwareIdentifier is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21484"/>
			<description>Entry OS in SoftwareIdentifier shall have type Array</description>
			<test>containsOS == false || OSHasTypeArray == true</test>
			<error>
				<message>Entry OS in SoftwareIdentifier is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21485"/>
			<description>Entry Type with type Name in SoftwareIdentifier shall have value SoftwareIdentifier</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SoftwareIdentifier"</test>
			<error>
				<message>Entry Type with type Name in SoftwareIdentifier has incorrect value %2 instead of SoftwareIdentifier</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoftwareIdentifier">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21486"/>
			<description>Entry Type in SoftwareIdentifier shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SoftwareIdentifier is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="21635"/>
			<description>OPIVersion20Dict shall not contain entries except Type, Size, IncludedImageDimensions, IncludedImageQuality, MainImage, Inks, F, Tags, Overprint, Version, CropRect</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'IncludedImageDimensions' &amp;&amp; elem != 'IncludedImageQuality' &amp;&amp; elem != 'MainImage' &amp;&amp; elem != 'Inks' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'CropRect').length == 0</test>
			<error>
				<message>OPIVersion20Dict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'IncludedImageDimensions' &amp;&amp; elem != 'IncludedImageQuality' &amp;&amp; elem != 'MainImage' &amp;&amp; elem != 'Inks' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'CropRect').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21636"/>
			<description>Entry Type with type Name in OPIVersion20Dict shall have value OPI</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OPI"</test>
			<error>
				<message>Entry Type with type Name in OPIVersion20Dict has incorrect value %2 instead of OPI</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21637"/>
			<description>Entry Type in OPIVersion20Dict shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OPIVersion20Dict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21638"/>
			<description>Entry Size with type Array in OPIVersion20Dict shall be object ArrayOf_2Numbers</description>
			<test>SizeHasTypeArray != true || Size_size == 1</test>
			<error>
				<message>Entry Size with type Array in OPIVersion20Dict is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="11" testNumber="21639"/>
			<description>Entry Size in OPIVersion20Dict is required, when fn:IsRequired(fn:IsPresent(CropRect))</description>
			<test>(containsSize == true || ((containsCropRect == true)) == false)</test>
			<error>
				<message>Entry Size in OPIVersion20Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21640"/>
			<description>Entry Size in OPIVersion20Dict shall have type Array</description>
			<test>containsSize == false || SizeHasTypeArray == true</test>
			<error>
				<message>Entry Size in OPIVersion20Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="21641"/>
			<description>Entry Size with type Array in OPIVersion20Dict shall correspond special case: fn:Eval((Size::@0&gt; 0) &amp;&amp; (Size::@1&gt; 0))</description>
			<test>SizeHasTypeArray != true || ((Size0NumberValue &gt; 0) &amp;&amp; (Size1NumberValue &gt; 0))</test>
			<error>
				<message>Entry Size with type Array in OPIVersion20Dict doesn't correspond special case: fn:Eval((Size::@0&gt; 0) &amp;&amp; (Size::@1&gt; 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21642"/>
			<description>Entry IncludedImageDimensions with type Array in OPIVersion20Dict shall be object ArrayOf_2Integers</description>
			<test>IncludedImageDimensionsHasTypeArray != true || IncludedImageDimensions_size == 1</test>
			<error>
				<message>Entry IncludedImageDimensions with type Array in OPIVersion20Dict is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21643"/>
			<description>Entry IncludedImageDimensions in OPIVersion20Dict shall have type Array</description>
			<test>containsIncludedImageDimensions == false || IncludedImageDimensionsHasTypeArray == true</test>
			<error>
				<message>Entry IncludedImageDimensions in OPIVersion20Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="21644"/>
			<description>Entry IncludedImageDimensions with type Array in OPIVersion20Dict shall correspond special case: fn:Eval((IncludedImageDimensions::@0&gt; 0) &amp;&amp; (IncludedImageDimensions::@1&gt; 0))</description>
			<test>IncludedImageDimensionsHasTypeArray != true || ((IncludedImageDimensions0IntegerValue &gt; 0) &amp;&amp; (IncludedImageDimensions1IntegerValue &gt; 0))</test>
			<error>
				<message>Entry IncludedImageDimensions with type Array in OPIVersion20Dict doesn't correspond special case: fn:Eval((IncludedImageDimensions::@0&gt; 0) &amp;&amp; (IncludedImageDimensions::@1&gt; 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21645"/>
			<description>Entry IncludedImageQuality with type Number in OPIVersion20Dict shall have one of values: 1, 2, 3</description>
			<test>IncludedImageQualityHasTypeNumber != true || IncludedImageQualityNumberValue == 1 || IncludedImageQualityNumberValue == 2 || IncludedImageQualityNumberValue == 3</test>
			<error>
				<message>Entry IncludedImageQuality with type Number in OPIVersion20Dict has incorrect value %2 instead of 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>IncludedImageQualityNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21646"/>
			<description>Entry IncludedImageQuality in OPIVersion20Dict shall have type Number</description>
			<test>containsIncludedImageQuality == false || IncludedImageQualityHasTypeNumber == true</test>
			<error>
				<message>Entry IncludedImageQuality in OPIVersion20Dict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21647"/>
			<description>Entry MainImage in OPIVersion20Dict shall have type StringByte</description>
			<test>containsMainImage == false || MainImageHasTypeStringByte == true</test>
			<error>
				<message>Entry MainImage in OPIVersion20Dict is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21648"/>
			<description>Entry Inks with type Array in OPIVersion20Dict shall be object ArrayOfOPI2Inks</description>
			<test>InksHasTypeArray != true || Inks_size == 1</test>
			<error>
				<message>Entry Inks with type Array in OPIVersion20Dict is not object ArrayOfOPI2Inks</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21649"/>
			<description>Entry Inks with type Name in OPIVersion20Dict shall have one of values: registration, full_color</description>
			<test>InksHasTypeName != true || InksNameValue == "full_color" || InksNameValue == "registration"</test>
			<error>
				<message>Entry Inks with type Name in OPIVersion20Dict has incorrect value %2 instead of registration, full_color</message>
				<arguments>
					<argument>keyName</argument>
					<argument>InksNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21650"/>
			<description>Entry Inks in OPIVersion20Dict shall have one of types: Name, Array</description>
			<test>containsInks == false || InksHasTypeName == true || InksHasTypeArray == true</test>
			<error>
				<message>Entry Inks in OPIVersion20Dict is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21651"/>
			<description>Entry F with type Dictionary in OPIVersion20Dict shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in OPIVersion20Dict is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21652"/>
			<description>Entry F in OPIVersion20Dict is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in OPIVersion20Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21653"/>
			<description>Entry F in OPIVersion20Dict shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in OPIVersion20Dict is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21654"/>
			<description>Entry Tags with type Array in OPIVersion20Dict shall be object ArrayOfTags</description>
			<test>TagsHasTypeArray != true || Tags_size == 1</test>
			<error>
				<message>Entry Tags with type Array in OPIVersion20Dict is not object ArrayOfTags</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21655"/>
			<description>Entry Tags in OPIVersion20Dict shall have type Array</description>
			<test>containsTags == false || TagsHasTypeArray == true</test>
			<error>
				<message>Entry Tags in OPIVersion20Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21656"/>
			<description>Entry Overprint in OPIVersion20Dict shall have type Boolean</description>
			<test>containsOverprint == false || OverprintHasTypeBoolean == true</test>
			<error>
				<message>Entry Overprint in OPIVersion20Dict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="21657"/>
			<description>Entry Version in OPIVersion20Dict is required</description>
			<test>containsVersion == true</test>
			<error>
				<message>Entry Version in OPIVersion20Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21658"/>
			<description>Entry Version with type Number in OPIVersion20Dict shall have value 2.0</description>
			<test>VersionHasTypeNumber != true || VersionNumberValue == 2.0</test>
			<error>
				<message>Entry Version with type Number in OPIVersion20Dict has incorrect value %2 instead of 2.0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VersionNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21659"/>
			<description>Entry Version in OPIVersion20Dict shall have type Number</description>
			<test>containsVersion == false || VersionHasTypeNumber == true</test>
			<error>
				<message>Entry Version in OPIVersion20Dict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="11" testNumber="21660"/>
			<description>Entry CropRect in OPIVersion20Dict is required, when fn:IsRequired(fn:IsPresent(Size))</description>
			<test>(containsCropRect == true || ((containsSize == true)) == false)</test>
			<error>
				<message>Entry CropRect in OPIVersion20Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion20Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21661"/>
			<description>Entry CropRect in OPIVersion20Dict shall have type Rectangle</description>
			<test>containsCropRect == false || CropRectHasTypeRectangle == true</test>
			<error>
				<message>Entry CropRect in OPIVersion20Dict is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="1" testNumber="21797"/>
			<description>AppearanceCharacteristics shall not contain entries except RI, IF, R, IX, AC, CA, BC, BG, I, RC, TP</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'RI' &amp;&amp; elem != 'IF' &amp;&amp; elem != 'R' &amp;&amp; elem != 'IX' &amp;&amp; elem != 'AC' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'BC' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'I' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'TP').length == 0</test>
			<error>
				<message>AppearanceCharacteristics contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'RI' &amp;&amp; elem != 'IF' &amp;&amp; elem != 'R' &amp;&amp; elem != 'IX' &amp;&amp; elem != 'AC' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'BC' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'I' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'TP').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21798"/>
			<description>Entry RI with type Stream in AppearanceCharacteristics shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>RIHasTypeStream != true || RI_size == 1</test>
			<error>
				<message>Entry RI with type Stream in AppearanceCharacteristics is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="10" testNumber="21799"/>
			<description>Entry RI with type Stream in AppearanceCharacteristics shall be indirect</description>
			<test>RIHasTypeStream != true || isRIIndirect == true</test>
			<error>
				<message>Entry RI with type Stream in AppearanceCharacteristics is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21800"/>
			<description>Entry RI in AppearanceCharacteristics shall have type Stream</description>
			<test>containsRI == false || RIHasTypeStream == true</test>
			<error>
				<message>Entry RI in AppearanceCharacteristics is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21801"/>
			<description>Entry IF with type Dictionary in AppearanceCharacteristics shall be object IconFit</description>
			<test>IFHasTypeDictionary != true || IF_size == 1</test>
			<error>
				<message>Entry IF with type Dictionary in AppearanceCharacteristics is not object IconFit</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21802"/>
			<description>Entry IF in AppearanceCharacteristics shall have type Dictionary</description>
			<test>containsIF == false || IFHasTypeDictionary == true</test>
			<error>
				<message>Entry IF in AppearanceCharacteristics is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21803"/>
			<description>Entry R in AppearanceCharacteristics shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in AppearanceCharacteristics is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21804"/>
			<description>Entry IX with type Stream in AppearanceCharacteristics shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>IXHasTypeStream != true || IX_size == 1</test>
			<error>
				<message>Entry IX with type Stream in AppearanceCharacteristics is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="10" testNumber="21805"/>
			<description>Entry IX with type Stream in AppearanceCharacteristics shall be indirect</description>
			<test>IXHasTypeStream != true || isIXIndirect == true</test>
			<error>
				<message>Entry IX with type Stream in AppearanceCharacteristics is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21806"/>
			<description>Entry IX in AppearanceCharacteristics shall have type Stream</description>
			<test>containsIX == false || IXHasTypeStream == true</test>
			<error>
				<message>Entry IX in AppearanceCharacteristics is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21807"/>
			<description>Entry AC in AppearanceCharacteristics shall have type StringText</description>
			<test>containsAC == false || ACHasTypeStringText == true</test>
			<error>
				<message>Entry AC in AppearanceCharacteristics is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21808"/>
			<description>Entry CA in AppearanceCharacteristics shall have type StringText</description>
			<test>containsCA == false || CAHasTypeStringText == true</test>
			<error>
				<message>Entry CA in AppearanceCharacteristics is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21809"/>
			<description>Entry BC with type Array in AppearanceCharacteristics shall be object ArrayOfNumbersGeneral</description>
			<test>BCHasTypeArray != true || BC_size == 1</test>
			<error>
				<message>Entry BC with type Array in AppearanceCharacteristics is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21810"/>
			<description>Entry BC in AppearanceCharacteristics shall have type Array</description>
			<test>containsBC == false || BCHasTypeArray == true</test>
			<error>
				<message>Entry BC in AppearanceCharacteristics is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21811"/>
			<description>Entry BG with type Array in AppearanceCharacteristics shall be object ArrayOfNumbersGeneral</description>
			<test>BGHasTypeArray != true || BG_size == 1</test>
			<error>
				<message>Entry BG with type Array in AppearanceCharacteristics is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21812"/>
			<description>Entry BG in AppearanceCharacteristics shall have type Array</description>
			<test>containsBG == false || BGHasTypeArray == true</test>
			<error>
				<message>Entry BG in AppearanceCharacteristics is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="17" testNumber="21813"/>
			<description>Entry I with type Stream in AppearanceCharacteristics shall be one of objects XObjectFormType1, XObjectImage</description>
			<test>IHasTypeStream != true || I_size == 1</test>
			<error>
				<message>Entry I with type Stream in AppearanceCharacteristics is not one of objects XObjectFormType1, XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="10" testNumber="21814"/>
			<description>Entry I with type Stream in AppearanceCharacteristics shall be indirect</description>
			<test>IHasTypeStream != true || isIIndirect == true</test>
			<error>
				<message>Entry I with type Stream in AppearanceCharacteristics is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21815"/>
			<description>Entry I in AppearanceCharacteristics shall have type Stream</description>
			<test>containsI == false || IHasTypeStream == true</test>
			<error>
				<message>Entry I in AppearanceCharacteristics is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21816"/>
			<description>Entry RC in AppearanceCharacteristics shall have type StringText</description>
			<test>containsRC == false || RCHasTypeStringText == true</test>
			<error>
				<message>Entry RC in AppearanceCharacteristics is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="6" testNumber="21817"/>
			<description>Entry TP with type Integer in AppearanceCharacteristics shall have one of values: 0, 1, 2, 3, 4, 5, 6</description>
			<test>TPHasTypeInteger != true || TPIntegerValue == 0 || TPIntegerValue == 1 || TPIntegerValue == 2 || TPIntegerValue == 3 || TPIntegerValue == 4 || TPIntegerValue == 5 || TPIntegerValue == 6</test>
			<error>
				<message>Entry TP with type Integer in AppearanceCharacteristics has incorrect value %2 instead of 0, 1, 2, 3, 4, 5, 6</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TPIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceCharacteristics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="21818"/>
			<description>Entry TP in AppearanceCharacteristics shall have type Integer</description>
			<test>containsTP == false || TPHasTypeInteger == true</test>
			<error>
				<message>Entry TP in AppearanceCharacteristics is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="1" testNumber="22031"/>
			<description>FontMultipleMaster shall not contain entries except Name, FirstChar, FontDescriptor, BaseFont, Widths, Type, Encoding, LastChar, ToUnicode, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>FontMultipleMaster contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'ToUnicode' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="11" testNumber="22032"/>
			<description>Entry Name in FontMultipleMaster is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22033"/>
			<description>Entry Name in FontMultipleMaster shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="11" testNumber="22034"/>
			<description>Entry FirstChar in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFirstChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FirstChar in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22035"/>
			<description>Entry FirstChar in FontMultipleMaster shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontMultipleMaster is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22036"/>
			<description>Entry FontDescriptor with type Dictionary in FontMultipleMaster shall be object FontDescriptorType1</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontMultipleMaster is not object FontDescriptorType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="11" testNumber="22037"/>
			<description>Entry FontDescriptor in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFontDescriptor == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="10" testNumber="22038"/>
			<description>Entry FontDescriptor with type Dictionary in FontMultipleMaster shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontMultipleMaster is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22039"/>
			<description>Entry FontDescriptor in FontMultipleMaster shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontMultipleMaster is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22040"/>
			<description>Entry BaseFont in FontMultipleMaster is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22041"/>
			<description>Entry BaseFont in FontMultipleMaster shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22042"/>
			<description>Entry Widths with type Array in FontMultipleMaster shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontMultipleMaster is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="11" testNumber="22043"/>
			<description>Entry Widths in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsWidths == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry Widths in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22044"/>
			<description>Entry Widths in FontMultipleMaster shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontMultipleMaster is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22045"/>
			<description>Entry Type in FontMultipleMaster is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22046"/>
			<description>Entry Type with type Name in FontMultipleMaster shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontMultipleMaster has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22047"/>
			<description>Entry Type in FontMultipleMaster shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22048"/>
			<description>Entry Encoding with type Dictionary in FontMultipleMaster shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontMultipleMaster is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22049"/>
			<description>Entry Encoding with type Name in FontMultipleMaster shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontMultipleMaster has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22050"/>
			<description>Entry Encoding in FontMultipleMaster shall have one of types: Name, Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontMultipleMaster is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="11" testNumber="22051"/>
			<description>Entry LastChar in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsLastChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry LastChar in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22052"/>
			<description>Entry LastChar in FontMultipleMaster shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontMultipleMaster is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22053"/>
			<description>Entry ToUnicode with type Stream in FontMultipleMaster shall be object Stream</description>
			<test>ToUnicodeHasTypeStream != true || ToUnicode_size == 1</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontMultipleMaster is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="10" testNumber="22054"/>
			<description>Entry ToUnicode with type Stream in FontMultipleMaster shall be indirect</description>
			<test>ToUnicodeHasTypeStream != true || isToUnicodeIndirect == true</test>
			<error>
				<message>Entry ToUnicode with type Stream in FontMultipleMaster is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22055"/>
			<description>Entry ToUnicode in FontMultipleMaster shall have type Stream</description>
			<test>containsToUnicode == false || ToUnicodeHasTypeStream == true</test>
			<error>
				<message>Entry ToUnicode in FontMultipleMaster is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22056"/>
			<description>Entry Subtype in FontMultipleMaster is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22057"/>
			<description>Entry Subtype with type Name in FontMultipleMaster shall have value MMType1</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "MMType1"</test>
			<error>
				<message>Entry Subtype with type Name in FontMultipleMaster has incorrect value %2 instead of MMType1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22058"/>
			<description>Entry Subtype in FontMultipleMaster shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASubjectDNEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22087"/>
			<description>Entry in SubjectDN shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %1 in SubjectDN is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="2" testNumber="22159"/>
			<description>Dest4Array shall contain exactly 6 elements</description>
			<test>size == 6</test>
			<error>
				<message>Dest4Array contains %1 element(s) instead of 6</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22160"/>
			<description>Entry 3 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 3 || entry3HasTypeNull == true || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in Dest4Array is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22161"/>
			<description>Entry 4 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 4 || entry4HasTypeNull == true || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in Dest4Array is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22162"/>
			<description>Entry 1 with type Name in Dest4Array shall have value FitR</description>
			<test>entry1HasTypeName != true || entry1NameValue == "FitR"</test>
			<error>
				<message>Entry 1 with type Name in Dest4Array has incorrect value %2 instead of FitR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22163"/>
			<description>Entry 1 in Dest4Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest4Array is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22164"/>
			<description>Entry 5 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 5 || entry5HasTypeNull == true || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in Dest4Array is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22165"/>
			<description>Entry 0 with type Dictionary in Dest4Array shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in Dest4Array is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="14" testNumber="22166"/>
			<description>Entry 0 with type Number in Dest4Array shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest4Array doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22167"/>
			<description>Entry 0 in Dest4Array shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in Dest4Array is not one of types: Dictionary, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22168"/>
			<description>Entry 2 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in Dest4Array is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIndirectFileSpecificationsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22179"/>
			<description>Entry with type Dictionary in ArrayOfIndirectFileSpecifications shall be object FileSpecification</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfIndirectFileSpecifications is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIndirectFileSpecificationsEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="22180"/>
			<description>Entry with type Dictionary in ArrayOfIndirectFileSpecifications shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfIndirectFileSpecifications is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIndirectFileSpecificationsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22181"/>
			<description>Entry in ArrayOfIndirectFileSpecifications shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfIndirectFileSpecifications is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIndirectFileSpecificationsEntry">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22182"/>
			<description>Entry with type Dictionary in ArrayOfIndirectFileSpecifications shall correspond special case: fn:InNameTree(parent::RichMediaContent::Assets)</description>
			<test>HasTypeDictionary != true || ((nameTreeparentRichMediaContentAssetsContainsString == true))</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfIndirectFileSpecifications doesn't correspond special case: fn:InNameTree(parent::RichMediaContent::Assets)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="1" testNumber="22272"/>
			<description>Metadata shall not contain entries except FDecodeParms, F, Filter, Length, Type, DecodeParms, FFilter, DL, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FDecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>Metadata contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FDecodeParms' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22273"/>
			<description>Entry FDecodeParms with type Array in Metadata shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in Metadata is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22274"/>
			<description>Entry FDecodeParms with type Dictionary in Metadata shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in Metadata is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22275"/>
			<description>Entry FDecodeParms in Metadata shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in Metadata is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22276"/>
			<description>Entry FDecodeParms with type Array in Metadata shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in Metadata doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22277"/>
			<description>Entry F with type Dictionary in Metadata shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Metadata is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22278"/>
			<description>Entry F in Metadata shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in Metadata is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22279"/>
			<description>Entry Filter with type Array in Metadata shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in Metadata is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22280"/>
			<description>Entry Filter with type Name in Metadata shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in Metadata has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22281"/>
			<description>Entry Filter in Metadata shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in Metadata is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22282"/>
			<description>Entry Filter with type Array in Metadata shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in Metadata doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22283"/>
			<description>Entry Length in Metadata is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in Metadata is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22284"/>
			<description>Entry Length in Metadata shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in Metadata is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22285"/>
			<description>Entry Type in Metadata is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in Metadata is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22286"/>
			<description>Entry Type with type Name in Metadata shall have value Metadata</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Metadata"</test>
			<error>
				<message>Entry Type with type Name in Metadata has incorrect value %2 instead of Metadata</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22287"/>
			<description>Entry Type in Metadata shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Metadata is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22288"/>
			<description>Entry DecodeParms with type Array in Metadata shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in Metadata is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22289"/>
			<description>Entry DecodeParms with type Dictionary in Metadata shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in Metadata is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22290"/>
			<description>Entry DecodeParms in Metadata shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in Metadata is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22291"/>
			<description>Entry DecodeParms with type Array in Metadata shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in Metadata doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22292"/>
			<description>Entry FFilter with type Array in Metadata shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in Metadata is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22293"/>
			<description>Entry FFilter with type Name in Metadata shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in Metadata has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22294"/>
			<description>Entry FFilter in Metadata shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in Metadata is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22295"/>
			<description>Entry FFilter with type Array in Metadata shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in Metadata doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22296"/>
			<description>Entry DL in Metadata shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in Metadata is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22297"/>
			<description>Entry DL with type Integer in Metadata shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in Metadata doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22298"/>
			<description>Entry Subtype in Metadata is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in Metadata is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22299"/>
			<description>Entry Subtype with type Name in Metadata shall have value XML</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "XML"</test>
			<error>
				<message>Entry Subtype with type Name in Metadata has incorrect value %2 instead of XML</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMetadata">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22300"/>
			<description>Entry Subtype in Metadata shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in Metadata is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="1" testNumber="22462"/>
			<description>FunctionType4 shall not contain entries except DecodeParms, FFilter, Filter, DL, Range, FDecodeParms, Length, Domain, FunctionType, F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'F').length == 0</test>
			<error>
				<message>FunctionType4 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22463"/>
			<description>Entry DecodeParms with type Array in FunctionType4 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType4 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22464"/>
			<description>Entry DecodeParms with type Dictionary in FunctionType4 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FunctionType4 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22465"/>
			<description>Entry DecodeParms in FunctionType4 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FunctionType4 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22466"/>
			<description>Entry DecodeParms with type Array in FunctionType4 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType4 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22467"/>
			<description>Entry FFilter with type Array in FunctionType4 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType4 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22468"/>
			<description>Entry FFilter with type Name in FunctionType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FunctionType4 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22469"/>
			<description>Entry FFilter in FunctionType4 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in FunctionType4 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22470"/>
			<description>Entry FFilter with type Array in FunctionType4 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType4 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22471"/>
			<description>Entry Filter with type Array in FunctionType4 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FunctionType4 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22472"/>
			<description>Entry Filter with type Name in FunctionType4 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FunctionType4 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22473"/>
			<description>Entry Filter in FunctionType4 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in FunctionType4 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22474"/>
			<description>Entry Filter with type Array in FunctionType4 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FunctionType4 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22475"/>
			<description>Entry DL in FunctionType4 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FunctionType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22476"/>
			<description>Entry DL with type Integer in FunctionType4 shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FunctionType4 doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22477"/>
			<description>Entry Range with type Array in FunctionType4 shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in FunctionType4 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22478"/>
			<description>Entry Range in FunctionType4 is required</description>
			<test>containsRange == true</test>
			<error>
				<message>Entry Range in FunctionType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22479"/>
			<description>Entry Range in FunctionType4 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType4 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22480"/>
			<description>Entry Range with type Array in FunctionType4 shall correspond special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType4 doesn't correspond special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22481"/>
			<description>Entry FDecodeParms with type Array in FunctionType4 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType4 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22482"/>
			<description>Entry FDecodeParms with type Dictionary in FunctionType4 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FunctionType4 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22483"/>
			<description>Entry FDecodeParms in FunctionType4 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FunctionType4 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22484"/>
			<description>Entry FDecodeParms with type Array in FunctionType4 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType4 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22485"/>
			<description>Entry Length in FunctionType4 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FunctionType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22486"/>
			<description>Entry Length in FunctionType4 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FunctionType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22487"/>
			<description>Entry Domain with type Array in FunctionType4 shall be object ArrayOfNumbersGeneral</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in FunctionType4 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22488"/>
			<description>Entry Domain in FunctionType4 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22489"/>
			<description>Entry Domain in FunctionType4 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType4 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22490"/>
			<description>Entry Domain with type Array in FunctionType4 shall correspond special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType4 doesn't correspond special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22491"/>
			<description>Entry FunctionType in FunctionType4 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType4 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22492"/>
			<description>Entry FunctionType with type Integer in FunctionType4 shall have value 4</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 4</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType4 has incorrect value %2 instead of 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22493"/>
			<description>Entry FunctionType in FunctionType4 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType4 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22494"/>
			<description>Entry F with type Dictionary in FunctionType4 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FunctionType4 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType4">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22495"/>
			<description>Entry F in FunctionType4 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FunctionType4 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="1" testNumber="22606"/>
			<description>FunctionType2 shall not contain entries except N, Range, C0, C1, FunctionType, Domain</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'C0' &amp;&amp; elem != 'C1' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Domain').length == 0</test>
			<error>
				<message>FunctionType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'C0' &amp;&amp; elem != 'C1' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Domain').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22607"/>
			<description>Entry N in FunctionType2 is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in FunctionType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22608"/>
			<description>Entry N in FunctionType2 shall have type Number</description>
			<test>containsN == false || NHasTypeNumber == true</test>
			<error>
				<message>Entry N in FunctionType2 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22609"/>
			<description>Entry Range with type Array in FunctionType2 shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in FunctionType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22610"/>
			<description>Entry Range in FunctionType2 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22611"/>
			<description>Entry Range with type Array in FunctionType2 shall correspond special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType2 doesn't correspond special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22612"/>
			<description>Entry C0 with type Array in FunctionType2 shall be object ArrayOfNumbersGeneral</description>
			<test>C0HasTypeArray != true || C0_size == 1</test>
			<error>
				<message>Entry C0 with type Array in FunctionType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22613"/>
			<description>Entry C0 in FunctionType2 shall have type Array</description>
			<test>containsC0 == false || C0HasTypeArray == true</test>
			<error>
				<message>Entry C0 in FunctionType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22614"/>
			<description>Entry C0 with type Array in FunctionType2 shall correspond special case: fn:Eval(fn:ArrayLength(C0) == fn:ArrayLength(C1))</description>
			<test>C0HasTypeArray != true || (C0ArraySize == C1ArraySize)</test>
			<error>
				<message>Entry C0 with type Array in FunctionType2 doesn't correspond special case: fn:Eval(fn:ArrayLength(C0) == fn:ArrayLength(C1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22615"/>
			<description>Entry C1 with type Array in FunctionType2 shall be object ArrayOfNumbersGeneral</description>
			<test>C1HasTypeArray != true || C1_size == 1</test>
			<error>
				<message>Entry C1 with type Array in FunctionType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22616"/>
			<description>Entry C1 in FunctionType2 shall have type Array</description>
			<test>containsC1 == false || C1HasTypeArray == true</test>
			<error>
				<message>Entry C1 in FunctionType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22617"/>
			<description>Entry C1 with type Array in FunctionType2 shall correspond special case: fn:Eval(fn:ArrayLength(C1) == fn:ArrayLength(C0))</description>
			<test>C1HasTypeArray != true || (C1ArraySize == C0ArraySize)</test>
			<error>
				<message>Entry C1 with type Array in FunctionType2 doesn't correspond special case: fn:Eval(fn:ArrayLength(C1) == fn:ArrayLength(C0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22618"/>
			<description>Entry FunctionType in FunctionType2 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22619"/>
			<description>Entry FunctionType with type Integer in FunctionType2 shall have value 2</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 2</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType2 has incorrect value %2 instead of 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22620"/>
			<description>Entry FunctionType in FunctionType2 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22621"/>
			<description>Entry Domain with type Array in FunctionType2 shall be object ArrayOfNumbersGeneral</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in FunctionType2 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22622"/>
			<description>Entry Domain in FunctionType2 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22623"/>
			<description>Entry Domain in FunctionType2 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType2 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType2">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22624"/>
			<description>Entry Domain with type Array in FunctionType2 shall correspond special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType2 doesn't correspond special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="1" testNumber="22736"/>
			<description>FunctionType3 shall not contain entries except Bounds, Domain, Encode, Range, FunctionType, Functions</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Bounds' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Functions').length == 0</test>
			<error>
				<message>FunctionType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Bounds' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'FunctionType' &amp;&amp; elem != 'Functions').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22737"/>
			<description>Entry Bounds with type Array in FunctionType3 shall be object ArrayOfNumbersGeneral</description>
			<test>BoundsHasTypeArray != true || Bounds_size == 1</test>
			<error>
				<message>Entry Bounds with type Array in FunctionType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22738"/>
			<description>Entry Bounds in FunctionType3 is required</description>
			<test>containsBounds == true</test>
			<error>
				<message>Entry Bounds in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22739"/>
			<description>Entry Bounds in FunctionType3 shall have type Array</description>
			<test>containsBounds == false || BoundsHasTypeArray == true</test>
			<error>
				<message>Entry Bounds in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22740"/>
			<description>Entry Bounds with type Array in FunctionType3 shall correspond special case: fn:Eval(fn:ArrayLength(Bounds) == (fn:ArrayLength(Functions) - 1))</description>
			<test>BoundsHasTypeArray != true || (BoundsArraySize == (FunctionsArraySize - 1))</test>
			<error>
				<message>Entry Bounds with type Array in FunctionType3 doesn't correspond special case: fn:Eval(fn:ArrayLength(Bounds) == (fn:ArrayLength(Functions) - 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22741"/>
			<description>Entry Domain with type Array in FunctionType3 shall be object ArrayOfNumbersGeneral</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in FunctionType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22742"/>
			<description>Entry Domain in FunctionType3 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22743"/>
			<description>Entry Domain in FunctionType3 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22744"/>
			<description>Entry Domain with type Array in FunctionType3 shall correspond special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType3 doesn't correspond special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22745"/>
			<description>Entry Encode with type Array in FunctionType3 shall be object ArrayOfNumbersGeneral</description>
			<test>EncodeHasTypeArray != true || Encode_size == 1</test>
			<error>
				<message>Entry Encode with type Array in FunctionType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22746"/>
			<description>Entry Encode in FunctionType3 is required</description>
			<test>containsEncode == true</test>
			<error>
				<message>Entry Encode in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22747"/>
			<description>Entry Encode in FunctionType3 shall have type Array</description>
			<test>containsEncode == false || EncodeHasTypeArray == true</test>
			<error>
				<message>Entry Encode in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22748"/>
			<description>Entry Encode with type Array in FunctionType3 shall correspond special case: fn:Eval((fn:ArrayLength(Encode) mod 2) == 0)</description>
			<test>EncodeHasTypeArray != true || ((EncodeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Encode with type Array in FunctionType3 doesn't correspond special case: fn:Eval((fn:ArrayLength(Encode) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22749"/>
			<description>Entry Range with type Array in FunctionType3 shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in FunctionType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22750"/>
			<description>Entry Range in FunctionType3 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22751"/>
			<description>Entry Range with type Array in FunctionType3 shall correspond special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType3 doesn't correspond special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22752"/>
			<description>Entry FunctionType in FunctionType3 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22753"/>
			<description>Entry FunctionType with type Integer in FunctionType3 shall have value 3</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 3</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType3 has incorrect value %2 instead of 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22754"/>
			<description>Entry FunctionType in FunctionType3 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="22755"/>
			<description>Entry Functions with type Array in FunctionType3 shall be object ArrayOfFunctions</description>
			<test>FunctionsHasTypeArray != true || Functions_size == 1</test>
			<error>
				<message>Entry Functions with type Array in FunctionType3 is not object ArrayOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="22756"/>
			<description>Entry Functions in FunctionType3 is required</description>
			<test>containsFunctions == true</test>
			<error>
				<message>Entry Functions in FunctionType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22757"/>
			<description>Entry Functions in FunctionType3 shall have type Array</description>
			<test>containsFunctions == false || FunctionsHasTypeArray == true</test>
			<error>
				<message>Entry Functions in FunctionType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType3">
			<id specification="ISO_32000_1_7" clause="9" testNumber="22758"/>
			<description>Entry Functions with type Array in FunctionType3 shall correspond special case: fn:Eval(fn:ArrayLength(Functions) == (fn:ArrayLength(Bounds) + 1))</description>
			<test>FunctionsHasTypeArray != true || (FunctionsArraySize == (BoundsArraySize + 1))</test>
			<error>
				<message>Entry Functions with type Array in FunctionType3 doesn't correspond special case: fn:Eval(fn:ArrayLength(Functions) == (fn:ArrayLength(Bounds) + 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPrint">
			<id specification="ISO_32000_1_7" clause="1" testNumber="22790"/>
			<description>OptContentPrint shall not contain entries except PrintState, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PrintState' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>OptContentPrint contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PrintState' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPrint">
			<id specification="ISO_32000_1_7" clause="6" testNumber="22791"/>
			<description>Entry PrintState with type Name in OptContentPrint shall have one of values: OFF, ON</description>
			<test>PrintStateHasTypeName != true || PrintStateNameValue == "ON" || PrintStateNameValue == "OFF"</test>
			<error>
				<message>Entry PrintState with type Name in OptContentPrint has incorrect value %2 instead of OFF, ON</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PrintStateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPrint">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22792"/>
			<description>Entry PrintState in OptContentPrint shall have type Name</description>
			<test>containsPrintState == false || PrintStateHasTypeName == true</test>
			<error>
				<message>Entry PrintState in OptContentPrint is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentPrint">
			<id specification="ISO_32000_1_7" clause="8" testNumber="22793"/>
			<description>Entry Subtype in OptContentPrint shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in OptContentPrint is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfQuadPoints">
			<id specification="ISO_32000_1_7" clause="3" testNumber="22802"/>
			<description>ArrayOfQuadPoints shall contain 8*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 8 == 0</test>
			<error>
				<message>ArrayOfQuadPoints contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="1" testNumber="23138"/>
			<description>XObjectFormType1 shall not contain entries except PieceInfo, LastModified, PtData, GTS_Scope, DL, Length, StructParent, Metadata, Group, FDecodeParms, Type, DecodeParms, FormType, F, GTS_Encapsulated, OPI, XUID, BBox, Name, Matrix, FFilter, GTS_Env, Subtype, Measure, Filter, OC, Ref, Resources, GTS_XID, StructParents</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PieceInfo' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'GTS_Scope' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'F' &amp;&amp; elem != 'GTS_Encapsulated' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'XUID' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'GTS_Env' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'GTS_XID' &amp;&amp; elem != 'StructParents').length == 0</test>
			<error>
				<message>XObjectFormType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PieceInfo' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'GTS_Scope' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'Group' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'F' &amp;&amp; elem != 'GTS_Encapsulated' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'XUID' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'GTS_Env' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Ref' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'GTS_XID' &amp;&amp; elem != 'StructParents').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23139"/>
			<description>Entry PieceInfo with type Dictionary in XObjectFormType1 shall be object PagePiece</description>
			<test>PieceInfoHasTypeDictionary != true || PieceInfo_size == 1</test>
			<error>
				<message>Entry PieceInfo with type Dictionary in XObjectFormType1 is not object PagePiece</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23140"/>
			<description>Entry PieceInfo in XObjectFormType1 shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="11" testNumber="23141"/>
			<description>Entry LastModified in XObjectFormType1 is required, when fn:IsRequired(fn:IsPresent(PieceInfo))</description>
			<test>(containsLastModified == true || ((containsPieceInfo == true)) == false)</test>
			<error>
				<message>Entry LastModified in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23142"/>
			<description>Entry LastModified in XObjectFormType1 shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in XObjectFormType1 is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23143"/>
			<description>Entry PtData with type Dictionary in XObjectFormType1 shall be object PointData</description>
			<test>PtDataHasTypeDictionary != true || PtData_size == 1</test>
			<error>
				<message>Entry PtData with type Dictionary in XObjectFormType1 is not object PointData</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23144"/>
			<description>Entry PtData in XObjectFormType1 shall have type Dictionary</description>
			<test>containsPtData == false || PtDataHasTypeDictionary == true</test>
			<error>
				<message>Entry PtData in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23145"/>
			<description>Entry GTS_Scope with type Name in XObjectFormType1 shall have one of values: SingleUse, Unknown, Record, Stream, File, Global</description>
			<test>GTS_ScopeHasTypeName != true || GTS_ScopeNameValue == "SingleUse" || GTS_ScopeNameValue == "Record" || GTS_ScopeNameValue == "File" || GTS_ScopeNameValue == "Stream" || GTS_ScopeNameValue == "Global" || GTS_ScopeNameValue == "Unknown"</test>
			<error>
				<message>Entry GTS_Scope with type Name in XObjectFormType1 has incorrect value %2 instead of SingleUse, Unknown, Record, Stream, File, Global</message>
				<arguments>
					<argument>keyName</argument>
					<argument>GTS_ScopeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23146"/>
			<description>Entry GTS_Scope in XObjectFormType1 shall have type Name</description>
			<test>containsGTS_Scope == false || GTS_ScopeHasTypeName == true</test>
			<error>
				<message>Entry GTS_Scope in XObjectFormType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23147"/>
			<description>Entry DL in XObjectFormType1 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="23148"/>
			<description>Entry DL with type Integer in XObjectFormType1 shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectFormType1 doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23149"/>
			<description>Entry Length in XObjectFormType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23150"/>
			<description>Entry Length in XObjectFormType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23151"/>
			<description>Entry StructParent in XObjectFormType1 shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="23152"/>
			<description>Entry StructParent with type Integer in XObjectFormType1 shall correspond special case: fn:Not(fn:IsPresent(StructParents))</description>
			<test>StructParentHasTypeInteger != true || (((containsStructParents == true)) != true)</test>
			<error>
				<message>Entry StructParent with type Integer in XObjectFormType1 doesn't correspond special case: fn:Not(fn:IsPresent(StructParents))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23153"/>
			<description>Entry Metadata with type Stream in XObjectFormType1 shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormType1 is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="10" testNumber="23154"/>
			<description>Entry Metadata with type Stream in XObjectFormType1 shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectFormType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23155"/>
			<description>Entry Metadata in XObjectFormType1 shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectFormType1 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23156"/>
			<description>Entry Group with type Dictionary in XObjectFormType1 shall be object GroupAttributes</description>
			<test>GroupHasTypeDictionary != true || Group_size == 1</test>
			<error>
				<message>Entry Group with type Dictionary in XObjectFormType1 is not object GroupAttributes</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23157"/>
			<description>Entry Group in XObjectFormType1 shall have type Dictionary</description>
			<test>containsGroup == false || GroupHasTypeDictionary == true</test>
			<error>
				<message>Entry Group in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23158"/>
			<description>Entry FDecodeParms with type Array in XObjectFormType1 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23159"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23160"/>
			<description>Entry FDecodeParms in XObjectFormType1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="23161"/>
			<description>Entry FDecodeParms with type Array in XObjectFormType1 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23162"/>
			<description>Entry Type with type Name in XObjectFormType1 shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormType1 has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23163"/>
			<description>Entry Type in XObjectFormType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23164"/>
			<description>Entry DecodeParms with type Array in XObjectFormType1 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23165"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23166"/>
			<description>Entry DecodeParms in XObjectFormType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="23167"/>
			<description>Entry DecodeParms with type Array in XObjectFormType1 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="11" testNumber="23168"/>
			<description>Entry FormType in XObjectFormType1 is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsFormType == true || (false) == false)</test>
			<error>
				<message>Entry FormType in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23169"/>
			<description>Entry FormType with type Integer in XObjectFormType1 shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormType1 has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23170"/>
			<description>Entry FormType in XObjectFormType1 shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23171"/>
			<description>Entry F with type Dictionary in XObjectFormType1 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormType1 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23172"/>
			<description>Entry F in XObjectFormType1 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectFormType1 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23173"/>
			<description>Entry GTS_Encapsulated in XObjectFormType1 shall have type Boolean</description>
			<test>containsGTS_Encapsulated == false || GTS_EncapsulatedHasTypeBoolean == true</test>
			<error>
				<message>Entry GTS_Encapsulated in XObjectFormType1 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23174"/>
			<description>Entry OPI with type Dictionary in XObjectFormType1 shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectFormType1 is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23175"/>
			<description>Entry OPI in XObjectFormType1 shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23176"/>
			<description>Entry XUID with type Array in XObjectFormType1 shall be object ArrayOfIntegersGeneral</description>
			<test>XUIDHasTypeArray != true || XUID_size == 1</test>
			<error>
				<message>Entry XUID with type Array in XObjectFormType1 is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="5" testNumber="23177"/>
			<description>Entry XUID in XObjectFormType1 is deprecated since PDF 1.3</description>
			<test>containsXUID == false</test>
			<error>
				<message>Entry XUID in XObjectFormType1 is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23178"/>
			<description>Entry XUID in XObjectFormType1 shall have type Array</description>
			<test>containsXUID == false || XUIDHasTypeArray == true</test>
			<error>
				<message>Entry XUID in XObjectFormType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23179"/>
			<description>Entry BBox in XObjectFormType1 is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23180"/>
			<description>Entry BBox in XObjectFormType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="11" testNumber="23181"/>
			<description>Entry Name in XObjectFormType1 is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23182"/>
			<description>Entry Name in XObjectFormType1 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectFormType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="11" testNumber="23183"/>
			<description>Entry Matrix in XObjectFormType1 is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsMatrix == true || (false) == false)</test>
			<error>
				<message>Entry Matrix in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23184"/>
			<description>Entry Matrix in XObjectFormType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormType1 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23185"/>
			<description>Entry FFilter with type Array in XObjectFormType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23186"/>
			<description>Entry FFilter with type Name in XObjectFormType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23187"/>
			<description>Entry FFilter in XObjectFormType1 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in XObjectFormType1 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="23188"/>
			<description>Entry FFilter with type Array in XObjectFormType1 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="11" testNumber="23189"/>
			<description>Entry GTS_Env in XObjectFormType1 is required, when fn:IsRequired((@GTS_Scope == Stream) || (@GTS_Scope == Global))</description>
			<test>(containsGTS_Env == true || ((GTS_ScopeNameValue == "Stream") || (GTS_ScopeNameValue == "Global")) == false)</test>
			<error>
				<message>Entry GTS_Env in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23190"/>
			<description>Entry GTS_Env in XObjectFormType1 shall have type StringText</description>
			<test>containsGTS_Env == false || GTS_EnvHasTypeStringText == true</test>
			<error>
				<message>Entry GTS_Env in XObjectFormType1 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23191"/>
			<description>Entry Subtype in XObjectFormType1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23192"/>
			<description>Entry Subtype with type Name in XObjectFormType1 shall have value Form</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Form"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormType1 has incorrect value %2 instead of Form</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23193"/>
			<description>Entry Subtype in XObjectFormType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23194"/>
			<description>Entry Measure with type Dictionary in XObjectFormType1 shall be one of objects MeasureRL, MeasureGEO</description>
			<test>MeasureHasTypeDictionary != true || Measure_size == 1</test>
			<error>
				<message>Entry Measure with type Dictionary in XObjectFormType1 is not one of objects MeasureRL, MeasureGEO</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23195"/>
			<description>Entry Measure in XObjectFormType1 shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23196"/>
			<description>Entry Filter with type Array in XObjectFormType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23197"/>
			<description>Entry Filter with type Name in XObjectFormType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23198"/>
			<description>Entry Filter in XObjectFormType1 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in XObjectFormType1 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="23199"/>
			<description>Entry Filter with type Array in XObjectFormType1 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23200"/>
			<description>Entry OC with type Dictionary in XObjectFormType1 shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectFormType1 is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23201"/>
			<description>Entry OC in XObjectFormType1 shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23202"/>
			<description>Entry Ref with type Dictionary in XObjectFormType1 shall be object Reference</description>
			<test>RefHasTypeDictionary != true || Ref_size == 1</test>
			<error>
				<message>Entry Ref with type Dictionary in XObjectFormType1 is not object Reference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23203"/>
			<description>Entry Ref in XObjectFormType1 shall have type Dictionary</description>
			<test>containsRef == false || RefHasTypeDictionary == true</test>
			<error>
				<message>Entry Ref in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23204"/>
			<description>Entry Resources with type Dictionary in XObjectFormType1 shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in XObjectFormType1 is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23205"/>
			<description>Entry Resources in XObjectFormType1 is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23206"/>
			<description>Entry Resources in XObjectFormType1 shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in XObjectFormType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23207"/>
			<description>Entry GTS_XID in XObjectFormType1 shall have type String</description>
			<test>containsGTS_XID == false || GTS_XIDHasTypeString == true</test>
			<error>
				<message>Entry GTS_XID in XObjectFormType1 is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23208"/>
			<description>Entry StructParents in XObjectFormType1 shall have type Integer</description>
			<test>containsStructParents == false || StructParentsHasTypeInteger == true</test>
			<error>
				<message>Entry StructParents in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="23209"/>
			<description>Entry StructParents with type Integer in XObjectFormType1 shall correspond special case: fn:Not(fn:IsPresent(StructParent))</description>
			<test>StructParentsHasTypeInteger != true || (((containsStructParent == true)) != true)</test>
			<error>
				<message>Entry StructParents with type Integer in XObjectFormType1 doesn't correspond special case: fn:Not(fn:IsPresent(StructParent))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="1" testNumber="23340"/>
			<description>ActionNamed shall not contain entries except S, N, Next, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionNamed contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23341"/>
			<description>Entry S in ActionNamed is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionNamed is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23342"/>
			<description>Entry S with type Name in ActionNamed shall have value Named</description>
			<test>SHasTypeName != true || SNameValue == "Named"</test>
			<error>
				<message>Entry S with type Name in ActionNamed has incorrect value %2 instead of Named</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23343"/>
			<description>Entry S in ActionNamed shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionNamed is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23344"/>
			<description>Entry N in ActionNamed is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in ActionNamed is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23345"/>
			<description>Entry N in ActionNamed shall have type Name</description>
			<test>containsN == false || NHasTypeName == true</test>
			<error>
				<message>Entry N in ActionNamed is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23346"/>
			<description>Entry Next with type Array in ActionNamed shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionNamed is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23347"/>
			<description>Entry Next with type Dictionary in ActionNamed shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionNamed is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23348"/>
			<description>Entry Next in ActionNamed shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionNamed is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23349"/>
			<description>Entry Type with type Name in ActionNamed shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionNamed has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNamed">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23350"/>
			<description>Entry Type in ActionNamed shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionNamed is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureImagesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23374"/>
			<description>Entry with type Stream in ArrayOfWebCaptureImages shall be object XObjectImage</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfWebCaptureImages is not object XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureImagesEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="23375"/>
			<description>Entry with type Stream in ArrayOfWebCaptureImages shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfWebCaptureImages is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureImagesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23376"/>
			<description>Entry in ArrayOfWebCaptureImages shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in ArrayOfWebCaptureImages is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="1" testNumber="23405"/>
			<description>3DView shall not contain entries except MS, BG, NR, LS, O, IN, Type, SA, XN, NA, CO, P, C2W, U3DPath, RM</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'MS' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'NR' &amp;&amp; elem != 'LS' &amp;&amp; elem != 'O' &amp;&amp; elem != 'IN' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'XN' &amp;&amp; elem != 'NA' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'P' &amp;&amp; elem != 'C2W' &amp;&amp; elem != 'U3DPath' &amp;&amp; elem != 'RM').length == 0</test>
			<error>
				<message>3DView contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'MS' &amp;&amp; elem != 'BG' &amp;&amp; elem != 'NR' &amp;&amp; elem != 'LS' &amp;&amp; elem != 'O' &amp;&amp; elem != 'IN' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'SA' &amp;&amp; elem != 'XN' &amp;&amp; elem != 'NA' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'P' &amp;&amp; elem != 'C2W' &amp;&amp; elem != 'U3DPath' &amp;&amp; elem != 'RM').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23406"/>
			<description>Entry MS with type Name in 3DView shall have one of values: U3D, M</description>
			<test>MSHasTypeName != true || MSNameValue == "M" || MSNameValue == "U3D"</test>
			<error>
				<message>Entry MS with type Name in 3DView has incorrect value %2 instead of U3D, M</message>
				<arguments>
					<argument>keyName</argument>
					<argument>MSNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23407"/>
			<description>Entry MS in 3DView shall have type Name</description>
			<test>containsMS == false || MSHasTypeName == true</test>
			<error>
				<message>Entry MS in 3DView is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23408"/>
			<description>Entry BG with type Dictionary in 3DView shall be object 3DBackground</description>
			<test>BGHasTypeDictionary != true || BG_size == 1</test>
			<error>
				<message>Entry BG with type Dictionary in 3DView is not object 3DBackground</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23409"/>
			<description>Entry BG in 3DView shall have type Dictionary</description>
			<test>containsBG == false || BGHasTypeDictionary == true</test>
			<error>
				<message>Entry BG in 3DView is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23410"/>
			<description>Entry NR in 3DView shall have type Boolean</description>
			<test>containsNR == false || NRHasTypeBoolean == true</test>
			<error>
				<message>Entry NR in 3DView is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23411"/>
			<description>Entry LS with type Dictionary in 3DView shall be object 3DLightingScheme</description>
			<test>LSHasTypeDictionary != true || LS_size == 1</test>
			<error>
				<message>Entry LS with type Dictionary in 3DView is not object 3DLightingScheme</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23412"/>
			<description>Entry LS in 3DView shall have type Dictionary</description>
			<test>containsLS == false || LSHasTypeDictionary == true</test>
			<error>
				<message>Entry LS in 3DView is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23413"/>
			<description>Entry O with type Stream in 3DView shall be object XObjectFormType1</description>
			<test>OHasTypeStream != true || O_size == 1</test>
			<error>
				<message>Entry O with type Stream in 3DView is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="10" testNumber="23414"/>
			<description>Entry O with type Stream in 3DView shall be indirect</description>
			<test>OHasTypeStream != true || isOIndirect == true</test>
			<error>
				<message>Entry O with type Stream in 3DView is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23415"/>
			<description>Entry O in 3DView shall have type Stream</description>
			<test>containsO == false || OHasTypeStream == true</test>
			<error>
				<message>Entry O in 3DView is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23416"/>
			<description>Entry IN in 3DView shall have type StringText</description>
			<test>containsIN == false || INHasTypeStringText == true</test>
			<error>
				<message>Entry IN in 3DView is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23417"/>
			<description>Entry Type with type Name in 3DView shall have value 3DView</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DView"</test>
			<error>
				<message>Entry Type with type Name in 3DView has incorrect value %2 instead of 3DView</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23418"/>
			<description>Entry Type in 3DView shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DView is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23419"/>
			<description>Entry SA with type Array in 3DView shall be object ArrayOf3DCrossSection</description>
			<test>SAHasTypeArray != true || SA_size == 1</test>
			<error>
				<message>Entry SA with type Array in 3DView is not object ArrayOf3DCrossSection</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23420"/>
			<description>Entry SA in 3DView shall have type Array</description>
			<test>containsSA == false || SAHasTypeArray == true</test>
			<error>
				<message>Entry SA in 3DView is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23421"/>
			<description>Entry XN in 3DView is required</description>
			<test>containsXN == true</test>
			<error>
				<message>Entry XN in 3DView is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23422"/>
			<description>Entry XN in 3DView shall have type StringText</description>
			<test>containsXN == false || XNHasTypeStringText == true</test>
			<error>
				<message>Entry XN in 3DView is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23423"/>
			<description>Entry NA with type Array in 3DView shall be object ArrayOf3DNode</description>
			<test>NAHasTypeArray != true || NA_size == 1</test>
			<error>
				<message>Entry NA with type Array in 3DView is not object ArrayOf3DNode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23424"/>
			<description>Entry NA in 3DView shall have type Array</description>
			<test>containsNA == false || NAHasTypeArray == true</test>
			<error>
				<message>Entry NA in 3DView is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23425"/>
			<description>Entry CO in 3DView shall have type Number</description>
			<test>containsCO == false || COHasTypeNumber == true</test>
			<error>
				<message>Entry CO in 3DView is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23426"/>
			<description>Entry P with type Dictionary in 3DView shall be object Projection</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in 3DView is not object Projection</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23427"/>
			<description>Entry P in 3DView shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in 3DView is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23428"/>
			<description>Entry C2W with type Array in 3DView shall be object ArrayOf3DTransMatrix</description>
			<test>C2WHasTypeArray != true || C2W_size == 1</test>
			<error>
				<message>Entry C2W with type Array in 3DView is not object ArrayOf3DTransMatrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="11" testNumber="23429"/>
			<description>Entry C2W in 3DView is required, when fn:IsRequired(@MS == M)</description>
			<test>(containsC2W == true || (MSNameValue == "M") == false)</test>
			<error>
				<message>Entry C2W in 3DView is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23430"/>
			<description>Entry C2W in 3DView shall have type Array</description>
			<test>containsC2W == false || C2WHasTypeArray == true</test>
			<error>
				<message>Entry C2W in 3DView is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23431"/>
			<description>Entry U3DPath with type Array in 3DView shall be object ArrayOfStringsText</description>
			<test>U3DPathHasTypeArray != true || U3DPath_size == 1</test>
			<error>
				<message>Entry U3DPath with type Array in 3DView is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="11" testNumber="23432"/>
			<description>Entry U3DPath in 3DView is required, when fn:IsRequired(@MS == U3D)</description>
			<test>(containsU3DPath == true || (MSNameValue == "U3D") == false)</test>
			<error>
				<message>Entry U3DPath in 3DView is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23433"/>
			<description>Entry U3DPath in 3DView shall have one of types: Array, StringText</description>
			<test>containsU3DPath == false || U3DPathHasTypeArray == true || U3DPathHasTypeStringText == true</test>
			<error>
				<message>Entry U3DPath in 3DView is not one of types: Array, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23434"/>
			<description>Entry RM with type Dictionary in 3DView shall be object 3DRenderMode</description>
			<test>RMHasTypeDictionary != true || RM_size == 1</test>
			<error>
				<message>Entry RM with type Dictionary in 3DView is not object 3DRenderMode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23435"/>
			<description>Entry RM in 3DView shall have type Dictionary</description>
			<test>containsRM == false || RMHasTypeDictionary == true</test>
			<error>
				<message>Entry RM in 3DView is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="1" testNumber="23525"/>
			<description>AppearanceTrapNet shall not contain entries except D, R, N</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'R' &amp;&amp; elem != 'N').length == 0</test>
			<error>
				<message>AppearanceTrapNet contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'R' &amp;&amp; elem != 'N').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23526"/>
			<description>Entry D with type Dictionary in AppearanceTrapNet shall be object AppearanceTrapNetSubDict</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in AppearanceTrapNet is not object AppearanceTrapNetSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23527"/>
			<description>Entry D with type Stream in AppearanceTrapNet shall be object XObjectFormTrapNet</description>
			<test>DHasTypeStream != true || D_size == 1</test>
			<error>
				<message>Entry D with type Stream in AppearanceTrapNet is not object XObjectFormTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="10" testNumber="23528"/>
			<description>Entry D with type Stream in AppearanceTrapNet shall be indirect</description>
			<test>DHasTypeStream != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Stream in AppearanceTrapNet is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23529"/>
			<description>Entry D in AppearanceTrapNet shall have one of types: Dictionary, Stream</description>
			<test>containsD == false || DHasTypeDictionary == true || DHasTypeStream == true</test>
			<error>
				<message>Entry D in AppearanceTrapNet is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23530"/>
			<description>Entry R with type Dictionary in AppearanceTrapNet shall be object AppearanceTrapNetSubDict</description>
			<test>RHasTypeDictionary != true || R_size == 1</test>
			<error>
				<message>Entry R with type Dictionary in AppearanceTrapNet is not object AppearanceTrapNetSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23531"/>
			<description>Entry R with type Stream in AppearanceTrapNet shall be object XObjectFormTrapNet</description>
			<test>RHasTypeStream != true || R_size == 1</test>
			<error>
				<message>Entry R with type Stream in AppearanceTrapNet is not object XObjectFormTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="10" testNumber="23532"/>
			<description>Entry R with type Stream in AppearanceTrapNet shall be indirect</description>
			<test>RHasTypeStream != true || isRIndirect == true</test>
			<error>
				<message>Entry R with type Stream in AppearanceTrapNet is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23533"/>
			<description>Entry R in AppearanceTrapNet shall have one of types: Dictionary, Stream</description>
			<test>containsR == false || RHasTypeDictionary == true || RHasTypeStream == true</test>
			<error>
				<message>Entry R in AppearanceTrapNet is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23534"/>
			<description>Entry N with type Dictionary in AppearanceTrapNet shall be object AppearanceTrapNetSubDict</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in AppearanceTrapNet is not object AppearanceTrapNetSubDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23535"/>
			<description>Entry N with type Stream in AppearanceTrapNet shall be object XObjectFormTrapNet</description>
			<test>NHasTypeStream != true || N_size == 1</test>
			<error>
				<message>Entry N with type Stream in AppearanceTrapNet is not object XObjectFormTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23536"/>
			<description>Entry N in AppearanceTrapNet is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in AppearanceTrapNet is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="10" testNumber="23537"/>
			<description>Entry N with type Stream in AppearanceTrapNet shall be indirect</description>
			<test>NHasTypeStream != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Stream in AppearanceTrapNet is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNet">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23538"/>
			<description>Entry N in AppearanceTrapNet shall have one of types: Dictionary, Stream</description>
			<test>containsN == false || NHasTypeDictionary == true || NHasTypeStream == true</test>
			<error>
				<message>Entry N in AppearanceTrapNet is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfUserPropertyEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23555"/>
			<description>Entry with type Dictionary in ArrayOfUserProperty shall be object UserProperty</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfUserProperty is not object UserProperty</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfUserPropertyEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23556"/>
			<description>Entry in ArrayOfUserProperty shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfUserProperty is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="1" testNumber="23632"/>
			<description>InteractiveForm shall not contain entries except DR, NeedAppearances, Fields, DA, CO, SigFlags, XFA, Q</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DR' &amp;&amp; elem != 'NeedAppearances' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'SigFlags' &amp;&amp; elem != 'XFA' &amp;&amp; elem != 'Q').length == 0</test>
			<error>
				<message>InteractiveForm contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DR' &amp;&amp; elem != 'NeedAppearances' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'SigFlags' &amp;&amp; elem != 'XFA' &amp;&amp; elem != 'Q').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23633"/>
			<description>Entry DR with type Dictionary in InteractiveForm shall be object Resource</description>
			<test>DRHasTypeDictionary != true || DR_size == 1</test>
			<error>
				<message>Entry DR with type Dictionary in InteractiveForm is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23634"/>
			<description>Entry DR in InteractiveForm shall have type Dictionary</description>
			<test>containsDR == false || DRHasTypeDictionary == true</test>
			<error>
				<message>Entry DR in InteractiveForm is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23635"/>
			<description>Entry NeedAppearances in InteractiveForm shall have type Boolean</description>
			<test>containsNeedAppearances == false || NeedAppearancesHasTypeBoolean == true</test>
			<error>
				<message>Entry NeedAppearances in InteractiveForm is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23636"/>
			<description>Entry Fields with type Array in InteractiveForm shall be object ArrayOfFields</description>
			<test>FieldsHasTypeArray != true || Fields_size == 1</test>
			<error>
				<message>Entry Fields with type Array in InteractiveForm is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23637"/>
			<description>Entry Fields in InteractiveForm is required</description>
			<test>containsFields == true</test>
			<error>
				<message>Entry Fields in InteractiveForm is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23638"/>
			<description>Entry Fields in InteractiveForm shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in InteractiveForm is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23639"/>
			<description>Entry DA in InteractiveForm shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in InteractiveForm is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23640"/>
			<description>Entry CO with type Array in InteractiveForm shall be object ArrayOfFields</description>
			<test>COHasTypeArray != true || CO_size == 1</test>
			<error>
				<message>Entry CO with type Array in InteractiveForm is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23641"/>
			<description>Entry CO in InteractiveForm shall have type Array</description>
			<test>containsCO == false || COHasTypeArray == true</test>
			<error>
				<message>Entry CO in InteractiveForm is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23642"/>
			<description>Entry SigFlags in InteractiveForm shall have type Bitmask</description>
			<test>containsSigFlags == false || SigFlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry SigFlags in InteractiveForm is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="9" testNumber="23643"/>
			<description>Entry SigFlags with type Bitmask in InteractiveForm shall correspond special case: fn:Eval(fn:BitsClear(3 , 32))</description>
			<test>SigFlagsHasTypeBitmask != true || (((SigFlagsBitmaskValue &gt;&gt; 2 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (SigFlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry SigFlags with type Bitmask in InteractiveForm doesn't correspond special case: fn:Eval(fn:BitsClear(3 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23644"/>
			<description>Entry XFA with type Array in InteractiveForm shall be object ArrayOfXFA</description>
			<test>XFAHasTypeArray != true || XFA_size == 1</test>
			<error>
				<message>Entry XFA with type Array in InteractiveForm is not object ArrayOfXFA</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23645"/>
			<description>Entry XFA with type Stream in InteractiveForm shall be object Stream</description>
			<test>XFAHasTypeStream != true || XFA_size == 1</test>
			<error>
				<message>Entry XFA with type Stream in InteractiveForm is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="10" testNumber="23646"/>
			<description>Entry XFA with type Stream in InteractiveForm shall be indirect</description>
			<test>XFAHasTypeStream != true || isXFAIndirect == true</test>
			<error>
				<message>Entry XFA with type Stream in InteractiveForm is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23647"/>
			<description>Entry XFA in InteractiveForm shall have one of types: Array, Stream</description>
			<test>containsXFA == false || XFAHasTypeArray == true || XFAHasTypeStream == true</test>
			<error>
				<message>Entry XFA in InteractiveForm is not one of types: Array, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23648"/>
			<description>Entry Q with type Integer in InteractiveForm shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in InteractiveForm has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AInteractiveForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23649"/>
			<description>Entry Q in InteractiveForm shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in InteractiveForm is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="1" testNumber="23682"/>
			<description>DocMDPTransformParameters shall not contain entries except V, P, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>DocMDPTransformParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23683"/>
			<description>Entry V with type Name in DocMDPTransformParameters shall have value 1.2</description>
			<test>VHasTypeName != true || VNameValue == "1.2"</test>
			<error>
				<message>Entry V with type Name in DocMDPTransformParameters has incorrect value %2 instead of 1.2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23684"/>
			<description>Entry V in DocMDPTransformParameters shall have type Name</description>
			<test>containsV == false || VHasTypeName == true</test>
			<error>
				<message>Entry V in DocMDPTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23685"/>
			<description>Entry P with type Integer in DocMDPTransformParameters shall have one of values: 1, 2, 3</description>
			<test>PHasTypeInteger != true || PIntegerValue == 1 || PIntegerValue == 2 || PIntegerValue == 3</test>
			<error>
				<message>Entry P with type Integer in DocMDPTransformParameters has incorrect value %2 instead of 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23686"/>
			<description>Entry P in DocMDPTransformParameters shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in DocMDPTransformParameters is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23687"/>
			<description>Entry Type with type Name in DocMDPTransformParameters shall have value TransformParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "TransformParams"</test>
			<error>
				<message>Entry Type with type Name in DocMDPTransformParameters has incorrect value %2 instead of TransformParams</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocMDPTransformParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23688"/>
			<description>Entry Type in DocMDPTransformParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in DocMDPTransformParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_7" clause="1" testNumber="23706"/>
			<description>MediaClipSectionMHBE shall not contain entries except E, B</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'B').length == 0</test>
			<error>
				<message>MediaClipSectionMHBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'B').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23707"/>
			<description>Entry E with type Dictionary in MediaClipSectionMHBE shall be one of objects MediaOffsetTime, MediaOffsetMarker, MediaOffsetFrame</description>
			<test>EHasTypeDictionary != true || E_size == 1</test>
			<error>
				<message>Entry E with type Dictionary in MediaClipSectionMHBE is not one of objects MediaOffsetTime, MediaOffsetMarker, MediaOffsetFrame</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23708"/>
			<description>Entry E in MediaClipSectionMHBE shall have type Dictionary</description>
			<test>containsE == false || EHasTypeDictionary == true</test>
			<error>
				<message>Entry E in MediaClipSectionMHBE is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23709"/>
			<description>Entry B with type Dictionary in MediaClipSectionMHBE shall be one of objects MediaOffsetTime, MediaOffsetMarker, MediaOffsetFrame</description>
			<test>BHasTypeDictionary != true || B_size == 1</test>
			<error>
				<message>Entry B with type Dictionary in MediaClipSectionMHBE is not one of objects MediaOffsetTime, MediaOffsetMarker, MediaOffsetFrame</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipSectionMHBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23710"/>
			<description>Entry B in MediaClipSectionMHBE shall have type Dictionary</description>
			<test>containsB == false || BHasTypeDictionary == true</test>
			<error>
				<message>Entry B in MediaClipSectionMHBE is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="1" testNumber="23734"/>
			<description>OptContentProperties shall not contain entries except D, OCGs, Configs</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'OCGs' &amp;&amp; elem != 'Configs').length == 0</test>
			<error>
				<message>OptContentProperties contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'OCGs' &amp;&amp; elem != 'Configs').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23735"/>
			<description>Entry D with type Dictionary in OptContentProperties shall be object OptContentConfig</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in OptContentProperties is not object OptContentConfig</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23736"/>
			<description>Entry D in OptContentProperties is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in OptContentProperties is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23737"/>
			<description>Entry D in OptContentProperties shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in OptContentProperties is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23738"/>
			<description>Entry OCGs with type Array in OptContentProperties shall be object ArrayOfOCGindirect</description>
			<test>OCGsHasTypeArray != true || OCGs_size == 1</test>
			<error>
				<message>Entry OCGs with type Array in OptContentProperties is not object ArrayOfOCGindirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23739"/>
			<description>Entry OCGs in OptContentProperties is required</description>
			<test>containsOCGs == true</test>
			<error>
				<message>Entry OCGs in OptContentProperties is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23740"/>
			<description>Entry OCGs in OptContentProperties shall have type Array</description>
			<test>containsOCGs == false || OCGsHasTypeArray == true</test>
			<error>
				<message>Entry OCGs in OptContentProperties is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23741"/>
			<description>Entry Configs with type Array in OptContentProperties shall be object ArrayOfOCConfig</description>
			<test>ConfigsHasTypeArray != true || Configs_size == 1</test>
			<error>
				<message>Entry Configs with type Array in OptContentProperties is not object ArrayOfOCConfig</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentProperties">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23742"/>
			<description>Entry Configs in OptContentProperties shall have type Array</description>
			<test>containsConfigs == false || ConfigsHasTypeArray == true</test>
			<error>
				<message>Entry Configs in OptContentProperties is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFilterNamesEntry">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23766"/>
			<description>Entry with type Name in ArrayOfFilterNames shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>HasTypeName != true || NameValue == "ASCIIHexDecode" || NameValue == "ASCII85Decode" || NameValue == "LZWDecode" || NameValue == "FlateDecode" || NameValue == "RunLengthDecode" || NameValue == "CCITTFaxDecode" || NameValue == "JBIG2Decode" || NameValue == "DCTDecode" || NameValue == "JPXDecode" || NameValue == "Crypt"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfFilterNames has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFilterNamesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23767"/>
			<description>Entry in ArrayOfFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfFilterNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSoftwareIdentifiersEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23774"/>
			<description>Entry with type Dictionary in ArrayOfSoftwareIdentifiers shall be object SoftwareIdentifier</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfSoftwareIdentifiers is not object SoftwareIdentifier</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSoftwareIdentifiersEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23775"/>
			<description>Entry in ArrayOfSoftwareIdentifiers shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfSoftwareIdentifiers is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipDataMHBE">
			<id specification="ISO_32000_1_7" clause="1" testNumber="23782"/>
			<description>MediaClipDataMHBE shall not contain entries except BU</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BU').length == 0</test>
			<error>
				<message>MediaClipDataMHBE contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BU').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaClipDataMHBE">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23783"/>
			<description>Entry BU in MediaClipDataMHBE shall have type StringAscii</description>
			<test>containsBU == false || BUHasTypeStringAscii == true</test>
			<error>
				<message>Entry BU in MediaClipDataMHBE is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="1" testNumber="23786"/>
			<description>Navigator shall not contain entries except Category, ID, Desc, InitialFields, Resources, Icon, SWF, APIVersion, Version, Name, Locale, LoadType, Strings</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Category' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'InitialFields' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Icon' &amp;&amp; elem != 'SWF' &amp;&amp; elem != 'APIVersion' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Locale' &amp;&amp; elem != 'LoadType' &amp;&amp; elem != 'Strings').length == 0</test>
			<error>
				<message>Navigator contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Category' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'InitialFields' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Icon' &amp;&amp; elem != 'SWF' &amp;&amp; elem != 'APIVersion' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Locale' &amp;&amp; elem != 'LoadType' &amp;&amp; elem != 'Strings').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23787"/>
			<description>Entry Category in Navigator shall have type StringText</description>
			<test>containsCategory == false || CategoryHasTypeStringText == true</test>
			<error>
				<message>Entry Category in Navigator is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23788"/>
			<description>Entry ID in Navigator is required</description>
			<test>containsID == true</test>
			<error>
				<message>Entry ID in Navigator is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23789"/>
			<description>Entry ID in Navigator shall have type StringText</description>
			<test>containsID == false || entryIDHasTypeStringText == true</test>
			<error>
				<message>Entry ID in Navigator is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23790"/>
			<description>Entry Desc in Navigator shall have type StringText</description>
			<test>containsDesc == false || DescHasTypeStringText == true</test>
			<error>
				<message>Entry Desc in Navigator is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23791"/>
			<description>Entry InitialFields with type Dictionary in Navigator shall be object CollectionSchema</description>
			<test>InitialFieldsHasTypeDictionary != true || InitialFields_size == 1</test>
			<error>
				<message>Entry InitialFields with type Dictionary in Navigator is not object CollectionSchema</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23792"/>
			<description>Entry InitialFields in Navigator shall have type Dictionary</description>
			<test>containsInitialFields == false || InitialFieldsHasTypeDictionary == true</test>
			<error>
				<message>Entry InitialFields in Navigator is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23793"/>
			<description>Entry Resources with type NameTree in Navigator shall be object NavigatorNameTreeResources</description>
			<test>ResourcesHasTypeNameTree != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type NameTree in Navigator is not object NavigatorNameTreeResources</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23794"/>
			<description>Entry Resources in Navigator is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in Navigator is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23795"/>
			<description>Entry Resources in Navigator shall have type NameTree</description>
			<test>containsResources == false || ResourcesHasTypeNameTree == true</test>
			<error>
				<message>Entry Resources in Navigator is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23796"/>
			<description>Entry Icon in Navigator shall have type StringText</description>
			<test>containsIcon == false || IconHasTypeStringText == true</test>
			<error>
				<message>Entry Icon in Navigator is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23797"/>
			<description>Entry SWF in Navigator is required</description>
			<test>containsSWF == true</test>
			<error>
				<message>Entry SWF in Navigator is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23798"/>
			<description>Entry SWF in Navigator shall have type StringText</description>
			<test>containsSWF == false || SWFHasTypeStringText == true</test>
			<error>
				<message>Entry SWF in Navigator is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23799"/>
			<description>Entry APIVersion in Navigator is required</description>
			<test>containsAPIVersion == true</test>
			<error>
				<message>Entry APIVersion in Navigator is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23800"/>
			<description>Entry APIVersion in Navigator shall have type StringText</description>
			<test>containsAPIVersion == false || APIVersionHasTypeStringText == true</test>
			<error>
				<message>Entry APIVersion in Navigator is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23801"/>
			<description>Entry Version in Navigator shall have type StringText</description>
			<test>containsVersion == false || VersionHasTypeStringText == true</test>
			<error>
				<message>Entry Version in Navigator is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23802"/>
			<description>Entry Name in Navigator shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in Navigator is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23803"/>
			<description>Entry Locale in Navigator shall have type StringText</description>
			<test>containsLocale == false || LocaleHasTypeStringText == true</test>
			<error>
				<message>Entry Locale in Navigator is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23804"/>
			<description>Entry LoadType with type Name in Navigator shall have one of values: Module, Default</description>
			<test>LoadTypeHasTypeName != true || LoadTypeNameValue == "Module" || LoadTypeNameValue == "Default"</test>
			<error>
				<message>Entry LoadType with type Name in Navigator has incorrect value %2 instead of Module, Default</message>
				<arguments>
					<argument>keyName</argument>
					<argument>LoadTypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23805"/>
			<description>Entry LoadType in Navigator shall have type Name</description>
			<test>containsLoadType == false || LoadTypeHasTypeName == true</test>
			<error>
				<message>Entry LoadType in Navigator is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23806"/>
			<description>Entry Strings with type NameTree in Navigator shall be object NavigatorNameTreeStrings</description>
			<test>StringsHasTypeNameTree != true || Strings_size == 1</test>
			<error>
				<message>Entry Strings with type NameTree in Navigator is not object NavigatorNameTreeStrings</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigator">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23807"/>
			<description>Entry Strings in Navigator shall have type NameTree</description>
			<test>containsStrings == false || StringsHasTypeNameTree == true</test>
			<error>
				<message>Entry Strings in Navigator is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="1" testNumber="23874"/>
			<description>3DStream shall not contain entries except FDecodeParms, Type, AN, Subtype, DecodeParms, FFilter, Resources, DV, Length, VA, DL, OnInstantiate, Filter, F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FDecodeParms' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'AN' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'VA' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'OnInstantiate' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'F').length == 0</test>
			<error>
				<message>3DStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FDecodeParms' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'AN' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'VA' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'OnInstantiate' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23875"/>
			<description>Entry FDecodeParms with type Array in 3DStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in 3DStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23876"/>
			<description>Entry FDecodeParms with type Dictionary in 3DStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in 3DStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23877"/>
			<description>Entry FDecodeParms in 3DStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in 3DStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="23878"/>
			<description>Entry FDecodeParms with type Array in 3DStream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in 3DStream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23879"/>
			<description>Entry Type with type Name in 3DStream shall have value 3D</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3D"</test>
			<error>
				<message>Entry Type with type Name in 3DStream has incorrect value %2 instead of 3D</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23880"/>
			<description>Entry Type in 3DStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23881"/>
			<description>Entry AN with type Dictionary in 3DStream shall be object 3DAnimationStyle</description>
			<test>ANHasTypeDictionary != true || AN_size == 1</test>
			<error>
				<message>Entry AN with type Dictionary in 3DStream is not object 3DAnimationStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23882"/>
			<description>Entry AN in 3DStream shall have type Dictionary</description>
			<test>containsAN == false || ANHasTypeDictionary == true</test>
			<error>
				<message>Entry AN in 3DStream is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23883"/>
			<description>Entry Subtype in 3DStream is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23884"/>
			<description>Entry Subtype with type Name in 3DStream shall have one of values: PRC, U3D</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "U3D" || SubtypeNameValue == "PRC"</test>
			<error>
				<message>Entry Subtype with type Name in 3DStream has incorrect value %2 instead of PRC, U3D</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23885"/>
			<description>Entry Subtype in 3DStream shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23886"/>
			<description>Entry DecodeParms with type Array in 3DStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in 3DStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23887"/>
			<description>Entry DecodeParms with type Dictionary in 3DStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in 3DStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23888"/>
			<description>Entry DecodeParms in 3DStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in 3DStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="23889"/>
			<description>Entry DecodeParms with type Array in 3DStream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in 3DStream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23890"/>
			<description>Entry FFilter with type Array in 3DStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in 3DStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23891"/>
			<description>Entry FFilter with type Name in 3DStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in 3DStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23892"/>
			<description>Entry FFilter in 3DStream shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in 3DStream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="23893"/>
			<description>Entry FFilter with type Array in 3DStream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in 3DStream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23894"/>
			<description>Entry Resources with type NameTree in 3DStream shall be object 3DStreamNameTreeResources</description>
			<test>ResourcesHasTypeNameTree != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type NameTree in 3DStream is not object 3DStreamNameTreeResources</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23895"/>
			<description>Entry Resources in 3DStream shall have type NameTree</description>
			<test>containsResources == false || ResourcesHasTypeNameTree == true</test>
			<error>
				<message>Entry Resources in 3DStream is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23896"/>
			<description>Entry DV with type Dictionary in 3DStream shall be object 3DView</description>
			<test>DVHasTypeDictionary != true || DV_size == 1</test>
			<error>
				<message>Entry DV with type Dictionary in 3DStream is not object 3DView</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="14" testNumber="23897"/>
			<description>Entry DV with type Integer in 3DStream shall correspond possible value predicate: fn:Eval((@DV &gt;= 0) &amp;&amp; (@DV &lt; fn:ArrayLength(VA)))</description>
			<test>DVHasTypeInteger != true || (DVIntegerValue &gt;= 0) &amp;&amp; (DVIntegerValue &lt; VAArraySize)</test>
			<error>
				<message>Entry DV with type Integer in 3DStream doesn't correspond possible value predicate: fn:Eval((@DV &gt;= 0) &amp;&amp; (@DV &lt; fn:ArrayLength(VA)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23898"/>
			<description>Entry DV with type Name in 3DStream shall have one of values: F, L</description>
			<test>DVHasTypeName != true || DVNameValue == "F" || DVNameValue == "L"</test>
			<error>
				<message>Entry DV with type Name in 3DStream has incorrect value %2 instead of F, L</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DVNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23899"/>
			<description>Entry DV in 3DStream shall have one of types: Name, Integer, Dictionary, String</description>
			<test>containsDV == false || DVHasTypeName == true || DVHasTypeInteger == true || DVHasTypeDictionary == true || DVHasTypeString == true</test>
			<error>
				<message>Entry DV in 3DStream is not one of types: Name, Integer, Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23900"/>
			<description>Entry Length in 3DStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in 3DStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23901"/>
			<description>Entry Length in 3DStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in 3DStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23902"/>
			<description>Entry VA with type Array in 3DStream shall be object ArrayOf3DView</description>
			<test>VAHasTypeArray != true || VA_size == 1</test>
			<error>
				<message>Entry VA with type Array in 3DStream is not object ArrayOf3DView</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23903"/>
			<description>Entry VA in 3DStream shall have type Array</description>
			<test>containsVA == false || VAHasTypeArray == true</test>
			<error>
				<message>Entry VA in 3DStream is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23904"/>
			<description>Entry DL in 3DStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in 3DStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="23905"/>
			<description>Entry DL with type Integer in 3DStream shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in 3DStream doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23906"/>
			<description>Entry OnInstantiate with type Stream in 3DStream shall be object Stream</description>
			<test>OnInstantiateHasTypeStream != true || OnInstantiate_size == 1</test>
			<error>
				<message>Entry OnInstantiate with type Stream in 3DStream is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="10" testNumber="23907"/>
			<description>Entry OnInstantiate with type Stream in 3DStream shall be indirect</description>
			<test>OnInstantiateHasTypeStream != true || isOnInstantiateIndirect == true</test>
			<error>
				<message>Entry OnInstantiate with type Stream in 3DStream is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23908"/>
			<description>Entry OnInstantiate in 3DStream shall have type Stream</description>
			<test>containsOnInstantiate == false || OnInstantiateHasTypeStream == true</test>
			<error>
				<message>Entry OnInstantiate in 3DStream is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23909"/>
			<description>Entry Filter with type Array in 3DStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in 3DStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23910"/>
			<description>Entry Filter with type Name in 3DStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in 3DStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23911"/>
			<description>Entry Filter in 3DStream shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in 3DStream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="23912"/>
			<description>Entry Filter with type Array in 3DStream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in 3DStream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23913"/>
			<description>Entry F with type Dictionary in 3DStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in 3DStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23914"/>
			<description>Entry F in 3DStream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in 3DStream is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_7" clause="1" testNumber="23983"/>
			<description>WebCaptureInfo shall not contain entries except C, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>WebCaptureInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_7" clause="17" testNumber="23984"/>
			<description>Entry C with type Array in WebCaptureInfo shall be object ArrayOfWebCaptureCommands</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in WebCaptureInfo is not object ArrayOfWebCaptureCommands</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23985"/>
			<description>Entry C in WebCaptureInfo shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in WebCaptureInfo is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_7" clause="7" testNumber="23986"/>
			<description>Entry V in WebCaptureInfo is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in WebCaptureInfo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_7" clause="6" testNumber="23987"/>
			<description>Entry V with type Number in WebCaptureInfo shall have value 1</description>
			<test>VHasTypeNumber != true || VNumberValue == 1</test>
			<error>
				<message>Entry V with type Number in WebCaptureInfo has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="23988"/>
			<description>Entry V in WebCaptureInfo shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in WebCaptureInfo is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="1" testNumber="24153"/>
			<description>AnnotMovie shall not contain entries except OC, A, F, T, Type, M, AP, Contents, Border, Subtype, C, NM, AS, Movie, StructParent, P, Rect</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'OC' &amp;&amp; elem != 'A' &amp;&amp; elem != 'F' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'M' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'C' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Movie' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect').length == 0</test>
			<error>
				<message>AnnotMovie contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'OC' &amp;&amp; elem != 'A' &amp;&amp; elem != 'F' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'M' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'C' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Movie' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Rect').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24154"/>
			<description>Entry OC with type Dictionary in AnnotMovie shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotMovie is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24155"/>
			<description>Entry OC in AnnotMovie shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24156"/>
			<description>Entry A with type Dictionary in AnnotMovie shall be object MovieActivation</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotMovie is not object MovieActivation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24157"/>
			<description>Entry A in AnnotMovie shall have one of types: Boolean, Dictionary</description>
			<test>containsA == false || AHasTypeBoolean == true || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotMovie is not one of types: Boolean, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24158"/>
			<description>Entry F in AnnotMovie shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotMovie is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="9" testNumber="24159"/>
			<description>Entry F with type Bitmask in AnnotMovie shall correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotMovie doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24160"/>
			<description>Entry T in AnnotMovie shall have type String</description>
			<test>containsT == false || THasTypeString == true</test>
			<error>
				<message>Entry T in AnnotMovie is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="6" testNumber="24161"/>
			<description>Entry Type with type Name in AnnotMovie shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotMovie has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24162"/>
			<description>Entry Type in AnnotMovie shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24163"/>
			<description>Entry M in AnnotMovie shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotMovie is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24164"/>
			<description>Entry AP with type Dictionary in AnnotMovie shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotMovie is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="11" testNumber="24165"/>
			<description>Entry AP in AnnotMovie is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24166"/>
			<description>Entry AP in AnnotMovie shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24167"/>
			<description>Entry Contents in AnnotMovie shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotMovie is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24168"/>
			<description>Entry Border with type Array in AnnotMovie shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotMovie is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24169"/>
			<description>Entry Border in AnnotMovie shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotMovie is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24170"/>
			<description>Entry Subtype in AnnotMovie is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="6" testNumber="24171"/>
			<description>Entry Subtype with type Name in AnnotMovie shall have value Movie</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Movie"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotMovie has incorrect value %2 instead of Movie</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24172"/>
			<description>Entry Subtype in AnnotMovie shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24173"/>
			<description>Entry C with type Array in AnnotMovie shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotMovie is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24174"/>
			<description>Entry C in AnnotMovie shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotMovie is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24175"/>
			<description>Entry NM in AnnotMovie shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotMovie is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="11" testNumber="24176"/>
			<description>Entry AS in AnnotMovie is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24177"/>
			<description>Entry AS in AnnotMovie shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24178"/>
			<description>Entry Movie with type Dictionary in AnnotMovie shall be object Movie</description>
			<test>MovieHasTypeDictionary != true || Movie_size == 1</test>
			<error>
				<message>Entry Movie with type Dictionary in AnnotMovie is not object Movie</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24179"/>
			<description>Entry Movie in AnnotMovie is required</description>
			<test>containsMovie == true</test>
			<error>
				<message>Entry Movie in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24180"/>
			<description>Entry Movie in AnnotMovie shall have type Dictionary</description>
			<test>containsMovie == false || MovieHasTypeDictionary == true</test>
			<error>
				<message>Entry Movie in AnnotMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24181"/>
			<description>Entry StructParent in AnnotMovie shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotMovie is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24182"/>
			<description>Entry P with type Dictionary in AnnotMovie shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotMovie is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="10" testNumber="24183"/>
			<description>Entry P with type Dictionary in AnnotMovie shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotMovie is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24184"/>
			<description>Entry P in AnnotMovie shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24185"/>
			<description>Entry Rect in AnnotMovie is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24186"/>
			<description>Entry Rect in AnnotMovie shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotMovie is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="1" testNumber="24451"/>
			<description>FunctionType0 shall not contain entries except FFilter, Size, Length, FDecodeParms, Decode, DecodeParms, Domain, DL, Encode, Order, Range, BitsPerSample, F, Filter, FunctionType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FFilter' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'Order' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'BitsPerSample' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType').length == 0</test>
			<error>
				<message>FunctionType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FFilter' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Domain' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Encode' &amp;&amp; elem != 'Order' &amp;&amp; elem != 'Range' &amp;&amp; elem != 'BitsPerSample' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FunctionType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24452"/>
			<description>Entry FFilter with type Array in FunctionType0 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType0 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="24453"/>
			<description>Entry FFilter with type Name in FunctionType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FunctionType0 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24454"/>
			<description>Entry FFilter in FunctionType0 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in FunctionType0 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="24455"/>
			<description>Entry FFilter with type Array in FunctionType0 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FunctionType0 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24456"/>
			<description>Entry Size with type Array in FunctionType0 shall be object ArrayOfIntegersGeneral</description>
			<test>SizeHasTypeArray != true || Size_size == 1</test>
			<error>
				<message>Entry Size with type Array in FunctionType0 is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24457"/>
			<description>Entry Size in FunctionType0 is required</description>
			<test>containsSize == true</test>
			<error>
				<message>Entry Size in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24458"/>
			<description>Entry Size in FunctionType0 shall have type Array</description>
			<test>containsSize == false || SizeHasTypeArray == true</test>
			<error>
				<message>Entry Size in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="24459"/>
			<description>Entry Size with type Array in FunctionType0 shall correspond special case: fn:Eval(fn:ArrayLength(Domain) == (2 * fn:ArrayLength(Size)))</description>
			<test>SizeHasTypeArray != true || (DomainArraySize == (2 * SizeArraySize))</test>
			<error>
				<message>Entry Size with type Array in FunctionType0 doesn't correspond special case: fn:Eval(fn:ArrayLength(Domain) == (2 * fn:ArrayLength(Size)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24460"/>
			<description>Entry Length in FunctionType0 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24461"/>
			<description>Entry Length in FunctionType0 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24462"/>
			<description>Entry FDecodeParms with type Array in FunctionType0 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType0 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24463"/>
			<description>Entry FDecodeParms with type Dictionary in FunctionType0 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FunctionType0 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24464"/>
			<description>Entry FDecodeParms in FunctionType0 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FunctionType0 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="24465"/>
			<description>Entry FDecodeParms with type Array in FunctionType0 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FunctionType0 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24466"/>
			<description>Entry Decode with type Array in FunctionType0 shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in FunctionType0 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24467"/>
			<description>Entry Decode in FunctionType0 shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="24468"/>
			<description>Entry Decode with type Array in FunctionType0 shall correspond special case: fn:Eval(fn:ArrayLength(Decode) == fn:ArrayLength(Range))</description>
			<test>DecodeHasTypeArray != true || (DecodeArraySize == RangeArraySize)</test>
			<error>
				<message>Entry Decode with type Array in FunctionType0 doesn't correspond special case: fn:Eval(fn:ArrayLength(Decode) == fn:ArrayLength(Range))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24469"/>
			<description>Entry DecodeParms with type Array in FunctionType0 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType0 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24470"/>
			<description>Entry DecodeParms with type Dictionary in FunctionType0 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FunctionType0 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24471"/>
			<description>Entry DecodeParms in FunctionType0 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FunctionType0 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="24472"/>
			<description>Entry DecodeParms with type Array in FunctionType0 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FunctionType0 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24473"/>
			<description>Entry Domain with type Array in FunctionType0 shall be object ArrayOfNumbersGeneral</description>
			<test>DomainHasTypeArray != true || Domain_size == 1</test>
			<error>
				<message>Entry Domain with type Array in FunctionType0 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24474"/>
			<description>Entry Domain in FunctionType0 is required</description>
			<test>containsDomain == true</test>
			<error>
				<message>Entry Domain in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24475"/>
			<description>Entry Domain in FunctionType0 shall have type Array</description>
			<test>containsDomain == false || DomainHasTypeArray == true</test>
			<error>
				<message>Entry Domain in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="24476"/>
			<description>Entry Domain with type Array in FunctionType0 shall correspond special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</description>
			<test>DomainHasTypeArray != true || ((DomainArraySize % 2) == 0)</test>
			<error>
				<message>Entry Domain with type Array in FunctionType0 doesn't correspond special case: fn:Eval((fn:ArrayLength(Domain) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24477"/>
			<description>Entry DL in FunctionType0 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="24478"/>
			<description>Entry DL with type Integer in FunctionType0 shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FunctionType0 doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24479"/>
			<description>Entry Encode with type Array in FunctionType0 shall be object ArrayOfNumbersGeneral</description>
			<test>EncodeHasTypeArray != true || Encode_size == 1</test>
			<error>
				<message>Entry Encode with type Array in FunctionType0 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24480"/>
			<description>Entry Encode in FunctionType0 shall have type Array</description>
			<test>containsEncode == false || EncodeHasTypeArray == true</test>
			<error>
				<message>Entry Encode in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="24481"/>
			<description>Entry Encode with type Array in FunctionType0 shall correspond special case: fn:Eval(fn:ArrayLength(Encode) == (2 * fn:ArrayLength(Size)))</description>
			<test>EncodeHasTypeArray != true || (EncodeArraySize == (2 * SizeArraySize))</test>
			<error>
				<message>Entry Encode with type Array in FunctionType0 doesn't correspond special case: fn:Eval(fn:ArrayLength(Encode) == (2 * fn:ArrayLength(Size)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="24482"/>
			<description>Entry Order with type Integer in FunctionType0 shall have one of values: 1, 3</description>
			<test>OrderHasTypeInteger != true || OrderIntegerValue == 1 || OrderIntegerValue == 3</test>
			<error>
				<message>Entry Order with type Integer in FunctionType0 has incorrect value %2 instead of 1, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>OrderIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24483"/>
			<description>Entry Order in FunctionType0 shall have type Integer</description>
			<test>containsOrder == false || OrderHasTypeInteger == true</test>
			<error>
				<message>Entry Order in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24484"/>
			<description>Entry Range with type Array in FunctionType0 shall be object ArrayOfNumbersGeneral</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in FunctionType0 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24485"/>
			<description>Entry Range in FunctionType0 is required</description>
			<test>containsRange == true</test>
			<error>
				<message>Entry Range in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24486"/>
			<description>Entry Range in FunctionType0 shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in FunctionType0 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="24487"/>
			<description>Entry Range with type Array in FunctionType0 shall correspond special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</description>
			<test>RangeHasTypeArray != true || ((RangeArraySize % 2) == 0)</test>
			<error>
				<message>Entry Range with type Array in FunctionType0 doesn't correspond special case: fn:Eval((fn:ArrayLength(Range) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24488"/>
			<description>Entry BitsPerSample in FunctionType0 is required</description>
			<test>containsBitsPerSample == true</test>
			<error>
				<message>Entry BitsPerSample in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="24489"/>
			<description>Entry BitsPerSample with type Integer in FunctionType0 shall have one of values: 1, 12, 2, 24, 4, 16, 8, 32</description>
			<test>BitsPerSampleHasTypeInteger != true || BitsPerSampleIntegerValue == 1 || BitsPerSampleIntegerValue == 2 || BitsPerSampleIntegerValue == 4 || BitsPerSampleIntegerValue == 8 || BitsPerSampleIntegerValue == 12 || BitsPerSampleIntegerValue == 16 || BitsPerSampleIntegerValue == 24 || BitsPerSampleIntegerValue == 32</test>
			<error>
				<message>Entry BitsPerSample with type Integer in FunctionType0 has incorrect value %2 instead of 1, 12, 2, 24, 4, 16, 8, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerSampleIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24490"/>
			<description>Entry BitsPerSample in FunctionType0 shall have type Integer</description>
			<test>containsBitsPerSample == false || BitsPerSampleHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerSample in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24491"/>
			<description>Entry F with type Dictionary in FunctionType0 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FunctionType0 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24492"/>
			<description>Entry F in FunctionType0 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FunctionType0 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24493"/>
			<description>Entry Filter with type Array in FunctionType0 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FunctionType0 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="24494"/>
			<description>Entry Filter with type Name in FunctionType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FunctionType0 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24495"/>
			<description>Entry Filter in FunctionType0 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in FunctionType0 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="24496"/>
			<description>Entry Filter with type Array in FunctionType0 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FunctionType0 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24497"/>
			<description>Entry FunctionType in FunctionType0 is required</description>
			<test>containsFunctionType == true</test>
			<error>
				<message>Entry FunctionType in FunctionType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="24498"/>
			<description>Entry FunctionType with type Integer in FunctionType0 shall have value 0</description>
			<test>FunctionTypeHasTypeInteger != true || FunctionTypeIntegerValue == 0</test>
			<error>
				<message>Entry FunctionType with type Integer in FunctionType0 has incorrect value %2 instead of 0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FunctionTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFunctionType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24499"/>
			<description>Entry FunctionType in FunctionType0 shall have type Integer</description>
			<test>containsFunctionType == false || FunctionTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FunctionType in FunctionType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="1" testNumber="24625"/>
			<description>MarkedContentReference shall not contain entries except Stm, StmOwn, MCID, Pg, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Stm' &amp;&amp; elem != 'StmOwn' &amp;&amp; elem != 'MCID' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MarkedContentReference contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Stm' &amp;&amp; elem != 'StmOwn' &amp;&amp; elem != 'MCID' &amp;&amp; elem != 'Pg' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24626"/>
			<description>Entry Stm with type Stream in MarkedContentReference shall be object XObjectFormType1</description>
			<test>StmHasTypeStream != true || Stm_size == 1</test>
			<error>
				<message>Entry Stm with type Stream in MarkedContentReference is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="10" testNumber="24627"/>
			<description>Entry Stm with type Stream in MarkedContentReference shall be indirect</description>
			<test>StmHasTypeStream != true || isStmIndirect == true</test>
			<error>
				<message>Entry Stm with type Stream in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24628"/>
			<description>Entry Stm in MarkedContentReference shall have type Stream</description>
			<test>containsStm == false || StmHasTypeStream == true</test>
			<error>
				<message>Entry Stm in MarkedContentReference is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24629"/>
			<description>Entry StmOwn with type Array in MarkedContentReference shall be object _UniversalArray</description>
			<test>StmOwnHasTypeArray != true || StmOwn_size == 1</test>
			<error>
				<message>Entry StmOwn with type Array in MarkedContentReference is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24630"/>
			<description>Entry StmOwn with type Dictionary in MarkedContentReference shall be object _UniversalDictionary</description>
			<test>StmOwnHasTypeDictionary != true || StmOwn_size == 1</test>
			<error>
				<message>Entry StmOwn with type Dictionary in MarkedContentReference is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24631"/>
			<description>Entry StmOwn with type Stream in MarkedContentReference shall be object Stream</description>
			<test>StmOwnHasTypeStream != true || StmOwn_size == 1</test>
			<error>
				<message>Entry StmOwn with type Stream in MarkedContentReference is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="10" testNumber="24632"/>
			<description>Entry StmOwn with type Array in MarkedContentReference shall be indirect</description>
			<test>StmOwnHasTypeArray != true || isStmOwnIndirect == true</test>
			<error>
				<message>Entry StmOwn with type Array in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="10" testNumber="24633"/>
			<description>Entry StmOwn with type Dictionary in MarkedContentReference shall be indirect</description>
			<test>StmOwnHasTypeDictionary != true || isStmOwnIndirect == true</test>
			<error>
				<message>Entry StmOwn with type Dictionary in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="10" testNumber="24634"/>
			<description>Entry StmOwn with type Stream in MarkedContentReference shall be indirect</description>
			<test>StmOwnHasTypeStream != true || isStmOwnIndirect == true</test>
			<error>
				<message>Entry StmOwn with type Stream in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24635"/>
			<description>Entry StmOwn in MarkedContentReference shall have one of types: Array, Dictionary, Stream</description>
			<test>containsStmOwn == false || StmOwnHasTypeArray == true || StmOwnHasTypeDictionary == true || StmOwnHasTypeStream == true</test>
			<error>
				<message>Entry StmOwn in MarkedContentReference is not one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24636"/>
			<description>Entry MCID in MarkedContentReference is required</description>
			<test>containsMCID == true</test>
			<error>
				<message>Entry MCID in MarkedContentReference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24637"/>
			<description>Entry MCID in MarkedContentReference shall have type Integer</description>
			<test>containsMCID == false || MCIDHasTypeInteger == true</test>
			<error>
				<message>Entry MCID in MarkedContentReference is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24638"/>
			<description>Entry Pg with type Dictionary in MarkedContentReference shall be object PageObject</description>
			<test>PgHasTypeDictionary != true || Pg_size == 1</test>
			<error>
				<message>Entry Pg with type Dictionary in MarkedContentReference is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="10" testNumber="24639"/>
			<description>Entry Pg with type Dictionary in MarkedContentReference shall be indirect</description>
			<test>PgHasTypeDictionary != true || isPgIndirect == true</test>
			<error>
				<message>Entry Pg with type Dictionary in MarkedContentReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24640"/>
			<description>Entry Pg in MarkedContentReference shall have type Dictionary</description>
			<test>containsPg == false || PgHasTypeDictionary == true</test>
			<error>
				<message>Entry Pg in MarkedContentReference is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24641"/>
			<description>Entry Type in MarkedContentReference is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in MarkedContentReference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="6" testNumber="24642"/>
			<description>Entry Type with type Name in MarkedContentReference shall have value MCR</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MCR"</test>
			<error>
				<message>Entry Type with type Name in MarkedContentReference has incorrect value %2 instead of MCR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkedContentReference">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24643"/>
			<description>Entry Type in MarkedContentReference shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MarkedContentReference is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="1" testNumber="24663"/>
			<description>RichMediaContent shall not contain entries except Views, Configurations, Assets, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Views' &amp;&amp; elem != 'Configurations' &amp;&amp; elem != 'Assets' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>RichMediaContent contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Views' &amp;&amp; elem != 'Configurations' &amp;&amp; elem != 'Assets' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24664"/>
			<description>Entry Views with type Array in RichMediaContent shall be object ArrayOf3DView</description>
			<test>ViewsHasTypeArray != true || Views_size == 1</test>
			<error>
				<message>Entry Views with type Array in RichMediaContent is not object ArrayOf3DView</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24665"/>
			<description>Entry Views in RichMediaContent shall have type Array</description>
			<test>containsViews == false || ViewsHasTypeArray == true</test>
			<error>
				<message>Entry Views in RichMediaContent is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24666"/>
			<description>Entry Configurations with type Array in RichMediaContent shall be object ArrayOfRichMediaConfiguration</description>
			<test>ConfigurationsHasTypeArray != true || Configurations_size == 1</test>
			<error>
				<message>Entry Configurations with type Array in RichMediaContent is not object ArrayOfRichMediaConfiguration</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24667"/>
			<description>Entry Configurations in RichMediaContent is required</description>
			<test>containsConfigurations == true</test>
			<error>
				<message>Entry Configurations in RichMediaContent is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24668"/>
			<description>Entry Configurations in RichMediaContent shall have type Array</description>
			<test>containsConfigurations == false || ConfigurationsHasTypeArray == true</test>
			<error>
				<message>Entry Configurations in RichMediaContent is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="9" testNumber="24669"/>
			<description>Entry Configurations with type Array in RichMediaContent shall correspond special case: fn:Eval(fn:ArrayLength(Configurations) &gt; 0)</description>
			<test>ConfigurationsHasTypeArray != true || (ConfigurationsArraySize &gt; 0)</test>
			<error>
				<message>Entry Configurations with type Array in RichMediaContent doesn't correspond special case: fn:Eval(fn:ArrayLength(Configurations) &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24670"/>
			<description>Entry Assets with type NameTree in RichMediaContent shall be object RichMediaContentNameTreeAssets</description>
			<test>AssetsHasTypeNameTree != true || Assets_size == 1</test>
			<error>
				<message>Entry Assets with type NameTree in RichMediaContent is not object RichMediaContentNameTreeAssets</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24671"/>
			<description>Entry Assets in RichMediaContent shall have type NameTree</description>
			<test>containsAssets == false || AssetsHasTypeNameTree == true</test>
			<error>
				<message>Entry Assets in RichMediaContent is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="6" testNumber="24672"/>
			<description>Entry Type with type Name in RichMediaContent shall have value RichMediaContent</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaContent"</test>
			<error>
				<message>Entry Type with type Name in RichMediaContent has incorrect value %2 instead of RichMediaContent</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContent">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24673"/>
			<description>Entry Type in RichMediaContent shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaContent is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStringsTextEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24690"/>
			<description>Entry in ArrayOfStringsText shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %1 in ArrayOfStringsText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="1" testNumber="24890"/>
			<description>AnnotLink shall not contain entries except NM, Dest, P, StructParent, PA, M, OC, AS, H, Rect, QuadPoints, A, Border, C, Contents, AP, Subtype, BS, F, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'NM' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'P' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'M' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'A' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>AnnotLink contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'NM' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'P' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'PA' &amp;&amp; elem != 'M' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'A' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24891"/>
			<description>Entry NM in AnnotLink shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotLink is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24892"/>
			<description>Entry Dest with type Array in AnnotLink shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DestHasTypeArray != true || Dest_size == 1</test>
			<error>
				<message>Entry Dest with type Array in AnnotLink is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24893"/>
			<description>Entry Dest in AnnotLink shall have one of types: Name, Array, StringByte</description>
			<test>containsDest == false || DestHasTypeName == true || DestHasTypeArray == true || DestHasTypeStringByte == true</test>
			<error>
				<message>Entry Dest in AnnotLink is not one of types: Name, Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24894"/>
			<description>Entry P with type Dictionary in AnnotLink shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLink is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="10" testNumber="24895"/>
			<description>Entry P with type Dictionary in AnnotLink shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLink is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24896"/>
			<description>Entry P in AnnotLink shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24897"/>
			<description>Entry StructParent in AnnotLink shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotLink is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24898"/>
			<description>Entry PA with type Dictionary in AnnotLink shall be object ActionURI</description>
			<test>PAHasTypeDictionary != true || PA_size == 1</test>
			<error>
				<message>Entry PA with type Dictionary in AnnotLink is not object ActionURI</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24899"/>
			<description>Entry PA in AnnotLink shall have type Dictionary</description>
			<test>containsPA == false || PAHasTypeDictionary == true</test>
			<error>
				<message>Entry PA in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24900"/>
			<description>Entry M in AnnotLink shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotLink is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24901"/>
			<description>Entry OC with type Dictionary in AnnotLink shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotLink is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24902"/>
			<description>Entry OC in AnnotLink shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="11" testNumber="24903"/>
			<description>Entry AS in AnnotLink is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotLink is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24904"/>
			<description>Entry AS in AnnotLink shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="6" testNumber="24905"/>
			<description>Entry H with type Name in AnnotLink shall have one of values: P, I, N, O</description>
			<test>HHasTypeName != true || HNameValue == "N" || HNameValue == "I" || HNameValue == "O" || HNameValue == "P"</test>
			<error>
				<message>Entry H with type Name in AnnotLink has incorrect value %2 instead of P, I, N, O</message>
				<arguments>
					<argument>keyName</argument>
					<argument>HNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24906"/>
			<description>Entry H in AnnotLink shall have type Name</description>
			<test>containsH == false || HHasTypeName == true</test>
			<error>
				<message>Entry H in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24907"/>
			<description>Entry Rect in AnnotLink is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotLink is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24908"/>
			<description>Entry Rect in AnnotLink shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotLink is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24909"/>
			<description>Entry QuadPoints with type Array in AnnotLink shall be object ArrayOfQuadPoints</description>
			<test>QuadPointsHasTypeArray != true || QuadPoints_size == 1</test>
			<error>
				<message>Entry QuadPoints with type Array in AnnotLink is not object ArrayOfQuadPoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24910"/>
			<description>Entry QuadPoints in AnnotLink shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotLink is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24911"/>
			<description>Entry A with type Dictionary in AnnotLink shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotLink is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24912"/>
			<description>Entry A in AnnotLink shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24913"/>
			<description>Entry Border with type Array in AnnotLink shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotLink is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24914"/>
			<description>Entry Border in AnnotLink shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotLink is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24915"/>
			<description>Entry C with type Array in AnnotLink shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotLink is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24916"/>
			<description>Entry C in AnnotLink shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotLink is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24917"/>
			<description>Entry Contents in AnnotLink shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotLink is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24918"/>
			<description>Entry AP with type Dictionary in AnnotLink shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotLink is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24919"/>
			<description>Entry AP in AnnotLink shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="7" testNumber="24920"/>
			<description>Entry Subtype in AnnotLink is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotLink is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="6" testNumber="24921"/>
			<description>Entry Subtype with type Name in AnnotLink shall have value Link</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Link"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotLink has incorrect value %2 instead of Link</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24922"/>
			<description>Entry Subtype in AnnotLink shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="17" testNumber="24923"/>
			<description>Entry BS with type Dictionary in AnnotLink shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotLink is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24924"/>
			<description>Entry BS in AnnotLink shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24925"/>
			<description>Entry F in AnnotLink shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotLink is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="9" testNumber="24926"/>
			<description>Entry F with type Bitmask in AnnotLink shall correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(2.0 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; true &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotLink doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(2.0 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="6" testNumber="24927"/>
			<description>Entry Type with type Name in AnnotLink shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotLink has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_7" clause="8" testNumber="24928"/>
			<description>Entry Type in AnnotLink shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="4" testNumber="25009"/>
			<description>ArrayOfAttributeRevisionsSubArray shall contain at least 1 element</description>
			<test>size &gt;= 1</test>
			<error>
				<message>ArrayOfAttributeRevisionsSubArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="25010"/>
			<description>Entry 1 with type Integer in ArrayOfAttributeRevisionsSubArray shall correspond possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfAttributeRevisionsSubArray doesn't correspond possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25011"/>
			<description>Entry 1 in ArrayOfAttributeRevisionsSubArray shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfAttributeRevisionsSubArray is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25012"/>
			<description>Entry 0 with type Dictionary in ArrayOfAttributeRevisionsSubArray shall be object StructureAttributesDict</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfAttributeRevisionsSubArray is not object StructureAttributesDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25013"/>
			<description>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray shall be object Stream</description>
			<test>entry0HasTypeStream != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="10" testNumber="25014"/>
			<description>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray shall be indirect</description>
			<test>entry0HasTypeStream != true || isentry0Indirect == true</test>
			<error>
				<message>Entry 0 with type Stream in ArrayOfAttributeRevisionsSubArray is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAttributeRevisionsSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25015"/>
			<description>Entry 0 in ArrayOfAttributeRevisionsSubArray shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeStream == true</test>
			<error>
				<message>Entry 0 in ArrayOfAttributeRevisionsSubArray is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="1" testNumber="25209"/>
			<description>AnnotLine shall not contain entries except OC, Measure, P, Popup, BS, IT, AS, IC, F, LL, Type, Rect, NM, CA, L, AP, CO, Contents, StructParent, RT, Border, M, RC, LLE, LLO, T, CP, CreationDate, Subtype, Cap, IRT, C, ExData, LE, Subj</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'OC' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'F' &amp;&amp; elem != 'LL' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'L' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'M' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'LLE' &amp;&amp; elem != 'LLO' &amp;&amp; elem != 'T' &amp;&amp; elem != 'CP' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Cap' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'C' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'Subj').length == 0</test>
			<error>
				<message>AnnotLine contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'OC' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'F' &amp;&amp; elem != 'LL' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'L' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'CO' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'M' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'LLE' &amp;&amp; elem != 'LLO' &amp;&amp; elem != 'T' &amp;&amp; elem != 'CP' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Cap' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'C' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'Subj').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25210"/>
			<description>Entry OC with type Dictionary in AnnotLine shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotLine is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25211"/>
			<description>Entry OC in AnnotLine shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25212"/>
			<description>Entry Measure with type Dictionary in AnnotLine shall be object MeasureRL</description>
			<test>MeasureHasTypeDictionary != true || Measure_size == 1</test>
			<error>
				<message>Entry Measure with type Dictionary in AnnotLine is not object MeasureRL</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25213"/>
			<description>Entry Measure in AnnotLine shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25214"/>
			<description>Entry P with type Dictionary in AnnotLine shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLine is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="10" testNumber="25215"/>
			<description>Entry P with type Dictionary in AnnotLine shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25216"/>
			<description>Entry P in AnnotLine shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25217"/>
			<description>Entry Popup with type Dictionary in AnnotLine shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotLine is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="10" testNumber="25218"/>
			<description>Entry Popup with type Dictionary in AnnotLine shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25219"/>
			<description>Entry Popup in AnnotLine shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25220"/>
			<description>Entry BS with type Dictionary in AnnotLine shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotLine is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25221"/>
			<description>Entry BS in AnnotLine shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25222"/>
			<description>Entry IT with type Name in AnnotLine shall have one of values: LineArrow, LineDimension</description>
			<test>ITHasTypeName != true || ITNameValue == "LineArrow" || ITNameValue == "LineDimension"</test>
			<error>
				<message>Entry IT with type Name in AnnotLine has incorrect value %2 instead of LineArrow, LineDimension</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ITNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25223"/>
			<description>Entry IT in AnnotLine shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="11" testNumber="25224"/>
			<description>Entry AS in AnnotLine is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25225"/>
			<description>Entry AS in AnnotLine shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25226"/>
			<description>Entry IC with type Array in AnnotLine shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>ICHasTypeArray != true || IC_size == 1</test>
			<error>
				<message>Entry IC with type Array in AnnotLine is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25227"/>
			<description>Entry IC in AnnotLine shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25228"/>
			<description>Entry F in AnnotLine shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotLine is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="9" testNumber="25229"/>
			<description>Entry F with type Bitmask in AnnotLine shall correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotLine doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="11" testNumber="25230"/>
			<description>Entry LL in AnnotLine is required, when fn:IsRequired(fn:IsPresent(LLE))</description>
			<test>(containsLL == true || ((containsLLE == true)) == false)</test>
			<error>
				<message>Entry LL in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25231"/>
			<description>Entry LL in AnnotLine shall have type Number</description>
			<test>containsLL == false || LLHasTypeNumber == true</test>
			<error>
				<message>Entry LL in AnnotLine is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25232"/>
			<description>Entry Type with type Name in AnnotLine shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotLine has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25233"/>
			<description>Entry Type in AnnotLine shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="7" testNumber="25234"/>
			<description>Entry Rect in AnnotLine is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25235"/>
			<description>Entry Rect in AnnotLine shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotLine is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25236"/>
			<description>Entry NM in AnnotLine shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="14" testNumber="25237"/>
			<description>Entry CA with type Number in AnnotLine shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotLine doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25238"/>
			<description>Entry CA in AnnotLine shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotLine is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25239"/>
			<description>Entry L with type Array in AnnotLine shall be object ArrayOf_4Numbers</description>
			<test>LHasTypeArray != true || L_size == 1</test>
			<error>
				<message>Entry L with type Array in AnnotLine is not object ArrayOf_4Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="7" testNumber="25240"/>
			<description>Entry L in AnnotLine is required</description>
			<test>containsL == true</test>
			<error>
				<message>Entry L in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25241"/>
			<description>Entry L in AnnotLine shall have type Array</description>
			<test>containsL == false || LHasTypeArray == true</test>
			<error>
				<message>Entry L in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25242"/>
			<description>Entry AP with type Dictionary in AnnotLine shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotLine is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="11" testNumber="25243"/>
			<description>Entry AP in AnnotLine is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25244"/>
			<description>Entry AP in AnnotLine shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25245"/>
			<description>Entry CO with type Array in AnnotLine shall be object ArrayOf_2Numbers</description>
			<test>COHasTypeArray != true || CO_size == 1</test>
			<error>
				<message>Entry CO with type Array in AnnotLine is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25246"/>
			<description>Entry CO in AnnotLine shall have type Array</description>
			<test>containsCO == false || COHasTypeArray == true</test>
			<error>
				<message>Entry CO in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25247"/>
			<description>Entry Contents in AnnotLine shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25248"/>
			<description>Entry StructParent in AnnotLine shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotLine is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25249"/>
			<description>Entry RT with type Name in AnnotLine shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotLine has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25250"/>
			<description>Entry RT in AnnotLine shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25251"/>
			<description>Entry Border with type Array in AnnotLine shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotLine is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25252"/>
			<description>Entry Border in AnnotLine shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25253"/>
			<description>Entry M in AnnotLine shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotLine is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25254"/>
			<description>Entry RC with type Stream in AnnotLine shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotLine is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="10" testNumber="25255"/>
			<description>Entry RC with type Stream in AnnotLine shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25256"/>
			<description>Entry RC in AnnotLine shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotLine is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="14" testNumber="25257"/>
			<description>Entry LLE with type Number in AnnotLine shall correspond possible value predicate: fn:Eval(@LLE &gt;= 0)</description>
			<test>LLEHasTypeNumber != true || LLENumberValue &gt;= 0</test>
			<error>
				<message>Entry LLE with type Number in AnnotLine doesn't correspond possible value predicate: fn:Eval(@LLE &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25258"/>
			<description>Entry LLE in AnnotLine shall have type Number</description>
			<test>containsLLE == false || LLEHasTypeNumber == true</test>
			<error>
				<message>Entry LLE in AnnotLine is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="14" testNumber="25259"/>
			<description>Entry LLO with type Number in AnnotLine shall correspond possible value predicate: fn:Eval(@LLO &gt; 0)</description>
			<test>LLOHasTypeNumber != true || LLONumberValue &gt; 0</test>
			<error>
				<message>Entry LLO with type Number in AnnotLine doesn't correspond possible value predicate: fn:Eval(@LLO &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25260"/>
			<description>Entry LLO in AnnotLine shall have type Number</description>
			<test>containsLLO == false || LLOHasTypeNumber == true</test>
			<error>
				<message>Entry LLO in AnnotLine is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25261"/>
			<description>Entry T in AnnotLine shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25262"/>
			<description>Entry CP with type Name in AnnotLine shall have one of values: Top, Inline</description>
			<test>CPHasTypeName != true || CPNameValue == "Inline" || CPNameValue == "Top"</test>
			<error>
				<message>Entry CP with type Name in AnnotLine has incorrect value %2 instead of Top, Inline</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CPNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25263"/>
			<description>Entry CP in AnnotLine shall have type Name</description>
			<test>containsCP == false || CPHasTypeName == true</test>
			<error>
				<message>Entry CP in AnnotLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25264"/>
			<description>Entry CreationDate in AnnotLine shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotLine is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="7" testNumber="25265"/>
			<description>Entry Subtype in AnnotLine is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25266"/>
			<description>Entry Subtype with type Name in AnnotLine shall have value Line</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Line"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotLine has incorrect value %2 instead of Line</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25267"/>
			<description>Entry Subtype in AnnotLine shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25268"/>
			<description>Entry Cap in AnnotLine shall have type Boolean</description>
			<test>containsCap == false || CapHasTypeBoolean == true</test>
			<error>
				<message>Entry Cap in AnnotLine is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25269"/>
			<description>Entry IRT with type Dictionary in AnnotLine shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotLine is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="11" testNumber="25270"/>
			<description>Entry IRT in AnnotLine is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25271"/>
			<description>Entry IRT in AnnotLine shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25272"/>
			<description>Entry C with type Array in AnnotLine shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotLine is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25273"/>
			<description>Entry C in AnnotLine shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25274"/>
			<description>Entry ExData with type Dictionary in AnnotLine shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotLine is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25275"/>
			<description>Entry ExData in AnnotLine shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25276"/>
			<description>Entry LE with type Array in AnnotLine shall be object ArrayOf_2LineEndingsNames</description>
			<test>LEHasTypeArray != true || LE_size == 1</test>
			<error>
				<message>Entry LE with type Array in AnnotLine is not object ArrayOf_2LineEndingsNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25277"/>
			<description>Entry LE in AnnotLine shall have type Array</description>
			<test>containsLE == false || LEHasTypeArray == true</test>
			<error>
				<message>Entry LE in AnnotLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25278"/>
			<description>Entry Subj in AnnotLine shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DReference">
			<id specification="ISO_32000_1_7" clause="1" testNumber="25365"/>
			<description>3DReference shall not contain entries except 3DD, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != '3DD' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>3DReference contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != '3DD' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DReference">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25366"/>
			<description>Entry 3DD with type Stream in 3DReference shall be object Stream</description>
			<test>entry3DDHasTypeStream != true || entry3DD_size == 1</test>
			<error>
				<message>Entry 3DD with type Stream in 3DReference is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DReference">
			<id specification="ISO_32000_1_7" clause="7" testNumber="25367"/>
			<description>Entry 3DD in 3DReference is required</description>
			<test>contains3DD == true</test>
			<error>
				<message>Entry 3DD in 3DReference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DReference">
			<id specification="ISO_32000_1_7" clause="10" testNumber="25368"/>
			<description>Entry 3DD with type Stream in 3DReference shall be indirect</description>
			<test>entry3DDHasTypeStream != true || isentry3DDIndirect == true</test>
			<error>
				<message>Entry 3DD with type Stream in 3DReference is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DReference">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25369"/>
			<description>Entry 3DD in 3DReference shall have type Stream</description>
			<test>contains3DD == false || entry3DDHasTypeStream == true</test>
			<error>
				<message>Entry 3DD in 3DReference is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DReference">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25370"/>
			<description>Entry Type with type Name in 3DReference shall have value 3DRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DRef"</test>
			<error>
				<message>Entry Type with type Name in 3DReference has incorrect value %2 instead of 3DRef</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DReference">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25371"/>
			<description>Entry Type in 3DReference shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DReference is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXFA">
			<id specification="ISO_32000_1_7" clause="3" testNumber="25380"/>
			<description>ArrayOfXFA shall contain 2*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>ArrayOfXFA contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="1" testNumber="25414"/>
			<description>PageLabel shall not contain entries except S, Type, P, St</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'P' &amp;&amp; elem != 'St').length == 0</test>
			<error>
				<message>PageLabel contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'P' &amp;&amp; elem != 'St').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25415"/>
			<description>Entry S with type Name in PageLabel shall have one of values: A, a, R, r, D</description>
			<test>SHasTypeName != true || SNameValue == "D" || SNameValue == "R" || SNameValue == "r" || SNameValue == "A" || SNameValue == "a"</test>
			<error>
				<message>Entry S with type Name in PageLabel has incorrect value %2 instead of A, a, R, r, D</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25416"/>
			<description>Entry S in PageLabel shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in PageLabel is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25417"/>
			<description>Entry Type with type Name in PageLabel shall have value PageLabel</description>
			<test>TypeHasTypeName != true || TypeNameValue == "PageLabel"</test>
			<error>
				<message>Entry Type with type Name in PageLabel has incorrect value %2 instead of PageLabel</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25418"/>
			<description>Entry Type in PageLabel shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageLabel is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25419"/>
			<description>Entry P in PageLabel shall have type StringText</description>
			<test>containsP == false || PHasTypeStringText == true</test>
			<error>
				<message>Entry P in PageLabel is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="14" testNumber="25420"/>
			<description>Entry St with type Integer in PageLabel shall correspond possible value predicate: fn:Eval(@St &gt;= 1)</description>
			<test>StHasTypeInteger != true || StIntegerValue &gt;= 1</test>
			<error>
				<message>Entry St with type Integer in PageLabel doesn't correspond possible value predicate: fn:Eval(@St &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageLabel">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25421"/>
			<description>Entry St in PageLabel shall have type Integer</description>
			<test>containsSt == false || StHasTypeInteger == true</test>
			<error>
				<message>Entry St in PageLabel is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreePagesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25438"/>
			<description>Entry with type Dictionary in NameNameTreePages shall be object PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreePages is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreePagesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25439"/>
			<description>Entry in NameNameTreePages shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in NameNameTreePages is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXPTSValuesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25442"/>
			<description>Entry in ArrayOfXPTSValues shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in ArrayOfXPTSValues is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="1" testNumber="25566"/>
			<description>XRefStream shall not contain entries except Prev, F, ID, DL, DecodeParms, Index, Filter, Info, Size, Type, FFilter, W, Length, Root, FDecodeParms, Encrypt</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Prev' &amp;&amp; elem != 'F' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Index' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'W' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Encrypt').length == 0</test>
			<error>
				<message>XRefStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Prev' &amp;&amp; elem != 'F' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Index' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'W' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Encrypt').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="16" testNumber="25567"/>
			<description>If entry Prev with type Integer in XRefStream corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>PrevHasTypeInteger != true || (isPrevIndirect == false)</test>
			<error>
				<message>Entry Prev with type Integer in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="14" testNumber="25568"/>
			<description>Entry Prev with type Integer in XRefStream shall correspond possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</description>
			<test>PrevHasTypeInteger != true || (PrevIntegerValue &gt;= 0) &amp;&amp; (PrevIntegerValue &lt;= fileSize)</test>
			<error>
				<message>Entry Prev with type Integer in XRefStream doesn't correspond possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25569"/>
			<description>Entry Prev in XRefStream shall have type Integer</description>
			<test>containsPrev == false || PrevHasTypeInteger == true</test>
			<error>
				<message>Entry Prev in XRefStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25570"/>
			<description>Entry F with type Dictionary in XRefStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XRefStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25571"/>
			<description>Entry F in XRefStream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XRefStream is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25572"/>
			<description>Entry ID with type Array in XRefStream shall be object ArrayOf_2StringsByte</description>
			<test>entryIDHasTypeArray != true || entryID_size == 1</test>
			<error>
				<message>Entry ID with type Array in XRefStream is not object ArrayOf_2StringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="11" testNumber="25573"/>
			<description>Entry ID in XRefStream is required, when fn:IsRequired(fn:IsPresent(Encrypt))</description>
			<test>(containsID == true || ((containsEncrypt == true)) == false)</test>
			<error>
				<message>Entry ID in XRefStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="16" testNumber="25574"/>
			<description>If entry ID with type Array in XRefStream corresponds to condition fn:MustBeDirect(fn:IsPresent(Encrypt)), it shall be direct</description>
			<test>entryIDHasTypeArray != true || (isentryIDIndirect == false || ((containsEncrypt == true)) == false)</test>
			<error>
				<message>Entry ID with type Array in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25575"/>
			<description>Entry ID in XRefStream shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in XRefStream is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="14" testNumber="25576"/>
			<description>Entry DL with type Integer in XRefStream shall correspond possible value predicate: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || DLIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DL with type Integer in XRefStream doesn't correspond possible value predicate: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25577"/>
			<description>Entry DL in XRefStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XRefStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="25578"/>
			<description>Entry DL with type Integer in XRefStream shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XRefStream doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25579"/>
			<description>Entry DecodeParms with type Array in XRefStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XRefStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25580"/>
			<description>Entry DecodeParms with type Dictionary in XRefStream shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XRefStream is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="16" testNumber="25581"/>
			<description>If entry DecodeParms with type Array in XRefStream corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>DecodeParmsHasTypeArray != true || (isDecodeParmsIndirect == false)</test>
			<error>
				<message>Entry DecodeParms with type Array in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="16" testNumber="25582"/>
			<description>If entry DecodeParms with type Dictionary in XRefStream corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>DecodeParmsHasTypeDictionary != true || (isDecodeParmsIndirect == false)</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25583"/>
			<description>Entry DecodeParms in XRefStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XRefStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="25584"/>
			<description>Entry DecodeParms with type Array in XRefStream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XRefStream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25585"/>
			<description>Entry Index with type Array in XRefStream shall be object ArrayOfXRefIndexIntegers</description>
			<test>IndexHasTypeArray != true || Index_size == 1</test>
			<error>
				<message>Entry Index with type Array in XRefStream is not object ArrayOfXRefIndexIntegers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="16" testNumber="25586"/>
			<description>If entry Index with type Array in XRefStream corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>IndexHasTypeArray != true || (isIndexIndirect == false)</test>
			<error>
				<message>Entry Index with type Array in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25587"/>
			<description>Entry Index in XRefStream shall have type Array</description>
			<test>containsIndex == false || IndexHasTypeArray == true</test>
			<error>
				<message>Entry Index in XRefStream is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="25588"/>
			<description>Entry Index with type Array in XRefStream shall correspond special case: fn:Eval(((fn:ArrayLength(Index) mod 2) == 0) &amp;&amp; fn:ArraySortAscending(Index , 2))</description>
			<test>IndexHasTypeArray != true || (((IndexArraySize % 2) == 0) &amp;&amp; isIndexArraySortAscending2 == true)</test>
			<error>
				<message>Entry Index with type Array in XRefStream doesn't correspond special case: fn:Eval(((fn:ArrayLength(Index) mod 2) == 0) &amp;&amp; fn:ArraySortAscending(Index , 2))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25589"/>
			<description>Entry Filter with type Array in XRefStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XRefStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="16" testNumber="25590"/>
			<description>If entry Filter with type Name in XRefStream corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>FilterHasTypeName != true || (isFilterIndirect == false)</test>
			<error>
				<message>Entry Filter with type Name in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="16" testNumber="25591"/>
			<description>If entry Filter with type Array in XRefStream corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>FilterHasTypeArray != true || (isFilterIndirect == false)</test>
			<error>
				<message>Entry Filter with type Array in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25592"/>
			<description>Entry Filter with type Name in XRefStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XRefStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25593"/>
			<description>Entry Filter in XRefStream shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in XRefStream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="25594"/>
			<description>Entry Filter with type Array in XRefStream shall correspond special case: fn:Eval((fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter)) &amp;&amp; fn:Not(fn:Contains(@Filter , Crypt)))</description>
			<test>FilterHasTypeArray != true || ((DecodeParmsArraySize == FilterArraySize) &amp;&amp; ((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "Crypt").length &gt; 0)) != true)</test>
			<error>
				<message>Entry Filter with type Array in XRefStream doesn't correspond special case: fn:Eval((fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter)) &amp;&amp; fn:Not(fn:Contains(@Filter , Crypt)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25595"/>
			<description>Entry Info with type Dictionary in XRefStream shall be object DocInfo</description>
			<test>InfoHasTypeDictionary != true || Info_size == 1</test>
			<error>
				<message>Entry Info with type Dictionary in XRefStream is not object DocInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="12" testNumber="25596"/>
			<description>If entry Info with type Dictionary in XRefStream corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>InfoHasTypeDictionary != true || (isInfoIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Info with type Dictionary in XRefStream is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25597"/>
			<description>Entry Info in XRefStream shall have type Dictionary</description>
			<test>containsInfo == false || InfoHasTypeDictionary == true</test>
			<error>
				<message>Entry Info in XRefStream is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="25598"/>
			<description>Entry Size in XRefStream is required</description>
			<test>containsSize == true</test>
			<error>
				<message>Entry Size in XRefStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="16" testNumber="25599"/>
			<description>If entry Size with type Integer in XRefStream corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>SizeHasTypeInteger != true || (isSizeIndirect == false)</test>
			<error>
				<message>Entry Size with type Integer in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="14" testNumber="25600"/>
			<description>Entry Size with type Integer in XRefStream shall correspond possible value predicate: fn:Eval(@Size &gt; 1)</description>
			<test>SizeHasTypeInteger != true || SizeIntegerValue &gt; 1</test>
			<error>
				<message>Entry Size with type Integer in XRefStream doesn't correspond possible value predicate: fn:Eval(@Size &gt; 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25601"/>
			<description>Entry Size in XRefStream shall have type Integer</description>
			<test>containsSize == false || SizeHasTypeInteger == true</test>
			<error>
				<message>Entry Size in XRefStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="25602"/>
			<description>Entry Type in XRefStream is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in XRefStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="16" testNumber="25603"/>
			<description>If entry Type with type Name in XRefStream corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>TypeHasTypeName != true || (isTypeIndirect == false)</test>
			<error>
				<message>Entry Type with type Name in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25604"/>
			<description>Entry Type with type Name in XRefStream shall have value XRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XRef"</test>
			<error>
				<message>Entry Type with type Name in XRefStream has incorrect value %2 instead of XRef</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25605"/>
			<description>Entry Type in XRefStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XRefStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25606"/>
			<description>Entry FFilter with type Array in XRefStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XRefStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25607"/>
			<description>Entry FFilter with type Name in XRefStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry FFilter with type Name in XRefStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25608"/>
			<description>Entry FFilter in XRefStream shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in XRefStream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="25609"/>
			<description>Entry FFilter with type Array in XRefStream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XRefStream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25610"/>
			<description>Entry W with type Array in XRefStream shall be object ArrayOfXRefWIntegers</description>
			<test>WHasTypeArray != true || W_size == 1</test>
			<error>
				<message>Entry W with type Array in XRefStream is not object ArrayOfXRefWIntegers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="25611"/>
			<description>Entry W in XRefStream is required</description>
			<test>containsW == true</test>
			<error>
				<message>Entry W in XRefStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="16" testNumber="25612"/>
			<description>If entry W with type Array in XRefStream corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>WHasTypeArray != true || (isWIndirect == false)</test>
			<error>
				<message>Entry W with type Array in XRefStream is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25613"/>
			<description>Entry W in XRefStream shall have type Array</description>
			<test>containsW == false || WHasTypeArray == true</test>
			<error>
				<message>Entry W in XRefStream is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="25614"/>
			<description>Entry Length in XRefStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XRefStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="14" testNumber="25615"/>
			<description>Entry Length with type Integer in XRefStream shall correspond possible value predicate: fn:Eval(@Length &gt;= 0)</description>
			<test>LengthHasTypeInteger != true || LengthIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Length with type Integer in XRefStream doesn't correspond possible value predicate: fn:Eval(@Length &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25616"/>
			<description>Entry Length in XRefStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XRefStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25617"/>
			<description>Entry Root with type Dictionary in XRefStream shall be object Catalog</description>
			<test>RootHasTypeDictionary != true || Root_size == 1</test>
			<error>
				<message>Entry Root with type Dictionary in XRefStream is not object Catalog</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="25618"/>
			<description>Entry Root in XRefStream is required</description>
			<test>containsRoot == true</test>
			<error>
				<message>Entry Root in XRefStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="10" testNumber="25619"/>
			<description>Entry Root with type Dictionary in XRefStream shall be indirect</description>
			<test>RootHasTypeDictionary != true || isRootIndirect == true</test>
			<error>
				<message>Entry Root with type Dictionary in XRefStream is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25620"/>
			<description>Entry Root in XRefStream shall have type Dictionary</description>
			<test>containsRoot == false || RootHasTypeDictionary == true</test>
			<error>
				<message>Entry Root in XRefStream is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25621"/>
			<description>Entry FDecodeParms with type Array in XRefStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XRefStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25622"/>
			<description>Entry FDecodeParms with type Dictionary in XRefStream shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XRefStream is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25623"/>
			<description>Entry FDecodeParms in XRefStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XRefStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="25624"/>
			<description>Entry FDecodeParms with type Array in XRefStream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XRefStream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25625"/>
			<description>Entry Encrypt with type Dictionary in XRefStream shall be one of objects EncryptionStandard, EncryptionPublicKey</description>
			<test>EncryptHasTypeDictionary != true || Encrypt_size == 1</test>
			<error>
				<message>Entry Encrypt with type Dictionary in XRefStream is not one of objects EncryptionStandard, EncryptionPublicKey</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXRefStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25626"/>
			<description>Entry Encrypt in XRefStream shall have type Dictionary</description>
			<test>containsEncrypt == false || EncryptHasTypeDictionary == true</test>
			<error>
				<message>Entry Encrypt in XRefStream is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorantsDictEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25700"/>
			<description>Entry with type Array in ColorantsDict shall be object SeparationColorSpace</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ColorantsDict is not object SeparationColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorantsDictEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25701"/>
			<description>Entry in ColorantsDict shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ColorantsDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="1" testNumber="25774"/>
			<description>AAPL_ST shall not contain entries except Radius, ColorSpace, Offset, Subtype, Type, Color</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Radius' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Offset' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Color').length == 0</test>
			<error>
				<message>AAPL_ST contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Radius' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Offset' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Color').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25775"/>
			<description>Entry Radius in AAPL_ST shall have type Number</description>
			<test>containsRadius == false || RadiusHasTypeNumber == true</test>
			<error>
				<message>Entry Radius in AAPL_ST is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="9" testNumber="25776"/>
			<description>Entry Radius with type Number in AAPL_ST shall correspond special case: fn:Eval(@Radius &gt; 0)</description>
			<test>RadiusHasTypeNumber != true || (RadiusNumberValue &gt; 0)</test>
			<error>
				<message>Entry Radius with type Number in AAPL_ST doesn't correspond special case: fn:Eval(@Radius &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25777"/>
			<description>Entry ColorSpace with type Array in AAPL_ST shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in AAPL_ST is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25778"/>
			<description>Entry ColorSpace with type Name in AAPL_ST shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in AAPL_ST has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25779"/>
			<description>Entry ColorSpace in AAPL_ST shall have one of types: Name, Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in AAPL_ST is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25780"/>
			<description>Entry Offset with type Array in AAPL_ST shall be object ArrayOf_2Numbers</description>
			<test>OffsetHasTypeArray != true || Offset_size == 1</test>
			<error>
				<message>Entry Offset with type Array in AAPL_ST is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25781"/>
			<description>Entry Offset in AAPL_ST shall have type Array</description>
			<test>containsOffset == false || OffsetHasTypeArray == true</test>
			<error>
				<message>Entry Offset in AAPL_ST is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25782"/>
			<description>Entry Subtype with type Name in AAPL_ST shall have value Shadow</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Shadow"</test>
			<error>
				<message>Entry Subtype with type Name in AAPL_ST has incorrect value %2 instead of Shadow</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25783"/>
			<description>Entry Subtype in AAPL_ST shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AAPL_ST is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25784"/>
			<description>Entry Type with type Name in AAPL_ST shall have value Style</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Style"</test>
			<error>
				<message>Entry Type with type Name in AAPL_ST has incorrect value %2 instead of Style</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25785"/>
			<description>Entry Type in AAPL_ST shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AAPL_ST is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25786"/>
			<description>Entry Color with type Array in AAPL_ST shall be object ArrayOfNumbersGeneral</description>
			<test>ColorHasTypeArray != true || Color_size == 1</test>
			<error>
				<message>Entry Color with type Array in AAPL_ST is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAAPL_ST">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25787"/>
			<description>Entry Color in AAPL_ST shall have type Array</description>
			<test>containsColor == false || ColorHasTypeArray == true</test>
			<error>
				<message>Entry Color in AAPL_ST is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="1" testNumber="25881"/>
			<description>Name shall not contain entries except Pages, XFAResources, IDS, AlternatePresentations, Dests, AP, URLS, EmbeddedFiles, JavaScript, Renditions, Templates</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Pages' &amp;&amp; elem != 'XFAResources' &amp;&amp; elem != 'IDS' &amp;&amp; elem != 'AlternatePresentations' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'URLS' &amp;&amp; elem != 'EmbeddedFiles' &amp;&amp; elem != 'JavaScript' &amp;&amp; elem != 'Renditions' &amp;&amp; elem != 'Templates').length == 0</test>
			<error>
				<message>Name contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Pages' &amp;&amp; elem != 'XFAResources' &amp;&amp; elem != 'IDS' &amp;&amp; elem != 'AlternatePresentations' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'URLS' &amp;&amp; elem != 'EmbeddedFiles' &amp;&amp; elem != 'JavaScript' &amp;&amp; elem != 'Renditions' &amp;&amp; elem != 'Templates').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25882"/>
			<description>Entry Pages with type NameTree in Name shall be object NameNameTreePages</description>
			<test>PagesHasTypeNameTree != true || Pages_size == 1</test>
			<error>
				<message>Entry Pages with type NameTree in Name is not object NameNameTreePages</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25883"/>
			<description>Entry Pages in Name shall have type NameTree</description>
			<test>containsPages == false || PagesHasTypeNameTree == true</test>
			<error>
				<message>Entry Pages in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25884"/>
			<description>Entry XFAResources with type NameTree in Name shall be object NameNameTreeXFAResources</description>
			<test>XFAResourcesHasTypeNameTree != true || XFAResources_size == 1</test>
			<error>
				<message>Entry XFAResources with type NameTree in Name is not object NameNameTreeXFAResources</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25885"/>
			<description>Entry XFAResources in Name shall have type NameTree</description>
			<test>containsXFAResources == false || XFAResourcesHasTypeNameTree == true</test>
			<error>
				<message>Entry XFAResources in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25886"/>
			<description>Entry IDS with type NameTree in Name shall be object NameNameTreeIDS</description>
			<test>IDSHasTypeNameTree != true || IDS_size == 1</test>
			<error>
				<message>Entry IDS with type NameTree in Name is not object NameNameTreeIDS</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25887"/>
			<description>Entry IDS in Name shall have type NameTree</description>
			<test>containsIDS == false || IDSHasTypeNameTree == true</test>
			<error>
				<message>Entry IDS in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25888"/>
			<description>Entry AlternatePresentations with type NameTree in Name shall be object NameNameTreeAlternatePresentations</description>
			<test>AlternatePresentationsHasTypeNameTree != true || AlternatePresentations_size == 1</test>
			<error>
				<message>Entry AlternatePresentations with type NameTree in Name is not object NameNameTreeAlternatePresentations</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25889"/>
			<description>Entry AlternatePresentations in Name shall have type NameTree</description>
			<test>containsAlternatePresentations == false || AlternatePresentationsHasTypeNameTree == true</test>
			<error>
				<message>Entry AlternatePresentations in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25890"/>
			<description>Entry Dests with type NameTree in Name shall be object NameNameTreeDests</description>
			<test>DestsHasTypeNameTree != true || Dests_size == 1</test>
			<error>
				<message>Entry Dests with type NameTree in Name is not object NameNameTreeDests</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25891"/>
			<description>Entry Dests in Name shall have type NameTree</description>
			<test>containsDests == false || DestsHasTypeNameTree == true</test>
			<error>
				<message>Entry Dests in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25892"/>
			<description>Entry AP with type NameTree in Name shall be object NameNameTreeAP</description>
			<test>APHasTypeNameTree != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type NameTree in Name is not object NameNameTreeAP</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25893"/>
			<description>Entry AP in Name shall have type NameTree</description>
			<test>containsAP == false || APHasTypeNameTree == true</test>
			<error>
				<message>Entry AP in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25894"/>
			<description>Entry URLS with type NameTree in Name shall be object NameNameTreeURLS</description>
			<test>URLSHasTypeNameTree != true || URLS_size == 1</test>
			<error>
				<message>Entry URLS with type NameTree in Name is not object NameNameTreeURLS</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25895"/>
			<description>Entry URLS in Name shall have type NameTree</description>
			<test>containsURLS == false || URLSHasTypeNameTree == true</test>
			<error>
				<message>Entry URLS in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25896"/>
			<description>Entry EmbeddedFiles with type NameTree in Name shall be object NameNameTreeEmbeddedFiles</description>
			<test>EmbeddedFilesHasTypeNameTree != true || EmbeddedFiles_size == 1</test>
			<error>
				<message>Entry EmbeddedFiles with type NameTree in Name is not object NameNameTreeEmbeddedFiles</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25897"/>
			<description>Entry EmbeddedFiles in Name shall have type NameTree</description>
			<test>containsEmbeddedFiles == false || EmbeddedFilesHasTypeNameTree == true</test>
			<error>
				<message>Entry EmbeddedFiles in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25898"/>
			<description>Entry JavaScript with type NameTree in Name shall be object NameNameTreeJavaScript</description>
			<test>JavaScriptHasTypeNameTree != true || JavaScript_size == 1</test>
			<error>
				<message>Entry JavaScript with type NameTree in Name is not object NameNameTreeJavaScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25899"/>
			<description>Entry JavaScript in Name shall have type NameTree</description>
			<test>containsJavaScript == false || JavaScriptHasTypeNameTree == true</test>
			<error>
				<message>Entry JavaScript in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25900"/>
			<description>Entry Renditions with type NameTree in Name shall be object NameNameTreeRenditions</description>
			<test>RenditionsHasTypeNameTree != true || Renditions_size == 1</test>
			<error>
				<message>Entry Renditions with type NameTree in Name is not object NameNameTreeRenditions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25901"/>
			<description>Entry Renditions in Name shall have type NameTree</description>
			<test>containsRenditions == false || RenditionsHasTypeNameTree == true</test>
			<error>
				<message>Entry Renditions in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25902"/>
			<description>Entry Templates with type NameTree in Name shall be object NameNameTreeTemplates</description>
			<test>TemplatesHasTypeNameTree != true || Templates_size == 1</test>
			<error>
				<message>Entry Templates with type NameTree in Name is not object NameNameTreeTemplates</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AName">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25903"/>
			<description>Entry Templates in Name shall have type NameTree</description>
			<test>containsTemplates == false || TemplatesHasTypeNameTree == true</test>
			<error>
				<message>Entry Templates in Name is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_7" clause="1" testNumber="25947"/>
			<description>WebCaptureCommandSettings shall not contain entries except C, G</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'G').length == 0</test>
			<error>
				<message>WebCaptureCommandSettings contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'G').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25948"/>
			<description>Entry C with type Dictionary in WebCaptureCommandSettings shall be object _UniversalDictionary</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in WebCaptureCommandSettings is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25949"/>
			<description>Entry C in WebCaptureCommandSettings shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in WebCaptureCommandSettings is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25950"/>
			<description>Entry G with type Dictionary in WebCaptureCommandSettings shall be object _UniversalDictionary</description>
			<test>GHasTypeDictionary != true || G_size == 1</test>
			<error>
				<message>Entry G with type Dictionary in WebCaptureCommandSettings is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWebCaptureCommandSettings">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25951"/>
			<description>Entry G in WebCaptureCommandSettings shall have type Dictionary</description>
			<test>containsG == false || GHasTypeDictionary == true</test>
			<error>
				<message>Entry G in WebCaptureCommandSettings is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="1" testNumber="25977"/>
			<description>OptContentGroup shall not contain entries except Name, Intent, Usage, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Usage' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>OptContentGroup contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Usage' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="7" testNumber="25978"/>
			<description>Entry Name in OptContentGroup is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in OptContentGroup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25979"/>
			<description>Entry Name in OptContentGroup shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in OptContentGroup is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25980"/>
			<description>Entry Intent with type Array in OptContentGroup shall be object ArrayOfNamesGeneral</description>
			<test>IntentHasTypeArray != true || Intent_size == 1</test>
			<error>
				<message>Entry Intent with type Array in OptContentGroup is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25981"/>
			<description>Entry Intent in OptContentGroup shall have one of types: Name, Array</description>
			<test>containsIntent == false || IntentHasTypeName == true || IntentHasTypeArray == true</test>
			<error>
				<message>Entry Intent in OptContentGroup is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="17" testNumber="25982"/>
			<description>Entry Usage with type Dictionary in OptContentGroup shall be object OptContentUsage</description>
			<test>UsageHasTypeDictionary != true || Usage_size == 1</test>
			<error>
				<message>Entry Usage with type Dictionary in OptContentGroup is not object OptContentUsage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25983"/>
			<description>Entry Usage in OptContentGroup shall have type Dictionary</description>
			<test>containsUsage == false || UsageHasTypeDictionary == true</test>
			<error>
				<message>Entry Usage in OptContentGroup is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="7" testNumber="25984"/>
			<description>Entry Type in OptContentGroup is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in OptContentGroup is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="6" testNumber="25985"/>
			<description>Entry Type with type Name in OptContentGroup shall have value OCG</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OCG"</test>
			<error>
				<message>Entry Type with type Name in OptContentGroup has incorrect value %2 instead of OCG</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentGroup">
			<id specification="ISO_32000_1_7" clause="8" testNumber="25986"/>
			<description>Entry Type in OptContentGroup shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OptContentGroup is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26017"/>
			<description>Entry with type Array in Data shall be object _UniversalArray</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in Data is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26018"/>
			<description>Entry with type Dictionary in Data shall be object _UniversalDictionary</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in Data is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26019"/>
			<description>Entry with type Stream in Data shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in Data is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="26020"/>
			<description>Entry with type Stream in Data shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in Data is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADataEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26021"/>
			<description>Entry in Data shall have one of types: Name, Array, Boolean, Integer, Dictionary, Number, Stream, String</description>
			<test>HasTypeName == true || HasTypeArray == true || HasTypeBoolean == true || HasTypeInteger == true || HasTypeDictionary == true || HasTypeNumber == true || HasTypeStream == true || HasTypeString == true</test>
			<error>
				<message>Entry %1 in Data is not one of types: Name, Array, Boolean, Integer, Dictionary, Number, Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="1" testNumber="26027"/>
			<description>CollectionFolder shall not contain entries except CI, Desc, Free, Next, ModDate, ID, Parent, CreationDate, Name, Thumb, Type, Child</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CI' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'Free' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Child').length == 0</test>
			<error>
				<message>CollectionFolder contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CI' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'Free' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Child').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26028"/>
			<description>Entry CI with type Dictionary in CollectionFolder shall be object CollectionItem</description>
			<test>CIHasTypeDictionary != true || CI_size == 1</test>
			<error>
				<message>Entry CI with type Dictionary in CollectionFolder is not object CollectionItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26029"/>
			<description>Entry CI in CollectionFolder shall have type Dictionary</description>
			<test>containsCI == false || CIHasTypeDictionary == true</test>
			<error>
				<message>Entry CI in CollectionFolder is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26030"/>
			<description>Entry Desc in CollectionFolder shall have type StringText</description>
			<test>containsDesc == false || DescHasTypeStringText == true</test>
			<error>
				<message>Entry Desc in CollectionFolder is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26031"/>
			<description>Entry Free with type Array in CollectionFolder shall be object ArrayOfNumbersGeneral</description>
			<test>FreeHasTypeArray != true || Free_size == 1</test>
			<error>
				<message>Entry Free with type Array in CollectionFolder is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26032"/>
			<description>Entry Free in CollectionFolder shall have type Array</description>
			<test>containsFree == false || FreeHasTypeArray == true</test>
			<error>
				<message>Entry Free in CollectionFolder is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26033"/>
			<description>Entry Next with type Dictionary in CollectionFolder shall be object CollectionFolder</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in CollectionFolder is not object CollectionFolder</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="10" testNumber="26034"/>
			<description>Entry Next with type Dictionary in CollectionFolder shall be indirect</description>
			<test>NextHasTypeDictionary != true || isNextIndirect == true</test>
			<error>
				<message>Entry Next with type Dictionary in CollectionFolder is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26035"/>
			<description>Entry Next in CollectionFolder shall have type Dictionary</description>
			<test>containsNext == false || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in CollectionFolder is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26036"/>
			<description>Entry ModDate in CollectionFolder shall have type Date</description>
			<test>containsModDate == false || ModDateHasTypeDate == true</test>
			<error>
				<message>Entry ModDate in CollectionFolder is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="7" testNumber="26037"/>
			<description>Entry ID in CollectionFolder is required</description>
			<test>containsID == true</test>
			<error>
				<message>Entry ID in CollectionFolder is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26038"/>
			<description>Entry ID in CollectionFolder shall have type Integer</description>
			<test>containsID == false || entryIDHasTypeInteger == true</test>
			<error>
				<message>Entry ID in CollectionFolder is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26039"/>
			<description>Entry Parent with type Dictionary in CollectionFolder shall be object CollectionFolder</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in CollectionFolder is not object CollectionFolder</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="10" testNumber="26040"/>
			<description>Entry Parent with type Dictionary in CollectionFolder shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in CollectionFolder is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26041"/>
			<description>Entry Parent in CollectionFolder shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in CollectionFolder is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26042"/>
			<description>Entry CreationDate in CollectionFolder shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in CollectionFolder is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="7" testNumber="26043"/>
			<description>Entry Name in CollectionFolder is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in CollectionFolder is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26044"/>
			<description>Entry Name in CollectionFolder shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in CollectionFolder is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26045"/>
			<description>Entry Thumb with type Stream in CollectionFolder shall be object Thumbnail</description>
			<test>ThumbHasTypeStream != true || Thumb_size == 1</test>
			<error>
				<message>Entry Thumb with type Stream in CollectionFolder is not object Thumbnail</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="10" testNumber="26046"/>
			<description>Entry Thumb with type Stream in CollectionFolder shall be indirect</description>
			<test>ThumbHasTypeStream != true || isThumbIndirect == true</test>
			<error>
				<message>Entry Thumb with type Stream in CollectionFolder is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26047"/>
			<description>Entry Thumb in CollectionFolder shall have type Stream</description>
			<test>containsThumb == false || ThumbHasTypeStream == true</test>
			<error>
				<message>Entry Thumb in CollectionFolder is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="6" testNumber="26048"/>
			<description>Entry Type with type Name in CollectionFolder shall have value Folder</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Folder"</test>
			<error>
				<message>Entry Type with type Name in CollectionFolder has incorrect value %2 instead of Folder</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26049"/>
			<description>Entry Type in CollectionFolder shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CollectionFolder is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26050"/>
			<description>Entry Child with type Dictionary in CollectionFolder shall be object CollectionFolder</description>
			<test>ChildHasTypeDictionary != true || Child_size == 1</test>
			<error>
				<message>Entry Child with type Dictionary in CollectionFolder is not object CollectionFolder</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="10" testNumber="26051"/>
			<description>Entry Child with type Dictionary in CollectionFolder shall be indirect</description>
			<test>ChildHasTypeDictionary != true || isChildIndirect == true</test>
			<error>
				<message>Entry Child with type Dictionary in CollectionFolder is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionFolder">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26052"/>
			<description>Entry Child in CollectionFolder shall have type Dictionary</description>
			<test>containsChild == false || ChildHasTypeDictionary == true</test>
			<error>
				<message>Entry Child in CollectionFolder is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeIDS">
			<id specification="ISO_32000_1_7" clause="18" testNumber="26096"/>
			<description>Entry * in NameNameTreeIDS shall be object NameNameTreeIDSEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeIDS is not object NameNameTreeIDSEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_7" clause="1" testNumber="26112"/>
			<description>Permissions shall not contain entries except UR3, DocMDP</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'UR3' &amp;&amp; elem != 'DocMDP').length == 0</test>
			<error>
				<message>Permissions contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'UR3' &amp;&amp; elem != 'DocMDP').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26113"/>
			<description>Entry UR3 with type Dictionary in Permissions shall be object Signature</description>
			<test>UR3HasTypeDictionary != true || UR3_size == 1</test>
			<error>
				<message>Entry UR3 with type Dictionary in Permissions is not object Signature</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26114"/>
			<description>Entry UR3 in Permissions shall have type Dictionary</description>
			<test>containsUR3 == false || UR3HasTypeDictionary == true</test>
			<error>
				<message>Entry UR3 in Permissions is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26115"/>
			<description>Entry DocMDP with type Dictionary in Permissions shall be object Signature</description>
			<test>DocMDPHasTypeDictionary != true || DocMDP_size == 1</test>
			<error>
				<message>Entry DocMDP with type Dictionary in Permissions is not object Signature</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_7" clause="10" testNumber="26116"/>
			<description>Entry DocMDP with type Dictionary in Permissions shall be indirect</description>
			<test>DocMDPHasTypeDictionary != true || isDocMDPIndirect == true</test>
			<error>
				<message>Entry DocMDP with type Dictionary in Permissions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26117"/>
			<description>Entry DocMDP in Permissions shall have type Dictionary</description>
			<test>containsDocMDP == false || DocMDPHasTypeDictionary == true</test>
			<error>
				<message>Entry DocMDP in Permissions is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APermissions">
			<id specification="ISO_32000_1_7" clause="9" testNumber="26118"/>
			<description>Entry DocMDP with type Dictionary in Permissions shall correspond special case: fn:Eval(fn:ArrayLength(DocMDP::Reference) &gt;= 1)</description>
			<test>DocMDPHasTypeDictionary != true || (DocMDPReferenceArraySize &gt;= 1)</test>
			<error>
				<message>Entry DocMDP with type Dictionary in Permissions doesn't correspond special case: fn:Eval(fn:ArrayLength(DocMDP::Reference) &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaInstancesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26126"/>
			<description>Entry with type Dictionary in ArrayOfRichMediaInstances shall be object RichMediaInstance</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfRichMediaInstances is not object RichMediaInstance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaInstancesEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="26127"/>
			<description>Entry with type Dictionary in ArrayOfRichMediaInstances shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfRichMediaInstances is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRichMediaInstancesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26128"/>
			<description>Entry in ArrayOfRichMediaInstances shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfRichMediaInstances is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="1" testNumber="26244"/>
			<description>PageTreeNodeRoot shall not contain entries except Count, MediaBox, Kids, CropBox, Rotate, Resources, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PageTreeNodeRoot contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Count' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="7" testNumber="26245"/>
			<description>Entry Count in PageTreeNodeRoot is required</description>
			<test>containsCount == true</test>
			<error>
				<message>Entry Count in PageTreeNodeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="14" testNumber="26246"/>
			<description>Entry Count with type Integer in PageTreeNodeRoot shall correspond possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in PageTreeNodeRoot doesn't correspond possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26247"/>
			<description>Entry Count in PageTreeNodeRoot shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in PageTreeNodeRoot is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26248"/>
			<description>Entry MediaBox in PageTreeNodeRoot shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageTreeNodeRoot is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26249"/>
			<description>Entry Kids with type Array in PageTreeNodeRoot shall be object ArrayOfPageTreeNodeKids</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in PageTreeNodeRoot is not object ArrayOfPageTreeNodeKids</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="7" testNumber="26250"/>
			<description>Entry Kids in PageTreeNodeRoot is required</description>
			<test>containsKids == true</test>
			<error>
				<message>Entry Kids in PageTreeNodeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26251"/>
			<description>Entry Kids in PageTreeNodeRoot shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in PageTreeNodeRoot is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26252"/>
			<description>Entry CropBox in PageTreeNodeRoot shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageTreeNodeRoot is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="14" testNumber="26253"/>
			<description>Entry Rotate with type Integer in PageTreeNodeRoot shall correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageTreeNodeRoot doesn't correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26254"/>
			<description>Entry Rotate in PageTreeNodeRoot shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageTreeNodeRoot is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26255"/>
			<description>Entry Resources with type Dictionary in PageTreeNodeRoot shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PageTreeNodeRoot is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26256"/>
			<description>Entry Resources in PageTreeNodeRoot shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageTreeNodeRoot is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="7" testNumber="26257"/>
			<description>Entry Type in PageTreeNodeRoot is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageTreeNodeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="6" testNumber="26258"/>
			<description>Entry Type with type Name in PageTreeNodeRoot shall have value Pages</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pages"</test>
			<error>
				<message>Entry Type with type Name in PageTreeNodeRoot has incorrect value %2 instead of Pages</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26259"/>
			<description>Entry Type in PageTreeNodeRoot shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageTreeNodeRoot is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="1" testNumber="26306"/>
			<description>SignatureReferenceDocMDP shall not contain entries except Data, Type, TransformParams, DigestMethod, TransformMethod</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod').length == 0</test>
			<error>
				<message>SignatureReferenceDocMDP contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Data' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'DigestMethod' &amp;&amp; elem != 'TransformMethod').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26307"/>
			<description>Entry Data with type Array in SignatureReferenceDocMDP shall be object _UniversalArray</description>
			<test>DataHasTypeArray != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Array in SignatureReferenceDocMDP is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26308"/>
			<description>Entry Data with type Dictionary in SignatureReferenceDocMDP shall be object _UniversalDictionary</description>
			<test>DataHasTypeDictionary != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Dictionary in SignatureReferenceDocMDP is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26309"/>
			<description>Entry Data with type Stream in SignatureReferenceDocMDP shall be object Stream</description>
			<test>DataHasTypeStream != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceDocMDP is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="10" testNumber="26310"/>
			<description>Entry Data with type Stream in SignatureReferenceDocMDP shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceDocMDP is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26311"/>
			<description>Entry Data in SignatureReferenceDocMDP shall have one of types: Name, Array, Boolean, Integer, Dictionary, Stream, String</description>
			<test>containsData == false || DataHasTypeName == true || DataHasTypeArray == true || DataHasTypeBoolean == true || DataHasTypeInteger == true || DataHasTypeDictionary == true || DataHasTypeStream == true || DataHasTypeString == true</test>
			<error>
				<message>Entry Data in SignatureReferenceDocMDP is not one of types: Name, Array, Boolean, Integer, Dictionary, Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="6" testNumber="26312"/>
			<description>Entry Type with type Name in SignatureReferenceDocMDP shall have value SigRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigRef"</test>
			<error>
				<message>Entry Type with type Name in SignatureReferenceDocMDP has incorrect value %2 instead of SigRef</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26313"/>
			<description>Entry Type in SignatureReferenceDocMDP shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SignatureReferenceDocMDP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26314"/>
			<description>Entry TransformParams with type Dictionary in SignatureReferenceDocMDP shall be object DocMDPTransformParameters</description>
			<test>TransformParamsHasTypeDictionary != true || TransformParams_size == 1</test>
			<error>
				<message>Entry TransformParams with type Dictionary in SignatureReferenceDocMDP is not object DocMDPTransformParameters</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26315"/>
			<description>Entry TransformParams in SignatureReferenceDocMDP shall have type Dictionary</description>
			<test>containsTransformParams == false || TransformParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry TransformParams in SignatureReferenceDocMDP is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="13" testNumber="26316"/>
			<description>Entry DigestMethod with type Name in SignatureReferenceDocMDP shall have one of values: SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</description>
			<test>DigestMethodHasTypeName != true || DigestMethodNameValue == "MD5" || DigestMethodNameValue == "SHA1" || DigestMethodNameValue == SHA3-256 || DigestMethodNameValue == SHA3-384 || DigestMethodNameValue == SHA3-512 || DigestMethodNameValue == SHAKE256</test>
			<error>
				<message>Entry DigestMethod with type Name in SignatureReferenceDocMDP has incorrect value %2 instead of SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DigestMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26317"/>
			<description>Entry DigestMethod in SignatureReferenceDocMDP shall have type Name</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeName == true</test>
			<error>
				<message>Entry DigestMethod in SignatureReferenceDocMDP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="7" testNumber="26318"/>
			<description>Entry TransformMethod in SignatureReferenceDocMDP is required</description>
			<test>containsTransformMethod == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceDocMDP is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="6" testNumber="26319"/>
			<description>Entry TransformMethod with type Name in SignatureReferenceDocMDP shall have value DocMDP</description>
			<test>TransformMethodHasTypeName != true || TransformMethodNameValue == "DocMDP"</test>
			<error>
				<message>Entry TransformMethod with type Name in SignatureReferenceDocMDP has incorrect value %2 instead of DocMDP</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransformMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceDocMDP">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26320"/>
			<description>Entry TransformMethod in SignatureReferenceDocMDP shall have type Name</description>
			<test>containsTransformMethod == false || TransformMethodHasTypeName == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceDocMDP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctions">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26342"/>
			<description>Entry Default with type Dictionary in DictionaryOfFunctions shall be one of objects FunctionType2, FunctionType3</description>
			<test>DefaultHasTypeDictionary != true || Default_size == 1</test>
			<error>
				<message>Entry Default with type Dictionary in DictionaryOfFunctions is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctions">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26343"/>
			<description>Entry Default with type Stream in DictionaryOfFunctions shall be one of objects FunctionType0, FunctionType4</description>
			<test>DefaultHasTypeStream != true || Default_size == 1</test>
			<error>
				<message>Entry Default with type Stream in DictionaryOfFunctions is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctions">
			<id specification="ISO_32000_1_7" clause="10" testNumber="26344"/>
			<description>Entry Default with type Stream in DictionaryOfFunctions shall be indirect</description>
			<test>DefaultHasTypeStream != true || isDefaultIndirect == true</test>
			<error>
				<message>Entry Default with type Stream in DictionaryOfFunctions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADictionaryOfFunctions">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26345"/>
			<description>Entry Default in DictionaryOfFunctions shall have one of types: Dictionary, Stream</description>
			<test>containsDefault == false || DefaultHasTypeDictionary == true || DefaultHasTypeStream == true</test>
			<error>
				<message>Entry Default in DictionaryOfFunctions is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeIDSEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26367"/>
			<description>Entry with type Dictionary in NameNameTreeIDS shall be one of objects WebCaptureImageSet, WebCapturePageSet</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeIDS is not one of objects WebCaptureImageSet, WebCapturePageSet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="1" testNumber="26434"/>
			<description>ActionSubmitForm shall not contain entries except S, Flags, F, Fields, CharSet</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'CharSet').length == 0</test>
			<error>
				<message>ActionSubmitForm contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'CharSet').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="7" testNumber="26435"/>
			<description>Entry S in ActionSubmitForm is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionSubmitForm is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="6" testNumber="26436"/>
			<description>Entry S with type Name in ActionSubmitForm shall have value SubmitForm</description>
			<test>SHasTypeName != true || SNameValue == "SubmitForm"</test>
			<error>
				<message>Entry S with type Name in ActionSubmitForm has incorrect value %2 instead of SubmitForm</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26437"/>
			<description>Entry S in ActionSubmitForm shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionSubmitForm is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26438"/>
			<description>Entry Flags in ActionSubmitForm shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in ActionSubmitForm is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="9" testNumber="26439"/>
			<description>Entry Flags with type Bitmask in ActionSubmitForm shall correspond special case: fn:Eval(fn:BitClear(13) &amp;&amp; fn:BitsClear(15 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in ActionSubmitForm doesn't correspond special case: fn:Eval(fn:BitClear(13) &amp;&amp; fn:BitsClear(15 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26440"/>
			<description>Entry F with type Dictionary in ActionSubmitForm shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionSubmitForm is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="7" testNumber="26441"/>
			<description>Entry F in ActionSubmitForm is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in ActionSubmitForm is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26442"/>
			<description>Entry F in ActionSubmitForm shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionSubmitForm is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26443"/>
			<description>Entry Fields with type Array in ActionSubmitForm shall be object ArrayOfFieldID</description>
			<test>FieldsHasTypeArray != true || Fields_size == 1</test>
			<error>
				<message>Entry Fields with type Array in ActionSubmitForm is not object ArrayOfFieldID</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26444"/>
			<description>Entry Fields in ActionSubmitForm shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in ActionSubmitForm is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="6" testNumber="26445"/>
			<description>Entry CharSet with type String in ActionSubmitForm shall have one of values: GBK, UHC, utf-16, utf-8, Shift-JIS, BigFive</description>
			<test>CharSetHasTypeString != true || CharSetStringValue == "utf-8" || CharSetStringValue == "utf-16" || CharSetStringValue == "Shift-JIS" || CharSetStringValue == "BigFive" || CharSetStringValue == "GBK" || CharSetStringValue == "UHC"</test>
			<error>
				<message>Entry CharSet with type String in ActionSubmitForm has incorrect value %2 instead of GBK, UHC, utf-16, utf-8, Shift-JIS, BigFive</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CharSetStringValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionSubmitForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26446"/>
			<description>Entry CharSet in ActionSubmitForm shall have type String</description>
			<test>containsCharSet == false || CharSetHasTypeString == true</test>
			<error>
				<message>Entry CharSet in ActionSubmitForm is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="1" testNumber="26611"/>
			<description>AnnotStamp shall not contain entries except Rect, RT, Type, ExData, RC, NM, T, M, Subtype, Contents, StructParent, OC, Popup, AS, Subj, Border, CA, C, AP, F, IRT, P, Name, CreationDate</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Rect' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'T' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'C' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'CreationDate').length == 0</test>
			<error>
				<message>AnnotStamp contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Rect' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'T' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'C' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'CreationDate').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="7" testNumber="26612"/>
			<description>Entry Rect in AnnotStamp is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26613"/>
			<description>Entry Rect in AnnotStamp shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotStamp is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="6" testNumber="26614"/>
			<description>Entry RT with type Name in AnnotStamp shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotStamp has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26615"/>
			<description>Entry RT in AnnotStamp shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="6" testNumber="26616"/>
			<description>Entry Type with type Name in AnnotStamp shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotStamp has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26617"/>
			<description>Entry Type in AnnotStamp shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26618"/>
			<description>Entry ExData with type Dictionary in AnnotStamp shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotStamp is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26619"/>
			<description>Entry ExData in AnnotStamp shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26620"/>
			<description>Entry RC with type Stream in AnnotStamp shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotStamp is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="10" testNumber="26621"/>
			<description>Entry RC with type Stream in AnnotStamp shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotStamp is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26622"/>
			<description>Entry RC in AnnotStamp shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotStamp is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26623"/>
			<description>Entry NM in AnnotStamp shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotStamp is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26624"/>
			<description>Entry T in AnnotStamp shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotStamp is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26625"/>
			<description>Entry M in AnnotStamp shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotStamp is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="7" testNumber="26626"/>
			<description>Entry Subtype in AnnotStamp is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="6" testNumber="26627"/>
			<description>Entry Subtype with type Name in AnnotStamp shall have value Stamp</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Stamp"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotStamp has incorrect value %2 instead of Stamp</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26628"/>
			<description>Entry Subtype in AnnotStamp shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26629"/>
			<description>Entry Contents in AnnotStamp shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotStamp is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26630"/>
			<description>Entry StructParent in AnnotStamp shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotStamp is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26631"/>
			<description>Entry OC with type Dictionary in AnnotStamp shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotStamp is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26632"/>
			<description>Entry OC in AnnotStamp shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26633"/>
			<description>Entry Popup with type Dictionary in AnnotStamp shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStamp is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="10" testNumber="26634"/>
			<description>Entry Popup with type Dictionary in AnnotStamp shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotStamp is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26635"/>
			<description>Entry Popup in AnnotStamp shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="11" testNumber="26636"/>
			<description>Entry AS in AnnotStamp is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26637"/>
			<description>Entry AS in AnnotStamp shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26638"/>
			<description>Entry Subj in AnnotStamp shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotStamp is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26639"/>
			<description>Entry Border with type Array in AnnotStamp shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotStamp is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26640"/>
			<description>Entry Border in AnnotStamp shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="14" testNumber="26641"/>
			<description>Entry CA with type Number in AnnotStamp shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotStamp doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26642"/>
			<description>Entry CA in AnnotStamp shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotStamp is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26643"/>
			<description>Entry C with type Array in AnnotStamp shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotStamp is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26644"/>
			<description>Entry C in AnnotStamp shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotStamp is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26645"/>
			<description>Entry AP with type Dictionary in AnnotStamp shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotStamp is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="11" testNumber="26646"/>
			<description>Entry AP in AnnotStamp is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26647"/>
			<description>Entry AP in AnnotStamp shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26648"/>
			<description>Entry F in AnnotStamp shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotStamp is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="9" testNumber="26649"/>
			<description>Entry F with type Bitmask in AnnotStamp shall correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotStamp doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26650"/>
			<description>Entry IRT with type Dictionary in AnnotStamp shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotStamp is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="11" testNumber="26651"/>
			<description>Entry IRT in AnnotStamp is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotStamp is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26652"/>
			<description>Entry IRT in AnnotStamp shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26653"/>
			<description>Entry P with type Dictionary in AnnotStamp shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStamp is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="10" testNumber="26654"/>
			<description>Entry P with type Dictionary in AnnotStamp shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotStamp is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26655"/>
			<description>Entry P in AnnotStamp shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotStamp is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26656"/>
			<description>Entry Name in AnnotStamp shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotStamp is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotStamp">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26657"/>
			<description>Entry CreationDate in AnnotStamp shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotStamp is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldChoiceOptEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="26723"/>
			<description>Entry with type Array in ArrayOfFieldChoiceOpt shall be object ArrayOf_2StringsText</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfFieldChoiceOpt is not object ArrayOf_2StringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldChoiceOptEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="26724"/>
			<description>Entry in ArrayOfFieldChoiceOpt shall have one of types: Array, StringText</description>
			<test>HasTypeArray == true || HasTypeStringText == true</test>
			<error>
				<message>Entry %1 in ArrayOfFieldChoiceOpt is not one of types: Array, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="27029"/>
			<description>StructureAttributesDict shall not contain entries except ColumnGap, SpaceAfter, ColSpan, EndIndent, Role, checked, LineHeight, TPadding, BlockAlign, Scope, RowSpan, TBorderStyle, BBox, P, Summary, BorderColor, Subtype, BaselineShift, Headers, Placement, TextAlign, Height, TextDecorationType, RubyAlign, RubyPosition, Color, BorderStyle, Contents, ListNumbering, TextDecorationThickness, TextIndent, SpaceBefore, Width, StartIndent, O, ColumnCount, TextDecorationColor, GlyphOrientationVertical, BorderThickness, Checked, WritingMode, Type, ColumnWidths, InlineAlign, BackgroundColor, Desc, Padding</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColumnGap' &amp;&amp; elem != 'SpaceAfter' &amp;&amp; elem != 'ColSpan' &amp;&amp; elem != 'EndIndent' &amp;&amp; elem != 'Role' &amp;&amp; elem != 'checked' &amp;&amp; elem != 'LineHeight' &amp;&amp; elem != 'TPadding' &amp;&amp; elem != 'BlockAlign' &amp;&amp; elem != 'Scope' &amp;&amp; elem != 'RowSpan' &amp;&amp; elem != 'TBorderStyle' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Summary' &amp;&amp; elem != 'BorderColor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'BaselineShift' &amp;&amp; elem != 'Headers' &amp;&amp; elem != 'Placement' &amp;&amp; elem != 'TextAlign' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'TextDecorationType' &amp;&amp; elem != 'RubyAlign' &amp;&amp; elem != 'RubyPosition' &amp;&amp; elem != 'Color' &amp;&amp; elem != 'BorderStyle' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'ListNumbering' &amp;&amp; elem != 'TextDecorationThickness' &amp;&amp; elem != 'TextIndent' &amp;&amp; elem != 'SpaceBefore' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'StartIndent' &amp;&amp; elem != 'O' &amp;&amp; elem != 'ColumnCount' &amp;&amp; elem != 'TextDecorationColor' &amp;&amp; elem != 'GlyphOrientationVertical' &amp;&amp; elem != 'BorderThickness' &amp;&amp; elem != 'Checked' &amp;&amp; elem != 'WritingMode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ColumnWidths' &amp;&amp; elem != 'InlineAlign' &amp;&amp; elem != 'BackgroundColor' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'Padding').length == 0</test>
			<error>
				<message>StructureAttributesDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColumnGap' &amp;&amp; elem != 'SpaceAfter' &amp;&amp; elem != 'ColSpan' &amp;&amp; elem != 'EndIndent' &amp;&amp; elem != 'Role' &amp;&amp; elem != 'checked' &amp;&amp; elem != 'LineHeight' &amp;&amp; elem != 'TPadding' &amp;&amp; elem != 'BlockAlign' &amp;&amp; elem != 'Scope' &amp;&amp; elem != 'RowSpan' &amp;&amp; elem != 'TBorderStyle' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Summary' &amp;&amp; elem != 'BorderColor' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'BaselineShift' &amp;&amp; elem != 'Headers' &amp;&amp; elem != 'Placement' &amp;&amp; elem != 'TextAlign' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'TextDecorationType' &amp;&amp; elem != 'RubyAlign' &amp;&amp; elem != 'RubyPosition' &amp;&amp; elem != 'Color' &amp;&amp; elem != 'BorderStyle' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'ListNumbering' &amp;&amp; elem != 'TextDecorationThickness' &amp;&amp; elem != 'TextIndent' &amp;&amp; elem != 'SpaceBefore' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'StartIndent' &amp;&amp; elem != 'O' &amp;&amp; elem != 'ColumnCount' &amp;&amp; elem != 'TextDecorationColor' &amp;&amp; elem != 'GlyphOrientationVertical' &amp;&amp; elem != 'BorderThickness' &amp;&amp; elem != 'Checked' &amp;&amp; elem != 'WritingMode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ColumnWidths' &amp;&amp; elem != 'InlineAlign' &amp;&amp; elem != 'BackgroundColor' &amp;&amp; elem != 'Desc' &amp;&amp; elem != 'Padding').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27030"/>
			<description>Entry ColumnGap with type Array in StructureAttributesDict shall be object ArrayOfNumbersGeneral</description>
			<test>ColumnGapHasTypeArray != true || ColumnGap_size == 1</test>
			<error>
				<message>Entry ColumnGap with type Array in StructureAttributesDict is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27031"/>
			<description>Entry ColumnGap in StructureAttributesDict shall have one of types: Array, Number</description>
			<test>containsColumnGap == false || ColumnGapHasTypeArray == true || ColumnGapHasTypeNumber == true</test>
			<error>
				<message>Entry ColumnGap in StructureAttributesDict is not one of types: Array, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27032"/>
			<description>Entry ColumnGap with type Array in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>ColumnGapHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry ColumnGap with type Array in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27033"/>
			<description>Entry ColumnGap with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>ColumnGapHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry ColumnGap with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27034"/>
			<description>Entry SpaceAfter in StructureAttributesDict shall have type Number</description>
			<test>containsSpaceAfter == false || SpaceAfterHasTypeNumber == true</test>
			<error>
				<message>Entry SpaceAfter in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27035"/>
			<description>Entry SpaceAfter with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>SpaceAfterHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry SpaceAfter with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27036"/>
			<description>Entry ColSpan in StructureAttributesDict shall have type Integer</description>
			<test>containsColSpan == false || ColSpanHasTypeInteger == true</test>
			<error>
				<message>Entry ColSpan in StructureAttributesDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27037"/>
			<description>Entry ColSpan with type Integer in StructureAttributesDict shall correspond special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>ColSpanHasTypeInteger != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry ColSpan with type Integer in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27038"/>
			<description>Entry EndIndent in StructureAttributesDict shall have type Number</description>
			<test>containsEndIndent == false || EndIndentHasTypeNumber == true</test>
			<error>
				<message>Entry EndIndent in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27039"/>
			<description>Entry EndIndent with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>EndIndentHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry EndIndent with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27040"/>
			<description>Entry Role with type Name in StructureAttributesDict shall have one of values: rb, pb, tv, lb, cb</description>
			<test>RoleHasTypeName != true || RoleNameValue == "rb" || RoleNameValue == "cb" || RoleNameValue == "pb" || RoleNameValue == "tv" || RoleNameValue == "lb"</test>
			<error>
				<message>Entry Role with type Name in StructureAttributesDict has incorrect value %2 instead of rb, pb, tv, lb, cb</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RoleNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27041"/>
			<description>Entry Role in StructureAttributesDict shall have type Name</description>
			<test>containsRole == false || RoleHasTypeName == true</test>
			<error>
				<message>Entry Role in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27042"/>
			<description>Entry Role with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</description>
			<test>RoleHasTypeName != true || ((ONameValue == "PrintField") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Role with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27043"/>
			<description>Entry checked with type Name in StructureAttributesDict shall have one of values: neutral, off, on</description>
			<test>checkedHasTypeName != true || checkedNameValue == "on" || checkedNameValue == "off" || checkedNameValue == "neutral"</test>
			<error>
				<message>Entry checked with type Name in StructureAttributesDict has incorrect value %2 instead of neutral, off, on</message>
				<arguments>
					<argument>keyName</argument>
					<argument>checkedNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27044"/>
			<description>Entry checked in StructureAttributesDict shall have type Name</description>
			<test>containschecked == false || checkedHasTypeName == true</test>
			<error>
				<message>Entry checked in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27045"/>
			<description>Entry checked with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</description>
			<test>checkedHasTypeName != true || ((ONameValue == "PrintField") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry checked with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27046"/>
			<description>Entry LineHeight with type Name in StructureAttributesDict shall have one of values: Auto, Normal</description>
			<test>LineHeightHasTypeName != true || LineHeightNameValue == "Normal" || LineHeightNameValue == "Auto"</test>
			<error>
				<message>Entry LineHeight with type Name in StructureAttributesDict has incorrect value %2 instead of Auto, Normal</message>
				<arguments>
					<argument>keyName</argument>
					<argument>LineHeightNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27047"/>
			<description>Entry LineHeight in StructureAttributesDict shall have one of types: Name, Number</description>
			<test>containsLineHeight == false || LineHeightHasTypeName == true || LineHeightHasTypeNumber == true</test>
			<error>
				<message>Entry LineHeight in StructureAttributesDict is not one of types: Name, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27048"/>
			<description>Entry LineHeight with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>LineHeightHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry LineHeight with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27049"/>
			<description>Entry LineHeight with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>LineHeightHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry LineHeight with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27050"/>
			<description>Entry TPadding with type Array in StructureAttributesDict shall be object ArrayOf_4Integers</description>
			<test>TPaddingHasTypeArray != true || TPadding_size == 1</test>
			<error>
				<message>Entry TPadding with type Array in StructureAttributesDict is not object ArrayOf_4Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27051"/>
			<description>Entry TPadding in StructureAttributesDict shall have one of types: Array, Integer</description>
			<test>containsTPadding == false || TPaddingHasTypeArray == true || TPaddingHasTypeInteger == true</test>
			<error>
				<message>Entry TPadding in StructureAttributesDict is not one of types: Array, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27052"/>
			<description>Entry TPadding with type Array in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TPaddingHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TPadding with type Array in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27053"/>
			<description>Entry TPadding with type Integer in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TPaddingHasTypeInteger != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TPadding with type Integer in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27054"/>
			<description>Entry BlockAlign with type Name in StructureAttributesDict shall have one of values: Before, After, Middle, Justify</description>
			<test>BlockAlignHasTypeName != true || BlockAlignNameValue == "Before" || BlockAlignNameValue == "Middle" || BlockAlignNameValue == "After" || BlockAlignNameValue == "Justify"</test>
			<error>
				<message>Entry BlockAlign with type Name in StructureAttributesDict has incorrect value %2 instead of Before, After, Middle, Justify</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BlockAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27055"/>
			<description>Entry BlockAlign in StructureAttributesDict shall have type Name</description>
			<test>containsBlockAlign == false || BlockAlignHasTypeName == true</test>
			<error>
				<message>Entry BlockAlign in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27056"/>
			<description>Entry BlockAlign with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BlockAlignHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BlockAlign with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27057"/>
			<description>Entry Scope with type Name in StructureAttributesDict shall have one of values: Column, Row, Both</description>
			<test>ScopeHasTypeName != true || ScopeNameValue == "Row" || ScopeNameValue == "Column" || ScopeNameValue == "Both"</test>
			<error>
				<message>Entry Scope with type Name in StructureAttributesDict has incorrect value %2 instead of Column, Row, Both</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ScopeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27058"/>
			<description>Entry Scope in StructureAttributesDict shall have type Name</description>
			<test>containsScope == false || ScopeHasTypeName == true</test>
			<error>
				<message>Entry Scope in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27059"/>
			<description>Entry Scope with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>ScopeHasTypeName != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Scope with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27060"/>
			<description>Entry RowSpan in StructureAttributesDict shall have type Integer</description>
			<test>containsRowSpan == false || RowSpanHasTypeInteger == true</test>
			<error>
				<message>Entry RowSpan in StructureAttributesDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27061"/>
			<description>Entry RowSpan with type Integer in StructureAttributesDict shall correspond special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>RowSpanHasTypeInteger != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry RowSpan with type Integer in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27062"/>
			<description>Entry TBorderStyle with type Array in StructureAttributesDict shall be object ArrayOf_4BorderStyleNames</description>
			<test>TBorderStyleHasTypeArray != true || TBorderStyle_size == 1</test>
			<error>
				<message>Entry TBorderStyle with type Array in StructureAttributesDict is not object ArrayOf_4BorderStyleNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27063"/>
			<description>Entry TBorderStyle with type Name in StructureAttributesDict shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>TBorderStyleHasTypeName != true || TBorderStyleNameValue == "None" || TBorderStyleNameValue == "Hidden" || TBorderStyleNameValue == "Dotted" || TBorderStyleNameValue == "Dashed" || TBorderStyleNameValue == "Solid" || TBorderStyleNameValue == "Double" || TBorderStyleNameValue == "Groove" || TBorderStyleNameValue == "Ridge" || TBorderStyleNameValue == "Inset" || TBorderStyleNameValue == "Outset"</test>
			<error>
				<message>Entry TBorderStyle with type Name in StructureAttributesDict has incorrect value %2 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TBorderStyleNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27064"/>
			<description>Entry TBorderStyle in StructureAttributesDict shall have one of types: Name, Array</description>
			<test>containsTBorderStyle == false || TBorderStyleHasTypeName == true || TBorderStyleHasTypeArray == true</test>
			<error>
				<message>Entry TBorderStyle in StructureAttributesDict is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27065"/>
			<description>Entry TBorderStyle with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TBorderStyleHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TBorderStyle with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27066"/>
			<description>Entry TBorderStyle with type Array in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TBorderStyleHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TBorderStyle with type Array in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27067"/>
			<description>Entry BBox in StructureAttributesDict shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in StructureAttributesDict is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27068"/>
			<description>Entry BBox with type Rectangle in StructureAttributesDict shall correspond special case: fn:Eval(((@O == Layout) || (@O == Artifact)) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BBoxHasTypeRectangle != true || (((ONameValue == "Layout") || (ONameValue == "Artifact")) || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BBox with type Rectangle in StructureAttributesDict doesn't correspond special case: fn:Eval(((@O == Layout) || (@O == Artifact)) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27069"/>
			<description>Entry P with type Array in StructureAttributesDict shall be object ArrayOfUserProperty</description>
			<test>PHasTypeArray != true || P_size == 1</test>
			<error>
				<message>Entry P with type Array in StructureAttributesDict is not object ArrayOfUserProperty</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="11" testNumber="27070"/>
			<description>Entry P in StructureAttributesDict is required, when fn:IsRequired(@O == UserProperties)</description>
			<test>(containsP == true || (ONameValue == "UserProperties") == false)</test>
			<error>
				<message>Entry P in StructureAttributesDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27071"/>
			<description>Entry P in StructureAttributesDict shall have type Array</description>
			<test>containsP == false || PHasTypeArray == true</test>
			<error>
				<message>Entry P in StructureAttributesDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27072"/>
			<description>Entry Summary in StructureAttributesDict shall have type StringText</description>
			<test>containsSummary == false || SummaryHasTypeStringText == true</test>
			<error>
				<message>Entry Summary in StructureAttributesDict is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27073"/>
			<description>Entry Summary with type StringText in StructureAttributesDict shall correspond special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>SummaryHasTypeStringText != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Summary with type StringText in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27074"/>
			<description>Entry BorderColor with type Array in StructureAttributesDict shall be one of objects ArrayOf_4BorderColorArrays, ArrayOf_3RGBNumbers</description>
			<test>BorderColorHasTypeArray != true || BorderColor_size == 1</test>
			<error>
				<message>Entry BorderColor with type Array in StructureAttributesDict is not one of objects ArrayOf_4BorderColorArrays, ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27075"/>
			<description>Entry BorderColor in StructureAttributesDict shall have type Array</description>
			<test>containsBorderColor == false || BorderColorHasTypeArray == true</test>
			<error>
				<message>Entry BorderColor in StructureAttributesDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27076"/>
			<description>Entry BorderColor with type Array in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BorderColorHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderColor with type Array in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27077"/>
			<description>Entry Subtype with type Name in StructureAttributesDict shall have one of values: Header, Footer, Watermark</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Header" || SubtypeNameValue == "Footer" || SubtypeNameValue == "Watermark"</test>
			<error>
				<message>Entry Subtype with type Name in StructureAttributesDict has incorrect value %2 instead of Header, Footer, Watermark</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27078"/>
			<description>Entry Subtype in StructureAttributesDict shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27079"/>
			<description>Entry Subtype with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>SubtypeHasTypeName != true || ((ONameValue == "Artifact") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Subtype with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27080"/>
			<description>Entry BaselineShift in StructureAttributesDict shall have type Number</description>
			<test>containsBaselineShift == false || BaselineShiftHasTypeNumber == true</test>
			<error>
				<message>Entry BaselineShift in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27081"/>
			<description>Entry BaselineShift with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BaselineShiftHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BaselineShift with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27082"/>
			<description>Entry Headers with type Array in StructureAttributesDict shall be object ArrayOfStringsByte</description>
			<test>HeadersHasTypeArray != true || Headers_size == 1</test>
			<error>
				<message>Entry Headers with type Array in StructureAttributesDict is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27083"/>
			<description>Entry Headers in StructureAttributesDict shall have type Array</description>
			<test>containsHeaders == false || HeadersHasTypeArray == true</test>
			<error>
				<message>Entry Headers in StructureAttributesDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27084"/>
			<description>Entry Headers with type Array in StructureAttributesDict shall correspond special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</description>
			<test>HeadersHasTypeArray != true || ((ONameValue == "Table") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Headers with type Array in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Table) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="13" testNumber="27085"/>
			<description>Entry Placement with type Name in StructureAttributesDict shall have one of values: Before, Start, Block, End, Inline</description>
			<test>PlacementHasTypeName != true || PlacementNameValue == "Block" || PlacementNameValue == "Before" || PlacementNameValue == "Start" || PlacementNameValue == "End" || PlacementNameValue == "Inline"</test>
			<error>
				<message>Entry Placement with type Name in StructureAttributesDict has incorrect value %2 instead of Before, Start, Block, End, Inline</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PlacementNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27086"/>
			<description>Entry Placement in StructureAttributesDict shall have type Name</description>
			<test>containsPlacement == false || PlacementHasTypeName == true</test>
			<error>
				<message>Entry Placement in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27087"/>
			<description>Entry Placement with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>PlacementHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Placement with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27088"/>
			<description>Entry TextAlign with type Name in StructureAttributesDict shall have one of values: Center, Start, End, Justify</description>
			<test>TextAlignHasTypeName != true || TextAlignNameValue == "Start" || TextAlignNameValue == "Center" || TextAlignNameValue == "End" || TextAlignNameValue == "Justify"</test>
			<error>
				<message>Entry TextAlign with type Name in StructureAttributesDict has incorrect value %2 instead of Center, Start, End, Justify</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TextAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27089"/>
			<description>Entry TextAlign in StructureAttributesDict shall have type Name</description>
			<test>containsTextAlign == false || TextAlignHasTypeName == true</test>
			<error>
				<message>Entry TextAlign in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27090"/>
			<description>Entry TextAlign with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TextAlignHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextAlign with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27091"/>
			<description>Entry Height in StructureAttributesDict shall have one of types: Name, Number</description>
			<test>containsHeight == false || HeightHasTypeName == true || HeightHasTypeNumber == true</test>
			<error>
				<message>Entry Height in StructureAttributesDict is not one of types: Name, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27092"/>
			<description>Entry Height with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>HeightHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Height with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27093"/>
			<description>Entry Height with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>HeightHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Height with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27094"/>
			<description>Entry TextDecorationType with type Name in StructureAttributesDict shall have one of values: LineThrough, Overline, Underline, None</description>
			<test>TextDecorationTypeHasTypeName != true || TextDecorationTypeNameValue == "None" || TextDecorationTypeNameValue == "Underline" || TextDecorationTypeNameValue == "Overline" || TextDecorationTypeNameValue == "LineThrough"</test>
			<error>
				<message>Entry TextDecorationType with type Name in StructureAttributesDict has incorrect value %2 instead of LineThrough, Overline, Underline, None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TextDecorationTypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27095"/>
			<description>Entry TextDecorationType in StructureAttributesDict shall have type Name</description>
			<test>containsTextDecorationType == false || TextDecorationTypeHasTypeName == true</test>
			<error>
				<message>Entry TextDecorationType in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27096"/>
			<description>Entry TextDecorationType with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TextDecorationTypeHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextDecorationType with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27097"/>
			<description>Entry RubyAlign with type Name in StructureAttributesDict shall have one of values: Center, Start, End, Distribute, Justify</description>
			<test>RubyAlignHasTypeName != true || RubyAlignNameValue == "Start" || RubyAlignNameValue == "Center" || RubyAlignNameValue == "End" || RubyAlignNameValue == "Justify" || RubyAlignNameValue == "Distribute"</test>
			<error>
				<message>Entry RubyAlign with type Name in StructureAttributesDict has incorrect value %2 instead of Center, Start, End, Distribute, Justify</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RubyAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27098"/>
			<description>Entry RubyAlign in StructureAttributesDict shall have type Name</description>
			<test>containsRubyAlign == false || RubyAlignHasTypeName == true</test>
			<error>
				<message>Entry RubyAlign in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27099"/>
			<description>Entry RubyAlign with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>RubyAlignHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry RubyAlign with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27100"/>
			<description>Entry RubyPosition with type Name in StructureAttributesDict shall have one of values: Before, Warichu, After, Inline</description>
			<test>RubyPositionHasTypeName != true || RubyPositionNameValue == "Before" || RubyPositionNameValue == "After" || RubyPositionNameValue == "Warichu" || RubyPositionNameValue == "Inline"</test>
			<error>
				<message>Entry RubyPosition with type Name in StructureAttributesDict has incorrect value %2 instead of Before, Warichu, After, Inline</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RubyPositionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27101"/>
			<description>Entry RubyPosition in StructureAttributesDict shall have type Name</description>
			<test>containsRubyPosition == false || RubyPositionHasTypeName == true</test>
			<error>
				<message>Entry RubyPosition in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27102"/>
			<description>Entry RubyPosition with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>RubyPositionHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry RubyPosition with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27103"/>
			<description>Entry Color with type Array in StructureAttributesDict shall be object ArrayOf_3RGBNumbers</description>
			<test>ColorHasTypeArray != true || Color_size == 1</test>
			<error>
				<message>Entry Color with type Array in StructureAttributesDict is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27104"/>
			<description>Entry Color in StructureAttributesDict shall have type Array</description>
			<test>containsColor == false || ColorHasTypeArray == true</test>
			<error>
				<message>Entry Color in StructureAttributesDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27105"/>
			<description>Entry Color with type Array in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>ColorHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Color with type Array in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27106"/>
			<description>Entry BorderStyle with type Array in StructureAttributesDict shall be object ArrayOf_4BorderStyleNames</description>
			<test>BorderStyleHasTypeArray != true || BorderStyle_size == 1</test>
			<error>
				<message>Entry BorderStyle with type Array in StructureAttributesDict is not object ArrayOf_4BorderStyleNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27107"/>
			<description>Entry BorderStyle with type Name in StructureAttributesDict shall have one of values: Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</description>
			<test>BorderStyleHasTypeName != true || BorderStyleNameValue == "None" || BorderStyleNameValue == "Hidden" || BorderStyleNameValue == "Dotted" || BorderStyleNameValue == "Dashed" || BorderStyleNameValue == "Solid" || BorderStyleNameValue == "Double" || BorderStyleNameValue == "Groove" || BorderStyleNameValue == "Ridge" || BorderStyleNameValue == "Inset" || BorderStyleNameValue == "Outset"</test>
			<error>
				<message>Entry BorderStyle with type Name in StructureAttributesDict has incorrect value %2 instead of Outset, Inset, Dotted, Dashed, Groove, Hidden, None, Double, Solid, Ridge</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BorderStyleNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27108"/>
			<description>Entry BorderStyle in StructureAttributesDict shall have one of types: Name, Array</description>
			<test>containsBorderStyle == false || BorderStyleHasTypeName == true || BorderStyleHasTypeArray == true</test>
			<error>
				<message>Entry BorderStyle in StructureAttributesDict is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27109"/>
			<description>Entry BorderStyle with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BorderStyleHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderStyle with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27110"/>
			<description>Entry BorderStyle with type Array in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BorderStyleHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderStyle with type Array in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27111"/>
			<description>Entry Contents with type Array in StructureAttributesDict shall be object ArrayOfStringsText</description>
			<test>ContentsHasTypeArray != true || Contents_size == 1</test>
			<error>
				<message>Entry Contents with type Array in StructureAttributesDict is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27112"/>
			<description>Entry Contents in StructureAttributesDict shall have one of types: Array, StringText</description>
			<test>containsContents == false || ContentsHasTypeArray == true || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in StructureAttributesDict is not one of types: Array, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27113"/>
			<description>Entry Contents with type Array in StructureAttributesDict shall correspond special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>ContentsHasTypeArray != true || ((ONameValue == "Artifact") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Contents with type Array in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27114"/>
			<description>Entry Contents with type StringText in StructureAttributesDict shall correspond special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>ContentsHasTypeStringText != true || ((ONameValue == "Artifact") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Contents with type StringText in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27115"/>
			<description>Entry ListNumbering with type Name in StructureAttributesDict shall have one of values: Circle, Decimal, Disc, UpperRoman, LowerRoman, UpperAlpha, LowerAlpha, Ordered, Square, None</description>
			<test>ListNumberingHasTypeName != true || ListNumberingNameValue == "None" || ListNumberingNameValue == "Disc" || ListNumberingNameValue == "Circle" || ListNumberingNameValue == "Square" || ListNumberingNameValue == "Ordered" || ListNumberingNameValue == "Decimal" || ListNumberingNameValue == "UpperRoman" || ListNumberingNameValue == "LowerRoman" || ListNumberingNameValue == "UpperAlpha" || ListNumberingNameValue == "LowerAlpha"</test>
			<error>
				<message>Entry ListNumbering with type Name in StructureAttributesDict has incorrect value %2 instead of Circle, Decimal, Disc, UpperRoman, LowerRoman, UpperAlpha, LowerAlpha, Ordered, Square, None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ListNumberingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27116"/>
			<description>Entry ListNumbering in StructureAttributesDict shall have type Name</description>
			<test>containsListNumbering == false || ListNumberingHasTypeName == true</test>
			<error>
				<message>Entry ListNumbering in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27117"/>
			<description>Entry ListNumbering with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == List) || ((@O != Layout) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>ListNumberingHasTypeName != true || ((ONameValue == "List") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry ListNumbering with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == List) || ((@O != Layout) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27118"/>
			<description>Entry TextDecorationThickness in StructureAttributesDict shall have type Number</description>
			<test>containsTextDecorationThickness == false || TextDecorationThicknessHasTypeNumber == true</test>
			<error>
				<message>Entry TextDecorationThickness in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27119"/>
			<description>Entry TextDecorationThickness with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TextDecorationThicknessHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextDecorationThickness with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27120"/>
			<description>Entry TextIndent in StructureAttributesDict shall have type Number</description>
			<test>containsTextIndent == false || TextIndentHasTypeNumber == true</test>
			<error>
				<message>Entry TextIndent in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27121"/>
			<description>Entry TextIndent with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TextIndentHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextIndent with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27122"/>
			<description>Entry SpaceBefore in StructureAttributesDict shall have type Number</description>
			<test>containsSpaceBefore == false || SpaceBeforeHasTypeNumber == true</test>
			<error>
				<message>Entry SpaceBefore in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27123"/>
			<description>Entry SpaceBefore with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>SpaceBeforeHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry SpaceBefore with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27124"/>
			<description>Entry Width in StructureAttributesDict shall have one of types: Name, Number</description>
			<test>containsWidth == false || WidthHasTypeName == true || WidthHasTypeNumber == true</test>
			<error>
				<message>Entry Width in StructureAttributesDict is not one of types: Name, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27125"/>
			<description>Entry Width with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>WidthHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Width with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27126"/>
			<description>Entry Width with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>WidthHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Width with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27127"/>
			<description>Entry StartIndent in StructureAttributesDict shall have type Number</description>
			<test>containsStartIndent == false || StartIndentHasTypeNumber == true</test>
			<error>
				<message>Entry StartIndent in StructureAttributesDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27128"/>
			<description>Entry StartIndent with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>StartIndentHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry StartIndent with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="27129"/>
			<description>Entry O in StructureAttributesDict is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in StructureAttributesDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27130"/>
			<description>Entry O in StructureAttributesDict shall have type Name</description>
			<test>containsO == false || OHasTypeName == true</test>
			<error>
				<message>Entry O in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27131"/>
			<description>Entry ColumnCount in StructureAttributesDict shall have type Integer</description>
			<test>containsColumnCount == false || ColumnCountHasTypeInteger == true</test>
			<error>
				<message>Entry ColumnCount in StructureAttributesDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27132"/>
			<description>Entry ColumnCount with type Integer in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>ColumnCountHasTypeInteger != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry ColumnCount with type Integer in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27133"/>
			<description>Entry TextDecorationColor with type Array in StructureAttributesDict shall be object ArrayOf_3RGBNumbers</description>
			<test>TextDecorationColorHasTypeArray != true || TextDecorationColor_size == 1</test>
			<error>
				<message>Entry TextDecorationColor with type Array in StructureAttributesDict is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27134"/>
			<description>Entry TextDecorationColor in StructureAttributesDict shall have type Array</description>
			<test>containsTextDecorationColor == false || TextDecorationColorHasTypeArray == true</test>
			<error>
				<message>Entry TextDecorationColor in StructureAttributesDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27135"/>
			<description>Entry TextDecorationColor with type Array in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TextDecorationColorHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry TextDecorationColor with type Array in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27136"/>
			<description>Entry GlyphOrientationVertical with type Name in StructureAttributesDict shall have value Auto</description>
			<test>GlyphOrientationVerticalHasTypeName != true || GlyphOrientationVerticalNameValue == "Auto"</test>
			<error>
				<message>Entry GlyphOrientationVertical with type Name in StructureAttributesDict has incorrect value %2 instead of Auto</message>
				<arguments>
					<argument>keyName</argument>
					<argument>GlyphOrientationVerticalNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27137"/>
			<description>Entry GlyphOrientationVertical with type Integer in StructureAttributesDict shall have one of values: 0, -90, 90, -180, 180, 270, 360</description>
			<test>GlyphOrientationVerticalHasTypeInteger != true || GlyphOrientationVerticalIntegerValue == -180 || GlyphOrientationVerticalIntegerValue == -90 || GlyphOrientationVerticalIntegerValue == 0 || GlyphOrientationVerticalIntegerValue == 90 || GlyphOrientationVerticalIntegerValue == 180 || GlyphOrientationVerticalIntegerValue == 270 || GlyphOrientationVerticalIntegerValue == 360</test>
			<error>
				<message>Entry GlyphOrientationVertical with type Integer in StructureAttributesDict has incorrect value %2 instead of 0, -90, 90, -180, 180, 270, 360</message>
				<arguments>
					<argument>keyName</argument>
					<argument>GlyphOrientationVerticalIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27138"/>
			<description>Entry GlyphOrientationVertical in StructureAttributesDict shall have one of types: Name, Integer</description>
			<test>containsGlyphOrientationVertical == false || GlyphOrientationVerticalHasTypeName == true || GlyphOrientationVerticalHasTypeInteger == true</test>
			<error>
				<message>Entry GlyphOrientationVertical in StructureAttributesDict is not one of types: Name, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27139"/>
			<description>Entry GlyphOrientationVertical with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>GlyphOrientationVerticalHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry GlyphOrientationVertical with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27140"/>
			<description>Entry GlyphOrientationVertical with type Integer in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>GlyphOrientationVerticalHasTypeInteger != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry GlyphOrientationVertical with type Integer in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27141"/>
			<description>Entry BorderThickness with type Array in StructureAttributesDict shall be object ArrayOf_4BorderThicknessNumbers</description>
			<test>BorderThicknessHasTypeArray != true || BorderThickness_size == 1</test>
			<error>
				<message>Entry BorderThickness with type Array in StructureAttributesDict is not object ArrayOf_4BorderThicknessNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27142"/>
			<description>Entry BorderThickness in StructureAttributesDict shall have one of types: Array, Number</description>
			<test>containsBorderThickness == false || BorderThicknessHasTypeArray == true || BorderThicknessHasTypeNumber == true</test>
			<error>
				<message>Entry BorderThickness in StructureAttributesDict is not one of types: Array, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27143"/>
			<description>Entry BorderThickness with type Array in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BorderThicknessHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderThickness with type Array in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27144"/>
			<description>Entry BorderThickness with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BorderThicknessHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BorderThickness with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27145"/>
			<description>Entry Checked with type Name in StructureAttributesDict shall have one of values: neutral, off, on</description>
			<test>CheckedHasTypeName != true || CheckedNameValue == "on" || CheckedNameValue == "off" || CheckedNameValue == "neutral"</test>
			<error>
				<message>Entry Checked with type Name in StructureAttributesDict has incorrect value %2 instead of neutral, off, on</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CheckedNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27146"/>
			<description>Entry Checked in StructureAttributesDict shall have type Name</description>
			<test>containsChecked == false || CheckedHasTypeName == true</test>
			<error>
				<message>Entry Checked in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27147"/>
			<description>Entry Checked with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</description>
			<test>CheckedHasTypeName != true || ((ONameValue == "PrintField") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Checked with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27148"/>
			<description>Entry WritingMode with type Name in StructureAttributesDict shall have one of values: LrTb, RlTb, TbRl</description>
			<test>WritingModeHasTypeName != true || WritingModeNameValue == "LrTb" || WritingModeNameValue == "RlTb" || WritingModeNameValue == "TbRl"</test>
			<error>
				<message>Entry WritingMode with type Name in StructureAttributesDict has incorrect value %2 instead of LrTb, RlTb, TbRl</message>
				<arguments>
					<argument>keyName</argument>
					<argument>WritingModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27149"/>
			<description>Entry WritingMode in StructureAttributesDict shall have type Name</description>
			<test>containsWritingMode == false || WritingModeHasTypeName == true</test>
			<error>
				<message>Entry WritingMode in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27150"/>
			<description>Entry WritingMode with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>WritingModeHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry WritingMode with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="13" testNumber="27151"/>
			<description>Entry Type with type Name in StructureAttributesDict shall have one of values: Pagination, Layout, BatesN, Page</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pagination" || TypeNameValue == "Layout" || TypeNameValue == "Page" || TypeNameValue == BatesN</test>
			<error>
				<message>Entry Type with type Name in StructureAttributesDict has incorrect value %2 instead of Pagination, Layout, BatesN, Page</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27152"/>
			<description>Entry Type in StructureAttributesDict shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27153"/>
			<description>Entry Type with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>TypeHasTypeName != true || ((ONameValue == "Artifact") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Type with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Artifact) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27154"/>
			<description>Entry ColumnWidths with type Array in StructureAttributesDict shall be object ArrayOfNumbersGeneral</description>
			<test>ColumnWidthsHasTypeArray != true || ColumnWidths_size == 1</test>
			<error>
				<message>Entry ColumnWidths with type Array in StructureAttributesDict is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27155"/>
			<description>Entry ColumnWidths in StructureAttributesDict shall have one of types: Array, Number</description>
			<test>containsColumnWidths == false || ColumnWidthsHasTypeArray == true || ColumnWidthsHasTypeNumber == true</test>
			<error>
				<message>Entry ColumnWidths in StructureAttributesDict is not one of types: Array, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27156"/>
			<description>Entry ColumnWidths with type Array in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>ColumnWidthsHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry ColumnWidths with type Array in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27157"/>
			<description>Entry ColumnWidths with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>ColumnWidthsHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry ColumnWidths with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27158"/>
			<description>Entry InlineAlign with type Name in StructureAttributesDict shall have one of values: Center, Start, End</description>
			<test>InlineAlignHasTypeName != true || InlineAlignNameValue == "Start" || InlineAlignNameValue == "Center" || InlineAlignNameValue == "End"</test>
			<error>
				<message>Entry InlineAlign with type Name in StructureAttributesDict has incorrect value %2 instead of Center, Start, End</message>
				<arguments>
					<argument>keyName</argument>
					<argument>InlineAlignNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27159"/>
			<description>Entry InlineAlign in StructureAttributesDict shall have type Name</description>
			<test>containsInlineAlign == false || InlineAlignHasTypeName == true</test>
			<error>
				<message>Entry InlineAlign in StructureAttributesDict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27160"/>
			<description>Entry InlineAlign with type Name in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>InlineAlignHasTypeName != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry InlineAlign with type Name in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27161"/>
			<description>Entry BackgroundColor with type Array in StructureAttributesDict shall be object ArrayOf_3RGBNumbers</description>
			<test>BackgroundColorHasTypeArray != true || BackgroundColor_size == 1</test>
			<error>
				<message>Entry BackgroundColor with type Array in StructureAttributesDict is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27162"/>
			<description>Entry BackgroundColor in StructureAttributesDict shall have type Array</description>
			<test>containsBackgroundColor == false || BackgroundColorHasTypeArray == true</test>
			<error>
				<message>Entry BackgroundColor in StructureAttributesDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27163"/>
			<description>Entry BackgroundColor with type Array in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>BackgroundColorHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry BackgroundColor with type Array in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27164"/>
			<description>Entry Desc in StructureAttributesDict shall have type StringText</description>
			<test>containsDesc == false || DescHasTypeStringText == true</test>
			<error>
				<message>Entry Desc in StructureAttributesDict is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27165"/>
			<description>Entry Desc with type StringText in StructureAttributesDict shall correspond special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</description>
			<test>DescHasTypeStringText != true || ((ONameValue == "PrintField") || ((ONameValue != "Layout") &amp;&amp; (ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "Artifact")))</test>
			<error>
				<message>Entry Desc with type StringText in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == PrintField) || ((@O != Layout) &amp;&amp; (@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != Artifact)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27166"/>
			<description>Entry Padding with type Array in StructureAttributesDict shall be object ArrayOf_4Integers</description>
			<test>PaddingHasTypeArray != true || Padding_size == 1</test>
			<error>
				<message>Entry Padding with type Array in StructureAttributesDict is not object ArrayOf_4Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27167"/>
			<description>Entry Padding in StructureAttributesDict shall have one of types: Array, Number</description>
			<test>containsPadding == false || PaddingHasTypeArray == true || PaddingHasTypeNumber == true</test>
			<error>
				<message>Entry Padding in StructureAttributesDict is not one of types: Array, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27168"/>
			<description>Entry Padding with type Array in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>PaddingHasTypeArray != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Padding with type Array in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructureAttributesDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27169"/>
			<description>Entry Padding with type Number in StructureAttributesDict shall correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</description>
			<test>PaddingHasTypeNumber != true || ((ONameValue == "Layout") || ((ONameValue != "List") &amp;&amp; (ONameValue != "Table") &amp;&amp; (ONameValue != "PrintField") &amp;&amp; (ONameValue != "Table")))</test>
			<error>
				<message>Entry Padding with type Number in StructureAttributesDict doesn't correspond special case: fn:Eval((@O == Layout) || ((@O != List) &amp;&amp; (@O != Table) &amp;&amp; (@O != PrintField) &amp;&amp; (@O != Table)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="27484"/>
			<description>LinearizationParameterDict shall not contain entries except E, T, H, Linearized, N, O, P, L</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'T' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Linearized' &amp;&amp; elem != 'N' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'L').length == 0</test>
			<error>
				<message>LinearizationParameterDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'T' &amp;&amp; elem != 'H' &amp;&amp; elem != 'Linearized' &amp;&amp; elem != 'N' &amp;&amp; elem != 'O' &amp;&amp; elem != 'P' &amp;&amp; elem != 'L').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="27485"/>
			<description>Entry E in LinearizationParameterDict is required</description>
			<test>containsE == true</test>
			<error>
				<message>Entry E in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="16" testNumber="27486"/>
			<description>If entry E with type Integer in LinearizationParameterDict corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>EHasTypeInteger != true || (isEIndirect == false)</test>
			<error>
				<message>Entry E with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="14" testNumber="27487"/>
			<description>Entry E with type Integer in LinearizationParameterDict shall correspond possible value predicate: fn:Eval((@E &gt; 0) &amp;&amp; (@E &lt;= @L))</description>
			<test>EHasTypeInteger != true || (EIntegerValue &gt; 0) &amp;&amp; (EIntegerValue &lt;= LIntegerValue)</test>
			<error>
				<message>Entry E with type Integer in LinearizationParameterDict doesn't correspond possible value predicate: fn:Eval((@E &gt; 0) &amp;&amp; (@E &lt;= @L))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27488"/>
			<description>Entry E in LinearizationParameterDict shall have type Integer</description>
			<test>containsE == false || EHasTypeInteger == true</test>
			<error>
				<message>Entry E in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="27489"/>
			<description>Entry T in LinearizationParameterDict is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="16" testNumber="27490"/>
			<description>If entry T with type Integer in LinearizationParameterDict corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>THasTypeInteger != true || (isTIndirect == false)</test>
			<error>
				<message>Entry T with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="14" testNumber="27491"/>
			<description>Entry T with type Integer in LinearizationParameterDict shall correspond possible value predicate: fn:Eval(@T &gt; 0)</description>
			<test>THasTypeInteger != true || TIntegerValue &gt; 0</test>
			<error>
				<message>Entry T with type Integer in LinearizationParameterDict doesn't correspond possible value predicate: fn:Eval(@T &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27492"/>
			<description>Entry T in LinearizationParameterDict shall have type Integer</description>
			<test>containsT == false || THasTypeInteger == true</test>
			<error>
				<message>Entry T in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27493"/>
			<description>Entry H with type Array in LinearizationParameterDict shall be one of objects ArrayOf_2Integers, ArrayOf_4Integers</description>
			<test>HHasTypeArray != true || H_size == 1</test>
			<error>
				<message>Entry H with type Array in LinearizationParameterDict is not one of objects ArrayOf_2Integers, ArrayOf_4Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="27494"/>
			<description>Entry H in LinearizationParameterDict is required</description>
			<test>containsH == true</test>
			<error>
				<message>Entry H in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="16" testNumber="27495"/>
			<description>If entry H with type Array in LinearizationParameterDict corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>HHasTypeArray != true || (isHIndirect == false)</test>
			<error>
				<message>Entry H with type Array in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27496"/>
			<description>Entry H in LinearizationParameterDict shall have type Array</description>
			<test>containsH == false || HHasTypeArray == true</test>
			<error>
				<message>Entry H in LinearizationParameterDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="27497"/>
			<description>Entry Linearized in LinearizationParameterDict is required</description>
			<test>containsLinearized == true</test>
			<error>
				<message>Entry Linearized in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="16" testNumber="27498"/>
			<description>If entry Linearized with type Number in LinearizationParameterDict corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>LinearizedHasTypeNumber != true || (isLinearizedIndirect == false)</test>
			<error>
				<message>Entry Linearized with type Number in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27499"/>
			<description>Entry Linearized with type Number in LinearizationParameterDict shall have value 1.0</description>
			<test>LinearizedHasTypeNumber != true || LinearizedNumberValue == 1.0</test>
			<error>
				<message>Entry Linearized with type Number in LinearizationParameterDict has incorrect value %2 instead of 1.0</message>
				<arguments>
					<argument>keyName</argument>
					<argument>LinearizedNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27500"/>
			<description>Entry Linearized in LinearizationParameterDict shall have type Number</description>
			<test>containsLinearized == false || LinearizedHasTypeNumber == true</test>
			<error>
				<message>Entry Linearized in LinearizationParameterDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="27501"/>
			<description>Entry N in LinearizationParameterDict is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="16" testNumber="27502"/>
			<description>If entry N with type Integer in LinearizationParameterDict corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>NHasTypeInteger != true || (isNIndirect == false)</test>
			<error>
				<message>Entry N with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="14" testNumber="27503"/>
			<description>Entry N with type Integer in LinearizationParameterDict shall correspond possible value predicate: fn:Eval(@N &gt; 0)</description>
			<test>NHasTypeInteger != true || NIntegerValue &gt; 0</test>
			<error>
				<message>Entry N with type Integer in LinearizationParameterDict doesn't correspond possible value predicate: fn:Eval(@N &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27504"/>
			<description>Entry N in LinearizationParameterDict shall have type Integer</description>
			<test>containsN == false || NHasTypeInteger == true</test>
			<error>
				<message>Entry N in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="27505"/>
			<description>Entry O in LinearizationParameterDict is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="16" testNumber="27506"/>
			<description>If entry O with type Integer in LinearizationParameterDict corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>OHasTypeInteger != true || (isOIndirect == false)</test>
			<error>
				<message>Entry O with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="14" testNumber="27507"/>
			<description>Entry O with type Integer in LinearizationParameterDict shall correspond possible value predicate: fn:Eval(@O &gt; 0)</description>
			<test>OHasTypeInteger != true || OIntegerValue &gt; 0</test>
			<error>
				<message>Entry O with type Integer in LinearizationParameterDict doesn't correspond possible value predicate: fn:Eval(@O &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27508"/>
			<description>Entry O in LinearizationParameterDict shall have type Integer</description>
			<test>containsO == false || OHasTypeInteger == true</test>
			<error>
				<message>Entry O in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="16" testNumber="27509"/>
			<description>If entry P with type Integer in LinearizationParameterDict corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>PHasTypeInteger != true || (isPIndirect == false)</test>
			<error>
				<message>Entry P with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="14" testNumber="27510"/>
			<description>Entry P with type Integer in LinearizationParameterDict shall correspond possible value predicate: fn:Eval(@P &gt;= 0)</description>
			<test>PHasTypeInteger != true || PIntegerValue &gt;= 0</test>
			<error>
				<message>Entry P with type Integer in LinearizationParameterDict doesn't correspond possible value predicate: fn:Eval(@P &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27511"/>
			<description>Entry P in LinearizationParameterDict shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="27512"/>
			<description>Entry L in LinearizationParameterDict is required</description>
			<test>containsL == true</test>
			<error>
				<message>Entry L in LinearizationParameterDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="16" testNumber="27513"/>
			<description>If entry L with type Integer in LinearizationParameterDict corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>LHasTypeInteger != true || (isLIndirect == false)</test>
			<error>
				<message>Entry L with type Integer in LinearizationParameterDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="14" testNumber="27514"/>
			<description>Entry L with type Integer in LinearizationParameterDict shall correspond possible value predicate: fn:Eval(@L &gt; 0)</description>
			<test>LHasTypeInteger != true || LIntegerValue &gt; 0</test>
			<error>
				<message>Entry L with type Integer in LinearizationParameterDict doesn't correspond possible value predicate: fn:Eval(@L &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALinearizationParameterDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27515"/>
			<description>Entry L in LinearizationParameterDict shall have type Integer</description>
			<test>containsL == false || LHasTypeInteger == true</test>
			<error>
				<message>Entry L in LinearizationParameterDict is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="1" testNumber="27790"/>
			<description>AnnotText shall not contain entries except AS, Type, ExData, F, OC, RC, Subj, Subtype, StructParent, StateModel, IT, CreationDate, Border, M, NM, Open, Contents, Rect, C, State, P, AP, IRT, CA, Popup, RT, T, Name</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AS' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StateModel' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'C' &amp;&amp; elem != 'State' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Name').length == 0</test>
			<error>
				<message>AnnotText contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AS' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'F' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'StateModel' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'C' &amp;&amp; elem != 'State' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Name').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="11" testNumber="27791"/>
			<description>Entry AS in AnnotText is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27792"/>
			<description>Entry AS in AnnotText shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27793"/>
			<description>Entry Type with type Name in AnnotText shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotText has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27794"/>
			<description>Entry Type in AnnotText shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27795"/>
			<description>Entry ExData with type Dictionary in AnnotText shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotText is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27796"/>
			<description>Entry ExData in AnnotText shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27797"/>
			<description>Entry F in AnnotText shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotText is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="9" testNumber="27798"/>
			<description>Entry F with type Bitmask in AnnotText shall correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotText doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27799"/>
			<description>Entry OC with type Dictionary in AnnotText shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotText is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27800"/>
			<description>Entry OC in AnnotText shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27801"/>
			<description>Entry RC with type Stream in AnnotText shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotText is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="10" testNumber="27802"/>
			<description>Entry RC with type Stream in AnnotText shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27803"/>
			<description>Entry RC in AnnotText shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotText is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27804"/>
			<description>Entry Subj in AnnotText shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="7" testNumber="27805"/>
			<description>Entry Subtype in AnnotText is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27806"/>
			<description>Entry Subtype with type Name in AnnotText shall have value Text</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Text"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotText has incorrect value %2 instead of Text</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27807"/>
			<description>Entry Subtype in AnnotText shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27808"/>
			<description>Entry StructParent in AnnotText shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotText is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="11" testNumber="27809"/>
			<description>Entry StateModel in AnnotText is required, when fn:IsRequired(fn:IsPresent(State))</description>
			<test>(containsStateModel == true || ((containsState == true)) == false)</test>
			<error>
				<message>Entry StateModel in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27810"/>
			<description>Entry StateModel with type StringText in AnnotText shall have one of values: Review, Marked</description>
			<test>StateModelHasTypeStringText != true || StateModelStringTextValue == "Marked" || StateModelStringTextValue == "Review"</test>
			<error>
				<message>Entry StateModel with type StringText in AnnotText has incorrect value %2 instead of Review, Marked</message>
				<arguments>
					<argument>keyName</argument>
					<argument>StateModelStringTextValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27811"/>
			<description>Entry StateModel in AnnotText shall have type StringText</description>
			<test>containsStateModel == false || StateModelHasTypeStringText == true</test>
			<error>
				<message>Entry StateModel in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27812"/>
			<description>Entry IT in AnnotText shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27813"/>
			<description>Entry CreationDate in AnnotText shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotText is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27814"/>
			<description>Entry Border with type Array in AnnotText shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotText is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27815"/>
			<description>Entry Border in AnnotText shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27816"/>
			<description>Entry M in AnnotText shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotText is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27817"/>
			<description>Entry NM in AnnotText shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27818"/>
			<description>Entry Open in AnnotText shall have type Boolean</description>
			<test>containsOpen == false || OpenHasTypeBoolean == true</test>
			<error>
				<message>Entry Open in AnnotText is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27819"/>
			<description>Entry Contents in AnnotText shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="7" testNumber="27820"/>
			<description>Entry Rect in AnnotText is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27821"/>
			<description>Entry Rect in AnnotText shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotText is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27822"/>
			<description>Entry C with type Array in AnnotText shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotText is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27823"/>
			<description>Entry C in AnnotText shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27824"/>
			<description>Entry State with type StringText in AnnotText shall have one of values: Unmarked, Completed, Rejected, Cancelled, Marked, None, Accepted</description>
			<test>StateHasTypeStringText != true || StateStringTextValue == "Marked" || StateStringTextValue == "Unmarked" || StateStringTextValue == "Accepted" || StateStringTextValue == "Rejected" || StateStringTextValue == "Cancelled" || StateStringTextValue == "Completed" || StateStringTextValue == "None"</test>
			<error>
				<message>Entry State with type StringText in AnnotText has incorrect value %2 instead of Unmarked, Completed, Rejected, Cancelled, Marked, None, Accepted</message>
				<arguments>
					<argument>keyName</argument>
					<argument>StateStringTextValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27825"/>
			<description>Entry State in AnnotText shall have type StringText</description>
			<test>containsState == false || StateHasTypeStringText == true</test>
			<error>
				<message>Entry State in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27826"/>
			<description>Entry P with type Dictionary in AnnotText shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotText is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="10" testNumber="27827"/>
			<description>Entry P with type Dictionary in AnnotText shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27828"/>
			<description>Entry P in AnnotText shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27829"/>
			<description>Entry AP with type Dictionary in AnnotText shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotText is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="11" testNumber="27830"/>
			<description>Entry AP in AnnotText is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27831"/>
			<description>Entry AP in AnnotText shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27832"/>
			<description>Entry IRT with type Dictionary in AnnotText shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotText is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="11" testNumber="27833"/>
			<description>Entry IRT in AnnotText is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27834"/>
			<description>Entry IRT in AnnotText shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="14" testNumber="27835"/>
			<description>Entry CA with type Number in AnnotText shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotText doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27836"/>
			<description>Entry CA in AnnotText shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotText is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27837"/>
			<description>Entry Popup with type Dictionary in AnnotText shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotText is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="10" testNumber="27838"/>
			<description>Entry Popup with type Dictionary in AnnotText shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotText is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27839"/>
			<description>Entry Popup in AnnotText shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotText is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27840"/>
			<description>Entry RT with type Name in AnnotText shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotText has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27841"/>
			<description>Entry RT in AnnotText shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27842"/>
			<description>Entry T in AnnotText shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27843"/>
			<description>Entry Name with type Name in AnnotText shall have one of values: Comment, Help, Note, Insert, Key, NewParagraph, Paragraph</description>
			<test>NameHasTypeName != true || NameNameValue == "Comment" || NameNameValue == "Key" || NameNameValue == "Note" || NameNameValue == "Help" || NameNameValue == "NewParagraph" || NameNameValue == "Paragraph" || NameNameValue == "Insert"</test>
			<error>
				<message>Entry Name with type Name in AnnotText has incorrect value %2 instead of Comment, Help, Note, Insert, Key, NewParagraph, Paragraph</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27844"/>
			<description>Entry Name in AnnotText shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldIDEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27919"/>
			<description>Entry with type Dictionary in ArrayOfFieldID shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfFieldID is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFieldIDEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27920"/>
			<description>Entry in ArrayOfFieldID shall have one of types: StringText, Dictionary</description>
			<test>HasTypeStringText == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfFieldID is not one of types: StringText, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArray">
			<id specification="ISO_32000_1_7" clause="4" testNumber="27929"/>
			<description>VisibilityExpressionArray shall contain at least 2 elements</description>
			<test>size &gt;= 2</test>
			<error>
				<message>VisibilityExpressionArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArray">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27930"/>
			<description>Entry 0 with type Name in VisibilityExpressionArray shall have one of values: Not, Or, And</description>
			<test>entry0HasTypeName != true || entry0NameValue == "And" || entry0NameValue == "Not" || entry0NameValue == "Or"</test>
			<error>
				<message>Entry 0 with type Name in VisibilityExpressionArray has incorrect value %2 instead of Not, Or, And</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27931"/>
			<description>Entry 0 in VisibilityExpressionArray shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in VisibilityExpressionArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArray">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27932"/>
			<description>Entry 1 with type Array in VisibilityExpressionArray shall be object VisibilityExpressionArray</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in VisibilityExpressionArray is not object VisibilityExpressionArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArray">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27933"/>
			<description>Entry 1 with type Dictionary in VisibilityExpressionArray shall be object OptContentGroup</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in VisibilityExpressionArray is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AVisibilityExpressionArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27934"/>
			<description>Entry 1 in VisibilityExpressionArray shall have one of types: Array, Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in VisibilityExpressionArray is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="1" testNumber="27941"/>
			<description>3DRenderMode shall not contain entries except Subtype, AC, Type, CV, FC, O</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; elem != 'AC' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'CV' &amp;&amp; elem != 'FC' &amp;&amp; elem != 'O').length == 0</test>
			<error>
				<message>3DRenderMode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; elem != 'AC' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'CV' &amp;&amp; elem != 'FC' &amp;&amp; elem != 'O').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="7" testNumber="27942"/>
			<description>Entry Subtype in 3DRenderMode is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DRenderMode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27943"/>
			<description>Entry Subtype with type Name in 3DRenderMode shall have one of values: TransparentWireframe, TransparentBoundingBox, ShadedVertices, Illustration, Wireframe, HiddenWireframe, SolidWireframe, ShadedIllustration, Solid, Vertices, ShadedWireframe, Transparent, BoundingBox, TransparentBoundingBoxOutline, SolidOutline</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Solid" || SubtypeNameValue == "SolidWireframe" || SubtypeNameValue == "Transparent" || SubtypeNameValue == "TransparentWireframe" || SubtypeNameValue == "BoundingBox" || SubtypeNameValue == "TransparentBoundingBox" || SubtypeNameValue == "TransparentBoundingBoxOutline" || SubtypeNameValue == "Wireframe" || SubtypeNameValue == "ShadedWireframe" || SubtypeNameValue == "HiddenWireframe" || SubtypeNameValue == "Vertices" || SubtypeNameValue == "ShadedVertices" || SubtypeNameValue == "Illustration" || SubtypeNameValue == "SolidOutline" || SubtypeNameValue == "ShadedIllustration"</test>
			<error>
				<message>Entry Subtype with type Name in 3DRenderMode has incorrect value %2 instead of TransparentWireframe, TransparentBoundingBox, ShadedVertices, Illustration, Wireframe, HiddenWireframe, SolidWireframe, ShadedIllustration, Solid, Vertices, ShadedWireframe, Transparent, BoundingBox, TransparentBoundingBoxOutline, SolidOutline</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27944"/>
			<description>Entry Subtype in 3DRenderMode shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DRenderMode is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27945"/>
			<description>Entry AC with type Array in 3DRenderMode shall be object ArrayOf_4ColourSpaceEntries</description>
			<test>ACHasTypeArray != true || AC_size == 1</test>
			<error>
				<message>Entry AC with type Array in 3DRenderMode is not object ArrayOf_4ColourSpaceEntries</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27946"/>
			<description>Entry AC in 3DRenderMode shall have type Array</description>
			<test>containsAC == false || ACHasTypeArray == true</test>
			<error>
				<message>Entry AC in 3DRenderMode is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27947"/>
			<description>Entry Type with type Name in 3DRenderMode shall have value 3DRenderMode</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DRenderMode"</test>
			<error>
				<message>Entry Type with type Name in 3DRenderMode has incorrect value %2 instead of 3DRenderMode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27948"/>
			<description>Entry Type in 3DRenderMode shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DRenderMode is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27949"/>
			<description>Entry CV in 3DRenderMode shall have type Number</description>
			<test>containsCV == false || CVHasTypeNumber == true</test>
			<error>
				<message>Entry CV in 3DRenderMode is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="17" testNumber="27950"/>
			<description>Entry FC with type Array in 3DRenderMode shall be object ArrayOf_4ColourSpaceEntries</description>
			<test>FCHasTypeArray != true || FC_size == 1</test>
			<error>
				<message>Entry FC with type Array in 3DRenderMode is not object ArrayOf_4ColourSpaceEntries</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="6" testNumber="27951"/>
			<description>Entry FC with type Name in 3DRenderMode shall have value BG</description>
			<test>FCHasTypeName != true || FCNameValue == "BG"</test>
			<error>
				<message>Entry FC with type Name in 3DRenderMode has incorrect value %2 instead of BG</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FCNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27952"/>
			<description>Entry FC in 3DRenderMode shall have one of types: Name, Array</description>
			<test>containsFC == false || FCHasTypeName == true || FCHasTypeArray == true</test>
			<error>
				<message>Entry FC in 3DRenderMode is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="14" testNumber="27953"/>
			<description>Entry O with type Number in 3DRenderMode shall correspond possible value predicate: fn:Eval((@O &gt;= 0) &amp;&amp; (@O &lt;= 1))</description>
			<test>OHasTypeNumber != true || (ONumberValue &gt;= 0) &amp;&amp; (ONumberValue &lt;= 1)</test>
			<error>
				<message>Entry O with type Number in 3DRenderMode doesn't correspond possible value predicate: fn:Eval((@O &gt;= 0) &amp;&amp; (@O &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DRenderMode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="27954"/>
			<description>Entry O in 3DRenderMode shall have type Number</description>
			<test>containsO == false || OHasTypeNumber == true</test>
			<error>
				<message>Entry O in 3DRenderMode is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="1" testNumber="28039"/>
			<description>ActionMovie shall not contain entries except T, Annotation, Next, Type, S, Operation</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'T' &amp;&amp; elem != 'Annotation' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Operation').length == 0</test>
			<error>
				<message>ActionMovie contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'T' &amp;&amp; elem != 'Annotation' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Operation').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28040"/>
			<description>Entry T in ActionMovie shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in ActionMovie is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28041"/>
			<description>Entry Annotation with type Dictionary in ActionMovie shall be object AnnotMovie</description>
			<test>AnnotationHasTypeDictionary != true || Annotation_size == 1</test>
			<error>
				<message>Entry Annotation with type Dictionary in ActionMovie is not object AnnotMovie</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28042"/>
			<description>Entry Annotation in ActionMovie shall have type Dictionary</description>
			<test>containsAnnotation == false || AnnotationHasTypeDictionary == true</test>
			<error>
				<message>Entry Annotation in ActionMovie is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28043"/>
			<description>Entry Next with type Array in ActionMovie shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionMovie is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28044"/>
			<description>Entry Next with type Dictionary in ActionMovie shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionMovie is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28045"/>
			<description>Entry Next in ActionMovie shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionMovie is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="6" testNumber="28046"/>
			<description>Entry Type with type Name in ActionMovie shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionMovie has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28047"/>
			<description>Entry Type in ActionMovie shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="7" testNumber="28048"/>
			<description>Entry S in ActionMovie is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionMovie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="6" testNumber="28049"/>
			<description>Entry S with type Name in ActionMovie shall have value Movie</description>
			<test>SHasTypeName != true || SNameValue == "Movie"</test>
			<error>
				<message>Entry S with type Name in ActionMovie has incorrect value %2 instead of Movie</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28050"/>
			<description>Entry S in ActionMovie shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="6" testNumber="28051"/>
			<description>Entry Operation with type Name in ActionMovie shall have one of values: Play, Pause, Stop, Resume</description>
			<test>OperationHasTypeName != true || OperationNameValue == "Play" || OperationNameValue == "Stop" || OperationNameValue == "Pause" || OperationNameValue == "Resume"</test>
			<error>
				<message>Entry Operation with type Name in ActionMovie has incorrect value %2 instead of Play, Pause, Stop, Resume</message>
				<arguments>
					<argument>keyName</argument>
					<argument>OperationNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28052"/>
			<description>Entry Operation in ActionMovie shall have type Name</description>
			<test>containsOperation == false || OperationHasTypeName == true</test>
			<error>
				<message>Entry Operation in ActionMovie is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28077"/>
			<description>Entry with type Dictionary in ArrayOfActions shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfActions is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28078"/>
			<description>Entry in ArrayOfActions shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfActions is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRequirementsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28081"/>
			<description>Entry with type Dictionary in ArrayOfRequirements shall be one of objects RequirementsEnableJavaScripts, RequirementsHandler</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfRequirements is not one of objects RequirementsEnableJavaScripts, RequirementsHandler</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRequirementsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28082"/>
			<description>Entry in ArrayOfRequirements shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfRequirements is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_7" clause="1" testNumber="28124"/>
			<description>URLAlias shall not contain entries except U, C</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'U' &amp;&amp; elem != 'C').length == 0</test>
			<error>
				<message>URLAlias contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'U' &amp;&amp; elem != 'C').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_7" clause="7" testNumber="28125"/>
			<description>Entry U in URLAlias is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in URLAlias is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28126"/>
			<description>Entry U in URLAlias shall have type StringAscii</description>
			<test>containsU == false || UHasTypeStringAscii == true</test>
			<error>
				<message>Entry U in URLAlias is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28127"/>
			<description>Entry C with type Array in URLAlias shall be object ArrayOfArraysURLStrings</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in URLAlias is not object ArrayOfArraysURLStrings</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28128"/>
			<description>Entry C in URLAlias shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in URLAlias is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURLAlias">
			<id specification="ISO_32000_1_7" clause="9" testNumber="28129"/>
			<description>Entry C with type Array in URLAlias shall correspond special case: fn:Eval(fn:ArrayLength(C) &gt;= 1)</description>
			<test>CHasTypeArray != true || (CArraySize &gt;= 1)</test>
			<error>
				<message>Entry C with type Array in URLAlias doesn't correspond special case: fn:Eval(fn:ArrayLength(C) &gt;= 1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDescendantFonts">
			<id specification="ISO_32000_1_7" clause="2" testNumber="28151"/>
			<description>ArrayOfDescendantFonts shall contain exactly 1 element</description>
			<test>size == 1</test>
			<error>
				<message>ArrayOfDescendantFonts contains %1 element(s) instead of 1</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDescendantFonts">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28152"/>
			<description>Entry 0 with type Dictionary in ArrayOfDescendantFonts shall be one of objects FontCIDType0, FontCIDType2</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in ArrayOfDescendantFonts is not one of objects FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDescendantFonts">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28153"/>
			<description>Entry 0 in ArrayOfDescendantFonts shall have type Dictionary</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true</test>
			<error>
				<message>Entry 0 in ArrayOfDescendantFonts is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeDests">
			<id specification="ISO_32000_1_7" clause="18" testNumber="28162"/>
			<description>Entry * in NameNameTreeDests shall be object NameNameTreeDestsEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeDests is not object NameNameTreeDestsEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfThreadsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28176"/>
			<description>Entry with type Dictionary in ArrayOfThreads shall be object Thread</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfThreads is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfThreadsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28177"/>
			<description>Entry in ArrayOfThreads shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfThreads is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRenditionsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28184"/>
			<description>Entry with type Dictionary in ArrayOfRenditions shall be one of objects RenditionMedia, RenditionSelector</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfRenditions is not one of objects RenditionMedia, RenditionSelector</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfRenditionsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28185"/>
			<description>Entry in ArrayOfRenditions shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfRenditions is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="1" testNumber="28188"/>
			<description>CollectionField shall not contain entries except E, Subtype, V, N, Type, O</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'V' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'O').length == 0</test>
			<error>
				<message>CollectionField contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'E' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'V' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'O').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28189"/>
			<description>Entry E in CollectionField shall have type Boolean</description>
			<test>containsE == false || EHasTypeBoolean == true</test>
			<error>
				<message>Entry E in CollectionField is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="7" testNumber="28190"/>
			<description>Entry Subtype in CollectionField is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in CollectionField is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="13" testNumber="28191"/>
			<description>Entry Subtype with type Name in CollectionField shall have one of values: Desc, CreationDate, S, D, CompressedSize, F, Size, ModDate, N</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "S" || SubtypeNameValue == "D" || SubtypeNameValue == "N" || SubtypeNameValue == "F" || SubtypeNameValue == "Desc" || SubtypeNameValue == "ModDate" || SubtypeNameValue == "CreationDate" || SubtypeNameValue == "Size" || SubtypeNameValue == CompressedSize</test>
			<error>
				<message>Entry Subtype with type Name in CollectionField has incorrect value %2 instead of Desc, CreationDate, S, D, CompressedSize, F, Size, ModDate, N</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28192"/>
			<description>Entry Subtype in CollectionField shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in CollectionField is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28193"/>
			<description>Entry V in CollectionField shall have type Boolean</description>
			<test>containsV == false || VHasTypeBoolean == true</test>
			<error>
				<message>Entry V in CollectionField is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="7" testNumber="28194"/>
			<description>Entry N in CollectionField is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in CollectionField is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28195"/>
			<description>Entry N in CollectionField shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in CollectionField is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="6" testNumber="28196"/>
			<description>Entry Type with type Name in CollectionField shall have value CollectionField</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CollectionField"</test>
			<error>
				<message>Entry Type with type Name in CollectionField has incorrect value %2 instead of CollectionField</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28197"/>
			<description>Entry Type in CollectionField shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CollectionField is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28198"/>
			<description>Entry O in CollectionField shall have type Integer</description>
			<test>containsO == false || OHasTypeInteger == true</test>
			<error>
				<message>Entry O in CollectionField is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="1" testNumber="28627"/>
			<description>XObjectImage shall not contain entries except FFilter, Filter, SMask, GTS_XID, BitsPerComponent, Length, Width, DecodeParms, GTS_Scope, Height, F, Name, FDecodeParms, PtData, Decode, ColorSpace, ImageMask, Metadata, GTS_Env, Alternates, OC, DL, Interpolate, GTS_Encapsulated, ID, Subtype, Mask, SMaskInData, Intent, Measure, OPI, Type, StructParent</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'GTS_XID' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'GTS_Scope' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'GTS_Env' &amp;&amp; elem != 'Alternates' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'GTS_Encapsulated' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Mask' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'StructParent').length == 0</test>
			<error>
				<message>XObjectImage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FFilter' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'SMask' &amp;&amp; elem != 'GTS_XID' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'GTS_Scope' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'PtData' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'GTS_Env' &amp;&amp; elem != 'Alternates' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'GTS_Encapsulated' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Mask' &amp;&amp; elem != 'SMaskInData' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'OPI' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'StructParent').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28628"/>
			<description>Entry FFilter with type Array in XObjectImage shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImage is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="6" testNumber="28629"/>
			<description>Entry FFilter with type Name in XObjectImage shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectImage has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28630"/>
			<description>Entry FFilter in XObjectImage shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in XObjectImage is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="9" testNumber="28631"/>
			<description>Entry FFilter with type Array in XObjectImage shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImage doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28632"/>
			<description>Entry Filter with type Array in XObjectImage shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectImage is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="6" testNumber="28633"/>
			<description>Entry Filter with type Name in XObjectImage shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectImage has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28634"/>
			<description>Entry Filter in XObjectImage shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in XObjectImage is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="9" testNumber="28635"/>
			<description>Entry Filter with type Array in XObjectImage shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectImage doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28636"/>
			<description>Entry SMask with type Stream in XObjectImage shall be object XObjectImageSoftMask</description>
			<test>SMaskHasTypeStream != true || SMask_size == 1</test>
			<error>
				<message>Entry SMask with type Stream in XObjectImage is not object XObjectImageSoftMask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="10" testNumber="28637"/>
			<description>Entry SMask with type Stream in XObjectImage shall be indirect</description>
			<test>SMaskHasTypeStream != true || isSMaskIndirect == true</test>
			<error>
				<message>Entry SMask with type Stream in XObjectImage is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28638"/>
			<description>Entry SMask in XObjectImage shall have type Stream</description>
			<test>containsSMask == false || SMaskHasTypeStream == true</test>
			<error>
				<message>Entry SMask in XObjectImage is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="9" testNumber="28639"/>
			<description>Entry SMask with type Stream in XObjectImage shall correspond special case: fn:Not(fn:IsPresent(@SMaskInData &gt; 0))</description>
			<test>SMaskHasTypeStream != true || ((((SMaskInDataIntegerValue &gt; 0) == true &amp;&amp; containsSMask == true)) != true)</test>
			<error>
				<message>Entry SMask with type Stream in XObjectImage doesn't correspond special case: fn:Not(fn:IsPresent(@SMaskInData &gt; 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28640"/>
			<description>Entry GTS_XID in XObjectImage shall have type String</description>
			<test>containsGTS_XID == false || GTS_XIDHasTypeString == true</test>
			<error>
				<message>Entry GTS_XID in XObjectImage is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="11" testNumber="28641"/>
			<description>Entry BitsPerComponent in XObjectImage is required, when fn:IsRequired(fn:Not(fn:Contains(@Filter , JPXDecode) || (@ImageMask == true)))</description>
			<test>(containsBitsPerComponent == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="15" testNumber="28642"/>
			<description>Entry BitsPerComponent in XObjectImage shall have Integer value 1, if this object corresponds to condition (@Filter == CCITTFaxDecode) || (@Filter == JBIG2Decode) || (@ImageMask == true)</description>
			<test>(((FilterNameValue == "CCITTFaxDecode") || (FilterNameValue == "JBIG2Decode") || (ImageMaskBooleanValue == true)) == false || BitsPerComponentIntegerValue == 1)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage doesn't have value 1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="15" testNumber="28643"/>
			<description>Entry BitsPerComponent in XObjectImage shall have Integer value 8, if this object corresponds to condition (@Filter == RunLengthDecode) || (@Filter == DCTDecode)</description>
			<test>(((FilterNameValue == "RunLengthDecode") || (FilterNameValue == "DCTDecode")) == false || BitsPerComponentIntegerValue == 8)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage doesn't have value 8</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="13" testNumber="28644"/>
			<description>Entry BitsPerComponent with type Integer in XObjectImage shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in XObjectImage has incorrect value %2 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28645"/>
			<description>Entry BitsPerComponent in XObjectImage shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="7" testNumber="28646"/>
			<description>Entry Length in XObjectImage is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28647"/>
			<description>Entry Length in XObjectImage shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="7" testNumber="28648"/>
			<description>Entry Width in XObjectImage is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28649"/>
			<description>Entry Width in XObjectImage shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28650"/>
			<description>Entry DecodeParms with type Array in XObjectImage shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImage is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28651"/>
			<description>Entry DecodeParms with type Dictionary in XObjectImage shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectImage is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28652"/>
			<description>Entry DecodeParms in XObjectImage shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectImage is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="9" testNumber="28653"/>
			<description>Entry DecodeParms with type Array in XObjectImage shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImage doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="6" testNumber="28654"/>
			<description>Entry GTS_Scope with type Name in XObjectImage shall have one of values: SingleUse, Unknown, Record, Stream, File, Global</description>
			<test>GTS_ScopeHasTypeName != true || GTS_ScopeNameValue == "SingleUse" || GTS_ScopeNameValue == "Record" || GTS_ScopeNameValue == "File" || GTS_ScopeNameValue == "Stream" || GTS_ScopeNameValue == "Global" || GTS_ScopeNameValue == "Unknown"</test>
			<error>
				<message>Entry GTS_Scope with type Name in XObjectImage has incorrect value %2 instead of SingleUse, Unknown, Record, Stream, File, Global</message>
				<arguments>
					<argument>keyName</argument>
					<argument>GTS_ScopeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28655"/>
			<description>Entry GTS_Scope in XObjectImage shall have type Name</description>
			<test>containsGTS_Scope == false || GTS_ScopeHasTypeName == true</test>
			<error>
				<message>Entry GTS_Scope in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="7" testNumber="28656"/>
			<description>Entry Height in XObjectImage is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28657"/>
			<description>Entry Height in XObjectImage shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28658"/>
			<description>Entry F with type Dictionary in XObjectImage shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectImage is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28659"/>
			<description>Entry F in XObjectImage shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectImage is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="11" testNumber="28660"/>
			<description>Entry Name in XObjectImage is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28661"/>
			<description>Entry Name in XObjectImage shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28662"/>
			<description>Entry FDecodeParms with type Array in XObjectImage shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImage is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28663"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectImage shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectImage is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28664"/>
			<description>Entry FDecodeParms in XObjectImage shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectImage is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="9" testNumber="28665"/>
			<description>Entry FDecodeParms with type Array in XObjectImage shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImage doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28666"/>
			<description>Entry PtData with type Dictionary in XObjectImage shall be object PointData</description>
			<test>PtDataHasTypeDictionary != true || PtData_size == 1</test>
			<error>
				<message>Entry PtData with type Dictionary in XObjectImage is not object PointData</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28667"/>
			<description>Entry PtData in XObjectImage shall have type Dictionary</description>
			<test>containsPtData == false || PtDataHasTypeDictionary == true</test>
			<error>
				<message>Entry PtData in XObjectImage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28668"/>
			<description>Entry Decode with type Array in XObjectImage shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in XObjectImage is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28669"/>
			<description>Entry Decode in XObjectImage shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in XObjectImage is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28670"/>
			<description>Entry ColorSpace with type Array in XObjectImage shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in XObjectImage is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="11" testNumber="28671"/>
			<description>Entry ColorSpace in XObjectImage is required, when fn:IsRequired(fn:Not(fn:Contains(@Filter , JPXDecode) || (@ImageMask == true)))</description>
			<test>(containsColorSpace == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false)</test>
			<error>
				<message>Entry ColorSpace in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="6" testNumber="28672"/>
			<description>Entry ColorSpace with type Name in XObjectImage shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImage has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28673"/>
			<description>Entry ColorSpace in XObjectImage shall have one of types: Name, Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in XObjectImage is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="9" testNumber="28674"/>
			<description>Entry ColorSpace with type Name in XObjectImage shall correspond special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>ColorSpaceHasTypeName != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsColorSpace == true)) != true)</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImage doesn't correspond special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="9" testNumber="28675"/>
			<description>Entry ColorSpace with type Array in XObjectImage shall correspond special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>ColorSpaceHasTypeArray != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsColorSpace == true)) != true)</test>
			<error>
				<message>Entry ColorSpace with type Array in XObjectImage doesn't correspond special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28676"/>
			<description>Entry ImageMask in XObjectImage shall have type Boolean</description>
			<test>containsImageMask == false || ImageMaskHasTypeBoolean == true</test>
			<error>
				<message>Entry ImageMask in XObjectImage is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="9" testNumber="28677"/>
			<description>Entry ImageMask with type Boolean in XObjectImage shall correspond special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</description>
			<test>ImageMaskHasTypeBoolean != true || (((ImageMaskBooleanValue == true) &amp;&amp; (BitsPerComponentIntegerValue == 1) &amp;&amp; ((containsColorSpace == true)) != true &amp;&amp; ((containsMask == true)) != true) || (ImageMaskBooleanValue == false))</test>
			<error>
				<message>Entry ImageMask with type Boolean in XObjectImage doesn't correspond special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28678"/>
			<description>Entry Metadata with type Stream in XObjectImage shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImage is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="10" testNumber="28679"/>
			<description>Entry Metadata with type Stream in XObjectImage shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImage is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28680"/>
			<description>Entry Metadata in XObjectImage shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectImage is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="11" testNumber="28681"/>
			<description>Entry GTS_Env in XObjectImage is required, when fn:IsRequired((@GTS_Scope == Stream) || (@GTS_Scope == Global))</description>
			<test>(containsGTS_Env == true || ((GTS_ScopeNameValue == "Stream") || (GTS_ScopeNameValue == "Global")) == false)</test>
			<error>
				<message>Entry GTS_Env in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28682"/>
			<description>Entry GTS_Env in XObjectImage shall have type StringText</description>
			<test>containsGTS_Env == false || GTS_EnvHasTypeStringText == true</test>
			<error>
				<message>Entry GTS_Env in XObjectImage is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28683"/>
			<description>Entry Alternates with type Array in XObjectImage shall be object ArrayOfImageAlternates</description>
			<test>AlternatesHasTypeArray != true || Alternates_size == 1</test>
			<error>
				<message>Entry Alternates with type Array in XObjectImage is not object ArrayOfImageAlternates</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28684"/>
			<description>Entry Alternates in XObjectImage shall have type Array</description>
			<test>containsAlternates == false || AlternatesHasTypeArray == true</test>
			<error>
				<message>Entry Alternates in XObjectImage is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28685"/>
			<description>Entry OC with type Dictionary in XObjectImage shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in XObjectImage is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28686"/>
			<description>Entry OC in XObjectImage shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in XObjectImage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28687"/>
			<description>Entry DL in XObjectImage shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="9" testNumber="28688"/>
			<description>Entry DL with type Integer in XObjectImage shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectImage doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28689"/>
			<description>Entry Interpolate in XObjectImage shall have type Boolean</description>
			<test>containsInterpolate == false || InterpolateHasTypeBoolean == true</test>
			<error>
				<message>Entry Interpolate in XObjectImage is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28690"/>
			<description>Entry GTS_Encapsulated in XObjectImage shall have type Boolean</description>
			<test>containsGTS_Encapsulated == false || GTS_EncapsulatedHasTypeBoolean == true</test>
			<error>
				<message>Entry GTS_Encapsulated in XObjectImage is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28691"/>
			<description>Entry ID in XObjectImage shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in XObjectImage is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="7" testNumber="28692"/>
			<description>Entry Subtype in XObjectImage is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="6" testNumber="28693"/>
			<description>Entry Subtype with type Name in XObjectImage shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectImage has incorrect value %2 instead of Image</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28694"/>
			<description>Entry Subtype in XObjectImage shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28695"/>
			<description>Entry Mask with type Array in XObjectImage shall be object ArrayOfIntegersGeneral</description>
			<test>MaskHasTypeArray != true || Mask_size == 1</test>
			<error>
				<message>Entry Mask with type Array in XObjectImage is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28696"/>
			<description>Entry Mask with type Stream in XObjectImage shall be object XObjectImageMask</description>
			<test>MaskHasTypeStream != true || Mask_size == 1</test>
			<error>
				<message>Entry Mask with type Stream in XObjectImage is not object XObjectImageMask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="10" testNumber="28697"/>
			<description>Entry Mask with type Stream in XObjectImage shall be indirect</description>
			<test>MaskHasTypeStream != true || isMaskIndirect == true</test>
			<error>
				<message>Entry Mask with type Stream in XObjectImage is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28698"/>
			<description>Entry Mask in XObjectImage shall have one of types: Array, Stream</description>
			<test>containsMask == false || MaskHasTypeArray == true || MaskHasTypeStream == true</test>
			<error>
				<message>Entry Mask in XObjectImage is not one of types: Array, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="9" testNumber="28699"/>
			<description>Entry Mask with type Array in XObjectImage shall correspond special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>MaskHasTypeArray != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsMask == true)) != true)</test>
			<error>
				<message>Entry Mask with type Array in XObjectImage doesn't correspond special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="9" testNumber="28700"/>
			<description>Entry Mask with type Stream in XObjectImage shall correspond special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>MaskHasTypeStream != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsMask == true)) != true)</test>
			<error>
				<message>Entry Mask with type Stream in XObjectImage doesn't correspond special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="6" testNumber="28701"/>
			<description>Entry SMaskInData with type Integer in XObjectImage shall have one of values: 0, 1, 2</description>
			<test>SMaskInDataHasTypeInteger != true || SMaskInDataIntegerValue == 0 || SMaskInDataIntegerValue == 1 || SMaskInDataIntegerValue == 2</test>
			<error>
				<message>Entry SMaskInData with type Integer in XObjectImage has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SMaskInDataIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28702"/>
			<description>Entry SMaskInData in XObjectImage shall have type Integer</description>
			<test>containsSMaskInData == false || SMaskInDataHasTypeInteger == true</test>
			<error>
				<message>Entry SMaskInData in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28703"/>
			<description>Entry Intent in XObjectImage shall have type Name</description>
			<test>containsIntent == false || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28704"/>
			<description>Entry Measure with type Dictionary in XObjectImage shall be one of objects MeasureRL, MeasureGEO</description>
			<test>MeasureHasTypeDictionary != true || Measure_size == 1</test>
			<error>
				<message>Entry Measure with type Dictionary in XObjectImage is not one of objects MeasureRL, MeasureGEO</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28705"/>
			<description>Entry Measure in XObjectImage shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in XObjectImage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28706"/>
			<description>Entry OPI with type Dictionary in XObjectImage shall be one of objects OPIVersion13, OPIVersion20</description>
			<test>OPIHasTypeDictionary != true || OPI_size == 1</test>
			<error>
				<message>Entry OPI with type Dictionary in XObjectImage is not one of objects OPIVersion13, OPIVersion20</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28707"/>
			<description>Entry OPI in XObjectImage shall have type Dictionary</description>
			<test>containsOPI == false || OPIHasTypeDictionary == true</test>
			<error>
				<message>Entry OPI in XObjectImage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="6" testNumber="28708"/>
			<description>Entry Type with type Name in XObjectImage shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectImage has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28709"/>
			<description>Entry Type in XObjectImage shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage" deferred="true">
			<id specification="ISO_32000_1_7" clause="11" testNumber="28710"/>
			<description>Entry StructParent in XObjectImage is required, when fn:IsRequired(fn:ImageIsStructContentItem())</description>
			<test>(containsStructParent == true || ((imageIsStructContentItem == true &amp;&amp; SubtypeNameValue == "Image")) == false)</test>
			<error>
				<message>Entry StructParent in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28711"/>
			<description>Entry StructParent in XObjectImage shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="1" testNumber="28818"/>
			<description>OptContentUsageApplication shall not contain entries except Event, OCGs, Category</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Event' &amp;&amp; elem != 'OCGs' &amp;&amp; elem != 'Category').length == 0</test>
			<error>
				<message>OptContentUsageApplication contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Event' &amp;&amp; elem != 'OCGs' &amp;&amp; elem != 'Category').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="7" testNumber="28819"/>
			<description>Entry Event in OptContentUsageApplication is required</description>
			<test>containsEvent == true</test>
			<error>
				<message>Entry Event in OptContentUsageApplication is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="6" testNumber="28820"/>
			<description>Entry Event with type Name in OptContentUsageApplication shall have one of values: Print, Export, View</description>
			<test>EventHasTypeName != true || EventNameValue == "View" || EventNameValue == "Print" || EventNameValue == "Export"</test>
			<error>
				<message>Entry Event with type Name in OptContentUsageApplication has incorrect value %2 instead of Print, Export, View</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EventNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28821"/>
			<description>Entry Event in OptContentUsageApplication shall have type Name</description>
			<test>containsEvent == false || EventHasTypeName == true</test>
			<error>
				<message>Entry Event in OptContentUsageApplication is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28822"/>
			<description>Entry OCGs with type Array in OptContentUsageApplication shall be object ArrayOfOCG</description>
			<test>OCGsHasTypeArray != true || OCGs_size == 1</test>
			<error>
				<message>Entry OCGs with type Array in OptContentUsageApplication is not object ArrayOfOCG</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28823"/>
			<description>Entry OCGs in OptContentUsageApplication shall have type Array</description>
			<test>containsOCGs == false || OCGsHasTypeArray == true</test>
			<error>
				<message>Entry OCGs in OptContentUsageApplication is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28824"/>
			<description>Entry Category with type Array in OptContentUsageApplication shall be object ArrayOfNamesGeneral</description>
			<test>CategoryHasTypeArray != true || Category_size == 1</test>
			<error>
				<message>Entry Category with type Array in OptContentUsageApplication is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="7" testNumber="28825"/>
			<description>Entry Category in OptContentUsageApplication is required</description>
			<test>containsCategory == true</test>
			<error>
				<message>Entry Category in OptContentUsageApplication is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsageApplication">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28826"/>
			<description>Entry Category in OptContentUsageApplication shall have type Array</description>
			<test>containsCategory == false || CategoryHasTypeArray == true</test>
			<error>
				<message>Entry Category in OptContentUsageApplication is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaCommandArrayEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28836"/>
			<description>Entry in RichMediaCommandArray shall have one of types: StringText, Boolean, Integer, Number</description>
			<test>HasTypeStringText == true || HasTypeBoolean == true || HasTypeInteger == true || HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in RichMediaCommandArray is not one of types: StringText, Boolean, Integer, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="1" testNumber="28860"/>
			<description>MediaPlayParametersMH shall not contain entries except F, C, V, A, RC, D</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'C' &amp;&amp; elem != 'V' &amp;&amp; elem != 'A' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'D').length == 0</test>
			<error>
				<message>MediaPlayParametersMH contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'C' &amp;&amp; elem != 'V' &amp;&amp; elem != 'A' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'D').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="6" testNumber="28861"/>
			<description>Entry F with type Integer in MediaPlayParametersMH shall have one of values: 0, 1, 2, 3, 4, 5</description>
			<test>FHasTypeInteger != true || FIntegerValue == 0 || FIntegerValue == 1 || FIntegerValue == 2 || FIntegerValue == 3 || FIntegerValue == 4 || FIntegerValue == 5</test>
			<error>
				<message>Entry F with type Integer in MediaPlayParametersMH has incorrect value %2 instead of 0, 1, 2, 3, 4, 5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28862"/>
			<description>Entry F in MediaPlayParametersMH shall have type Integer</description>
			<test>containsF == false || FHasTypeInteger == true</test>
			<error>
				<message>Entry F in MediaPlayParametersMH is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28863"/>
			<description>Entry C in MediaPlayParametersMH shall have type Boolean</description>
			<test>containsC == false || CHasTypeBoolean == true</test>
			<error>
				<message>Entry C in MediaPlayParametersMH is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="14" testNumber="28864"/>
			<description>Entry V with type Integer in MediaPlayParametersMH shall correspond possible value predicate: fn:Eval((@V &gt;= 0) &amp;&amp; (@V &lt;= 100))</description>
			<test>VHasTypeInteger != true || (VIntegerValue &gt;= 0) &amp;&amp; (VIntegerValue &lt;= 100)</test>
			<error>
				<message>Entry V with type Integer in MediaPlayParametersMH doesn't correspond possible value predicate: fn:Eval((@V &gt;= 0) &amp;&amp; (@V &lt;= 100))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28865"/>
			<description>Entry V in MediaPlayParametersMH shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in MediaPlayParametersMH is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28866"/>
			<description>Entry A in MediaPlayParametersMH shall have type Boolean</description>
			<test>containsA == false || AHasTypeBoolean == true</test>
			<error>
				<message>Entry A in MediaPlayParametersMH is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="14" testNumber="28867"/>
			<description>Entry RC with type Number in MediaPlayParametersMH shall correspond possible value predicate: fn:Eval(@RC &gt;= 0.0)</description>
			<test>RCHasTypeNumber != true || RCNumberValue &gt;= 0.0</test>
			<error>
				<message>Entry RC with type Number in MediaPlayParametersMH doesn't correspond possible value predicate: fn:Eval(@RC &gt;= 0.0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28868"/>
			<description>Entry RC in MediaPlayParametersMH shall have type Number</description>
			<test>containsRC == false || RCHasTypeNumber == true</test>
			<error>
				<message>Entry RC in MediaPlayParametersMH is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="17" testNumber="28869"/>
			<description>Entry D with type Dictionary in MediaPlayParametersMH shall be object MediaDuration</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in MediaPlayParametersMH is not object MediaDuration</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParametersMH">
			<id specification="ISO_32000_1_7" clause="8" testNumber="28870"/>
			<description>Entry D in MediaPlayParametersMH shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in MediaPlayParametersMH is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="1" testNumber="29031"/>
			<description>AnnotTrapNetwork shall not contain entries except Contents, Type, Rect, AP, LastModified, OC, AS, M, Version, P, FontFauxing, NM, AnnotStates, Border, C, F, Subtype, StructParent</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Contents' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'P' &amp;&amp; elem != 'FontFauxing' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'AnnotStates' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'StructParent').length == 0</test>
			<error>
				<message>AnnotTrapNetwork contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Contents' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'LastModified' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'P' &amp;&amp; elem != 'FontFauxing' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'AnnotStates' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'StructParent').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29032"/>
			<description>Entry Contents in AnnotTrapNetwork shall have type String</description>
			<test>containsContents == false || ContentsHasTypeString == true</test>
			<error>
				<message>Entry Contents in AnnotTrapNetwork is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29033"/>
			<description>Entry Type with type Name in AnnotTrapNetwork shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotTrapNetwork has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29034"/>
			<description>Entry Type in AnnotTrapNetwork shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotTrapNetwork is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29035"/>
			<description>Entry Rect in AnnotTrapNetwork is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29036"/>
			<description>Entry Rect in AnnotTrapNetwork shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotTrapNetwork is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29037"/>
			<description>Entry AP with type Dictionary in AnnotTrapNetwork shall be object AppearanceTrapNet</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotTrapNetwork is not object AppearanceTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29038"/>
			<description>Entry AP in AnnotTrapNetwork is required</description>
			<test>containsAP == true</test>
			<error>
				<message>Entry AP in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29039"/>
			<description>Entry AP in AnnotTrapNetwork shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotTrapNetwork is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="11" testNumber="29040"/>
			<description>Entry LastModified in AnnotTrapNetwork is required, when fn:IsRequired(fn:Not(fn:IsPresent(Version)) &amp;&amp; fn:Not(fn:IsPresent(AnnotStates)))</description>
			<test>(containsLastModified == true || (((containsVersion == true)) != true &amp;&amp; ((containsAnnotStates == true)) != true) == false)</test>
			<error>
				<message>Entry LastModified in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29041"/>
			<description>Entry LastModified in AnnotTrapNetwork shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in AnnotTrapNetwork is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29042"/>
			<description>Entry OC with type Dictionary in AnnotTrapNetwork shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotTrapNetwork is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29043"/>
			<description>Entry OC in AnnotTrapNetwork shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotTrapNetwork is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29044"/>
			<description>Entry AS in AnnotTrapNetwork is required</description>
			<test>containsAS == true</test>
			<error>
				<message>Entry AS in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29045"/>
			<description>Entry AS in AnnotTrapNetwork shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotTrapNetwork is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29046"/>
			<description>Entry M in AnnotTrapNetwork shall have one of types: Date, String</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeString == true</test>
			<error>
				<message>Entry M in AnnotTrapNetwork is not one of types: Date, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29047"/>
			<description>Entry Version with type Array in AnnotTrapNetwork shall be object ArrayOfTrapNetVersionObjects</description>
			<test>VersionHasTypeArray != true || Version_size == 1</test>
			<error>
				<message>Entry Version with type Array in AnnotTrapNetwork is not object ArrayOfTrapNetVersionObjects</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="11" testNumber="29048"/>
			<description>Entry Version in AnnotTrapNetwork is required, when fn:IsRequired(fn:IsPresent(AnnotStates) &amp;&amp; fn:Not(fn:IsPresent(LastModified)))</description>
			<test>(containsVersion == true || ((containsAnnotStates == true) &amp;&amp; ((containsLastModified == true)) != true) == false)</test>
			<error>
				<message>Entry Version in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29049"/>
			<description>Entry Version in AnnotTrapNetwork shall have type Array</description>
			<test>containsVersion == false || VersionHasTypeArray == true</test>
			<error>
				<message>Entry Version in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29050"/>
			<description>Entry P with type Dictionary in AnnotTrapNetwork shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotTrapNetwork is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="10" testNumber="29051"/>
			<description>Entry P with type Dictionary in AnnotTrapNetwork shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotTrapNetwork is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29052"/>
			<description>Entry P in AnnotTrapNetwork shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotTrapNetwork is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29053"/>
			<description>Entry FontFauxing with type Array in AnnotTrapNetwork shall be object ArrayOfFonts</description>
			<test>FontFauxingHasTypeArray != true || FontFauxing_size == 1</test>
			<error>
				<message>Entry FontFauxing with type Array in AnnotTrapNetwork is not object ArrayOfFonts</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29054"/>
			<description>Entry FontFauxing in AnnotTrapNetwork shall have type Array</description>
			<test>containsFontFauxing == false || FontFauxingHasTypeArray == true</test>
			<error>
				<message>Entry FontFauxing in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29055"/>
			<description>Entry NM in AnnotTrapNetwork shall have type String</description>
			<test>containsNM == false || NMHasTypeString == true</test>
			<error>
				<message>Entry NM in AnnotTrapNetwork is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29056"/>
			<description>Entry AnnotStates with type Array in AnnotTrapNetwork shall be object ArrayOfAnnotStates</description>
			<test>AnnotStatesHasTypeArray != true || AnnotStates_size == 1</test>
			<error>
				<message>Entry AnnotStates with type Array in AnnotTrapNetwork is not object ArrayOfAnnotStates</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="11" testNumber="29057"/>
			<description>Entry AnnotStates in AnnotTrapNetwork is required, when fn:IsRequired(fn:IsPresent(Version) &amp;&amp; fn:Not(fn:IsPresent(LastModified)))</description>
			<test>(containsAnnotStates == true || ((containsVersion == true) &amp;&amp; ((containsLastModified == true)) != true) == false)</test>
			<error>
				<message>Entry AnnotStates in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29058"/>
			<description>Entry AnnotStates in AnnotTrapNetwork shall have type Array</description>
			<test>containsAnnotStates == false || AnnotStatesHasTypeArray == true</test>
			<error>
				<message>Entry AnnotStates in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29059"/>
			<description>Entry Border with type Array in AnnotTrapNetwork shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotTrapNetwork is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29060"/>
			<description>Entry Border in AnnotTrapNetwork shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29061"/>
			<description>Entry C with type Array in AnnotTrapNetwork shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotTrapNetwork is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29062"/>
			<description>Entry C in AnnotTrapNetwork shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotTrapNetwork is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29063"/>
			<description>Entry F in AnnotTrapNetwork is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29064"/>
			<description>Entry F in AnnotTrapNetwork shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotTrapNetwork is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="9" testNumber="29065"/>
			<description>Entry F with type Bitmask in AnnotTrapNetwork shall correspond special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitSet(3) &amp;&amp; fn:BitsClear(4 , 6) &amp;&amp; fn:BitSet(7) &amp;&amp; fn:BitsClear(8 , 32))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 0 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 1 &amp; 1) == 0) &amp;&amp; (FBitmaskValue &gt;&gt; 2 &amp; 1) == 1 &amp;&amp; ((FBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 5 &amp; 1) == 0) &amp;&amp; (FBitmaskValue &gt;&gt; 6 &amp; 1) == 1 &amp;&amp; ((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotTrapNetwork doesn't correspond special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitSet(3) &amp;&amp; fn:BitsClear(4 , 6) &amp;&amp; fn:BitSet(7) &amp;&amp; fn:BitsClear(8 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29066"/>
			<description>Entry Subtype in AnnotTrapNetwork is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotTrapNetwork is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29067"/>
			<description>Entry Subtype with type Name in AnnotTrapNetwork shall have value TrapNet</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "TrapNet"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotTrapNetwork has incorrect value %2 instead of TrapNet</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29068"/>
			<description>Entry Subtype in AnnotTrapNetwork shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotTrapNetwork is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotTrapNetwork">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29069"/>
			<description>Entry StructParent in AnnotTrapNetwork shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotTrapNetwork is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExtensions">
			<id specification="ISO_32000_1_7" clause="16" testNumber="29120"/>
			<description>If entry Type with type Name in Extensions corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>TypeHasTypeName != true || (isTypeIndirect == false)</test>
			<error>
				<message>Entry Type with type Name in Extensions is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExtensions">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29121"/>
			<description>Entry Type with type Name in Extensions shall have value Extensions</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Extensions"</test>
			<error>
				<message>Entry Type with type Name in Extensions has incorrect value %2 instead of Extensions</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExtensions">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29122"/>
			<description>Entry Type in Extensions shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Extensions is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="1" testNumber="29126"/>
			<description>AnnotRedact shall not contain entries except RO, ExData, Q, CreationDate, Popup, Subtype, Subj, IRT, Repeat, RT, P, AP, NM, Border, M, CA, OverlayText, OC, IT, Type, C, DA, QuadPoints, T, IC, Contents, F, Rect, RC, StructParent, AS</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'RO' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'Repeat' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'M' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'OverlayText' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'C' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'T' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'AS').length == 0</test>
			<error>
				<message>AnnotRedact contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'RO' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'Repeat' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'P' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'M' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'OverlayText' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'C' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'T' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'AS').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29127"/>
			<description>Entry RO with type Stream in AnnotRedact shall be object XObjectFormType1</description>
			<test>ROHasTypeStream != true || RO_size == 1</test>
			<error>
				<message>Entry RO with type Stream in AnnotRedact is not object XObjectFormType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="10" testNumber="29128"/>
			<description>Entry RO with type Stream in AnnotRedact shall be indirect</description>
			<test>ROHasTypeStream != true || isROIndirect == true</test>
			<error>
				<message>Entry RO with type Stream in AnnotRedact is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29129"/>
			<description>Entry RO in AnnotRedact shall have type Stream</description>
			<test>containsRO == false || ROHasTypeStream == true</test>
			<error>
				<message>Entry RO in AnnotRedact is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29130"/>
			<description>Entry ExData with type Dictionary in AnnotRedact shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotRedact is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29131"/>
			<description>Entry ExData in AnnotRedact shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotRedact is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29132"/>
			<description>Entry Q with type Integer in AnnotRedact shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in AnnotRedact has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29133"/>
			<description>Entry Q in AnnotRedact shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in AnnotRedact is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29134"/>
			<description>Entry CreationDate in AnnotRedact shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotRedact is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29135"/>
			<description>Entry Popup with type Dictionary in AnnotRedact shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotRedact is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="10" testNumber="29136"/>
			<description>Entry Popup with type Dictionary in AnnotRedact shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotRedact is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29137"/>
			<description>Entry Popup in AnnotRedact shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotRedact is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29138"/>
			<description>Entry Subtype in AnnotRedact is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotRedact is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29139"/>
			<description>Entry Subtype with type Name in AnnotRedact shall have value Redact</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Redact"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotRedact has incorrect value %2 instead of Redact</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29140"/>
			<description>Entry Subtype in AnnotRedact shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotRedact is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29141"/>
			<description>Entry Subj in AnnotRedact shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotRedact is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29142"/>
			<description>Entry IRT with type Dictionary in AnnotRedact shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotRedact is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="11" testNumber="29143"/>
			<description>Entry IRT in AnnotRedact is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotRedact is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29144"/>
			<description>Entry IRT in AnnotRedact shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotRedact is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29145"/>
			<description>Entry Repeat in AnnotRedact shall have type Boolean</description>
			<test>containsRepeat == false || RepeatHasTypeBoolean == true</test>
			<error>
				<message>Entry Repeat in AnnotRedact is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29146"/>
			<description>Entry RT with type Name in AnnotRedact shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotRedact has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29147"/>
			<description>Entry RT in AnnotRedact shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotRedact is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29148"/>
			<description>Entry P with type Dictionary in AnnotRedact shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotRedact is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="10" testNumber="29149"/>
			<description>Entry P with type Dictionary in AnnotRedact shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotRedact is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29150"/>
			<description>Entry P in AnnotRedact shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotRedact is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29151"/>
			<description>Entry AP with type Dictionary in AnnotRedact shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotRedact is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="11" testNumber="29152"/>
			<description>Entry AP in AnnotRedact is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotRedact is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29153"/>
			<description>Entry AP in AnnotRedact shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotRedact is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29154"/>
			<description>Entry NM in AnnotRedact shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotRedact is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29155"/>
			<description>Entry Border with type Array in AnnotRedact shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotRedact is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29156"/>
			<description>Entry Border in AnnotRedact shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotRedact is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29157"/>
			<description>Entry M in AnnotRedact shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotRedact is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="14" testNumber="29158"/>
			<description>Entry CA with type Number in AnnotRedact shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotRedact doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29159"/>
			<description>Entry CA in AnnotRedact shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotRedact is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29160"/>
			<description>Entry OverlayText in AnnotRedact shall have type StringText</description>
			<test>containsOverlayText == false || OverlayTextHasTypeStringText == true</test>
			<error>
				<message>Entry OverlayText in AnnotRedact is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29161"/>
			<description>Entry OC with type Dictionary in AnnotRedact shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotRedact is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29162"/>
			<description>Entry OC in AnnotRedact shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotRedact is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29163"/>
			<description>Entry IT in AnnotRedact shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotRedact is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29164"/>
			<description>Entry Type with type Name in AnnotRedact shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotRedact has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29165"/>
			<description>Entry Type in AnnotRedact shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotRedact is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29166"/>
			<description>Entry C with type Array in AnnotRedact shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotRedact is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29167"/>
			<description>Entry C in AnnotRedact shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotRedact is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29168"/>
			<description>Entry DA in AnnotRedact shall have type StringByte</description>
			<test>containsDA == false || DAHasTypeStringByte == true</test>
			<error>
				<message>Entry DA in AnnotRedact is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29169"/>
			<description>Entry QuadPoints with type Array in AnnotRedact shall be object ArrayOfQuadPoints</description>
			<test>QuadPointsHasTypeArray != true || QuadPoints_size == 1</test>
			<error>
				<message>Entry QuadPoints with type Array in AnnotRedact is not object ArrayOfQuadPoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29170"/>
			<description>Entry QuadPoints in AnnotRedact shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotRedact is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29171"/>
			<description>Entry T in AnnotRedact shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotRedact is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29172"/>
			<description>Entry IC with type Array in AnnotRedact shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>ICHasTypeArray != true || IC_size == 1</test>
			<error>
				<message>Entry IC with type Array in AnnotRedact is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29173"/>
			<description>Entry IC in AnnotRedact shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotRedact is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29174"/>
			<description>Entry Contents in AnnotRedact shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotRedact is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29175"/>
			<description>Entry F in AnnotRedact shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotRedact is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="9" testNumber="29176"/>
			<description>Entry F with type Bitmask in AnnotRedact shall correspond special case: fn:Eval(fn:BitsClear(11 , 32))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotRedact doesn't correspond special case: fn:Eval(fn:BitsClear(11 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29177"/>
			<description>Entry Rect in AnnotRedact is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotRedact is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29178"/>
			<description>Entry Rect in AnnotRedact shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotRedact is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29179"/>
			<description>Entry RC with type Stream in AnnotRedact shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotRedact is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="10" testNumber="29180"/>
			<description>Entry RC with type Stream in AnnotRedact shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotRedact is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29181"/>
			<description>Entry RC in AnnotRedact shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotRedact is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29182"/>
			<description>Entry StructParent in AnnotRedact shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotRedact is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="11" testNumber="29183"/>
			<description>Entry AS in AnnotRedact is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotRedact is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRedact">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29184"/>
			<description>Entry AS in AnnotRedact shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotRedact is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARelatedFilesArray">
			<id specification="ISO_32000_1_7" clause="3" testNumber="29257"/>
			<description>RelatedFilesArray shall contain 2*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 0</test>
			<error>
				<message>RelatedFilesArray contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29277"/>
			<description>Entry with type Dictionary in ArrayOfBeads shall be one of objects BeadFirst, Bead</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfBeads is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="29278"/>
			<description>Entry with type Dictionary in ArrayOfBeads shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfBeads is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29279"/>
			<description>Entry in ArrayOfBeads shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfBeads is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="1" testNumber="29575"/>
			<description>XObjectFormPSpassthrough shall not contain entries except Level1, FDecodeParms, DecodeParms, BBox, Matrix, FormType, Subtype2, Subtype, Filter, FFilter, Length, Type, PS, F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Level1' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Subtype2' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'F').length == 0</test>
			<error>
				<message>XObjectFormPSpassthrough contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Level1' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Subtype2' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29576"/>
			<description>Entry Level1 with type Stream in XObjectFormPSpassthrough shall be object Stream</description>
			<test>Level1HasTypeStream != true || Level1_size == 1</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPSpassthrough is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29577"/>
			<description>Entry Level1 in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsLevel1 == false</test>
			<error>
				<message>Entry Level1 in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="10" testNumber="29578"/>
			<description>Entry Level1 with type Stream in XObjectFormPSpassthrough shall be indirect</description>
			<test>Level1HasTypeStream != true || isLevel1Indirect == true</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPSpassthrough is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29579"/>
			<description>Entry Level1 in XObjectFormPSpassthrough shall have type Stream</description>
			<test>containsLevel1 == false || Level1HasTypeStream == true</test>
			<error>
				<message>Entry Level1 in XObjectFormPSpassthrough is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29580"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPSpassthrough shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPSpassthrough is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29581"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectFormPSpassthrough shall be one of objects FilterLZWDecode, FilterFlateDecode</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectFormPSpassthrough is not one of objects FilterLZWDecode, FilterFlateDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29582"/>
			<description>Entry FDecodeParms in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsFDecodeParms == false</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29583"/>
			<description>Entry FDecodeParms in XObjectFormPSpassthrough shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectFormPSpassthrough is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="9" testNumber="29584"/>
			<description>Entry FDecodeParms with type Array in XObjectFormPSpassthrough shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectFormPSpassthrough doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29585"/>
			<description>Entry DecodeParms with type Array in XObjectFormPSpassthrough shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPSpassthrough is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29586"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormPSpassthrough shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormPSpassthrough is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29587"/>
			<description>Entry DecodeParms in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsDecodeParms == false</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29588"/>
			<description>Entry DecodeParms in XObjectFormPSpassthrough shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPSpassthrough is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="9" testNumber="29589"/>
			<description>Entry DecodeParms with type Array in XObjectFormPSpassthrough shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPSpassthrough doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29590"/>
			<description>Entry BBox in XObjectFormPSpassthrough is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29591"/>
			<description>Entry BBox in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsBBox == false</test>
			<error>
				<message>Entry BBox in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29592"/>
			<description>Entry BBox in XObjectFormPSpassthrough shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormPSpassthrough is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="11" testNumber="29593"/>
			<description>Entry Matrix in XObjectFormPSpassthrough is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsMatrix == true || (false) == false)</test>
			<error>
				<message>Entry Matrix in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29594"/>
			<description>Entry Matrix in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsMatrix == false</test>
			<error>
				<message>Entry Matrix in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29595"/>
			<description>Entry Matrix in XObjectFormPSpassthrough shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormPSpassthrough is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="11" testNumber="29596"/>
			<description>Entry FormType in XObjectFormPSpassthrough is required, when fn:IsRequired(fn:BeforeVersion(1.3))</description>
			<test>(containsFormType == true || (false) == false)</test>
			<error>
				<message>Entry FormType in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29597"/>
			<description>Entry FormType in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsFormType == false</test>
			<error>
				<message>Entry FormType in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29598"/>
			<description>Entry FormType with type Integer in XObjectFormPSpassthrough shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormPSpassthrough has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29599"/>
			<description>Entry FormType in XObjectFormPSpassthrough shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormPSpassthrough is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29600"/>
			<description>Entry Subtype2 in XObjectFormPSpassthrough is required</description>
			<test>containsSubtype2 == true</test>
			<error>
				<message>Entry Subtype2 in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29601"/>
			<description>Entry Subtype2 in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsSubtype2 == false</test>
			<error>
				<message>Entry Subtype2 in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29602"/>
			<description>Entry Subtype2 with type Name in XObjectFormPSpassthrough shall have value PS</description>
			<test>Subtype2HasTypeName != true || Subtype2NameValue == "PS"</test>
			<error>
				<message>Entry Subtype2 with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of PS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>Subtype2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29603"/>
			<description>Entry Subtype2 in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsSubtype2 == false || Subtype2HasTypeName == true</test>
			<error>
				<message>Entry Subtype2 in XObjectFormPSpassthrough is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29604"/>
			<description>Entry Subtype in XObjectFormPSpassthrough is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29605"/>
			<description>Entry Subtype in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsSubtype == false</test>
			<error>
				<message>Entry Subtype in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29606"/>
			<description>Entry Subtype with type Name in XObjectFormPSpassthrough shall have value PS</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PS"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of PS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29607"/>
			<description>Entry Subtype in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPSpassthrough is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29608"/>
			<description>Entry Filter with type Array in XObjectFormPSpassthrough shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPSpassthrough is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29609"/>
			<description>Entry Filter in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsFilter == false</test>
			<error>
				<message>Entry Filter in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29610"/>
			<description>Entry Filter with type Name in XObjectFormPSpassthrough shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29611"/>
			<description>Entry Filter in XObjectFormPSpassthrough shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in XObjectFormPSpassthrough is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="9" testNumber="29612"/>
			<description>Entry Filter with type Array in XObjectFormPSpassthrough shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPSpassthrough doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29613"/>
			<description>Entry FFilter with type Array in XObjectFormPSpassthrough shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPSpassthrough is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29614"/>
			<description>Entry FFilter in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsFFilter == false</test>
			<error>
				<message>Entry FFilter in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29615"/>
			<description>Entry FFilter with type Name in XObjectFormPSpassthrough shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29616"/>
			<description>Entry FFilter in XObjectFormPSpassthrough shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in XObjectFormPSpassthrough is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="9" testNumber="29617"/>
			<description>Entry FFilter with type Array in XObjectFormPSpassthrough shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectFormPSpassthrough doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29618"/>
			<description>Entry Length in XObjectFormPSpassthrough is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29619"/>
			<description>Entry Length in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsLength == false</test>
			<error>
				<message>Entry Length in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29620"/>
			<description>Entry Length in XObjectFormPSpassthrough shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormPSpassthrough is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29621"/>
			<description>Entry Type in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsType == false</test>
			<error>
				<message>Entry Type in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29622"/>
			<description>Entry Type with type Name in XObjectFormPSpassthrough shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29623"/>
			<description>Entry Type in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormPSpassthrough is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29624"/>
			<description>Entry PS with type Stream in XObjectFormPSpassthrough shall be object Stream</description>
			<test>PSHasTypeStream != true || PS_size == 1</test>
			<error>
				<message>Entry PS with type Stream in XObjectFormPSpassthrough is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29625"/>
			<description>Entry PS in XObjectFormPSpassthrough is required</description>
			<test>containsPS == true</test>
			<error>
				<message>Entry PS in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29626"/>
			<description>Entry PS in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsPS == false</test>
			<error>
				<message>Entry PS in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="10" testNumber="29627"/>
			<description>Entry PS with type Stream in XObjectFormPSpassthrough shall be indirect</description>
			<test>PSHasTypeStream != true || isPSIndirect == true</test>
			<error>
				<message>Entry PS with type Stream in XObjectFormPSpassthrough is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29628"/>
			<description>Entry PS in XObjectFormPSpassthrough shall have type Stream</description>
			<test>containsPS == false || PSHasTypeStream == true</test>
			<error>
				<message>Entry PS in XObjectFormPSpassthrough is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29629"/>
			<description>Entry F with type Dictionary in XObjectFormPSpassthrough shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormPSpassthrough is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="5" testNumber="29630"/>
			<description>Entry F in XObjectFormPSpassthrough is deprecated since PDF 1.3</description>
			<test>containsF == false</test>
			<error>
				<message>Entry F in XObjectFormPSpassthrough is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29631"/>
			<description>Entry F in XObjectFormPSpassthrough shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectFormPSpassthrough is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="1" testNumber="29763"/>
			<description>ObjectStream shall not contain entries except First, FDecodeParms, Filter, FFilter, Extends, F, Length, DL, N, Type, DecodeParms</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'First' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Extends' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DecodeParms').length == 0</test>
			<error>
				<message>ObjectStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'First' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Extends' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'DecodeParms').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29764"/>
			<description>Entry First in ObjectStream is required</description>
			<test>containsFirst == true</test>
			<error>
				<message>Entry First in ObjectStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="14" testNumber="29765"/>
			<description>Entry First with type Integer in ObjectStream shall correspond possible value predicate: fn:Eval(@First &gt;= 0)</description>
			<test>FirstHasTypeInteger != true || FirstIntegerValue &gt;= 0</test>
			<error>
				<message>Entry First with type Integer in ObjectStream doesn't correspond possible value predicate: fn:Eval(@First &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29766"/>
			<description>Entry First in ObjectStream shall have type Integer</description>
			<test>containsFirst == false || FirstHasTypeInteger == true</test>
			<error>
				<message>Entry First in ObjectStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29767"/>
			<description>Entry FDecodeParms with type Array in ObjectStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in ObjectStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29768"/>
			<description>Entry FDecodeParms with type Dictionary in ObjectStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in ObjectStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29769"/>
			<description>Entry FDecodeParms in ObjectStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in ObjectStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="29770"/>
			<description>Entry FDecodeParms with type Array in ObjectStream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in ObjectStream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29771"/>
			<description>Entry Filter with type Array in ObjectStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in ObjectStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29772"/>
			<description>Entry Filter with type Name in ObjectStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in ObjectStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29773"/>
			<description>Entry Filter in ObjectStream shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in ObjectStream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="29774"/>
			<description>Entry Filter with type Array in ObjectStream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in ObjectStream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29775"/>
			<description>Entry FFilter with type Array in ObjectStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in ObjectStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29776"/>
			<description>Entry FFilter with type Name in ObjectStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in ObjectStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29777"/>
			<description>Entry FFilter in ObjectStream shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in ObjectStream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="29778"/>
			<description>Entry FFilter with type Array in ObjectStream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in ObjectStream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29779"/>
			<description>Entry Extends with type Stream in ObjectStream shall be object ObjectStream</description>
			<test>ExtendsHasTypeStream != true || Extends_size == 1</test>
			<error>
				<message>Entry Extends with type Stream in ObjectStream is not object ObjectStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="10" testNumber="29780"/>
			<description>Entry Extends with type Stream in ObjectStream shall be indirect</description>
			<test>ExtendsHasTypeStream != true || isExtendsIndirect == true</test>
			<error>
				<message>Entry Extends with type Stream in ObjectStream is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29781"/>
			<description>Entry Extends in ObjectStream shall have type Stream</description>
			<test>containsExtends == false || ExtendsHasTypeStream == true</test>
			<error>
				<message>Entry Extends in ObjectStream is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="29782"/>
			<description>Entry Extends with type Stream in ObjectStream shall correspond special case: fn:NoCycle()</description>
			<test>ExtendsHasTypeStream != true || ((ExtendshasCycle == false))</test>
			<error>
				<message>Entry Extends with type Stream in ObjectStream doesn't correspond special case: fn:NoCycle()</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29783"/>
			<description>Entry F with type Dictionary in ObjectStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ObjectStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29784"/>
			<description>Entry F in ObjectStream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ObjectStream is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29785"/>
			<description>Entry Length in ObjectStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in ObjectStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29786"/>
			<description>Entry Length in ObjectStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in ObjectStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="14" testNumber="29787"/>
			<description>Entry DL with type Integer in ObjectStream shall correspond possible value predicate: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || DLIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DL with type Integer in ObjectStream doesn't correspond possible value predicate: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29788"/>
			<description>Entry DL in ObjectStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in ObjectStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="29789"/>
			<description>Entry DL with type Integer in ObjectStream shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in ObjectStream doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29790"/>
			<description>Entry N in ObjectStream is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in ObjectStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="14" testNumber="29791"/>
			<description>Entry N with type Integer in ObjectStream shall correspond possible value predicate: fn:Eval(@N &gt;= 0)</description>
			<test>NHasTypeInteger != true || NIntegerValue &gt;= 0</test>
			<error>
				<message>Entry N with type Integer in ObjectStream doesn't correspond possible value predicate: fn:Eval(@N &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29792"/>
			<description>Entry N in ObjectStream shall have type Integer</description>
			<test>containsN == false || NHasTypeInteger == true</test>
			<error>
				<message>Entry N in ObjectStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="29793"/>
			<description>Entry Type in ObjectStream is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ObjectStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="29794"/>
			<description>Entry Type with type Name in ObjectStream shall have value ObjStm</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ObjStm"</test>
			<error>
				<message>Entry Type with type Name in ObjectStream has incorrect value %2 instead of ObjStm</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29795"/>
			<description>Entry Type in ObjectStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ObjectStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29796"/>
			<description>Entry DecodeParms with type Array in ObjectStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in ObjectStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="29797"/>
			<description>Entry DecodeParms with type Dictionary in ObjectStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in ObjectStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="29798"/>
			<description>Entry DecodeParms in ObjectStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in ObjectStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AObjectStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="29799"/>
			<description>Entry DecodeParms with type Array in ObjectStream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in ObjectStream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="30002"/>
			<description>OPIVersion13Dict shall not contain entries except ColorType, Position, ImageType, Tags, Comments, CropRect, F, ID, Resolution, Tint, Color, CropFixed, Overprint, Transparency, Version, Size, Type, GrayMap</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorType' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'ImageType' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Comments' &amp;&amp; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Resolution' &amp;&amp; elem != 'Tint' &amp;&amp; elem != 'Color' &amp;&amp; elem != 'CropFixed' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Transparency' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'GrayMap').length == 0</test>
			<error>
				<message>OPIVersion13Dict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorType' &amp;&amp; elem != 'Position' &amp;&amp; elem != 'ImageType' &amp;&amp; elem != 'Tags' &amp;&amp; elem != 'Comments' &amp;&amp; elem != 'CropRect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Resolution' &amp;&amp; elem != 'Tint' &amp;&amp; elem != 'Color' &amp;&amp; elem != 'CropFixed' &amp;&amp; elem != 'Overprint' &amp;&amp; elem != 'Transparency' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'GrayMap').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30003"/>
			<description>Entry ColorType in OPIVersion13Dict shall have type Name</description>
			<test>containsColorType == false || ColorTypeHasTypeName == true</test>
			<error>
				<message>Entry ColorType in OPIVersion13Dict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30004"/>
			<description>Entry Position with type Array in OPIVersion13Dict shall be object ArrayOf_8Numbers</description>
			<test>PositionHasTypeArray != true || Position_size == 1</test>
			<error>
				<message>Entry Position with type Array in OPIVersion13Dict is not object ArrayOf_8Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30005"/>
			<description>Entry Position in OPIVersion13Dict shall have type Array</description>
			<test>containsPosition == false || PositionHasTypeArray == true</test>
			<error>
				<message>Entry Position in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30006"/>
			<description>Entry ImageType with type Array in OPIVersion13Dict shall be object ArrayOf_2Integers</description>
			<test>ImageTypeHasTypeArray != true || ImageType_size == 1</test>
			<error>
				<message>Entry ImageType with type Array in OPIVersion13Dict is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30007"/>
			<description>Entry ImageType in OPIVersion13Dict shall have type Array</description>
			<test>containsImageType == false || ImageTypeHasTypeArray == true</test>
			<error>
				<message>Entry ImageType in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30008"/>
			<description>Entry Tags with type Array in OPIVersion13Dict shall be object ArrayOfTags</description>
			<test>TagsHasTypeArray != true || Tags_size == 1</test>
			<error>
				<message>Entry Tags with type Array in OPIVersion13Dict is not object ArrayOfTags</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30009"/>
			<description>Entry Tags in OPIVersion13Dict shall have type Array</description>
			<test>containsTags == false || TagsHasTypeArray == true</test>
			<error>
				<message>Entry Tags in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30010"/>
			<description>Entry Comments in OPIVersion13Dict shall have type StringText</description>
			<test>containsComments == false || CommentsHasTypeStringText == true</test>
			<error>
				<message>Entry Comments in OPIVersion13Dict is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30011"/>
			<description>Entry CropRect in OPIVersion13Dict shall have type Rectangle</description>
			<test>containsCropRect == false || CropRectHasTypeRectangle == true</test>
			<error>
				<message>Entry CropRect in OPIVersion13Dict is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30012"/>
			<description>Entry F with type Dictionary in OPIVersion13Dict shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in OPIVersion13Dict is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30013"/>
			<description>Entry F in OPIVersion13Dict is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in OPIVersion13Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30014"/>
			<description>Entry F in OPIVersion13Dict shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in OPIVersion13Dict is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30015"/>
			<description>Entry ID in OPIVersion13Dict shall have type StringByte</description>
			<test>containsID == false || entryIDHasTypeStringByte == true</test>
			<error>
				<message>Entry ID in OPIVersion13Dict is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30016"/>
			<description>Entry Resolution with type Array in OPIVersion13Dict shall be object ArrayOf_2Numbers</description>
			<test>ResolutionHasTypeArray != true || Resolution_size == 1</test>
			<error>
				<message>Entry Resolution with type Array in OPIVersion13Dict is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30017"/>
			<description>Entry Resolution in OPIVersion13Dict shall have type Array</description>
			<test>containsResolution == false || ResolutionHasTypeArray == true</test>
			<error>
				<message>Entry Resolution in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30018"/>
			<description>Entry Tint in OPIVersion13Dict shall have type Number</description>
			<test>containsTint == false || TintHasTypeNumber == true</test>
			<error>
				<message>Entry Tint in OPIVersion13Dict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30019"/>
			<description>Entry Color with type Array in OPIVersion13Dict shall be object ArrayOfOPI13Color</description>
			<test>ColorHasTypeArray != true || Color_size == 1</test>
			<error>
				<message>Entry Color with type Array in OPIVersion13Dict is not object ArrayOfOPI13Color</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30020"/>
			<description>Entry Color in OPIVersion13Dict shall have type Array</description>
			<test>containsColor == false || ColorHasTypeArray == true</test>
			<error>
				<message>Entry Color in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30021"/>
			<description>Entry CropFixed with type Array in OPIVersion13Dict shall be object ArrayOf_4Numbers</description>
			<test>CropFixedHasTypeArray != true || CropFixed_size == 1</test>
			<error>
				<message>Entry CropFixed with type Array in OPIVersion13Dict is not object ArrayOf_4Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30022"/>
			<description>Entry CropFixed in OPIVersion13Dict shall have type Array</description>
			<test>containsCropFixed == false || CropFixedHasTypeArray == true</test>
			<error>
				<message>Entry CropFixed in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30023"/>
			<description>Entry Overprint in OPIVersion13Dict shall have type Boolean</description>
			<test>containsOverprint == false || OverprintHasTypeBoolean == true</test>
			<error>
				<message>Entry Overprint in OPIVersion13Dict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30024"/>
			<description>Entry Transparency in OPIVersion13Dict shall have type Boolean</description>
			<test>containsTransparency == false || TransparencyHasTypeBoolean == true</test>
			<error>
				<message>Entry Transparency in OPIVersion13Dict is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30025"/>
			<description>Entry Version in OPIVersion13Dict is required</description>
			<test>containsVersion == true</test>
			<error>
				<message>Entry Version in OPIVersion13Dict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30026"/>
			<description>Entry Version with type Number in OPIVersion13Dict shall have value 1.3</description>
			<test>VersionHasTypeNumber != true || VersionNumberValue == 1.3</test>
			<error>
				<message>Entry Version with type Number in OPIVersion13Dict has incorrect value %2 instead of 1.3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VersionNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30027"/>
			<description>Entry Version in OPIVersion13Dict shall have type Number</description>
			<test>containsVersion == false || VersionHasTypeNumber == true</test>
			<error>
				<message>Entry Version in OPIVersion13Dict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30028"/>
			<description>Entry Size with type Array in OPIVersion13Dict shall be object ArrayOf_2Integers</description>
			<test>SizeHasTypeArray != true || Size_size == 1</test>
			<error>
				<message>Entry Size with type Array in OPIVersion13Dict is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30029"/>
			<description>Entry Size in OPIVersion13Dict shall have type Array</description>
			<test>containsSize == false || SizeHasTypeArray == true</test>
			<error>
				<message>Entry Size in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30030"/>
			<description>Entry Type with type Name in OPIVersion13Dict shall have value OPI</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OPI"</test>
			<error>
				<message>Entry Type with type Name in OPIVersion13Dict has incorrect value %2 instead of OPI</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30031"/>
			<description>Entry Type in OPIVersion13Dict shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OPIVersion13Dict is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30032"/>
			<description>Entry GrayMap with type Array in OPIVersion13Dict shall be object ArrayOfIntegersGeneral</description>
			<test>GrayMapHasTypeArray != true || GrayMap_size == 1</test>
			<error>
				<message>Entry GrayMap with type Array in OPIVersion13Dict is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30033"/>
			<description>Entry GrayMap in OPIVersion13Dict shall have type Array</description>
			<test>containsGrayMap == false || GrayMapHasTypeArray == true</test>
			<error>
				<message>Entry GrayMap in OPIVersion13Dict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOPIVersion13Dict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="30034"/>
			<description>Entry GrayMap with type Array in OPIVersion13Dict shall correspond special case: fn:Eval((fn:ArrayLength(GrayMap) mod 2) == 0)</description>
			<test>GrayMapHasTypeArray != true || ((GrayMapArraySize % 2) == 0)</test>
			<error>
				<message>Entry GrayMap with type Array in OPIVersion13Dict doesn't correspond special case: fn:Eval((fn:ArrayLength(GrayMap) mod 2) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapRegionsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30094"/>
			<description>Entry with type Dictionary in ArrayOfTrapRegions shall be object TrapRegion</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfTrapRegions is not object TrapRegion</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapRegionsEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="30095"/>
			<description>Entry with type Dictionary in ArrayOfTrapRegions shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfTrapRegions is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapRegionsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30096"/>
			<description>Entry in ArrayOfTrapRegions shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfTrapRegions is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_7" clause="1" testNumber="30114"/>
			<description>MediaScreenParameters shall not contain entries except Type, BE, MH</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'MH').length == 0</test>
			<error>
				<message>MediaScreenParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'MH').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30115"/>
			<description>Entry Type with type Name in MediaScreenParameters shall have value MediaScreenParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaScreenParams"</test>
			<error>
				<message>Entry Type with type Name in MediaScreenParameters has incorrect value %2 instead of MediaScreenParams</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30116"/>
			<description>Entry Type in MediaScreenParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaScreenParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30117"/>
			<description>Entry BE with type Dictionary in MediaScreenParameters shall be object MediaScreenParametersMHBE</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in MediaScreenParameters is not object MediaScreenParametersMHBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30118"/>
			<description>Entry BE in MediaScreenParameters shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaScreenParameters is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30119"/>
			<description>Entry MH with type Dictionary in MediaScreenParameters shall be object MediaScreenParametersMHBE</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in MediaScreenParameters is not object MediaScreenParametersMHBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaScreenParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30120"/>
			<description>Entry MH in MediaScreenParameters shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaScreenParameters is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30147"/>
			<description>Entry with type Dictionary in PatternMap shall be object PatternType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in PatternMap is not object PatternType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30148"/>
			<description>Entry with type Stream in PatternMap shall be object PatternType1</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in PatternMap is not object PatternType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="30149"/>
			<description>Entry with type Stream in PatternMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in PatternMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternMapEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30150"/>
			<description>Entry in PatternMap shall have one of types: Dictionary, Stream</description>
			<test>HasTypeDictionary == true || HasTypeStream == true</test>
			<error>
				<message>Entry %1 in PatternMap is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_7" clause="2" testNumber="30185"/>
			<description>ArrayOfDuration shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfDuration contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_7" clause="14" testNumber="30186"/>
			<description>Entry 0 with type Integer in ArrayOfDuration shall correspond possible value predicate: fn:Eval(@0 &gt; 0)</description>
			<test>entry0HasTypeInteger != true || entry0IntegerValue &gt; 0</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfDuration doesn't correspond possible value predicate: fn:Eval(@0 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_7" clause="14" testNumber="30187"/>
			<description>Entry 0 with type StringByte in ArrayOfDuration shall correspond possible value predicate: fn:Eval(fn:StringLength(0) == 8)</description>
			<test>entry0HasTypeStringByte != true || entry0StringSize == 8</test>
			<error>
				<message>Entry 0 with type StringByte in ArrayOfDuration doesn't correspond possible value predicate: fn:Eval(fn:StringLength(0) == 8)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30188"/>
			<description>Entry 0 in ArrayOfDuration shall have one of types: Integer, StringByte</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true || entry0HasTypeStringByte == true</test>
			<error>
				<message>Entry 0 in ArrayOfDuration is not one of types: Integer, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_7" clause="14" testNumber="30189"/>
			<description>Entry 1 with type Integer in ArrayOfDuration shall correspond possible value predicate: fn:Eval(@1 &gt; 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt; 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfDuration doesn't correspond possible value predicate: fn:Eval(@1 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDuration">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30190"/>
			<description>Entry 1 in ArrayOfDuration shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfDuration is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_ArrayOfNumbersEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30222"/>
			<description>Entry with type Array in ArrayOf_ArrayOfNumbers shall be object ArrayOfNumbersGeneral</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOf_ArrayOfNumbers is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_ArrayOfNumbersEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30223"/>
			<description>Entry in ArrayOf_ArrayOfNumbers shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ArrayOf_ArrayOfNumbers is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="1" testNumber="30226"/>
			<description>3DAnimationStyle shall not contain entries except TM, PC, Type, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'TM' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>3DAnimationStyle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'TM' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="14" testNumber="30227"/>
			<description>Entry TM with type Number in 3DAnimationStyle shall correspond possible value predicate: fn:Eval(@TM &gt; 0)</description>
			<test>TMHasTypeNumber != true || TMNumberValue &gt; 0</test>
			<error>
				<message>Entry TM with type Number in 3DAnimationStyle doesn't correspond possible value predicate: fn:Eval(@TM &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30228"/>
			<description>Entry TM in 3DAnimationStyle shall have type Number</description>
			<test>containsTM == false || TMHasTypeNumber == true</test>
			<error>
				<message>Entry TM in 3DAnimationStyle is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30229"/>
			<description>Entry PC in 3DAnimationStyle shall have type Integer</description>
			<test>containsPC == false || PCHasTypeInteger == true</test>
			<error>
				<message>Entry PC in 3DAnimationStyle is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30230"/>
			<description>Entry Type with type Name in 3DAnimationStyle shall have value 3DAnimationStyle</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DAnimationStyle"</test>
			<error>
				<message>Entry Type with type Name in 3DAnimationStyle has incorrect value %2 instead of 3DAnimationStyle</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30231"/>
			<description>Entry Type in 3DAnimationStyle shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DAnimationStyle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30232"/>
			<description>Entry Subtype with type Name in 3DAnimationStyle shall have one of values: Oscillating, None, Linear</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "None" || SubtypeNameValue == "Linear" || SubtypeNameValue == "Oscillating"</test>
			<error>
				<message>Entry Subtype with type Name in 3DAnimationStyle has incorrect value %2 instead of Oscillating, None, Linear</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DAnimationStyle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30233"/>
			<description>Entry Subtype in 3DAnimationStyle shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DAnimationStyle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="1" testNumber="30490"/>
			<description>FontDescriptorType1 shall not contain entries except StemH, StemV, Flags, FontFamily, CapHeight, FontBBox, FontFile, XHeight, Ascent, Type, FontWeight, Descent, MaxWidth, CharSet, FontStretch, FontName, Leading, FontFile3, MissingWidth, AvgWidth, ItalicAngle</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'ItalicAngle').length == 0</test>
			<error>
				<message>FontDescriptorType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'StemH' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'FontFile3' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'ItalicAngle').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30491"/>
			<description>Entry StemH in FontDescriptorType1 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30492"/>
			<description>Entry StemV in FontDescriptorType1 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30493"/>
			<description>Entry StemV in FontDescriptorType1 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30494"/>
			<description>Entry Flags in FontDescriptorType1 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30495"/>
			<description>Entry Flags in FontDescriptorType1 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType1 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="30496"/>
			<description>Entry Flags with type Bitmask in FontDescriptorType1 shall correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorType1 doesn't correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30497"/>
			<description>Entry FontFamily in FontDescriptorType1 shall have type StringByte</description>
			<test>containsFontFamily == false || FontFamilyHasTypeStringByte == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorType1 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30498"/>
			<description>Entry CapHeight in FontDescriptorType1 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30499"/>
			<description>Entry FontBBox in FontDescriptorType1 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30500"/>
			<description>Entry FontBBox in FontDescriptorType1 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30501"/>
			<description>Entry FontFile with type Stream in FontDescriptorType1 shall be object FontFileType1</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorType1 is not object FontFileType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="10" testNumber="30502"/>
			<description>Entry FontFile with type Stream in FontDescriptorType1 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30503"/>
			<description>Entry FontFile in FontDescriptorType1 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorType1 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30504"/>
			<description>Entry XHeight in FontDescriptorType1 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30505"/>
			<description>Entry Ascent in FontDescriptorType1 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30506"/>
			<description>Entry Ascent in FontDescriptorType1 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30507"/>
			<description>Entry Type in FontDescriptorType1 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30508"/>
			<description>Entry Type with type Name in FontDescriptorType1 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorType1 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30509"/>
			<description>Entry Type in FontDescriptorType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30510"/>
			<description>Entry FontWeight with type Integer in FontDescriptorType1 shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorType1 has incorrect value %2 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30511"/>
			<description>Entry FontWeight in FontDescriptorType1 shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30512"/>
			<description>Entry Descent in FontDescriptorType1 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="14" testNumber="30513"/>
			<description>Entry Descent with type Number in FontDescriptorType1 shall correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorType1 doesn't correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30514"/>
			<description>Entry Descent in FontDescriptorType1 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30515"/>
			<description>Entry MaxWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30516"/>
			<description>Entry CharSet in FontDescriptorType1 shall have one of types: StringByte, StringAscii</description>
			<test>containsCharSet == false || CharSetHasTypeStringByte == true || CharSetHasTypeStringAscii == true</test>
			<error>
				<message>Entry CharSet in FontDescriptorType1 is not one of types: StringByte, StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30517"/>
			<description>Entry FontStretch with type Name in FontDescriptorType1 shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorType1 has incorrect value %2 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30518"/>
			<description>Entry FontStretch in FontDescriptorType1 shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30519"/>
			<description>Entry FontName in FontDescriptorType1 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30520"/>
			<description>Entry FontName in FontDescriptorType1 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="30521"/>
			<description>Entry FontName with type Name in FontDescriptorType1 shall correspond special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorType1 doesn't correspond special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30522"/>
			<description>Entry Leading in FontDescriptorType1 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30523"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorType1 shall be object FontFile3Type1</description>
			<test>FontFile3HasTypeStream != true || FontFile3_size == 1</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorType1 is not object FontFile3Type1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="10" testNumber="30524"/>
			<description>Entry FontFile3 with type Stream in FontDescriptorType1 shall be indirect</description>
			<test>FontFile3HasTypeStream != true || isFontFile3Indirect == true</test>
			<error>
				<message>Entry FontFile3 with type Stream in FontDescriptorType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30525"/>
			<description>Entry FontFile3 in FontDescriptorType1 shall have type Stream</description>
			<test>containsFontFile3 == false || FontFile3HasTypeStream == true</test>
			<error>
				<message>Entry FontFile3 in FontDescriptorType1 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30526"/>
			<description>Entry MissingWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30527"/>
			<description>Entry AvgWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30528"/>
			<description>Entry ItalicAngle in FontDescriptorType1 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30529"/>
			<description>Entry ItalicAngle in FontDescriptorType1 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30591"/>
			<description>Entry with type Stream in CharProcMap shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in CharProcMap is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="30592"/>
			<description>Entry with type Stream in CharProcMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in CharProcMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30593"/>
			<description>Entry in CharProcMap shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in CharProcMap is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="1" testNumber="30768"/>
			<description>FontDescriptorType3 shall not contain entries except StemH, Descent, Flags, FontStretch, CapHeight, MaxWidth, FontName, MissingWidth, XHeight, AvgWidth, Leading, FontFamily, Type, Ascent, FontWeight, FontBBox, ItalicAngle, StemV</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'StemH' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'StemV').length == 0</test>
			<error>
				<message>FontDescriptorType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'StemH' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'StemV').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30769"/>
			<description>Entry StemH in FontDescriptorType3 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="14" testNumber="30770"/>
			<description>Entry Descent with type Number in FontDescriptorType3 shall correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorType3 doesn't correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30771"/>
			<description>Entry Descent in FontDescriptorType3 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30772"/>
			<description>Entry Flags in FontDescriptorType3 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30773"/>
			<description>Entry Flags in FontDescriptorType3 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType3 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="9" testNumber="30774"/>
			<description>Entry Flags with type Bitmask in FontDescriptorType3 shall correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorType3 doesn't correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30775"/>
			<description>Entry FontStretch with type Name in FontDescriptorType3 shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorType3 has incorrect value %2 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30776"/>
			<description>Entry FontStretch in FontDescriptorType3 shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30777"/>
			<description>Entry CapHeight in FontDescriptorType3 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30778"/>
			<description>Entry MaxWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30779"/>
			<description>Entry FontName in FontDescriptorType3 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="9" testNumber="30780"/>
			<description>Entry FontName with type Name in FontDescriptorType3 shall correspond special case: fn:Eval(@FontName == parent::@Name)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentNameNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorType3 doesn't correspond special case: fn:Eval(@FontName == parent::@Name)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30781"/>
			<description>Entry MissingWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30782"/>
			<description>Entry XHeight in FontDescriptorType3 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30783"/>
			<description>Entry AvgWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30784"/>
			<description>Entry Leading in FontDescriptorType3 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30785"/>
			<description>Entry FontFamily in FontDescriptorType3 shall have type StringByte</description>
			<test>containsFontFamily == false || FontFamilyHasTypeStringByte == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorType3 is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30786"/>
			<description>Entry Type in FontDescriptorType3 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30787"/>
			<description>Entry Type with type Name in FontDescriptorType3 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorType3 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30788"/>
			<description>Entry Type in FontDescriptorType3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30789"/>
			<description>Entry Ascent in FontDescriptorType3 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30790"/>
			<description>Entry FontWeight with type Integer in FontDescriptorType3 shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorType3 has incorrect value %2 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30791"/>
			<description>Entry FontWeight in FontDescriptorType3 shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30792"/>
			<description>Entry FontBBox in FontDescriptorType3 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType3 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30793"/>
			<description>Entry ItalicAngle in FontDescriptorType3 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30794"/>
			<description>Entry ItalicAngle in FontDescriptorType3 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30795"/>
			<description>Entry StemV in FontDescriptorType3 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="1" testNumber="30834"/>
			<description>3DBackground shall not contain entries except C, CS, Type, EA, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'CS' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'EA' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>3DBackground contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'CS' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'EA' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30835"/>
			<description>Entry C with type Array in 3DBackground shall be object ArrayOf_3RGBNumbers</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in 3DBackground is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30836"/>
			<description>Entry C in 3DBackground shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DBackground is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30837"/>
			<description>Entry CS with type Name in 3DBackground shall have value DeviceRGB</description>
			<test>CSHasTypeName != true || CSNameValue == "DeviceRGB"</test>
			<error>
				<message>Entry CS with type Name in 3DBackground has incorrect value %2 instead of DeviceRGB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CSNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30838"/>
			<description>Entry CS in 3DBackground shall have type Name</description>
			<test>containsCS == false || CSHasTypeName == true</test>
			<error>
				<message>Entry CS in 3DBackground is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30839"/>
			<description>Entry Type with type Name in 3DBackground shall have value 3DBG</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DBG"</test>
			<error>
				<message>Entry Type with type Name in 3DBackground has incorrect value %2 instead of 3DBG</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30840"/>
			<description>Entry Type in 3DBackground shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DBackground is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30841"/>
			<description>Entry EA in 3DBackground shall have type Boolean</description>
			<test>containsEA == false || EAHasTypeBoolean == true</test>
			<error>
				<message>Entry EA in 3DBackground is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30842"/>
			<description>Entry Subtype with type Name in 3DBackground shall have value SC</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "SC"</test>
			<error>
				<message>Entry Subtype with type Name in 3DBackground has incorrect value %2 instead of SC</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DBackground">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30843"/>
			<description>Entry Subtype in 3DBackground shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DBackground is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrdersEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30863"/>
			<description>Entry with type Dictionary in ArrayOfOptContentOrders shall be object OptContentGroup</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOptContentOrders is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrdersEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30864"/>
			<description>Entry in ArrayOfOptContentOrders shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOptContentOrders is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForPrintingOrderEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30868"/>
			<description>Entry in ArrayOfNamesForPrintingOrder shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfNamesForPrintingOrder is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="1" testNumber="30888"/>
			<description>MediaPlayerInfo shall not contain entries except PID, Type, BE, MH</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PID' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'MH').length == 0</test>
			<error>
				<message>MediaPlayerInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PID' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'MH').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30889"/>
			<description>Entry PID with type Dictionary in MediaPlayerInfo shall be object SoftwareIdentifier</description>
			<test>PIDHasTypeDictionary != true || PID_size == 1</test>
			<error>
				<message>Entry PID with type Dictionary in MediaPlayerInfo is not object SoftwareIdentifier</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30890"/>
			<description>Entry PID in MediaPlayerInfo shall have type Dictionary</description>
			<test>containsPID == false || PIDHasTypeDictionary == true</test>
			<error>
				<message>Entry PID in MediaPlayerInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30891"/>
			<description>Entry Type with type Name in MediaPlayerInfo shall have value MediaPlayerInfo</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaPlayerInfo"</test>
			<error>
				<message>Entry Type with type Name in MediaPlayerInfo has incorrect value %2 instead of MediaPlayerInfo</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30892"/>
			<description>Entry Type in MediaPlayerInfo shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaPlayerInfo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30893"/>
			<description>Entry BE with type Dictionary in MediaPlayerInfo shall be object _UniversalDictionary</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in MediaPlayerInfo is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30894"/>
			<description>Entry BE in MediaPlayerInfo shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaPlayerInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30895"/>
			<description>Entry MH with type Dictionary in MediaPlayerInfo shall be object _UniversalDictionary</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in MediaPlayerInfo is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayerInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30896"/>
			<description>Entry MH in MediaPlayerInfo shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaPlayerInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="1" testNumber="30906"/>
			<description>3DNode shall not contain entries except Type, M, O, N, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'M' &amp;&amp; elem != 'O' &amp;&amp; elem != 'N' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>3DNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'M' &amp;&amp; elem != 'O' &amp;&amp; elem != 'N' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30907"/>
			<description>Entry Type with type Name in 3DNode shall have value 3DNode</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DNode"</test>
			<error>
				<message>Entry Type with type Name in 3DNode has incorrect value %2 instead of 3DNode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30908"/>
			<description>Entry Type in 3DNode shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DNode is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30909"/>
			<description>Entry M with type Array in 3DNode shall be object ArrayOf3DTransMatrix</description>
			<test>MHasTypeArray != true || M_size == 1</test>
			<error>
				<message>Entry M with type Array in 3DNode is not object ArrayOf3DTransMatrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30910"/>
			<description>Entry M in 3DNode shall have type Array</description>
			<test>containsM == false || MHasTypeArray == true</test>
			<error>
				<message>Entry M in 3DNode is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="14" testNumber="30911"/>
			<description>Entry O with type Number in 3DNode shall correspond possible value predicate: fn:Eval((@O &gt;= 0) &amp;&amp; (@O &lt;= 1))</description>
			<test>OHasTypeNumber != true || (ONumberValue &gt;= 0) &amp;&amp; (ONumberValue &lt;= 1)</test>
			<error>
				<message>Entry O with type Number in 3DNode doesn't correspond possible value predicate: fn:Eval((@O &gt;= 0) &amp;&amp; (@O &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30912"/>
			<description>Entry O in 3DNode shall have type Number</description>
			<test>containsO == false || OHasTypeNumber == true</test>
			<error>
				<message>Entry O in 3DNode is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30913"/>
			<description>Entry N in 3DNode is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in 3DNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30914"/>
			<description>Entry N in 3DNode shall have type String</description>
			<test>containsN == false || NHasTypeString == true</test>
			<error>
				<message>Entry N in 3DNode is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30915"/>
			<description>Entry V in 3DNode shall have type Boolean</description>
			<test>containsV == false || VHasTypeBoolean == true</test>
			<error>
				<message>Entry V in 3DNode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="1" testNumber="30933"/>
			<description>RichMediaInstance shall not contain entries except Asset, Params, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Asset' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>RichMediaInstance contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Asset' &amp;&amp; elem != 'Params' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30934"/>
			<description>Entry Asset with type Dictionary in RichMediaInstance shall be object FileSpecification</description>
			<test>AssetHasTypeDictionary != true || Asset_size == 1</test>
			<error>
				<message>Entry Asset with type Dictionary in RichMediaInstance is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30935"/>
			<description>Entry Asset in RichMediaInstance is required</description>
			<test>containsAsset == true</test>
			<error>
				<message>Entry Asset in RichMediaInstance is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30936"/>
			<description>Entry Asset in RichMediaInstance shall have type Dictionary</description>
			<test>containsAsset == false || AssetHasTypeDictionary == true</test>
			<error>
				<message>Entry Asset in RichMediaInstance is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30937"/>
			<description>Entry Params with type Dictionary in RichMediaInstance shall be object RichMediaParams</description>
			<test>ParamsHasTypeDictionary != true || Params_size == 1</test>
			<error>
				<message>Entry Params with type Dictionary in RichMediaInstance is not object RichMediaParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30938"/>
			<description>Entry Params in RichMediaInstance shall have type Dictionary</description>
			<test>containsParams == false || ParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry Params in RichMediaInstance is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="9" testNumber="30939"/>
			<description>Entry Params with type Dictionary in RichMediaInstance shall correspond special case: fn:Eval(@Subtype == Flash)</description>
			<test>ParamsHasTypeDictionary != true || (SubtypeNameValue == "Flash")</test>
			<error>
				<message>Entry Params with type Dictionary in RichMediaInstance doesn't correspond special case: fn:Eval(@Subtype == Flash)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="7" testNumber="30940"/>
			<description>Entry Subtype in RichMediaInstance is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in RichMediaInstance is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="13" testNumber="30941"/>
			<description>Entry Subtype with type Name in RichMediaInstance shall have one of values: 3D, Video, Sound, Flash</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "3D" || SubtypeNameValue == "Sound" || SubtypeNameValue == "Video" || SubtypeNameValue == Flash</test>
			<error>
				<message>Entry Subtype with type Name in RichMediaInstance has incorrect value %2 instead of 3D, Video, Sound, Flash</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30942"/>
			<description>Entry Subtype in RichMediaInstance shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in RichMediaInstance is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30943"/>
			<description>Entry Type with type Name in RichMediaInstance shall have value RichMediaInstance</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaInstance"</test>
			<error>
				<message>Entry Type with type Name in RichMediaInstance has incorrect value %2 instead of RichMediaInstance</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaInstance">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30944"/>
			<description>Entry Type in RichMediaInstance shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaInstance is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="1" testNumber="30959"/>
			<description>RichMediaSettings shall not contain entries except Activation, Deactivation, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Activation' &amp;&amp; elem != 'Deactivation' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>RichMediaSettings contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Activation' &amp;&amp; elem != 'Deactivation' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30960"/>
			<description>Entry Activation with type Dictionary in RichMediaSettings shall be object RichMediaActivation</description>
			<test>ActivationHasTypeDictionary != true || Activation_size == 1</test>
			<error>
				<message>Entry Activation with type Dictionary in RichMediaSettings is not object RichMediaActivation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30961"/>
			<description>Entry Activation in RichMediaSettings shall have type Dictionary</description>
			<test>containsActivation == false || ActivationHasTypeDictionary == true</test>
			<error>
				<message>Entry Activation in RichMediaSettings is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="17" testNumber="30962"/>
			<description>Entry Deactivation with type Dictionary in RichMediaSettings shall be object RichMediaDeactivation</description>
			<test>DeactivationHasTypeDictionary != true || Deactivation_size == 1</test>
			<error>
				<message>Entry Deactivation with type Dictionary in RichMediaSettings is not object RichMediaDeactivation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30963"/>
			<description>Entry Deactivation in RichMediaSettings shall have type Dictionary</description>
			<test>containsDeactivation == false || DeactivationHasTypeDictionary == true</test>
			<error>
				<message>Entry Deactivation in RichMediaSettings is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="6" testNumber="30964"/>
			<description>Entry Type with type Name in RichMediaSettings shall have value RichMediaSettings</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaSettings"</test>
			<error>
				<message>Entry Type with type Name in RichMediaSettings has incorrect value %2 instead of RichMediaSettings</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaSettings">
			<id specification="ISO_32000_1_7" clause="8" testNumber="30965"/>
			<description>Entry Type in RichMediaSettings shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaSettings is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="1" testNumber="31223"/>
			<description>FontDescriptorTrueType shall not contain entries except FontBBox, MissingWidth, FontName, Descent, FontFile, FontWeight, FontFamily, MaxWidth, ItalicAngle, Leading, CapHeight, Flags, StemH, Ascent, XHeight, AvgWidth, FontFile2, FontStretch, Type, StemV</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FontBBox' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'StemV').length == 0</test>
			<error>
				<message>FontDescriptorTrueType contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FontBBox' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontWeight' &amp;&amp; elem != 'FontFamily' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'FontFile2' &amp;&amp; elem != 'FontStretch' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'StemV').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31224"/>
			<description>Entry FontBBox in FontDescriptorTrueType is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31225"/>
			<description>Entry FontBBox in FontDescriptorTrueType shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorTrueType is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31226"/>
			<description>Entry MissingWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31227"/>
			<description>Entry FontName in FontDescriptorTrueType is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31228"/>
			<description>Entry FontName in FontDescriptorTrueType shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="9" testNumber="31229"/>
			<description>Entry FontName with type Name in FontDescriptorTrueType shall correspond special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorTrueType doesn't correspond special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31230"/>
			<description>Entry Descent in FontDescriptorTrueType is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="14" testNumber="31231"/>
			<description>Entry Descent with type Number in FontDescriptorTrueType shall correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorTrueType doesn't correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31232"/>
			<description>Entry Descent in FontDescriptorTrueType shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31233"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall be object FontFileType1</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType is not object FontFileType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="10" testNumber="31234"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31235"/>
			<description>Entry FontFile in FontDescriptorTrueType shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorTrueType is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="9" testNumber="31236"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)) &amp;&amp; fn:Not(fn:IsPresent(FontFile3)))</description>
			<test>FontFileHasTypeStream != true || (((containsFontFile2 == true)) != true &amp;&amp; ((containsFontFile3 == true)) != true)</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType doesn't correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)) &amp;&amp; fn:Not(fn:IsPresent(FontFile3)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31237"/>
			<description>Entry FontWeight with type Integer in FontDescriptorTrueType shall have one of values: 100, 200, 300, 400, 500, 600, 700, 800, 900</description>
			<test>FontWeightHasTypeInteger != true || FontWeightIntegerValue == 100 || FontWeightIntegerValue == 200 || FontWeightIntegerValue == 300 || FontWeightIntegerValue == 400 || FontWeightIntegerValue == 500 || FontWeightIntegerValue == 600 || FontWeightIntegerValue == 700 || FontWeightIntegerValue == 800 || FontWeightIntegerValue == 900</test>
			<error>
				<message>Entry FontWeight with type Integer in FontDescriptorTrueType has incorrect value %2 instead of 100, 200, 300, 400, 500, 600, 700, 800, 900</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontWeightIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31238"/>
			<description>Entry FontWeight in FontDescriptorTrueType shall have type Integer</description>
			<test>containsFontWeight == false || FontWeightHasTypeInteger == true</test>
			<error>
				<message>Entry FontWeight in FontDescriptorTrueType is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31239"/>
			<description>Entry FontFamily in FontDescriptorTrueType shall have type StringByte</description>
			<test>containsFontFamily == false || FontFamilyHasTypeStringByte == true</test>
			<error>
				<message>Entry FontFamily in FontDescriptorTrueType is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31240"/>
			<description>Entry MaxWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31241"/>
			<description>Entry ItalicAngle in FontDescriptorTrueType is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31242"/>
			<description>Entry ItalicAngle in FontDescriptorTrueType shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31243"/>
			<description>Entry Leading in FontDescriptorTrueType shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31244"/>
			<description>Entry CapHeight in FontDescriptorTrueType shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31245"/>
			<description>Entry Flags in FontDescriptorTrueType is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31246"/>
			<description>Entry Flags in FontDescriptorTrueType shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorTrueType is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="9" testNumber="31247"/>
			<description>Entry Flags with type Bitmask in FontDescriptorTrueType shall correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorTrueType doesn't correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31248"/>
			<description>Entry StemH in FontDescriptorTrueType shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31249"/>
			<description>Entry Ascent in FontDescriptorTrueType is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31250"/>
			<description>Entry Ascent in FontDescriptorTrueType shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31251"/>
			<description>Entry XHeight in FontDescriptorTrueType shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31252"/>
			<description>Entry AvgWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31253"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorTrueType shall be object FontFile2</description>
			<test>FontFile2HasTypeStream != true || FontFile2_size == 1</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorTrueType is not object FontFile2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="10" testNumber="31254"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorTrueType shall be indirect</description>
			<test>FontFile2HasTypeStream != true || isFontFile2Indirect == true</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31255"/>
			<description>Entry FontFile2 in FontDescriptorTrueType shall have type Stream</description>
			<test>containsFontFile2 == false || FontFile2HasTypeStream == true</test>
			<error>
				<message>Entry FontFile2 in FontDescriptorTrueType is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="9" testNumber="31256"/>
			<description>Entry FontFile2 with type Stream in FontDescriptorTrueType shall correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)) &amp;&amp; fn:Not(fn:IsPresent(FontFile3)))</description>
			<test>FontFile2HasTypeStream != true || (((containsFontFile == true)) != true &amp;&amp; ((containsFontFile3 == true)) != true)</test>
			<error>
				<message>Entry FontFile2 with type Stream in FontDescriptorTrueType doesn't correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile)) &amp;&amp; fn:Not(fn:IsPresent(FontFile3)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31257"/>
			<description>Entry FontStretch with type Name in FontDescriptorTrueType shall have one of values: ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</description>
			<test>FontStretchHasTypeName != true || FontStretchNameValue == "UltraCondensed" || FontStretchNameValue == "ExtraCondensed" || FontStretchNameValue == "Condensed" || FontStretchNameValue == "SemiCondensed" || FontStretchNameValue == "Normal" || FontStretchNameValue == "SemiExpanded" || FontStretchNameValue == "Expanded" || FontStretchNameValue == "ExtraExpanded" || FontStretchNameValue == "UltraExpanded"</test>
			<error>
				<message>Entry FontStretch with type Name in FontDescriptorTrueType has incorrect value %2 instead of ExtraExpanded, Condensed, SemiCondensed, SemiExpanded, UltraExpanded, ExtraCondensed, Normal, UltraCondensed, Expanded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FontStretchNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31258"/>
			<description>Entry FontStretch in FontDescriptorTrueType shall have type Name</description>
			<test>containsFontStretch == false || FontStretchHasTypeName == true</test>
			<error>
				<message>Entry FontStretch in FontDescriptorTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31259"/>
			<description>Entry Type in FontDescriptorTrueType is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31260"/>
			<description>Entry Type with type Name in FontDescriptorTrueType shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorTrueType has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31261"/>
			<description>Entry Type in FontDescriptorTrueType shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31262"/>
			<description>Entry StemV in FontDescriptorTrueType is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31263"/>
			<description>Entry StemV in FontDescriptorTrueType shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31309"/>
			<description>Entry with type Dictionary in CryptFilterPublicKeyMap shall be object CryptFilterPublicKey</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in CryptFilterPublicKeyMap is not object CryptFilterPublicKey</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKeyMapEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31310"/>
			<description>Entry in CryptFilterPublicKeyMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in CryptFilterPublicKeyMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSubitem">
			<id specification="ISO_32000_1_7" clause="1" testNumber="31313"/>
			<description>CollectionSubitem shall not contain entries except Type, D, P</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'D' &amp;&amp; elem != 'P').length == 0</test>
			<error>
				<message>CollectionSubitem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'D' &amp;&amp; elem != 'P').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSubitem">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31314"/>
			<description>Entry Type with type Name in CollectionSubitem shall have value CollectionSubitem</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CollectionSubitem"</test>
			<error>
				<message>Entry Type with type Name in CollectionSubitem has incorrect value %2 instead of CollectionSubitem</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSubitem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31315"/>
			<description>Entry Type in CollectionSubitem shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CollectionSubitem is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSubitem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31316"/>
			<description>Entry D in CollectionSubitem shall have one of types: Date, StringText, Number</description>
			<test>containsD == false || DHasTypeDate == true || DHasTypeStringText == true || DHasTypeNumber == true</test>
			<error>
				<message>Entry D in CollectionSubitem is not one of types: Date, StringText, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSubitem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31317"/>
			<description>Entry P in CollectionSubitem shall have type StringText</description>
			<test>containsP == false || PHasTypeStringText == true</test>
			<error>
				<message>Entry P in CollectionSubitem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="1" testNumber="31341"/>
			<description>NumberFormat shall not contain entries except C, D, U, RD, O, F, PS, FD, RT, SS, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'U' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'O' &amp;&amp; elem != 'F' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'SS' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>NumberFormat contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'D' &amp;&amp; elem != 'U' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'O' &amp;&amp; elem != 'F' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'FD' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'SS' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31342"/>
			<description>Entry C in NumberFormat is required</description>
			<test>containsC == true</test>
			<error>
				<message>Entry C in NumberFormat is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31343"/>
			<description>Entry C in NumberFormat shall have type Number</description>
			<test>containsC == false || CHasTypeNumber == true</test>
			<error>
				<message>Entry C in NumberFormat is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="14" testNumber="31344"/>
			<description>Entry D with type Integer in NumberFormat shall correspond possible value predicate: fn:Eval(@D &gt; 0)</description>
			<test>DHasTypeInteger != true || DIntegerValue &gt; 0</test>
			<error>
				<message>Entry D with type Integer in NumberFormat doesn't correspond possible value predicate: fn:Eval(@D &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31345"/>
			<description>Entry D in NumberFormat shall have type Integer</description>
			<test>containsD == false || DHasTypeInteger == true</test>
			<error>
				<message>Entry D in NumberFormat is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31346"/>
			<description>Entry U in NumberFormat is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in NumberFormat is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31347"/>
			<description>Entry U in NumberFormat shall have type StringText</description>
			<test>containsU == false || UHasTypeStringText == true</test>
			<error>
				<message>Entry U in NumberFormat is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31348"/>
			<description>Entry RD in NumberFormat shall have type StringText</description>
			<test>containsRD == false || RDHasTypeStringText == true</test>
			<error>
				<message>Entry RD in NumberFormat is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31349"/>
			<description>Entry O with type Name in NumberFormat shall have one of values: P, S</description>
			<test>OHasTypeName != true || ONameValue == "S" || ONameValue == "P"</test>
			<error>
				<message>Entry O with type Name in NumberFormat has incorrect value %2 instead of P, S</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ONameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31350"/>
			<description>Entry O in NumberFormat shall have type Name</description>
			<test>containsO == false || OHasTypeName == true</test>
			<error>
				<message>Entry O in NumberFormat is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31351"/>
			<description>Entry F with type Name in NumberFormat shall have one of values: R, D, T, F</description>
			<test>FHasTypeName != true || FNameValue == "D" || FNameValue == "F" || FNameValue == "R" || FNameValue == "T"</test>
			<error>
				<message>Entry F with type Name in NumberFormat has incorrect value %2 instead of R, D, T, F</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31352"/>
			<description>Entry F in NumberFormat shall have type Name</description>
			<test>containsF == false || FHasTypeName == true</test>
			<error>
				<message>Entry F in NumberFormat is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31353"/>
			<description>Entry PS in NumberFormat shall have type StringText</description>
			<test>containsPS == false || PSHasTypeStringText == true</test>
			<error>
				<message>Entry PS in NumberFormat is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31354"/>
			<description>Entry FD in NumberFormat shall have type Boolean</description>
			<test>containsFD == false || FDHasTypeBoolean == true</test>
			<error>
				<message>Entry FD in NumberFormat is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31355"/>
			<description>Entry RT in NumberFormat shall have type StringText</description>
			<test>containsRT == false || RTHasTypeStringText == true</test>
			<error>
				<message>Entry RT in NumberFormat is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31356"/>
			<description>Entry SS in NumberFormat shall have type StringText</description>
			<test>containsSS == false || SSHasTypeStringText == true</test>
			<error>
				<message>Entry SS in NumberFormat is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31357"/>
			<description>Entry Type with type Name in NumberFormat shall have value NumberFormat</description>
			<test>TypeHasTypeName != true || TypeNameValue == "NumberFormat"</test>
			<error>
				<message>Entry Type with type Name in NumberFormat has incorrect value %2 instead of NumberFormat</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANumberFormat">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31358"/>
			<description>Entry Type in NumberFormat shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in NumberFormat is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="2" testNumber="31390"/>
			<description>ArrayOf3DTransMatrix shall contain exactly 12 elements</description>
			<test>size == 12</test>
			<error>
				<message>ArrayOf3DTransMatrix contains %1 element(s) instead of 12</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31391"/>
			<description>Entry 3 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf3DTransMatrix is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31392"/>
			<description>Entry 10 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 10 || entry10HasTypeNumber == true</test>
			<error>
				<message>Entry 10 in ArrayOf3DTransMatrix is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31393"/>
			<description>Entry 5 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf3DTransMatrix is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31394"/>
			<description>Entry 7 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOf3DTransMatrix is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31395"/>
			<description>Entry 8 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 8 || entry8HasTypeNumber == true</test>
			<error>
				<message>Entry 8 in ArrayOf3DTransMatrix is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31396"/>
			<description>Entry 0 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf3DTransMatrix is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31397"/>
			<description>Entry 9 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 9 || entry9HasTypeNumber == true</test>
			<error>
				<message>Entry 9 in ArrayOf3DTransMatrix is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31398"/>
			<description>Entry 1 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf3DTransMatrix is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31399"/>
			<description>Entry 6 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOf3DTransMatrix is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31400"/>
			<description>Entry 2 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf3DTransMatrix is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31401"/>
			<description>Entry 4 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf3DTransMatrix is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DTransMatrix">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31402"/>
			<description>Entry 11 in ArrayOf3DTransMatrix shall have type Number</description>
			<test>size &lt;= 11 || entry11HasTypeNumber == true</test>
			<error>
				<message>Entry 11 in ArrayOf3DTransMatrix is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="1" testNumber="31429"/>
			<description>RichMediaWidth shall not contain entries except Min, Default, Max</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Min' &amp;&amp; elem != 'Default' &amp;&amp; elem != 'Max').length == 0</test>
			<error>
				<message>RichMediaWidth contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Min' &amp;&amp; elem != 'Default' &amp;&amp; elem != 'Max').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="14" testNumber="31430"/>
			<description>Entry Min with type Integer in RichMediaWidth shall correspond possible value predicate: fn:Eval(@Min &gt; 0)</description>
			<test>MinHasTypeInteger != true || MinIntegerValue &gt; 0</test>
			<error>
				<message>Entry Min with type Integer in RichMediaWidth doesn't correspond possible value predicate: fn:Eval(@Min &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31431"/>
			<description>Entry Min in RichMediaWidth shall have type Integer</description>
			<test>containsMin == false || MinHasTypeInteger == true</test>
			<error>
				<message>Entry Min in RichMediaWidth is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="14" testNumber="31432"/>
			<description>Entry Default with type Integer in RichMediaWidth shall correspond possible value predicate: fn:Eval(@Default &gt; 0)</description>
			<test>DefaultHasTypeInteger != true || DefaultIntegerValue &gt; 0</test>
			<error>
				<message>Entry Default with type Integer in RichMediaWidth doesn't correspond possible value predicate: fn:Eval(@Default &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31433"/>
			<description>Entry Default in RichMediaWidth shall have type Integer</description>
			<test>containsDefault == false || DefaultHasTypeInteger == true</test>
			<error>
				<message>Entry Default in RichMediaWidth is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="14" testNumber="31434"/>
			<description>Entry Max with type Integer in RichMediaWidth shall correspond possible value predicate: fn:Eval(@Max &gt; 0)</description>
			<test>MaxHasTypeInteger != true || MaxIntegerValue &gt; 0</test>
			<error>
				<message>Entry Max with type Integer in RichMediaWidth doesn't correspond possible value predicate: fn:Eval(@Max &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaWidth">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31435"/>
			<description>Entry Max in RichMediaWidth shall have type Integer</description>
			<test>containsMax == false || MaxHasTypeInteger == true</test>
			<error>
				<message>Entry Max in RichMediaWidth is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="1" testNumber="31455"/>
			<description>DPartRoot shall not contain entries except DPartRootNode, NodeNameList, RecordLevel, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DPartRootNode' &amp;&amp; elem != 'NodeNameList' &amp;&amp; elem != 'RecordLevel' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>DPartRoot contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DPartRootNode' &amp;&amp; elem != 'NodeNameList' &amp;&amp; elem != 'RecordLevel' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31456"/>
			<description>Entry DPartRootNode with type Dictionary in DPartRoot shall be object DPart</description>
			<test>DPartRootNodeHasTypeDictionary != true || DPartRootNode_size == 1</test>
			<error>
				<message>Entry DPartRootNode with type Dictionary in DPartRoot is not object DPart</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31457"/>
			<description>Entry DPartRootNode in DPartRoot is required</description>
			<test>containsDPartRootNode == true</test>
			<error>
				<message>Entry DPartRootNode in DPartRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="10" testNumber="31458"/>
			<description>Entry DPartRootNode with type Dictionary in DPartRoot shall be indirect</description>
			<test>DPartRootNodeHasTypeDictionary != true || isDPartRootNodeIndirect == true</test>
			<error>
				<message>Entry DPartRootNode with type Dictionary in DPartRoot is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31459"/>
			<description>Entry DPartRootNode in DPartRoot shall have type Dictionary</description>
			<test>containsDPartRootNode == false || DPartRootNodeHasTypeDictionary == true</test>
			<error>
				<message>Entry DPartRootNode in DPartRoot is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31460"/>
			<description>Entry NodeNameList with type Array in DPartRoot shall be object ArrayOfNamesGeneral</description>
			<test>NodeNameListHasTypeArray != true || NodeNameList_size == 1</test>
			<error>
				<message>Entry NodeNameList with type Array in DPartRoot is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="11" testNumber="31461"/>
			<description>Entry NodeNameList in DPartRoot is required, when fn:IsRequired(fn:Extension(PDF_VT2))</description>
			<test>(containsNodeNameList == true || ((hasExtensionPDF_VT2 == true)) == false)</test>
			<error>
				<message>Entry NodeNameList in DPartRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31462"/>
			<description>Entry NodeNameList in DPartRoot shall have type Array</description>
			<test>containsNodeNameList == false || NodeNameListHasTypeArray == true</test>
			<error>
				<message>Entry NodeNameList in DPartRoot is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31463"/>
			<description>Entry RecordLevel in DPartRoot shall have type Integer</description>
			<test>containsRecordLevel == false || RecordLevelHasTypeInteger == true</test>
			<error>
				<message>Entry RecordLevel in DPartRoot is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="9" testNumber="31464"/>
			<description>Entry RecordLevel with type Integer in DPartRoot shall correspond special case: fn:Eval(@RecordLevel &gt;= 0)</description>
			<test>RecordLevelHasTypeInteger != true || (RecordLevelIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry RecordLevel with type Integer in DPartRoot doesn't correspond special case: fn:Eval(@RecordLevel &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31465"/>
			<description>Entry Type with type Name in DPartRoot shall have value DPartRoot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "DPartRoot"</test>
			<error>
				<message>Entry Type with type Name in DPartRoot has incorrect value %2 instead of DPartRoot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADPartRoot">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31466"/>
			<description>Entry Type in DPartRoot shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in DPartRoot is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="1" testNumber="31489"/>
			<description>AnnotProjection shall not contain entries except IT, StructParent, NM, OC, C, Subtype, Popup, F, Rect, T, Type, Contents, Subj, IRT, AP, AS, CreationDate, CA, ExData, RC, Border, RT, M, P</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'IT' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P').length == 0</test>
			<error>
				<message>AnnotProjection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'IT' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'P').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31490"/>
			<description>Entry IT in AnnotProjection shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotProjection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31491"/>
			<description>Entry StructParent in AnnotProjection shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotProjection is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31492"/>
			<description>Entry NM in AnnotProjection shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotProjection is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31493"/>
			<description>Entry OC with type Dictionary in AnnotProjection shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotProjection is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31494"/>
			<description>Entry OC in AnnotProjection shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotProjection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31495"/>
			<description>Entry C with type Array in AnnotProjection shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotProjection is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31496"/>
			<description>Entry C in AnnotProjection shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotProjection is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31497"/>
			<description>Entry Subtype in AnnotProjection is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotProjection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31498"/>
			<description>Entry Subtype with type Name in AnnotProjection shall have value Projection</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Projection"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotProjection has incorrect value %2 instead of Projection</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31499"/>
			<description>Entry Subtype in AnnotProjection shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotProjection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31500"/>
			<description>Entry Popup with type Dictionary in AnnotProjection shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotProjection is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="10" testNumber="31501"/>
			<description>Entry Popup with type Dictionary in AnnotProjection shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotProjection is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31502"/>
			<description>Entry Popup in AnnotProjection shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotProjection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31503"/>
			<description>Entry F in AnnotProjection shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotProjection is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="9" testNumber="31504"/>
			<description>Entry F with type Bitmask in AnnotProjection shall correspond special case: fn:Eval(fn:BitsClear(11 , 32))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotProjection doesn't correspond special case: fn:Eval(fn:BitsClear(11 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31505"/>
			<description>Entry Rect in AnnotProjection is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotProjection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31506"/>
			<description>Entry Rect in AnnotProjection shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotProjection is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31507"/>
			<description>Entry T in AnnotProjection shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotProjection is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31508"/>
			<description>Entry Type with type Name in AnnotProjection shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotProjection has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31509"/>
			<description>Entry Type in AnnotProjection shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotProjection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31510"/>
			<description>Entry Contents in AnnotProjection shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotProjection is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31511"/>
			<description>Entry Subj in AnnotProjection shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotProjection is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31512"/>
			<description>Entry IRT with type Dictionary in AnnotProjection shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotProjection, AnnotRichMedia</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotProjection is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact, AnnotProjection, AnnotRichMedia</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="11" testNumber="31513"/>
			<description>Entry IRT in AnnotProjection is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotProjection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31514"/>
			<description>Entry IRT in AnnotProjection shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotProjection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31515"/>
			<description>Entry AP with type Dictionary in AnnotProjection shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotProjection is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31516"/>
			<description>Entry AP in AnnotProjection shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotProjection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="11" testNumber="31517"/>
			<description>Entry AS in AnnotProjection is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotProjection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31518"/>
			<description>Entry AS in AnnotProjection shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotProjection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31519"/>
			<description>Entry CreationDate in AnnotProjection shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotProjection is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="14" testNumber="31520"/>
			<description>Entry CA with type Number in AnnotProjection shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotProjection doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31521"/>
			<description>Entry CA in AnnotProjection shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotProjection is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31522"/>
			<description>Entry ExData with type Dictionary in AnnotProjection shall be one of objects ExData3DMarkup, ExDataMarkupGeo, ExDataProjection</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotProjection is not one of objects ExData3DMarkup, ExDataMarkupGeo, ExDataProjection</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31523"/>
			<description>Entry ExData in AnnotProjection shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotProjection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31524"/>
			<description>Entry RC with type Stream in AnnotProjection shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotProjection is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="10" testNumber="31525"/>
			<description>Entry RC with type Stream in AnnotProjection shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotProjection is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31526"/>
			<description>Entry RC in AnnotProjection shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotProjection is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31527"/>
			<description>Entry Border with type Array in AnnotProjection shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotProjection is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31528"/>
			<description>Entry Border in AnnotProjection shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotProjection is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31529"/>
			<description>Entry RT with type Name in AnnotProjection shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotProjection has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31530"/>
			<description>Entry RT in AnnotProjection shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotProjection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31531"/>
			<description>Entry M in AnnotProjection shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotProjection is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31532"/>
			<description>Entry P with type Dictionary in AnnotProjection shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotProjection is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="10" testNumber="31533"/>
			<description>Entry P with type Dictionary in AnnotProjection shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotProjection is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31534"/>
			<description>Entry P in AnnotProjection shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotProjection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="1" testNumber="31606"/>
			<description>Projection shall not contain entries except Subtype, PS, OS, CS, F, N, OB, FOV</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'CS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'N' &amp;&amp; elem != 'OB' &amp;&amp; elem != 'FOV').length == 0</test>
			<error>
				<message>Projection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'OS' &amp;&amp; elem != 'CS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'N' &amp;&amp; elem != 'OB' &amp;&amp; elem != 'FOV').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31607"/>
			<description>Entry Subtype in Projection is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in Projection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31608"/>
			<description>Entry Subtype with type Name in Projection shall have one of values: P, O</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "O" || SubtypeNameValue == "P"</test>
			<error>
				<message>Entry Subtype with type Name in Projection has incorrect value %2 instead of P, O</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31609"/>
			<description>Entry Subtype in Projection shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in Projection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="14" testNumber="31610"/>
			<description>Entry PS with type Number in Projection shall correspond possible value predicate: fn:Eval(@PS &gt; 0)</description>
			<test>PSHasTypeNumber != true || PSNumberValue &gt; 0</test>
			<error>
				<message>Entry PS with type Number in Projection doesn't correspond possible value predicate: fn:Eval(@PS &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31611"/>
			<description>Entry PS in Projection shall have one of types: Name, Number</description>
			<test>containsPS == false || PSHasTypeName == true || PSHasTypeNumber == true</test>
			<error>
				<message>Entry PS in Projection is not one of types: Name, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="14" testNumber="31612"/>
			<description>Entry OS with type Number in Projection shall correspond possible value predicate: fn:Eval(@OS &gt; 0)</description>
			<test>OSHasTypeNumber != true || OSNumberValue &gt; 0</test>
			<error>
				<message>Entry OS with type Number in Projection doesn't correspond possible value predicate: fn:Eval(@OS &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31613"/>
			<description>Entry OS in Projection shall have type Number</description>
			<test>containsOS == false || OSHasTypeNumber == true</test>
			<error>
				<message>Entry OS in Projection is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31614"/>
			<description>Entry CS with type Name in Projection shall have one of values: XNF, ANF</description>
			<test>CSHasTypeName != true || CSNameValue == "XNF" || CSNameValue == "ANF"</test>
			<error>
				<message>Entry CS with type Name in Projection has incorrect value %2 instead of XNF, ANF</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CSNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31615"/>
			<description>Entry CS in Projection shall have type Name</description>
			<test>containsCS == false || CSHasTypeName == true</test>
			<error>
				<message>Entry CS in Projection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31616"/>
			<description>Entry F in Projection shall have type Number</description>
			<test>containsF == false || FHasTypeNumber == true</test>
			<error>
				<message>Entry F in Projection is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="11" testNumber="31617"/>
			<description>Entry N in Projection is required, when fn:IsRequired(@Subtype == P)</description>
			<test>(containsN == true || (SubtypeNameValue == "P") == false)</test>
			<error>
				<message>Entry N in Projection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="14" testNumber="31618"/>
			<description>Entry N with type Number in Projection shall correspond possible value predicate: fn:Eval(((@Subtype == P) &amp;&amp; (@N &gt; 0)) || ((@Subtype == O) &amp;&amp; (@N &gt;= 0)))</description>
			<test>NHasTypeNumber != true || ((SubtypeNameValue == "P") &amp;&amp; (NNumberValue &gt; 0)) || ((SubtypeNameValue == "O") &amp;&amp; (NNumberValue &gt;= 0))</test>
			<error>
				<message>Entry N with type Number in Projection doesn't correspond possible value predicate: fn:Eval(((@Subtype == P) &amp;&amp; (@N &gt; 0)) || ((@Subtype == O) &amp;&amp; (@N &gt;= 0)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31619"/>
			<description>Entry N in Projection shall have type Number</description>
			<test>containsN == false || NHasTypeNumber == true</test>
			<error>
				<message>Entry N in Projection is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31620"/>
			<description>Entry OB with type Name in Projection shall have one of values: Min, Max, W, H, Absolute</description>
			<test>OBHasTypeName != true || OBNameValue == "W" || OBNameValue == "H" || OBNameValue == "Min" || OBNameValue == "Max" || OBNameValue == "Absolute"</test>
			<error>
				<message>Entry OB with type Name in Projection has incorrect value %2 instead of Min, Max, W, H, Absolute</message>
				<arguments>
					<argument>keyName</argument>
					<argument>OBNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31621"/>
			<description>Entry OB in Projection shall have type Name</description>
			<test>containsOB == false || OBHasTypeName == true</test>
			<error>
				<message>Entry OB in Projection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="14" testNumber="31622"/>
			<description>Entry FOV with type Number in Projection shall correspond possible value predicate: fn:Eval((@FOV &gt;= 0) &amp;&amp; (@FOV &lt;= 180))</description>
			<test>FOVHasTypeNumber != true || (FOVNumberValue &gt;= 0) &amp;&amp; (FOVNumberValue &lt;= 180)</test>
			<error>
				<message>Entry FOV with type Number in Projection doesn't correspond possible value predicate: fn:Eval((@FOV &gt;= 0) &amp;&amp; (@FOV &lt;= 180))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31623"/>
			<description>Entry FOV in Projection shall have type Number</description>
			<test>containsFOV == false || FOVHasTypeNumber == true</test>
			<error>
				<message>Entry FOV in Projection is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2Inks">
			<id specification="ISO_32000_1_7" clause="3" testNumber="31657"/>
			<description>ArrayOfOPI2Inks shall contain 1 + 2*n elements</description>
			<test>size &gt; 0 &amp;&amp; size % 2 == 1</test>
			<error>
				<message>ArrayOfOPI2Inks contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2Inks">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31658"/>
			<description>Entry 0 with type Name in ArrayOfOPI2Inks shall have value monochrome</description>
			<test>entry0HasTypeName != true || entry0NameValue == "monochrome"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOfOPI2Inks has incorrect value %2 instead of monochrome</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI2Inks">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31659"/>
			<description>Entry 0 in ArrayOfOPI2Inks shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOfOPI2Inks is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="31688"/>
			<description>ArrayOf_4Integers shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4Integers contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31689"/>
			<description>Entry 2 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31690"/>
			<description>Entry 0 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31691"/>
			<description>Entry 3 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 3 || entry3HasTypeInteger == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4Integers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31692"/>
			<description>Entry 1 in ArrayOf_4Integers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4Integers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="1" testNumber="31698"/>
			<description>ExDataProjection shall not contain entries except Subtype, M3DREF, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; elem != 'M3DREF' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ExDataProjection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; elem != 'M3DREF' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31699"/>
			<description>Entry Subtype in ExDataProjection is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in ExDataProjection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31700"/>
			<description>Entry Subtype with type Name in ExDataProjection shall have value 3DM</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "3DM"</test>
			<error>
				<message>Entry Subtype with type Name in ExDataProjection has incorrect value %2 instead of 3DM</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31701"/>
			<description>Entry Subtype in ExDataProjection shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in ExDataProjection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31702"/>
			<description>Entry M3DREF with type Dictionary in ExDataProjection shall be one of objects 3DMeasure3DC, 3DMeasureAD3, 3DMeasureLD3, 3DMeasurePD3, 3DMeasureRD3</description>
			<test>M3DREFHasTypeDictionary != true || M3DREF_size == 1</test>
			<error>
				<message>Entry M3DREF with type Dictionary in ExDataProjection is not one of objects 3DMeasure3DC, 3DMeasureAD3, 3DMeasureLD3, 3DMeasurePD3, 3DMeasureRD3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31703"/>
			<description>Entry M3DREF in ExDataProjection is required</description>
			<test>containsM3DREF == true</test>
			<error>
				<message>Entry M3DREF in ExDataProjection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="10" testNumber="31704"/>
			<description>Entry M3DREF with type Dictionary in ExDataProjection shall be indirect</description>
			<test>M3DREFHasTypeDictionary != true || isM3DREFIndirect == true</test>
			<error>
				<message>Entry M3DREF with type Dictionary in ExDataProjection is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31705"/>
			<description>Entry M3DREF in ExDataProjection shall have type Dictionary</description>
			<test>containsM3DREF == false || M3DREFHasTypeDictionary == true</test>
			<error>
				<message>Entry M3DREF in ExDataProjection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31706"/>
			<description>Entry Type in ExDataProjection is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in ExDataProjection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="6" testNumber="31707"/>
			<description>Entry Type with type Name in ExDataProjection shall have value ExData</description>
			<test>TypeHasTypeName != true || TypeNameValue == "ExData"</test>
			<error>
				<message>Entry Type with type Name in ExDataProjection has incorrect value %2 instead of ExData</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AExDataProjection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31708"/>
			<description>Entry Type in ExDataProjection shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ExDataProjection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="1" testNumber="31882"/>
			<description>FileTrailer shall not contain entries except Prev, XRefStm, Info, Root, ID, Size, Encrypt</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Prev' &amp;&amp; elem != 'XRefStm' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Encrypt').length == 0</test>
			<error>
				<message>FileTrailer contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Prev' &amp;&amp; elem != 'XRefStm' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Root' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'Encrypt').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="16" testNumber="31883"/>
			<description>If entry Prev with type Integer in FileTrailer corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>PrevHasTypeInteger != true || (isPrevIndirect == false)</test>
			<error>
				<message>Entry Prev with type Integer in FileTrailer is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="14" testNumber="31884"/>
			<description>Entry Prev with type Integer in FileTrailer shall correspond possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</description>
			<test>PrevHasTypeInteger != true || (PrevIntegerValue &gt;= 0) &amp;&amp; (PrevIntegerValue &lt;= fileSize)</test>
			<error>
				<message>Entry Prev with type Integer in FileTrailer doesn't correspond possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31885"/>
			<description>Entry Prev in FileTrailer shall have type Integer</description>
			<test>containsPrev == false || PrevHasTypeInteger == true</test>
			<error>
				<message>Entry Prev in FileTrailer is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="14" testNumber="31886"/>
			<description>Entry XRefStm with type Integer in FileTrailer shall correspond possible value predicate: fn:Eval((@XRefStm &gt;= 0) &amp;&amp; (@XRefStm &lt;= fn:FileSize()))</description>
			<test>XRefStmHasTypeInteger != true || (XRefStmIntegerValue &gt;= 0) &amp;&amp; (XRefStmIntegerValue &lt;= fileSize)</test>
			<error>
				<message>Entry XRefStm with type Integer in FileTrailer doesn't correspond possible value predicate: fn:Eval((@XRefStm &gt;= 0) &amp;&amp; (@XRefStm &lt;= fn:FileSize()))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31887"/>
			<description>Entry XRefStm in FileTrailer shall have type Integer</description>
			<test>containsXRefStm == false || XRefStmHasTypeInteger == true</test>
			<error>
				<message>Entry XRefStm in FileTrailer is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31888"/>
			<description>Entry Info with type Dictionary in FileTrailer shall be object DocInfo</description>
			<test>InfoHasTypeDictionary != true || Info_size == 1</test>
			<error>
				<message>Entry Info with type Dictionary in FileTrailer is not object DocInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="12" testNumber="31889"/>
			<description>If entry Info with type Dictionary in FileTrailer corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>InfoHasTypeDictionary != true || (isInfoIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Info with type Dictionary in FileTrailer is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31890"/>
			<description>Entry Info in FileTrailer shall have type Dictionary</description>
			<test>containsInfo == false || InfoHasTypeDictionary == true</test>
			<error>
				<message>Entry Info in FileTrailer is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31891"/>
			<description>Entry Root with type Dictionary in FileTrailer shall be object Catalog</description>
			<test>RootHasTypeDictionary != true || Root_size == 1</test>
			<error>
				<message>Entry Root with type Dictionary in FileTrailer is not object Catalog</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31892"/>
			<description>Entry Root in FileTrailer is required</description>
			<test>containsRoot == true</test>
			<error>
				<message>Entry Root in FileTrailer is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="10" testNumber="31893"/>
			<description>Entry Root with type Dictionary in FileTrailer shall be indirect</description>
			<test>RootHasTypeDictionary != true || isRootIndirect == true</test>
			<error>
				<message>Entry Root with type Dictionary in FileTrailer is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31894"/>
			<description>Entry Root in FileTrailer shall have type Dictionary</description>
			<test>containsRoot == false || RootHasTypeDictionary == true</test>
			<error>
				<message>Entry Root in FileTrailer is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31895"/>
			<description>Entry ID with type Array in FileTrailer shall be object ArrayOf_2UnencryptedStringsByte</description>
			<test>entryIDHasTypeArray != true || entryID_size == 1</test>
			<error>
				<message>Entry ID with type Array in FileTrailer is not object ArrayOf_2UnencryptedStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="11" testNumber="31896"/>
			<description>Entry ID in FileTrailer is required, when fn:IsRequired(fn:IsPresent(Encrypt))</description>
			<test>(containsID == true || ((containsEncrypt == true)) == false)</test>
			<error>
				<message>Entry ID in FileTrailer is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="16" testNumber="31897"/>
			<description>If entry ID with type Array in FileTrailer corresponds to condition fn:MustBeDirect(fn:IsPresent(Encrypt)), it shall be direct</description>
			<test>entryIDHasTypeArray != true || (isentryIDIndirect == false || ((containsEncrypt == true)) == false)</test>
			<error>
				<message>Entry ID with type Array in FileTrailer is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31898"/>
			<description>Entry ID in FileTrailer shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in FileTrailer is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="7" testNumber="31899"/>
			<description>Entry Size in FileTrailer is required</description>
			<test>containsSize == true</test>
			<error>
				<message>Entry Size in FileTrailer is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="16" testNumber="31900"/>
			<description>If entry Size with type Integer in FileTrailer corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>SizeHasTypeInteger != true || (isSizeIndirect == false)</test>
			<error>
				<message>Entry Size with type Integer in FileTrailer is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="14" testNumber="31901"/>
			<description>Entry Size with type Integer in FileTrailer shall correspond possible value predicate: fn:Eval(@Size &gt; 0)</description>
			<test>SizeHasTypeInteger != true || SizeIntegerValue &gt; 0</test>
			<error>
				<message>Entry Size with type Integer in FileTrailer doesn't correspond possible value predicate: fn:Eval(@Size &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31902"/>
			<description>Entry Size in FileTrailer shall have type Integer</description>
			<test>containsSize == false || SizeHasTypeInteger == true</test>
			<error>
				<message>Entry Size in FileTrailer is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="17" testNumber="31903"/>
			<description>Entry Encrypt with type Dictionary in FileTrailer shall be one of objects EncryptionStandard, EncryptionPublicKey</description>
			<test>EncryptHasTypeDictionary != true || Encrypt_size == 1</test>
			<error>
				<message>Entry Encrypt with type Dictionary in FileTrailer is not one of objects EncryptionStandard, EncryptionPublicKey</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_7" clause="8" testNumber="31904"/>
			<description>Entry Encrypt in FileTrailer shall have type Dictionary</description>
			<test>containsEncrypt == false || EncryptHasTypeDictionary == true</test>
			<error>
				<message>Entry Encrypt in FileTrailer is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="1" testNumber="32061"/>
			<description>FontFile shall not contain entries except FFilter, DL, Subtype, F, DecodeParms, Filter, FDecodeParms, Length2, Length1, Length, Length3</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FFilter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'F' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length3').length == 0</test>
			<error>
				<message>FontFile contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FFilter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'F' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Length3').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32062"/>
			<description>Entry FFilter with type Array in FontFile shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFile is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32063"/>
			<description>Entry FFilter with type Name in FontFile shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32064"/>
			<description>Entry FFilter in FontFile shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in FontFile is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="9" testNumber="32065"/>
			<description>Entry FFilter with type Array in FontFile shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32066"/>
			<description>Entry DL in FontFile shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="9" testNumber="32067"/>
			<description>Entry DL with type Integer in FontFile shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFile doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32068"/>
			<description>Entry Subtype with type Name in FontFile shall have one of values: OpenType, CIDFontType0C, Type1C</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1C" || SubtypeNameValue == "CIDFontType0C" || SubtypeNameValue == "OpenType"</test>
			<error>
				<message>Entry Subtype with type Name in FontFile has incorrect value %2 instead of OpenType, CIDFontType0C, Type1C</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32069"/>
			<description>Entry Subtype in FontFile shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32070"/>
			<description>Entry F with type Dictionary in FontFile shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFile is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32071"/>
			<description>Entry F in FontFile shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FontFile is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32072"/>
			<description>Entry DecodeParms with type Array in FontFile shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32073"/>
			<description>Entry DecodeParms with type Dictionary in FontFile shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32074"/>
			<description>Entry DecodeParms in FontFile shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="9" testNumber="32075"/>
			<description>Entry DecodeParms with type Array in FontFile shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32076"/>
			<description>Entry Filter with type Array in FontFile shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFile is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32077"/>
			<description>Entry Filter with type Name in FontFile shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFile has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32078"/>
			<description>Entry Filter in FontFile shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in FontFile is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="9" testNumber="32079"/>
			<description>Entry Filter with type Array in FontFile shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32080"/>
			<description>Entry FDecodeParms with type Array in FontFile shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32081"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32082"/>
			<description>Entry FDecodeParms in FontFile shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="9" testNumber="32083"/>
			<description>Entry FDecodeParms with type Array in FontFile shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32084"/>
			<description>Entry Length2 in FontFile shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="9" testNumber="32085"/>
			<description>Entry Length2 with type Integer in FontFile shall correspond special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile doesn't correspond special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32086"/>
			<description>Entry Length1 in FontFile shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="9" testNumber="32087"/>
			<description>Entry Length1 with type Integer in FontFile shall correspond special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile doesn't correspond special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="7" testNumber="32088"/>
			<description>Entry Length in FontFile is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32089"/>
			<description>Entry Length in FontFile shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32090"/>
			<description>Entry Length3 in FontFile shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile">
			<id specification="ISO_32000_1_7" clause="9" testNumber="32091"/>
			<description>Entry Length3 with type Integer in FontFile shall correspond special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile doesn't correspond special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="32143"/>
			<description>ArrayOfXRefWIntegers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOfXRefWIntegers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="16" testNumber="32144"/>
			<description>If entry 1 with type Integer in ArrayOfXRefWIntegers corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>entry1HasTypeInteger != true || (isentry1Indirect == false)</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfXRefWIntegers is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="14" testNumber="32145"/>
			<description>Entry 1 with type Integer in ArrayOfXRefWIntegers shall correspond possible value predicate: fn:Eval(@1 &gt; 0)</description>
			<test>entry1HasTypeInteger != true || entry1IntegerValue &gt; 0</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfXRefWIntegers doesn't correspond possible value predicate: fn:Eval(@1 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32146"/>
			<description>Entry 1 in ArrayOfXRefWIntegers shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfXRefWIntegers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="16" testNumber="32147"/>
			<description>If entry 2 with type Integer in ArrayOfXRefWIntegers corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>entry2HasTypeInteger != true || (isentry2Indirect == false)</test>
			<error>
				<message>Entry 2 with type Integer in ArrayOfXRefWIntegers is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="14" testNumber="32148"/>
			<description>Entry 2 with type Integer in ArrayOfXRefWIntegers shall correspond possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeInteger != true || entry2IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Integer in ArrayOfXRefWIntegers doesn't correspond possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32149"/>
			<description>Entry 2 in ArrayOfXRefWIntegers shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in ArrayOfXRefWIntegers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="16" testNumber="32150"/>
			<description>If entry 0 with type Integer in ArrayOfXRefWIntegers corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>entry0HasTypeInteger != true || (isentry0Indirect == false)</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfXRefWIntegers is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="14" testNumber="32151"/>
			<description>Entry 0 with type Integer in ArrayOfXRefWIntegers shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeInteger != true || entry0IntegerValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfXRefWIntegers doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefWIntegers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32152"/>
			<description>Entry 0 in ArrayOfXRefWIntegers shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOfXRefWIntegers is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXFASubArray">
			<id specification="ISO_32000_1_7" clause="2" testNumber="32168"/>
			<description>ArrayOfXFASubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfXFASubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXFASubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32169"/>
			<description>Entry 0 in ArrayOfXFASubArray shall have type StringText</description>
			<test>size &lt;= 0 || entry0HasTypeStringText == true</test>
			<error>
				<message>Entry 0 in ArrayOfXFASubArray is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXFASubArray">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32170"/>
			<description>Entry 1 with type Stream in ArrayOfXFASubArray shall be object Stream</description>
			<test>entry1HasTypeStream != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Stream in ArrayOfXFASubArray is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXFASubArray">
			<id specification="ISO_32000_1_7" clause="10" testNumber="32171"/>
			<description>Entry 1 with type Stream in ArrayOfXFASubArray shall be indirect</description>
			<test>entry1HasTypeStream != true || isentry1Indirect == true</test>
			<error>
				<message>Entry 1 with type Stream in ArrayOfXFASubArray is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXFASubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32172"/>
			<description>Entry 1 in ArrayOfXFASubArray shall have type Stream</description>
			<test>size &lt;= 1 || entry1HasTypeStream == true</test>
			<error>
				<message>Entry 1 in ArrayOfXFASubArray is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="1" testNumber="32276"/>
			<description>ActionLaunch shall not contain entries except Win, F, Mac, S, NewWindow, Next, Type, Unix</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Win' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'S' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Unix').length == 0</test>
			<error>
				<message>ActionLaunch contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Win' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'S' &amp;&amp; elem != 'NewWindow' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Unix').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32277"/>
			<description>Entry Win with type Dictionary in ActionLaunch shall be object MicrosoftWindowsLaunchParam</description>
			<test>WinHasTypeDictionary != true || Win_size == 1</test>
			<error>
				<message>Entry Win with type Dictionary in ActionLaunch is not object MicrosoftWindowsLaunchParam</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32278"/>
			<description>Entry Win in ActionLaunch shall have type Dictionary</description>
			<test>containsWin == false || WinHasTypeDictionary == true</test>
			<error>
				<message>Entry Win in ActionLaunch is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32279"/>
			<description>Entry F with type Dictionary in ActionLaunch shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionLaunch is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="11" testNumber="32280"/>
			<description>Entry F in ActionLaunch is required, when fn:IsRequired(fn:Not(fn:IsPresent(Win) || fn:IsPresent(Mac) || fn:IsPresent(Unix)))</description>
			<test>(containsF == true || (((containsWin == true) || (containsMac == true) || (containsUnix == true)) != true) == false)</test>
			<error>
				<message>Entry F in ActionLaunch is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32281"/>
			<description>Entry F in ActionLaunch shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionLaunch is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32282"/>
			<description>Entry Mac in ActionLaunch shall have type Null</description>
			<test>containsMac == false || MacHasTypeNull == true</test>
			<error>
				<message>Entry Mac in ActionLaunch is not of type Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="7" testNumber="32283"/>
			<description>Entry S in ActionLaunch is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionLaunch is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32284"/>
			<description>Entry S with type Name in ActionLaunch shall have value Launch</description>
			<test>SHasTypeName != true || SNameValue == "Launch"</test>
			<error>
				<message>Entry S with type Name in ActionLaunch has incorrect value %2 instead of Launch</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32285"/>
			<description>Entry S in ActionLaunch shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionLaunch is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32286"/>
			<description>Entry NewWindow in ActionLaunch shall have type Boolean</description>
			<test>containsNewWindow == false || NewWindowHasTypeBoolean == true</test>
			<error>
				<message>Entry NewWindow in ActionLaunch is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32287"/>
			<description>Entry Next with type Array in ActionLaunch shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionLaunch is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32288"/>
			<description>Entry Next with type Dictionary in ActionLaunch shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionLaunch is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32289"/>
			<description>Entry Next in ActionLaunch shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionLaunch is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32290"/>
			<description>Entry Type with type Name in ActionLaunch shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionLaunch has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32291"/>
			<description>Entry Type in ActionLaunch shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionLaunch is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32292"/>
			<description>Entry Unix in ActionLaunch shall have type Null</description>
			<test>containsUnix == false || UnixHasTypeNull == true</test>
			<error>
				<message>Entry Unix in ActionLaunch is not of type Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="1" testNumber="32449"/>
			<description>FieldTx shall not contain entries except FT, Kids, Ff, Q, V, TU, MaxLen, AA, DA, DV, Parent, TM, DS, T, RV</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FT' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'V' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'MaxLen' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'T' &amp;&amp; elem != 'RV').length == 0</test>
			<error>
				<message>FieldTx contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FT' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'V' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'MaxLen' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'T' &amp;&amp; elem != 'RV').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="7" testNumber="32450"/>
			<description>Entry FT in FieldTx is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldTx is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32451"/>
			<description>Entry FT with type Name in FieldTx shall have value Tx</description>
			<test>FTHasTypeName != true || FTNameValue == "Tx"</test>
			<error>
				<message>Entry FT with type Name in FieldTx has incorrect value %2 instead of Tx</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32452"/>
			<description>Entry FT in FieldTx shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldTx is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32453"/>
			<description>Entry Kids with type Array in FieldTx shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldTx is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32454"/>
			<description>Entry Kids in FieldTx shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldTx is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32455"/>
			<description>Entry Ff in FieldTx shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldTx is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="9" testNumber="32456"/>
			<description>Entry Ff with type Bitmask in FieldTx shall correspond special case: fn:Eval(fn:BitsClear(15 , 20) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitClear(21)) &amp;&amp; fn:BitClear(22) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(23 , 24)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(25 , 26)) &amp;&amp; fn:BitsClear(27 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0) &amp;&amp; true &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; true &amp;&amp; true &amp;&amp; ((FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldTx doesn't correspond special case: fn:Eval(fn:BitsClear(15 , 20) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitClear(21)) &amp;&amp; fn:BitClear(22) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(23 , 24)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(25 , 26)) &amp;&amp; fn:BitsClear(27 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32457"/>
			<description>Entry Q with type Integer in FieldTx shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldTx has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32458"/>
			<description>Entry Q in FieldTx shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldTx is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32459"/>
			<description>Entry V with type Stream in FieldTx shall be object Stream</description>
			<test>VHasTypeStream != true || V_size == 1</test>
			<error>
				<message>Entry V with type Stream in FieldTx is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="10" testNumber="32460"/>
			<description>Entry V with type Stream in FieldTx shall be indirect</description>
			<test>VHasTypeStream != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Stream in FieldTx is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32461"/>
			<description>Entry V in FieldTx shall have one of types: StringText, Stream</description>
			<test>containsV == false || VHasTypeStringText == true || VHasTypeStream == true</test>
			<error>
				<message>Entry V in FieldTx is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32462"/>
			<description>Entry TU in FieldTx shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldTx is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32463"/>
			<description>Entry MaxLen in FieldTx shall have type Integer</description>
			<test>containsMaxLen == false || MaxLenHasTypeInteger == true</test>
			<error>
				<message>Entry MaxLen in FieldTx is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="9" testNumber="32464"/>
			<description>Entry MaxLen with type Integer in FieldTx shall correspond special case: fn:Eval(@MaxLen &gt;= 0)</description>
			<test>MaxLenHasTypeInteger != true || (MaxLenIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry MaxLen with type Integer in FieldTx doesn't correspond special case: fn:Eval(@MaxLen &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32465"/>
			<description>Entry AA with type Dictionary in FieldTx shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldTx is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32466"/>
			<description>Entry AA in FieldTx shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldTx is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="7" testNumber="32467"/>
			<description>Entry DA in FieldTx is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldTx is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32468"/>
			<description>Entry DA in FieldTx shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldTx is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32469"/>
			<description>Entry DV with type Stream in FieldTx shall be object Stream</description>
			<test>DVHasTypeStream != true || DV_size == 1</test>
			<error>
				<message>Entry DV with type Stream in FieldTx is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="10" testNumber="32470"/>
			<description>Entry DV with type Stream in FieldTx shall be indirect</description>
			<test>DVHasTypeStream != true || isDVIndirect == true</test>
			<error>
				<message>Entry DV with type Stream in FieldTx is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32471"/>
			<description>Entry DV in FieldTx shall have one of types: StringText, Stream</description>
			<test>containsDV == false || DVHasTypeStringText == true || DVHasTypeStream == true</test>
			<error>
				<message>Entry DV in FieldTx is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32472"/>
			<description>Entry Parent with type Dictionary in FieldTx shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldTx is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32473"/>
			<description>Entry Parent in FieldTx shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldTx is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32474"/>
			<description>Entry TM in FieldTx shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldTx is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32475"/>
			<description>Entry DS in FieldTx shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldTx is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32476"/>
			<description>Entry T in FieldTx shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldTx is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32477"/>
			<description>Entry RV with type Stream in FieldTx shall be object Stream</description>
			<test>RVHasTypeStream != true || RV_size == 1</test>
			<error>
				<message>Entry RV with type Stream in FieldTx is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="10" testNumber="32478"/>
			<description>Entry RV with type Stream in FieldTx shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldTx is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldTx">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32479"/>
			<description>Entry RV in FieldTx shall have one of types: StringText, Stream</description>
			<test>containsRV == false || RVHasTypeStringText == true || RVHasTypeStream == true</test>
			<error>
				<message>Entry RV in FieldTx is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="1" testNumber="32543"/>
			<description>SignatureReferenceFieldMDP shall not contain entries except TransformMethod, TransformParams, Type, Data, DigestMethod</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Data' &amp;&amp; elem != 'DigestMethod').length == 0</test>
			<error>
				<message>SignatureReferenceFieldMDP contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'TransformMethod' &amp;&amp; elem != 'TransformParams' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Data' &amp;&amp; elem != 'DigestMethod').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="7" testNumber="32544"/>
			<description>Entry TransformMethod in SignatureReferenceFieldMDP is required</description>
			<test>containsTransformMethod == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceFieldMDP is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32545"/>
			<description>Entry TransformMethod with type Name in SignatureReferenceFieldMDP shall have value FieldMDP</description>
			<test>TransformMethodHasTypeName != true || TransformMethodNameValue == "FieldMDP"</test>
			<error>
				<message>Entry TransformMethod with type Name in SignatureReferenceFieldMDP has incorrect value %2 instead of FieldMDP</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TransformMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32546"/>
			<description>Entry TransformMethod in SignatureReferenceFieldMDP shall have type Name</description>
			<test>containsTransformMethod == false || TransformMethodHasTypeName == true</test>
			<error>
				<message>Entry TransformMethod in SignatureReferenceFieldMDP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32547"/>
			<description>Entry TransformParams with type Dictionary in SignatureReferenceFieldMDP shall be object FieldMDPTransformParameters</description>
			<test>TransformParamsHasTypeDictionary != true || TransformParams_size == 1</test>
			<error>
				<message>Entry TransformParams with type Dictionary in SignatureReferenceFieldMDP is not object FieldMDPTransformParameters</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32548"/>
			<description>Entry TransformParams in SignatureReferenceFieldMDP shall have type Dictionary</description>
			<test>containsTransformParams == false || TransformParamsHasTypeDictionary == true</test>
			<error>
				<message>Entry TransformParams in SignatureReferenceFieldMDP is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32549"/>
			<description>Entry Type with type Name in SignatureReferenceFieldMDP shall have value SigRef</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigRef"</test>
			<error>
				<message>Entry Type with type Name in SignatureReferenceFieldMDP has incorrect value %2 instead of SigRef</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32550"/>
			<description>Entry Type in SignatureReferenceFieldMDP shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SignatureReferenceFieldMDP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32551"/>
			<description>Entry Data with type Array in SignatureReferenceFieldMDP shall be object _UniversalArray</description>
			<test>DataHasTypeArray != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Array in SignatureReferenceFieldMDP is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32552"/>
			<description>Entry Data with type Dictionary in SignatureReferenceFieldMDP shall be object _UniversalDictionary</description>
			<test>DataHasTypeDictionary != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Dictionary in SignatureReferenceFieldMDP is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32553"/>
			<description>Entry Data with type Stream in SignatureReferenceFieldMDP shall be object Stream</description>
			<test>DataHasTypeStream != true || Data_size == 1</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceFieldMDP is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="7" testNumber="32554"/>
			<description>Entry Data in SignatureReferenceFieldMDP is required</description>
			<test>containsData == true</test>
			<error>
				<message>Entry Data in SignatureReferenceFieldMDP is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="10" testNumber="32555"/>
			<description>Entry Data with type Stream in SignatureReferenceFieldMDP shall be indirect</description>
			<test>DataHasTypeStream != true || isDataIndirect == true</test>
			<error>
				<message>Entry Data with type Stream in SignatureReferenceFieldMDP is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32556"/>
			<description>Entry Data in SignatureReferenceFieldMDP shall have one of types: Name, Array, Boolean, Integer, Dictionary, Stream, String</description>
			<test>containsData == false || DataHasTypeName == true || DataHasTypeArray == true || DataHasTypeBoolean == true || DataHasTypeInteger == true || DataHasTypeDictionary == true || DataHasTypeStream == true || DataHasTypeString == true</test>
			<error>
				<message>Entry Data in SignatureReferenceFieldMDP is not one of types: Name, Array, Boolean, Integer, Dictionary, Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="13" testNumber="32557"/>
			<description>Entry DigestMethod with type Name in SignatureReferenceFieldMDP shall have one of values: SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</description>
			<test>DigestMethodHasTypeName != true || DigestMethodNameValue == "MD5" || DigestMethodNameValue == "SHA1" || DigestMethodNameValue == SHA3-256 || DigestMethodNameValue == SHA3-384 || DigestMethodNameValue == SHA3-512 || DigestMethodNameValue == SHAKE256</test>
			<error>
				<message>Entry DigestMethod with type Name in SignatureReferenceFieldMDP has incorrect value %2 instead of SHA3-512, SHA1, SHAKE256, SHA3-384, SHA3-256, MD5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DigestMethodNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureReferenceFieldMDP">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32558"/>
			<description>Entry DigestMethod in SignatureReferenceFieldMDP shall have type Name</description>
			<test>containsDigestMethod == false || DigestMethodHasTypeName == true</test>
			<error>
				<message>Entry DigestMethod in SignatureReferenceFieldMDP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_7" clause="2" testNumber="32592"/>
			<description>ArrayOf_2LineEndingsNames shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2LineEndingsNames contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32593"/>
			<description>Entry 0 with type Name in ArrayOf_2LineEndingsNames shall have one of values: ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Square" || entry0NameValue == "Circle" || entry0NameValue == "Diamond" || entry0NameValue == "OpenArrow" || entry0NameValue == "ClosedArrow" || entry0NameValue == "None" || entry0NameValue == "Butt" || entry0NameValue == "ROpenArrow" || entry0NameValue == "RClosedArrow" || entry0NameValue == "Slash"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOf_2LineEndingsNames has incorrect value %2 instead of ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32594"/>
			<description>Entry 0 in ArrayOf_2LineEndingsNames shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2LineEndingsNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32595"/>
			<description>Entry 1 with type Name in ArrayOf_2LineEndingsNames shall have one of values: ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</description>
			<test>entry1HasTypeName != true || entry1NameValue == "Square" || entry1NameValue == "Circle" || entry1NameValue == "Diamond" || entry1NameValue == "OpenArrow" || entry1NameValue == "ClosedArrow" || entry1NameValue == "None" || entry1NameValue == "Butt" || entry1NameValue == "ROpenArrow" || entry1NameValue == "RClosedArrow" || entry1NameValue == "Slash"</test>
			<error>
				<message>Entry 1 with type Name in ArrayOf_2LineEndingsNames has incorrect value %2 instead of ClosedArrow, Circle, ROpenArrow, Slash, Diamond, OpenArrow, Square, Butt, None, RClosedArrow</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2LineEndingsNames">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32596"/>
			<description>Entry 1 in ArrayOf_2LineEndingsNames shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2LineEndingsNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="1" testNumber="32602"/>
			<description>3DCrossSection shall not contain entries except IV, PC, C, IC, O, PO, PV, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'IV' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'C' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'O' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>3DCrossSection contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'IV' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'C' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'O' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'PV' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32603"/>
			<description>Entry IV in 3DCrossSection shall have type Boolean</description>
			<test>containsIV == false || IVHasTypeBoolean == true</test>
			<error>
				<message>Entry IV in 3DCrossSection is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32604"/>
			<description>Entry PC with type Array in 3DCrossSection shall be object ArrayOf_4ColourSpaceEntries</description>
			<test>PCHasTypeArray != true || PC_size == 1</test>
			<error>
				<message>Entry PC with type Array in 3DCrossSection is not object ArrayOf_4ColourSpaceEntries</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32605"/>
			<description>Entry PC in 3DCrossSection shall have type Array</description>
			<test>containsPC == false || PCHasTypeArray == true</test>
			<error>
				<message>Entry PC in 3DCrossSection is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32606"/>
			<description>Entry C with type Array in 3DCrossSection shall be object ArrayOf_3CenterOfRotationNumbers</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in 3DCrossSection is not object ArrayOf_3CenterOfRotationNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32607"/>
			<description>Entry C in 3DCrossSection shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DCrossSection is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32608"/>
			<description>Entry IC with type Array in 3DCrossSection shall be object ArrayOf_4ColourSpaceEntries</description>
			<test>ICHasTypeArray != true || IC_size == 1</test>
			<error>
				<message>Entry IC with type Array in 3DCrossSection is not object ArrayOf_4ColourSpaceEntries</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32609"/>
			<description>Entry IC in 3DCrossSection shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in 3DCrossSection is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32610"/>
			<description>Entry O with type Array in 3DCrossSection shall be object ArrayOf_3OrientationNumbers</description>
			<test>OHasTypeArray != true || O_size == 1</test>
			<error>
				<message>Entry O with type Array in 3DCrossSection is not object ArrayOf_3OrientationNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="7" testNumber="32611"/>
			<description>Entry O in 3DCrossSection is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in 3DCrossSection is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32612"/>
			<description>Entry O in 3DCrossSection shall have type Array</description>
			<test>containsO == false || OHasTypeArray == true</test>
			<error>
				<message>Entry O in 3DCrossSection is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="14" testNumber="32613"/>
			<description>Entry PO with type Number in 3DCrossSection shall correspond possible value predicate: fn:Eval((@PO &gt;= 0) &amp;&amp; (@PO &lt;= 1))</description>
			<test>POHasTypeNumber != true || (PONumberValue &gt;= 0) &amp;&amp; (PONumberValue &lt;= 1)</test>
			<error>
				<message>Entry PO with type Number in 3DCrossSection doesn't correspond possible value predicate: fn:Eval((@PO &gt;= 0) &amp;&amp; (@PO &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32614"/>
			<description>Entry PO in 3DCrossSection shall have type Number</description>
			<test>containsPO == false || POHasTypeNumber == true</test>
			<error>
				<message>Entry PO in 3DCrossSection is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32615"/>
			<description>Entry PV in 3DCrossSection shall have type Boolean</description>
			<test>containsPV == false || PVHasTypeBoolean == true</test>
			<error>
				<message>Entry PV in 3DCrossSection is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32616"/>
			<description>Entry Type with type Name in 3DCrossSection shall have value 3DCrossSection</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DCrossSection"</test>
			<error>
				<message>Entry Type with type Name in 3DCrossSection has incorrect value %2 instead of 3DCrossSection</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DCrossSection">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32617"/>
			<description>Entry Type in 3DCrossSection shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DCrossSection is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="14" testNumber="32690"/>
			<description>Entry 0 with type Number in ArrayOf_4NumbersColorAnnotation shall correspond possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</description>
			<test>entry0HasTypeNumber != true || (entry0NumberValue &gt;= 0) &amp;&amp; (entry0NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4NumbersColorAnnotation doesn't correspond possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32691"/>
			<description>Entry 0 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="14" testNumber="32692"/>
			<description>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation shall correspond possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation doesn't correspond possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32693"/>
			<description>Entry 1 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="9" testNumber="32694"/>
			<description>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation shall correspond special case: fn:Eval(fn:IsPresent(2))</description>
			<test>entry1HasTypeNumber != true || ((contains2 == true))</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation doesn't correspond special case: fn:Eval(fn:IsPresent(2))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="14" testNumber="32695"/>
			<description>Entry 3 with type Number in ArrayOf_4NumbersColorAnnotation shall correspond possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</description>
			<test>entry3HasTypeNumber != true || (entry3NumberValue &gt;= 0) &amp;&amp; (entry3NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 3 with type Number in ArrayOf_4NumbersColorAnnotation doesn't correspond possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32696"/>
			<description>Entry 3 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="14" testNumber="32697"/>
			<description>Entry 2 with type Number in ArrayOf_4NumbersColorAnnotation shall correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4NumbersColorAnnotation doesn't correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32698"/>
			<description>Entry 2 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForEnforceEntry">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32708"/>
			<description>Entry with type Name in ArrayOfNamesForEnforce shall have value PrintScaling</description>
			<test>HasTypeName != true || NameValue == "PrintScaling"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfNamesForEnforce has incorrect value %2 instead of PrintScaling</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForEnforceEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32709"/>
			<description>Entry in ArrayOfNamesForEnforce shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfNamesForEnforce is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForEnforceEntry">
			<id specification="ISO_32000_1_7" clause="9" testNumber="32710"/>
			<description>Entry with type Name in ArrayOfNamesForEnforce shall correspond special case: fn:Eval(parent::@PrintScaling!= AppDefault)</description>
			<test>HasTypeName != true || (parentPrintScalingNameValue != "AppDefault")</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfNamesForEnforce doesn't correspond special case: fn:Eval(parent::@PrintScaling!= AppDefault)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="4" testNumber="32770"/>
			<description>DeviceNColorSpace shall contain at least 4 elements</description>
			<test>size &gt;= 4</test>
			<error>
				<message>DeviceNColorSpace contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32771"/>
			<description>Entry 2 with type Array in DeviceNColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</description>
			<test>entry2HasTypeArray != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Array in DeviceNColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32772"/>
			<description>Entry 2 with type Name in DeviceNColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry2HasTypeName != true || entry2NameValue == "DeviceCMYK" || entry2NameValue == "DeviceRGB" || entry2NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 2 with type Name in DeviceNColorSpace has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32773"/>
			<description>Entry 2 in DeviceNColorSpace shall have one of types: Name, Array</description>
			<test>size &lt;= 2 || entry2HasTypeName == true || entry2HasTypeArray == true</test>
			<error>
				<message>Entry 2 in DeviceNColorSpace is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32774"/>
			<description>Entry 0 with type Name in DeviceNColorSpace shall have value DeviceN</description>
			<test>entry0HasTypeName != true || entry0NameValue == "DeviceN"</test>
			<error>
				<message>Entry 0 with type Name in DeviceNColorSpace has incorrect value %2 instead of DeviceN</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32775"/>
			<description>Entry 0 in DeviceNColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in DeviceNColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32776"/>
			<description>Entry 4 with type Dictionary in DeviceNColorSpace shall be object DeviceNDict</description>
			<test>entry4HasTypeDictionary != true || entry4_size == 1</test>
			<error>
				<message>Entry 4 with type Dictionary in DeviceNColorSpace is not object DeviceNDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32777"/>
			<description>Entry 4 in DeviceNColorSpace shall have type Dictionary</description>
			<test>size &lt;= 4 || entry4HasTypeDictionary == true</test>
			<error>
				<message>Entry 4 in DeviceNColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32778"/>
			<description>Entry 1 with type Array in DeviceNColorSpace shall be object ArrayOfNamesGeneral</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in DeviceNColorSpace is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32779"/>
			<description>Entry 1 in DeviceNColorSpace shall have type Array</description>
			<test>size &lt;= 1 || entry1HasTypeArray == true</test>
			<error>
				<message>Entry 1 in DeviceNColorSpace is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32780"/>
			<description>Entry 3 with type Dictionary in DeviceNColorSpace shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry3HasTypeDictionary != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Dictionary in DeviceNColorSpace is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32781"/>
			<description>Entry 3 with type Stream in DeviceNColorSpace shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in DeviceNColorSpace is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="10" testNumber="32782"/>
			<description>Entry 3 with type Stream in DeviceNColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in DeviceNColorSpace is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32783"/>
			<description>Entry 3 in DeviceNColorSpace shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 3 || entry3HasTypeDictionary == true || entry3HasTypeStream == true</test>
			<error>
				<message>Entry 3 in DeviceNColorSpace is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="32816"/>
			<description>ArrayOf_4BorderThicknessNumbers shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4BorderThicknessNumbers contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="14" testNumber="32817"/>
			<description>Entry 3 with type Number in ArrayOf_4BorderThicknessNumbers shall correspond possible value predicate: fn:Eval(@3 &gt;= 0)</description>
			<test>entry3HasTypeNumber != true || entry3NumberValue &gt;= 0</test>
			<error>
				<message>Entry 3 with type Number in ArrayOf_4BorderThicknessNumbers doesn't correspond possible value predicate: fn:Eval(@3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32818"/>
			<description>Entry 3 in ArrayOf_4BorderThicknessNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 3 || entry3HasTypeNull == true || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4BorderThicknessNumbers is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="14" testNumber="32819"/>
			<description>Entry 0 with type Number in ArrayOf_4BorderThicknessNumbers shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4BorderThicknessNumbers doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32820"/>
			<description>Entry 0 in ArrayOf_4BorderThicknessNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 0 || entry0HasTypeNull == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4BorderThicknessNumbers is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="14" testNumber="32821"/>
			<description>Entry 1 with type Number in ArrayOf_4BorderThicknessNumbers shall correspond possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4BorderThicknessNumbers doesn't correspond possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32822"/>
			<description>Entry 1 in ArrayOf_4BorderThicknessNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 1 || entry1HasTypeNull == true || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4BorderThicknessNumbers is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="14" testNumber="32823"/>
			<description>Entry 2 with type Number in ArrayOf_4BorderThicknessNumbers shall correspond possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4BorderThicknessNumbers doesn't correspond possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderThicknessNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32824"/>
			<description>Entry 2 in ArrayOf_4BorderThicknessNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4BorderThicknessNumbers is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeEmbeddedFilesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32840"/>
			<description>Entry with type Dictionary in NameNameTreeEmbeddedFiles shall be object FileSpecification</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in NameNameTreeEmbeddedFiles is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeEmbeddedFilesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32841"/>
			<description>Entry in NameNameTreeEmbeddedFiles shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in NameNameTreeEmbeddedFiles is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="ISO_32000_1_7" clause="5" testNumber="32860"/>
			<description>Entry in ArrayOfNamesForProcSet is deprecated since PDF 1.4</description>
			<test>false</test>
			<error>
				<message>Entry %1 in ArrayOfNamesForProcSet is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32861"/>
			<description>Entry with type Name in ArrayOfNamesForProcSet shall have one of values: ImageI, PDF, ImageC, ImageB, Text</description>
			<test>HasTypeName != true || NameValue == "PDF" || NameValue == "Text" || NameValue == "ImageB" || NameValue == "ImageC" || NameValue == "ImageI"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfNamesForProcSet has incorrect value %2 instead of ImageI, PDF, ImageC, ImageB, Text</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32862"/>
			<description>Entry in ArrayOfNamesForProcSet shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfNamesForProcSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDecodeParamsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32889"/>
			<description>Entry with type Dictionary in ArrayOfDecodeParams shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfDecodeParams is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDecodeParamsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32890"/>
			<description>Entry in ArrayOfDecodeParams shall have one of types: Null, Dictionary</description>
			<test>HasTypeNull == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfDecodeParams is not one of types: Null, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="32919"/>
			<description>SignatureBuildPropDict shall not contain entries except PubSec, SigQ, App, Filter</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PubSec' &amp;&amp; elem != 'SigQ' &amp;&amp; elem != 'App' &amp;&amp; elem != 'Filter').length == 0</test>
			<error>
				<message>SignatureBuildPropDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PubSec' &amp;&amp; elem != 'SigQ' &amp;&amp; elem != 'App' &amp;&amp; elem != 'Filter').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32920"/>
			<description>Entry PubSec with type Dictionary in SignatureBuildPropDict shall be object SignatureBuildDataDict</description>
			<test>PubSecHasTypeDictionary != true || PubSec_size == 1</test>
			<error>
				<message>Entry PubSec with type Dictionary in SignatureBuildPropDict is not object SignatureBuildDataDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="16" testNumber="32921"/>
			<description>If entry PubSec with type Dictionary in SignatureBuildPropDict corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>PubSecHasTypeDictionary != true || (isPubSecIndirect == false)</test>
			<error>
				<message>Entry PubSec with type Dictionary in SignatureBuildPropDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32922"/>
			<description>Entry PubSec in SignatureBuildPropDict shall have type Dictionary</description>
			<test>containsPubSec == false || PubSecHasTypeDictionary == true</test>
			<error>
				<message>Entry PubSec in SignatureBuildPropDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32923"/>
			<description>Entry SigQ with type Dictionary in SignatureBuildPropDict shall be object SignatureBuildDataSigQDict</description>
			<test>SigQHasTypeDictionary != true || SigQ_size == 1</test>
			<error>
				<message>Entry SigQ with type Dictionary in SignatureBuildPropDict is not object SignatureBuildDataSigQDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="16" testNumber="32924"/>
			<description>If entry SigQ with type Dictionary in SignatureBuildPropDict corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>SigQHasTypeDictionary != true || (isSigQIndirect == false)</test>
			<error>
				<message>Entry SigQ with type Dictionary in SignatureBuildPropDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32925"/>
			<description>Entry SigQ in SignatureBuildPropDict shall have type Dictionary</description>
			<test>containsSigQ == false || SigQHasTypeDictionary == true</test>
			<error>
				<message>Entry SigQ in SignatureBuildPropDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32926"/>
			<description>Entry App with type Dictionary in SignatureBuildPropDict shall be object SignatureBuildDataAppDict</description>
			<test>AppHasTypeDictionary != true || App_size == 1</test>
			<error>
				<message>Entry App with type Dictionary in SignatureBuildPropDict is not object SignatureBuildDataAppDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="16" testNumber="32927"/>
			<description>If entry App with type Dictionary in SignatureBuildPropDict corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>AppHasTypeDictionary != true || (isAppIndirect == false)</test>
			<error>
				<message>Entry App with type Dictionary in SignatureBuildPropDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32928"/>
			<description>Entry App in SignatureBuildPropDict shall have type Dictionary</description>
			<test>containsApp == false || AppHasTypeDictionary == true</test>
			<error>
				<message>Entry App in SignatureBuildPropDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32929"/>
			<description>Entry Filter with type Dictionary in SignatureBuildPropDict shall be object SignatureBuildDataDict</description>
			<test>FilterHasTypeDictionary != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Dictionary in SignatureBuildPropDict is not object SignatureBuildDataDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="16" testNumber="32930"/>
			<description>If entry Filter with type Dictionary in SignatureBuildPropDict corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>FilterHasTypeDictionary != true || (isFilterIndirect == false)</test>
			<error>
				<message>Entry Filter with type Dictionary in SignatureBuildPropDict is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignatureBuildPropDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32931"/>
			<description>Entry Filter in SignatureBuildPropDict shall have type Dictionary</description>
			<test>containsFilter == false || FilterHasTypeDictionary == true</test>
			<error>
				<message>Entry Filter in SignatureBuildPropDict is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="1" testNumber="32945"/>
			<description>3DMeasure3DC shall not contain entries except C, N1, TS, TP, TRL, Type, Subtype, TB, A1, S, UT</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TB' &amp;&amp; elem != 'A1' &amp;&amp; elem != 'S' &amp;&amp; elem != 'UT').length == 0</test>
			<error>
				<message>3DMeasure3DC contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TB' &amp;&amp; elem != 'A1' &amp;&amp; elem != 'S' &amp;&amp; elem != 'UT').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32946"/>
			<description>Entry C with type Array in 3DMeasure3DC shall be object ArrayOf_3RGBNumbers</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in 3DMeasure3DC is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32947"/>
			<description>Entry C in 3DMeasure3DC shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DMeasure3DC is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32948"/>
			<description>Entry N1 in 3DMeasure3DC shall have type StringText</description>
			<test>containsN1 == false || N1HasTypeStringText == true</test>
			<error>
				<message>Entry N1 in 3DMeasure3DC is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32949"/>
			<description>Entry TS in 3DMeasure3DC shall have type Number</description>
			<test>containsTS == false || TSHasTypeNumber == true</test>
			<error>
				<message>Entry TS in 3DMeasure3DC is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32950"/>
			<description>Entry TP with type Array in 3DMeasure3DC shall be object ArrayOf_3Numbers</description>
			<test>TPHasTypeArray != true || TP_size == 1</test>
			<error>
				<message>Entry TP with type Array in 3DMeasure3DC is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="7" testNumber="32951"/>
			<description>Entry TP in 3DMeasure3DC is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in 3DMeasure3DC is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32952"/>
			<description>Entry TP in 3DMeasure3DC shall have type Array</description>
			<test>containsTP == false || TPHasTypeArray == true</test>
			<error>
				<message>Entry TP in 3DMeasure3DC is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32953"/>
			<description>Entry TRL in 3DMeasure3DC shall have type StringText</description>
			<test>containsTRL == false || TRLHasTypeStringText == true</test>
			<error>
				<message>Entry TRL in 3DMeasure3DC is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32954"/>
			<description>Entry Type with type Name in 3DMeasure3DC shall have value 3DMeasure</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DMeasure"</test>
			<error>
				<message>Entry Type with type Name in 3DMeasure3DC has incorrect value %2 instead of 3DMeasure</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32955"/>
			<description>Entry Type in 3DMeasure3DC shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DMeasure3DC is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="7" testNumber="32956"/>
			<description>Entry Subtype in 3DMeasure3DC is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DMeasure3DC is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="6" testNumber="32957"/>
			<description>Entry Subtype with type Name in 3DMeasure3DC shall have value 3DC</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "3DC"</test>
			<error>
				<message>Entry Subtype with type Name in 3DMeasure3DC has incorrect value %2 instead of 3DC</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32958"/>
			<description>Entry Subtype in 3DMeasure3DC shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DMeasure3DC is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32959"/>
			<description>Entry TB with type Array in 3DMeasure3DC shall be object ArrayOf_2Integers</description>
			<test>TBHasTypeArray != true || TB_size == 1</test>
			<error>
				<message>Entry TB with type Array in 3DMeasure3DC is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32960"/>
			<description>Entry TB in 3DMeasure3DC shall have type Array</description>
			<test>containsTB == false || TBHasTypeArray == true</test>
			<error>
				<message>Entry TB in 3DMeasure3DC is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32961"/>
			<description>Entry A1 with type Array in 3DMeasure3DC shall be object ArrayOf_3Numbers</description>
			<test>A1HasTypeArray != true || A1_size == 1</test>
			<error>
				<message>Entry A1 with type Array in 3DMeasure3DC is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="7" testNumber="32962"/>
			<description>Entry A1 in 3DMeasure3DC is required</description>
			<test>containsA1 == true</test>
			<error>
				<message>Entry A1 in 3DMeasure3DC is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32963"/>
			<description>Entry A1 in 3DMeasure3DC shall have type Array</description>
			<test>containsA1 == false || A1HasTypeArray == true</test>
			<error>
				<message>Entry A1 in 3DMeasure3DC is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="17" testNumber="32964"/>
			<description>Entry S with type Dictionary in 3DMeasure3DC shall be object AnnotProjection</description>
			<test>SHasTypeDictionary != true || S_size == 1</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasure3DC is not object AnnotProjection</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="10" testNumber="32965"/>
			<description>Entry S with type Dictionary in 3DMeasure3DC shall be indirect</description>
			<test>SHasTypeDictionary != true || isSIndirect == true</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasure3DC is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32966"/>
			<description>Entry S in 3DMeasure3DC shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in 3DMeasure3DC is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasure3DC">
			<id specification="ISO_32000_1_7" clause="8" testNumber="32967"/>
			<description>Entry UT in 3DMeasure3DC shall have type StringText</description>
			<test>containsUT == false || UTHasTypeStringText == true</test>
			<error>
				<message>Entry UT in 3DMeasure3DC is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="1" testNumber="33038"/>
			<description>OptContentUsage shall not contain entries except Export, Print, Language, User, Zoom, PageElement, CreatorInfo, View</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Export' &amp;&amp; elem != 'Print' &amp;&amp; elem != 'Language' &amp;&amp; elem != 'User' &amp;&amp; elem != 'Zoom' &amp;&amp; elem != 'PageElement' &amp;&amp; elem != 'CreatorInfo' &amp;&amp; elem != 'View').length == 0</test>
			<error>
				<message>OptContentUsage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Export' &amp;&amp; elem != 'Print' &amp;&amp; elem != 'Language' &amp;&amp; elem != 'User' &amp;&amp; elem != 'Zoom' &amp;&amp; elem != 'PageElement' &amp;&amp; elem != 'CreatorInfo' &amp;&amp; elem != 'View').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33039"/>
			<description>Entry Export with type Dictionary in OptContentUsage shall be object OptContentExport</description>
			<test>ExportHasTypeDictionary != true || Export_size == 1</test>
			<error>
				<message>Entry Export with type Dictionary in OptContentUsage is not object OptContentExport</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33040"/>
			<description>Entry Export in OptContentUsage shall have type Dictionary</description>
			<test>containsExport == false || ExportHasTypeDictionary == true</test>
			<error>
				<message>Entry Export in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33041"/>
			<description>Entry Print with type Dictionary in OptContentUsage shall be object OptContentPrint</description>
			<test>PrintHasTypeDictionary != true || Print_size == 1</test>
			<error>
				<message>Entry Print with type Dictionary in OptContentUsage is not object OptContentPrint</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33042"/>
			<description>Entry Print in OptContentUsage shall have type Dictionary</description>
			<test>containsPrint == false || PrintHasTypeDictionary == true</test>
			<error>
				<message>Entry Print in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33043"/>
			<description>Entry Language with type Dictionary in OptContentUsage shall be object OptContentLanguage</description>
			<test>LanguageHasTypeDictionary != true || Language_size == 1</test>
			<error>
				<message>Entry Language with type Dictionary in OptContentUsage is not object OptContentLanguage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33044"/>
			<description>Entry Language in OptContentUsage shall have type Dictionary</description>
			<test>containsLanguage == false || LanguageHasTypeDictionary == true</test>
			<error>
				<message>Entry Language in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33045"/>
			<description>Entry User with type Dictionary in OptContentUsage shall be object OptContentUser</description>
			<test>UserHasTypeDictionary != true || User_size == 1</test>
			<error>
				<message>Entry User with type Dictionary in OptContentUsage is not object OptContentUser</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33046"/>
			<description>Entry User in OptContentUsage shall have type Dictionary</description>
			<test>containsUser == false || UserHasTypeDictionary == true</test>
			<error>
				<message>Entry User in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33047"/>
			<description>Entry Zoom with type Dictionary in OptContentUsage shall be object OptContentZoom</description>
			<test>ZoomHasTypeDictionary != true || Zoom_size == 1</test>
			<error>
				<message>Entry Zoom with type Dictionary in OptContentUsage is not object OptContentZoom</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33048"/>
			<description>Entry Zoom in OptContentUsage shall have type Dictionary</description>
			<test>containsZoom == false || ZoomHasTypeDictionary == true</test>
			<error>
				<message>Entry Zoom in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33049"/>
			<description>Entry PageElement with type Dictionary in OptContentUsage shall be object OptContentPageElement</description>
			<test>PageElementHasTypeDictionary != true || PageElement_size == 1</test>
			<error>
				<message>Entry PageElement with type Dictionary in OptContentUsage is not object OptContentPageElement</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33050"/>
			<description>Entry PageElement in OptContentUsage shall have type Dictionary</description>
			<test>containsPageElement == false || PageElementHasTypeDictionary == true</test>
			<error>
				<message>Entry PageElement in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33051"/>
			<description>Entry CreatorInfo with type Dictionary in OptContentUsage shall be object OptContentCreatorInfo</description>
			<test>CreatorInfoHasTypeDictionary != true || CreatorInfo_size == 1</test>
			<error>
				<message>Entry CreatorInfo with type Dictionary in OptContentUsage is not object OptContentCreatorInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33052"/>
			<description>Entry CreatorInfo in OptContentUsage shall have type Dictionary</description>
			<test>containsCreatorInfo == false || CreatorInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CreatorInfo in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33053"/>
			<description>Entry View with type Dictionary in OptContentUsage shall be object OptContentView</description>
			<test>ViewHasTypeDictionary != true || View_size == 1</test>
			<error>
				<message>Entry View with type Dictionary in OptContentUsage is not object OptContentView</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentUsage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33054"/>
			<description>Entry View in OptContentUsage shall have type Dictionary</description>
			<test>containsView == false || ViewHasTypeDictionary == true</test>
			<error>
				<message>Entry View in OptContentUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="1" testNumber="33072"/>
			<description>AnnotRichMedia shall not contain entries except Rect, NM, RichMediaSettings, StructParent, Subtype, P, C, AS, F, AP, Type, OC, M, Border, RichMediaContent, Contents</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Rect' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'RichMediaSettings' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'P' &amp;&amp; elem != 'C' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'RichMediaContent' &amp;&amp; elem != 'Contents').length == 0</test>
			<error>
				<message>AnnotRichMedia contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Rect' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'RichMediaSettings' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'P' &amp;&amp; elem != 'C' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'RichMediaContent' &amp;&amp; elem != 'Contents').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="7" testNumber="33073"/>
			<description>Entry Rect in AnnotRichMedia is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotRichMedia is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33074"/>
			<description>Entry Rect in AnnotRichMedia shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotRichMedia is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33075"/>
			<description>Entry NM in AnnotRichMedia shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotRichMedia is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33076"/>
			<description>Entry RichMediaSettings with type Dictionary in AnnotRichMedia shall be object RichMediaSettings</description>
			<test>RichMediaSettingsHasTypeDictionary != true || RichMediaSettings_size == 1</test>
			<error>
				<message>Entry RichMediaSettings with type Dictionary in AnnotRichMedia is not object RichMediaSettings</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33077"/>
			<description>Entry RichMediaSettings in AnnotRichMedia shall have type Dictionary</description>
			<test>containsRichMediaSettings == false || RichMediaSettingsHasTypeDictionary == true</test>
			<error>
				<message>Entry RichMediaSettings in AnnotRichMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33078"/>
			<description>Entry StructParent in AnnotRichMedia shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotRichMedia is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="7" testNumber="33079"/>
			<description>Entry Subtype in AnnotRichMedia is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotRichMedia is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33080"/>
			<description>Entry Subtype with type Name in AnnotRichMedia shall have value RichMedia</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "RichMedia"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotRichMedia has incorrect value %2 instead of RichMedia</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33081"/>
			<description>Entry Subtype in AnnotRichMedia shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotRichMedia is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33082"/>
			<description>Entry P with type Dictionary in AnnotRichMedia shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotRichMedia is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="10" testNumber="33083"/>
			<description>Entry P with type Dictionary in AnnotRichMedia shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotRichMedia is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33084"/>
			<description>Entry P in AnnotRichMedia shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotRichMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33085"/>
			<description>Entry C with type Array in AnnotRichMedia shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotRichMedia is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33086"/>
			<description>Entry C in AnnotRichMedia shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotRichMedia is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="11" testNumber="33087"/>
			<description>Entry AS in AnnotRichMedia is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotRichMedia is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33088"/>
			<description>Entry AS in AnnotRichMedia shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotRichMedia is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33089"/>
			<description>Entry F in AnnotRichMedia shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotRichMedia is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33090"/>
			<description>Entry F with type Bitmask in AnnotRichMedia shall correspond special case: fn:Eval(fn:BitsClear(11 , 32))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotRichMedia doesn't correspond special case: fn:Eval(fn:BitsClear(11 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33091"/>
			<description>Entry AP with type Dictionary in AnnotRichMedia shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotRichMedia is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="11" testNumber="33092"/>
			<description>Entry AP in AnnotRichMedia is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotRichMedia is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33093"/>
			<description>Entry AP in AnnotRichMedia shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotRichMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33094"/>
			<description>Entry Type with type Name in AnnotRichMedia shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotRichMedia has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33095"/>
			<description>Entry Type in AnnotRichMedia shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotRichMedia is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33096"/>
			<description>Entry OC with type Dictionary in AnnotRichMedia shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotRichMedia is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33097"/>
			<description>Entry OC in AnnotRichMedia shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotRichMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33098"/>
			<description>Entry M in AnnotRichMedia shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotRichMedia is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33099"/>
			<description>Entry Border with type Array in AnnotRichMedia shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotRichMedia is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33100"/>
			<description>Entry Border in AnnotRichMedia shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotRichMedia is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33101"/>
			<description>Entry RichMediaContent with type Dictionary in AnnotRichMedia shall be object RichMediaContent</description>
			<test>RichMediaContentHasTypeDictionary != true || RichMediaContent_size == 1</test>
			<error>
				<message>Entry RichMediaContent with type Dictionary in AnnotRichMedia is not object RichMediaContent</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="7" testNumber="33102"/>
			<description>Entry RichMediaContent in AnnotRichMedia is required</description>
			<test>containsRichMediaContent == true</test>
			<error>
				<message>Entry RichMediaContent in AnnotRichMedia is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33103"/>
			<description>Entry RichMediaContent in AnnotRichMedia shall have type Dictionary</description>
			<test>containsRichMediaContent == false || RichMediaContentHasTypeDictionary == true</test>
			<error>
				<message>Entry RichMediaContent in AnnotRichMedia is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotRichMedia">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33104"/>
			<description>Entry Contents in AnnotRichMedia shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotRichMedia is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGindirectEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33157"/>
			<description>Entry with type Dictionary in ArrayOfOCGindirect shall be object OptContentGroup</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOCGindirect is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGindirectEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="33158"/>
			<description>Entry with type Null in ArrayOfOCGindirect shall be indirect</description>
			<test>HasTypeNull != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Null in ArrayOfOCGindirect is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGindirectEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="33159"/>
			<description>Entry with type Dictionary in ArrayOfOCGindirect shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOCGindirect is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCGindirectEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33160"/>
			<description>Entry in ArrayOfOCGindirect shall have one of types: Null, Dictionary</description>
			<test>HasTypeNull == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOCGindirect is not one of types: Null, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameterMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33175"/>
			<description>Entry with type Dictionary in GraphicsStateParameterMap shall be object GraphicsStateParameter</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in GraphicsStateParameterMap is not object GraphicsStateParameter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGraphicsStateParameterMapEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33176"/>
			<description>Entry in GraphicsStateParameterMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in GraphicsStateParameterMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBlendModesEntry">
			<id specification="ISO_32000_1_7" clause="19" testNumber="33188"/>
			<description>Entry with type Name in ArrayOfBlendModes shouldn't have deprecated value "Compatible"</description>
			<test>NameValue != "Compatible"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfBlendModes has deprecated value "Compatible"</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBlendModesEntry">
			<id specification="ISO_32000_1_7" clause="13" testNumber="33189"/>
			<description>Entry with type Name in ArrayOfBlendModes shall have one of values: Screen, ColorDodge, Saturation, Color, Luminosity, Darken, Difference, Compatible, Normal, SoftLight, ColorBurn, Multiply, Exclusion, HardLight, Hue, Overlay, Lighten</description>
			<test>HasTypeName != true || NameValue == "Compatible" || NameValue == "Normal" || NameValue == "Multiply" || NameValue == "Screen" || NameValue == "Difference" || NameValue == "Darken" || NameValue == "Lighten" || NameValue == "ColorDodge" || NameValue == "ColorBurn" || NameValue == "Exclusion" || NameValue == "HardLight" || NameValue == "Overlay" || NameValue == "SoftLight" || NameValue == "Luminosity" || NameValue == "Hue" || NameValue == "Saturation" || NameValue == "Color"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfBlendModes has incorrect value %2 instead of Screen, ColorDodge, Saturation, Color, Luminosity, Darken, Difference, Compatible, Normal, SoftLight, ColorBurn, Multiply, Exclusion, HardLight, Hue, Overlay, Lighten</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBlendModesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33190"/>
			<description>Entry in ArrayOfBlendModes shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfBlendModes is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesInPtDataEntry">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33194"/>
			<description>Entry with type Name in ArrayOfNamesInPtData shall have one of values: ALT, LON, LAT</description>
			<test>HasTypeName != true || NameValue == "LAT" || NameValue == "LON" || NameValue == "ALT"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfNamesInPtData has incorrect value %2 instead of ALT, LON, LAT</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesInPtDataEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33195"/>
			<description>Entry in ArrayOfNamesInPtData shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfNamesInPtData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="2" testNumber="33248"/>
			<description>ArrayOfOPI13Color shall contain exactly 5 elements</description>
			<test>size == 5</test>
			<error>
				<message>ArrayOfOPI13Color contains %1 element(s) instead of 5</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33249"/>
			<description>Entry 4 in ArrayOfOPI13Color shall have type StringByte</description>
			<test>size &lt;= 4 || entry4HasTypeStringByte == true</test>
			<error>
				<message>Entry 4 in ArrayOfOPI13Color is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="14" testNumber="33250"/>
			<description>Entry 1 with type Number in ArrayOfOPI13Color shall correspond possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOfOPI13Color doesn't correspond possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33251"/>
			<description>Entry 1 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOfOPI13Color is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="14" testNumber="33252"/>
			<description>Entry 0 with type Number in ArrayOfOPI13Color shall correspond possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</description>
			<test>entry0HasTypeNumber != true || (entry0NumberValue &gt;= 0) &amp;&amp; (entry0NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 0 with type Number in ArrayOfOPI13Color doesn't correspond possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33253"/>
			<description>Entry 0 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOfOPI13Color is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="14" testNumber="33254"/>
			<description>Entry 2 with type Number in ArrayOfOPI13Color shall correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOfOPI13Color doesn't correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33255"/>
			<description>Entry 2 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOfOPI13Color is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="14" testNumber="33256"/>
			<description>Entry 3 with type Number in ArrayOfOPI13Color shall correspond possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</description>
			<test>entry3HasTypeNumber != true || (entry3NumberValue &gt;= 0) &amp;&amp; (entry3NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 3 with type Number in ArrayOfOPI13Color doesn't correspond possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOPI13Color">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33257"/>
			<description>Entry 3 in ArrayOfOPI13Color shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOfOPI13Color is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStringsASCIIEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33268"/>
			<description>Entry in ArrayOfStringsASCII shall have type StringAscii</description>
			<test>HasTypeStringAscii == true</test>
			<error>
				<message>Entry %1 in ArrayOfStringsASCII is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33298"/>
			<description>Entry with type Array in ArrayOfTrapNetVersionObjects shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfTrapNetVersionObjects is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace, PatternColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33299"/>
			<description>Entry with type Dictionary in ArrayOfTrapNetVersionObjects shall be one of objects OPIVersion13Dict, OPIVersion20Dict, GraphicsStateParameter, PatternType2, ShadingType1, ShadingType2, ShadingType3, XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough, FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfTrapNetVersionObjects is not one of objects OPIVersion13Dict, OPIVersion20Dict, GraphicsStateParameter, PatternType2, ShadingType1, ShadingType2, ShadingType3, XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough, FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33300"/>
			<description>Entry with type Stream in ArrayOfTrapNetVersionObjects shall be one of objects PatternType1, ShadingType4, ShadingType5, ShadingType6, ShadingType7, Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfTrapNetVersionObjects is not one of objects PatternType1, ShadingType4, ShadingType5, ShadingType6, ShadingType7, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="33301"/>
			<description>Entry with type Array in ArrayOfTrapNetVersionObjects shall be indirect</description>
			<test>HasTypeArray != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfTrapNetVersionObjects is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="33302"/>
			<description>Entry with type Dictionary in ArrayOfTrapNetVersionObjects shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfTrapNetVersionObjects is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="33303"/>
			<description>Entry with type Stream in ArrayOfTrapNetVersionObjects shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfTrapNetVersionObjects is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfTrapNetVersionObjectsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33304"/>
			<description>Entry in ArrayOfTrapNetVersionObjects shall have one of types: Array, Dictionary, Stream</description>
			<test>HasTypeArray == true || HasTypeDictionary == true || HasTypeStream == true</test>
			<error>
				<message>Entry %1 in ArrayOfTrapNetVersionObjects is not one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="1" testNumber="33312"/>
			<description>RichMediaHeight shall not contain entries except Default, Max, Min</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Default' &amp;&amp; elem != 'Max' &amp;&amp; elem != 'Min').length == 0</test>
			<error>
				<message>RichMediaHeight contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Default' &amp;&amp; elem != 'Max' &amp;&amp; elem != 'Min').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="14" testNumber="33313"/>
			<description>Entry Default with type Integer in RichMediaHeight shall correspond possible value predicate: fn:Eval(@Default &gt; 0)</description>
			<test>DefaultHasTypeInteger != true || DefaultIntegerValue &gt; 0</test>
			<error>
				<message>Entry Default with type Integer in RichMediaHeight doesn't correspond possible value predicate: fn:Eval(@Default &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33314"/>
			<description>Entry Default in RichMediaHeight shall have type Integer</description>
			<test>containsDefault == false || DefaultHasTypeInteger == true</test>
			<error>
				<message>Entry Default in RichMediaHeight is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="14" testNumber="33315"/>
			<description>Entry Max with type Integer in RichMediaHeight shall correspond possible value predicate: fn:Eval(@Max &gt; 0)</description>
			<test>MaxHasTypeInteger != true || MaxIntegerValue &gt; 0</test>
			<error>
				<message>Entry Max with type Integer in RichMediaHeight doesn't correspond possible value predicate: fn:Eval(@Max &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33316"/>
			<description>Entry Max in RichMediaHeight shall have type Integer</description>
			<test>containsMax == false || MaxHasTypeInteger == true</test>
			<error>
				<message>Entry Max in RichMediaHeight is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="14" testNumber="33317"/>
			<description>Entry Min with type Integer in RichMediaHeight shall correspond possible value predicate: fn:Eval(@Min &gt; 0)</description>
			<test>MinHasTypeInteger != true || MinIntegerValue &gt; 0</test>
			<error>
				<message>Entry Min with type Integer in RichMediaHeight doesn't correspond possible value predicate: fn:Eval(@Min &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaHeight">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33318"/>
			<description>Entry Min in RichMediaHeight shall have type Integer</description>
			<test>containsMin == false || MinHasTypeInteger == true</test>
			<error>
				<message>Entry Min in RichMediaHeight is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="1" testNumber="33460"/>
			<description>FontFile3Type1 shall not contain entries except Length2, Subtype, Filter, DecodeParms, Length3, FFilter, Length, DL, FDecodeParms, Length1, F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Length2' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'F').length == 0</test>
			<error>
				<message>FontFile3Type1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Length2' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33461"/>
			<description>Entry Length2 in FontFile3Type1 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33462"/>
			<description>Entry Length2 with type Integer in FontFile3Type1 shall correspond special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile3Type1 doesn't correspond special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="33463"/>
			<description>Entry Subtype in FontFile3Type1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontFile3Type1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33464"/>
			<description>Entry Subtype with type Name in FontFile3Type1 shall have one of values: OpenType, CIDFontType0C, Type1C</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1C" || SubtypeNameValue == "CIDFontType0C" || SubtypeNameValue == "OpenType"</test>
			<error>
				<message>Entry Subtype with type Name in FontFile3Type1 has incorrect value %2 instead of OpenType, CIDFontType0C, Type1C</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33465"/>
			<description>Entry Subtype in FontFile3Type1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile3Type1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33466"/>
			<description>Entry Filter with type Array in FontFile3Type1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFile3Type1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33467"/>
			<description>Entry Filter with type Name in FontFile3Type1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFile3Type1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33468"/>
			<description>Entry Filter in FontFile3Type1 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in FontFile3Type1 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33469"/>
			<description>Entry Filter with type Array in FontFile3Type1 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile3Type1 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33470"/>
			<description>Entry DecodeParms with type Array in FontFile3Type1 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3Type1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33471"/>
			<description>Entry DecodeParms with type Dictionary in FontFile3Type1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile3Type1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33472"/>
			<description>Entry DecodeParms in FontFile3Type1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile3Type1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33473"/>
			<description>Entry DecodeParms with type Array in FontFile3Type1 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3Type1 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33474"/>
			<description>Entry Length3 in FontFile3Type1 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33475"/>
			<description>Entry Length3 with type Integer in FontFile3Type1 shall correspond special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile3Type1 doesn't correspond special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33476"/>
			<description>Entry FFilter with type Array in FontFile3Type1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3Type1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33477"/>
			<description>Entry FFilter with type Name in FontFile3Type1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile3Type1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33478"/>
			<description>Entry FFilter in FontFile3Type1 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in FontFile3Type1 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33479"/>
			<description>Entry FFilter with type Array in FontFile3Type1 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3Type1 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="33480"/>
			<description>Entry Length in FontFile3Type1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile3Type1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33481"/>
			<description>Entry Length in FontFile3Type1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33482"/>
			<description>Entry DL in FontFile3Type1 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33483"/>
			<description>Entry DL with type Integer in FontFile3Type1 shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFile3Type1 doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33484"/>
			<description>Entry FDecodeParms with type Array in FontFile3Type1 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3Type1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33485"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile3Type1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile3Type1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33486"/>
			<description>Entry FDecodeParms in FontFile3Type1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile3Type1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33487"/>
			<description>Entry FDecodeParms with type Array in FontFile3Type1 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3Type1 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33488"/>
			<description>Entry Length1 in FontFile3Type1 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile3Type1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33489"/>
			<description>Entry Length1 with type Integer in FontFile3Type1 shall correspond special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile3Type1 doesn't correspond special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33490"/>
			<description>Entry F with type Dictionary in FontFile3Type1 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFile3Type1 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3Type1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33491"/>
			<description>Entry F in FontFile3Type1 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FontFile3Type1 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaContentNameTreeAssets">
			<id specification="ISO_32000_1_7" clause="18" testNumber="33524"/>
			<description>Entry * in RichMediaContentNameTreeAssets shall be object RichMediaContentNameTreeAssetsEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in RichMediaContentNameTreeAssets is not object RichMediaContentNameTreeAssetsEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="1" testNumber="33552"/>
			<description>CryptFilter shall not contain entries except Type, CFM, Length, AuthEvent</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'CFM' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'AuthEvent').length == 0</test>
			<error>
				<message>CryptFilter contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'CFM' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'AuthEvent').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33553"/>
			<description>Entry Type with type Name in CryptFilter shall have value CryptFilter</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CryptFilter"</test>
			<error>
				<message>Entry Type with type Name in CryptFilter has incorrect value %2 instead of CryptFilter</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33554"/>
			<description>Entry Type in CryptFilter shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CryptFilter is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="13" testNumber="33555"/>
			<description>Entry CFM with type Name in CryptFilter shall have one of values: V2, None, AESV2</description>
			<test>CFMHasTypeName != true || CFMNameValue == "None" || CFMNameValue == "V2" || CFMNameValue == "AESV2"</test>
			<error>
				<message>Entry CFM with type Name in CryptFilter has incorrect value %2 instead of V2, None, AESV2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CFMNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33556"/>
			<description>Entry CFM in CryptFilter shall have type Name</description>
			<test>containsCFM == false || CFMHasTypeName == true</test>
			<error>
				<message>Entry CFM in CryptFilter is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="7" testNumber="33557"/>
			<description>Entry Length in CryptFilter is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in CryptFilter is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="14" testNumber="33558"/>
			<description>Entry Length with type Integer in CryptFilter shall correspond possible value predicate: fn:Eval((@Length &gt;= 5) &amp;&amp; (@Length &lt;= 16))</description>
			<test>LengthHasTypeInteger != true || (LengthIntegerValue &gt;= 5) &amp;&amp; (LengthIntegerValue &lt;= 16)</test>
			<error>
				<message>Entry Length with type Integer in CryptFilter doesn't correspond possible value predicate: fn:Eval((@Length &gt;= 5) &amp;&amp; (@Length &lt;= 16))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="15" testNumber="33559"/>
			<description>Entry Length in CryptFilter shall have Integer value 16, if this object corresponds to condition @CFM == AESV2</description>
			<test>((CFMNameValue == "AESV2") == false || LengthIntegerValue == 16)</test>
			<error>
				<message>Entry Length in CryptFilter doesn't have value 16</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="15" testNumber="33560"/>
			<description>Entry Length in CryptFilter shall have Integer value 32, if this object corresponds to condition @CFM == AESV3</description>
			<test>((CFMNameValue == "AESV3") == false || LengthIntegerValue == 32)</test>
			<error>
				<message>Entry Length in CryptFilter doesn't have value 32</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="13" testNumber="33561"/>
			<description>Entry Length with type Integer in CryptFilter shall have one of values: 16, 32</description>
			<test>LengthHasTypeInteger != true || LengthIntegerValue == 16 || LengthIntegerValue == 32</test>
			<error>
				<message>Entry Length with type Integer in CryptFilter has incorrect value %2 instead of 16, 32</message>
				<arguments>
					<argument>keyName</argument>
					<argument>LengthIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33562"/>
			<description>Entry Length in CryptFilter shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in CryptFilter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33563"/>
			<description>Entry AuthEvent with type Name in CryptFilter shall have one of values: EFOpen, DocOpen</description>
			<test>AuthEventHasTypeName != true || AuthEventNameValue == "DocOpen" || AuthEventNameValue == "EFOpen"</test>
			<error>
				<message>Entry AuthEvent with type Name in CryptFilter has incorrect value %2 instead of EFOpen, DocOpen</message>
				<arguments>
					<argument>keyName</argument>
					<argument>AuthEventNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33564"/>
			<description>Entry AuthEvent in CryptFilter shall have type Name</description>
			<test>containsAuthEvent == false || AuthEventHasTypeName == true</test>
			<error>
				<message>Entry AuthEvent in CryptFilter is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3OrientationNumbers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="33579"/>
			<description>ArrayOf_3OrientationNumbers shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf_3OrientationNumbers contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3OrientationNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33580"/>
			<description>Entry 2 in ArrayOf_3OrientationNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_3OrientationNumbers is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3OrientationNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33581"/>
			<description>Entry 0 in ArrayOf_3OrientationNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 0 || entry0HasTypeNull == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_3OrientationNumbers is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_3OrientationNumbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33582"/>
			<description>Entry 1 in ArrayOf_3OrientationNumbers shall have one of types: Null, Number</description>
			<test>size &lt;= 1 || entry1HasTypeNull == true || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_3OrientationNumbers is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DViewEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33590"/>
			<description>Entry with type Dictionary in ArrayOf3DView shall be object 3DView</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOf3DView is not object 3DView</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DViewEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="33591"/>
			<description>Entry with type Dictionary in ArrayOf3DView shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOf3DView is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DViewEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33592"/>
			<description>Entry in ArrayOf3DView shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOf3DView is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentView">
			<id specification="ISO_32000_1_7" clause="1" testNumber="33602"/>
			<description>OptContentView shall not contain entries except ViewState</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ViewState').length == 0</test>
			<error>
				<message>OptContentView contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ViewState').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentView">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33603"/>
			<description>Entry ViewState with type Name in OptContentView shall have one of values: OFF, ON</description>
			<test>ViewStateHasTypeName != true || ViewStateNameValue == "ON" || ViewStateNameValue == "OFF"</test>
			<error>
				<message>Entry ViewState with type Name in OptContentView has incorrect value %2 instead of OFF, ON</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ViewStateNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33604"/>
			<description>Entry ViewState in OptContentView shall have type Name</description>
			<test>containsViewState == false || ViewStateHasTypeName == true</test>
			<error>
				<message>Entry ViewState in OptContentView is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigatorNameTreeResourcesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33608"/>
			<description>Entry with type Stream in NavigatorNameTreeResources shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in NavigatorNameTreeResources is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigatorNameTreeResourcesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33609"/>
			<description>Entry in NavigatorNameTreeResources shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in NavigatorNameTreeResources is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="1" testNumber="33806"/>
			<description>SoundObject shall not contain entries except FDecodeParms, R, Filter, Type, C, Length, B, FFilter, DL, CP, DecodeParms, E, F, CO</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FDecodeParms' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'B' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'CP' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'E' &amp;&amp; elem != 'F' &amp;&amp; elem != 'CO').length == 0</test>
			<error>
				<message>SoundObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FDecodeParms' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'B' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'CP' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'E' &amp;&amp; elem != 'F' &amp;&amp; elem != 'CO').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33807"/>
			<description>Entry FDecodeParms with type Array in SoundObject shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in SoundObject is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33808"/>
			<description>Entry FDecodeParms with type Dictionary in SoundObject shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in SoundObject is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33809"/>
			<description>Entry FDecodeParms in SoundObject shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in SoundObject is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33810"/>
			<description>Entry FDecodeParms with type Array in SoundObject shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in SoundObject doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="7" testNumber="33811"/>
			<description>Entry R in SoundObject is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in SoundObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="14" testNumber="33812"/>
			<description>Entry R with type Number in SoundObject shall correspond possible value predicate: fn:Eval(@R &gt; 0)</description>
			<test>RHasTypeNumber != true || RNumberValue &gt; 0</test>
			<error>
				<message>Entry R with type Number in SoundObject doesn't correspond possible value predicate: fn:Eval(@R &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33813"/>
			<description>Entry R in SoundObject shall have type Number</description>
			<test>containsR == false || RHasTypeNumber == true</test>
			<error>
				<message>Entry R in SoundObject is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33814"/>
			<description>Entry Filter with type Array in SoundObject shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in SoundObject is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33815"/>
			<description>Entry Filter with type Name in SoundObject shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in SoundObject has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33816"/>
			<description>Entry Filter in SoundObject shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in SoundObject is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33817"/>
			<description>Entry Filter with type Array in SoundObject shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in SoundObject doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33818"/>
			<description>Entry Type with type Name in SoundObject shall have value Sound</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Sound"</test>
			<error>
				<message>Entry Type with type Name in SoundObject has incorrect value %2 instead of Sound</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33819"/>
			<description>Entry Type in SoundObject shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SoundObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="14" testNumber="33820"/>
			<description>Entry C with type Integer in SoundObject shall correspond possible value predicate: fn:Eval(@C &gt; 0)</description>
			<test>CHasTypeInteger != true || CIntegerValue &gt; 0</test>
			<error>
				<message>Entry C with type Integer in SoundObject doesn't correspond possible value predicate: fn:Eval(@C &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33821"/>
			<description>Entry C in SoundObject shall have type Integer</description>
			<test>containsC == false || CHasTypeInteger == true</test>
			<error>
				<message>Entry C in SoundObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="7" testNumber="33822"/>
			<description>Entry Length in SoundObject is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in SoundObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33823"/>
			<description>Entry Length in SoundObject shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in SoundObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="14" testNumber="33824"/>
			<description>Entry B with type Integer in SoundObject shall correspond possible value predicate: fn:Eval(@B &gt; 0)</description>
			<test>BHasTypeInteger != true || BIntegerValue &gt; 0</test>
			<error>
				<message>Entry B with type Integer in SoundObject doesn't correspond possible value predicate: fn:Eval(@B &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33825"/>
			<description>Entry B in SoundObject shall have type Integer</description>
			<test>containsB == false || BHasTypeInteger == true</test>
			<error>
				<message>Entry B in SoundObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33826"/>
			<description>Entry FFilter with type Array in SoundObject shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in SoundObject is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33827"/>
			<description>Entry FFilter with type Name in SoundObject shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in SoundObject has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33828"/>
			<description>Entry FFilter in SoundObject shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in SoundObject is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33829"/>
			<description>Entry FFilter with type Array in SoundObject shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in SoundObject doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="14" testNumber="33830"/>
			<description>Entry DL with type Integer in SoundObject shall correspond possible value predicate: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || DLIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DL with type Integer in SoundObject doesn't correspond possible value predicate: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33831"/>
			<description>Entry DL in SoundObject shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in SoundObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33832"/>
			<description>Entry CP with type Array in SoundObject shall be object _UniversalArray</description>
			<test>CPHasTypeArray != true || CP_size == 1</test>
			<error>
				<message>Entry CP with type Array in SoundObject is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33833"/>
			<description>Entry CP with type Dictionary in SoundObject shall be object _UniversalDictionary</description>
			<test>CPHasTypeDictionary != true || CP_size == 1</test>
			<error>
				<message>Entry CP with type Dictionary in SoundObject is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33834"/>
			<description>Entry CP with type Stream in SoundObject shall be object Stream</description>
			<test>CPHasTypeStream != true || CP_size == 1</test>
			<error>
				<message>Entry CP with type Stream in SoundObject is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="10" testNumber="33835"/>
			<description>Entry CP with type Stream in SoundObject shall be indirect</description>
			<test>CPHasTypeStream != true || isCPIndirect == true</test>
			<error>
				<message>Entry CP with type Stream in SoundObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33836"/>
			<description>Entry CP in SoundObject shall have one of types: Array, Dictionary, Stream</description>
			<test>containsCP == false || CPHasTypeArray == true || CPHasTypeDictionary == true || CPHasTypeStream == true</test>
			<error>
				<message>Entry CP in SoundObject is not one of types: Array, Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33837"/>
			<description>Entry DecodeParms with type Array in SoundObject shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in SoundObject is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33838"/>
			<description>Entry DecodeParms with type Dictionary in SoundObject shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in SoundObject is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33839"/>
			<description>Entry DecodeParms in SoundObject shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in SoundObject is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33840"/>
			<description>Entry DecodeParms with type Array in SoundObject shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in SoundObject doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33841"/>
			<description>Entry E with type Name in SoundObject shall have one of values: Signed, Raw, muLaw, ALaw</description>
			<test>EHasTypeName != true || ENameValue == "Raw" || ENameValue == "Signed" || ENameValue == "muLaw" || ENameValue == "ALaw"</test>
			<error>
				<message>Entry E with type Name in SoundObject has incorrect value %2 instead of Signed, Raw, muLaw, ALaw</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ENameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33842"/>
			<description>Entry E in SoundObject shall have type Name</description>
			<test>containsE == false || EHasTypeName == true</test>
			<error>
				<message>Entry E in SoundObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33843"/>
			<description>Entry F with type Dictionary in SoundObject shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in SoundObject is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33844"/>
			<description>Entry F in SoundObject shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in SoundObject is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoundObject">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33845"/>
			<description>Entry CO in SoundObject shall have type Name</description>
			<test>containsCO == false || COHasTypeName == true</test>
			<error>
				<message>Entry CO in SoundObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="1" testNumber="33924"/>
			<description>FloatingWindowParameters shall not contain entries except O, Type, R, P, T, UC, RT, TT, D</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'O' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'R' &amp;&amp; elem != 'P' &amp;&amp; elem != 'T' &amp;&amp; elem != 'UC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'TT' &amp;&amp; elem != 'D').length == 0</test>
			<error>
				<message>FloatingWindowParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'O' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'R' &amp;&amp; elem != 'P' &amp;&amp; elem != 'T' &amp;&amp; elem != 'UC' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'TT' &amp;&amp; elem != 'D').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33925"/>
			<description>Entry O with type Integer in FloatingWindowParameters shall have one of values: 0, 1, 2</description>
			<test>OHasTypeInteger != true || OIntegerValue == 0 || OIntegerValue == 1 || OIntegerValue == 2</test>
			<error>
				<message>Entry O with type Integer in FloatingWindowParameters has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>OIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33926"/>
			<description>Entry O in FloatingWindowParameters shall have type Integer</description>
			<test>containsO == false || OHasTypeInteger == true</test>
			<error>
				<message>Entry O in FloatingWindowParameters is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33927"/>
			<description>Entry Type with type Name in FloatingWindowParameters shall have value FWParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FWParams"</test>
			<error>
				<message>Entry Type with type Name in FloatingWindowParameters has incorrect value %2 instead of FWParams</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33928"/>
			<description>Entry Type in FloatingWindowParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FloatingWindowParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33929"/>
			<description>Entry R with type Integer in FloatingWindowParameters shall have one of values: 0, 1, 2</description>
			<test>RHasTypeInteger != true || RIntegerValue == 0 || RIntegerValue == 1 || RIntegerValue == 2</test>
			<error>
				<message>Entry R with type Integer in FloatingWindowParameters has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33930"/>
			<description>Entry R in FloatingWindowParameters shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in FloatingWindowParameters is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33931"/>
			<description>Entry P with type Integer in FloatingWindowParameters shall have one of values: 0, 1, 2, 3, 4, 5, 6, 7, 8</description>
			<test>PHasTypeInteger != true || PIntegerValue == 0 || PIntegerValue == 1 || PIntegerValue == 2 || PIntegerValue == 3 || PIntegerValue == 4 || PIntegerValue == 5 || PIntegerValue == 6 || PIntegerValue == 7 || PIntegerValue == 8</test>
			<error>
				<message>Entry P with type Integer in FloatingWindowParameters has incorrect value %2 instead of 0, 1, 2, 3, 4, 5, 6, 7, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33932"/>
			<description>Entry P in FloatingWindowParameters shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in FloatingWindowParameters is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33933"/>
			<description>Entry T in FloatingWindowParameters shall have type Boolean</description>
			<test>containsT == false || THasTypeBoolean == true</test>
			<error>
				<message>Entry T in FloatingWindowParameters is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33934"/>
			<description>Entry UC in FloatingWindowParameters shall have type Boolean</description>
			<test>containsUC == false || UCHasTypeBoolean == true</test>
			<error>
				<message>Entry UC in FloatingWindowParameters is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="33935"/>
			<description>Entry RT with type Integer in FloatingWindowParameters shall have one of values: 0, 1, 2, 3</description>
			<test>RTHasTypeInteger != true || RTIntegerValue == 0 || RTIntegerValue == 1 || RTIntegerValue == 2 || RTIntegerValue == 3</test>
			<error>
				<message>Entry RT with type Integer in FloatingWindowParameters has incorrect value %2 instead of 0, 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33936"/>
			<description>Entry RT in FloatingWindowParameters shall have type Integer</description>
			<test>containsRT == false || RTHasTypeInteger == true</test>
			<error>
				<message>Entry RT in FloatingWindowParameters is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33937"/>
			<description>Entry TT with type Array in FloatingWindowParameters shall be object ArrayOfStringsText</description>
			<test>TTHasTypeArray != true || TT_size == 1</test>
			<error>
				<message>Entry TT with type Array in FloatingWindowParameters is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33938"/>
			<description>Entry TT in FloatingWindowParameters shall have type Array</description>
			<test>containsTT == false || TTHasTypeArray == true</test>
			<error>
				<message>Entry TT in FloatingWindowParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="17" testNumber="33939"/>
			<description>Entry D with type Array in FloatingWindowParameters shall be object ArrayOf_2Integers</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in FloatingWindowParameters is not object ArrayOf_2Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="7" testNumber="33940"/>
			<description>Entry D in FloatingWindowParameters is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in FloatingWindowParameters is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="33941"/>
			<description>Entry D in FloatingWindowParameters shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in FloatingWindowParameters is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFloatingWindowParameters">
			<id specification="ISO_32000_1_7" clause="9" testNumber="33942"/>
			<description>Entry D with type Array in FloatingWindowParameters shall correspond special case: fn:Eval((D::@0&gt;= 0) &amp;&amp; (D::@1&gt;= 0))</description>
			<test>DHasTypeArray != true || ((D0IntegerValue &gt;= 0) &amp;&amp; (D1IntegerValue &gt;= 0))</test>
			<error>
				<message>Entry D with type Array in FloatingWindowParameters doesn't correspond special case: fn:Eval((D::@0&gt;= 0) &amp;&amp; (D::@1&gt;= 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="1" testNumber="34000"/>
			<description>MediaCriteria shall not contain entries except L, P, R, O, S, Z, Type, V, A, C, D</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'L' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'O' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Z' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D').length == 0</test>
			<error>
				<message>MediaCriteria contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'L' &amp;&amp; elem != 'P' &amp;&amp; elem != 'R' &amp;&amp; elem != 'O' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Z' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'V' &amp;&amp; elem != 'A' &amp;&amp; elem != 'C' &amp;&amp; elem != 'D').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34001"/>
			<description>Entry L with type Array in MediaCriteria shall be object ArrayOfStringsText</description>
			<test>LHasTypeArray != true || L_size == 1</test>
			<error>
				<message>Entry L with type Array in MediaCriteria is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34002"/>
			<description>Entry L in MediaCriteria shall have type Array</description>
			<test>containsL == false || LHasTypeArray == true</test>
			<error>
				<message>Entry L in MediaCriteria is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34003"/>
			<description>Entry P with type Array in MediaCriteria shall be object ArrayOfNamesGeneral</description>
			<test>PHasTypeArray != true || P_size == 1</test>
			<error>
				<message>Entry P with type Array in MediaCriteria is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34004"/>
			<description>Entry P in MediaCriteria shall have type Array</description>
			<test>containsP == false || PHasTypeArray == true</test>
			<error>
				<message>Entry P in MediaCriteria is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34005"/>
			<description>Entry R in MediaCriteria shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in MediaCriteria is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="9" testNumber="34006"/>
			<description>Entry R with type Integer in MediaCriteria shall correspond special case: fn:Eval(@R &gt; 0)</description>
			<test>RHasTypeInteger != true || (RIntegerValue &gt; 0)</test>
			<error>
				<message>Entry R with type Integer in MediaCriteria doesn't correspond special case: fn:Eval(@R &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34007"/>
			<description>Entry O in MediaCriteria shall have type Boolean</description>
			<test>containsO == false || OHasTypeBoolean == true</test>
			<error>
				<message>Entry O in MediaCriteria is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34008"/>
			<description>Entry S in MediaCriteria shall have type Boolean</description>
			<test>containsS == false || SHasTypeBoolean == true</test>
			<error>
				<message>Entry S in MediaCriteria is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34009"/>
			<description>Entry Z with type Dictionary in MediaCriteria shall be object MinimumScreenSize</description>
			<test>ZHasTypeDictionary != true || Z_size == 1</test>
			<error>
				<message>Entry Z with type Dictionary in MediaCriteria is not object MinimumScreenSize</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34010"/>
			<description>Entry Z in MediaCriteria shall have type Dictionary</description>
			<test>containsZ == false || ZHasTypeDictionary == true</test>
			<error>
				<message>Entry Z in MediaCriteria is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34011"/>
			<description>Entry Type with type Name in MediaCriteria shall have value MediaCriteria</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaCriteria"</test>
			<error>
				<message>Entry Type with type Name in MediaCriteria has incorrect value %2 instead of MediaCriteria</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34012"/>
			<description>Entry Type in MediaCriteria shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaCriteria is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34013"/>
			<description>Entry V with type Array in MediaCriteria shall be object ArrayOfSoftwareIdentifiers</description>
			<test>VHasTypeArray != true || V_size == 1</test>
			<error>
				<message>Entry V with type Array in MediaCriteria is not object ArrayOfSoftwareIdentifiers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34014"/>
			<description>Entry V in MediaCriteria shall have type Array</description>
			<test>containsV == false || VHasTypeArray == true</test>
			<error>
				<message>Entry V in MediaCriteria is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34015"/>
			<description>Entry A in MediaCriteria shall have type Boolean</description>
			<test>containsA == false || AHasTypeBoolean == true</test>
			<error>
				<message>Entry A in MediaCriteria is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34016"/>
			<description>Entry C in MediaCriteria shall have type Boolean</description>
			<test>containsC == false || CHasTypeBoolean == true</test>
			<error>
				<message>Entry C in MediaCriteria is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34017"/>
			<description>Entry D with type Dictionary in MediaCriteria shall be object MinimumBitDepth</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in MediaCriteria is not object MinimumBitDepth</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaCriteria">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34018"/>
			<description>Entry D in MediaCriteria shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in MediaCriteria is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="1" testNumber="34038"/>
			<description>RichMediaPresentation shall not contain entries except Toolbar, Transparent, Window, Type, NavigationPane, PassContextClick, Style</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Toolbar' &amp;&amp; elem != 'Transparent' &amp;&amp; elem != 'Window' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'NavigationPane' &amp;&amp; elem != 'PassContextClick' &amp;&amp; elem != 'Style').length == 0</test>
			<error>
				<message>RichMediaPresentation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Toolbar' &amp;&amp; elem != 'Transparent' &amp;&amp; elem != 'Window' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'NavigationPane' &amp;&amp; elem != 'PassContextClick' &amp;&amp; elem != 'Style').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34039"/>
			<description>Entry Toolbar in RichMediaPresentation shall have type Boolean</description>
			<test>containsToolbar == false || ToolbarHasTypeBoolean == true</test>
			<error>
				<message>Entry Toolbar in RichMediaPresentation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34040"/>
			<description>Entry Transparent in RichMediaPresentation shall have type Boolean</description>
			<test>containsTransparent == false || TransparentHasTypeBoolean == true</test>
			<error>
				<message>Entry Transparent in RichMediaPresentation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34041"/>
			<description>Entry Window with type Dictionary in RichMediaPresentation shall be object RichMediaWindow</description>
			<test>WindowHasTypeDictionary != true || Window_size == 1</test>
			<error>
				<message>Entry Window with type Dictionary in RichMediaPresentation is not object RichMediaWindow</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34042"/>
			<description>Entry Window in RichMediaPresentation shall have type Dictionary</description>
			<test>containsWindow == false || WindowHasTypeDictionary == true</test>
			<error>
				<message>Entry Window in RichMediaPresentation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34043"/>
			<description>Entry Type with type Name in RichMediaPresentation shall have value RichMediaPresentation</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaPresentation"</test>
			<error>
				<message>Entry Type with type Name in RichMediaPresentation has incorrect value %2 instead of RichMediaPresentation</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34044"/>
			<description>Entry Type in RichMediaPresentation shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaPresentation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34045"/>
			<description>Entry NavigationPane in RichMediaPresentation shall have type Boolean</description>
			<test>containsNavigationPane == false || NavigationPaneHasTypeBoolean == true</test>
			<error>
				<message>Entry NavigationPane in RichMediaPresentation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34046"/>
			<description>Entry PassContextClick in RichMediaPresentation shall have type Boolean</description>
			<test>containsPassContextClick == false || PassContextClickHasTypeBoolean == true</test>
			<error>
				<message>Entry PassContextClick in RichMediaPresentation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34047"/>
			<description>Entry Style with type Name in RichMediaPresentation shall have one of values: Windowed, Embedded</description>
			<test>StyleHasTypeName != true || StyleNameValue == "Embedded" || StyleNameValue == "Windowed"</test>
			<error>
				<message>Entry Style with type Name in RichMediaPresentation has incorrect value %2 instead of Windowed, Embedded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>StyleNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaPresentation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34048"/>
			<description>Entry Style in RichMediaPresentation shall have type Name</description>
			<test>containsStyle == false || StyleHasTypeName == true</test>
			<error>
				<message>Entry Style in RichMediaPresentation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="1" testNumber="34100"/>
			<description>FilterFlateDecode shall not contain entries except BitsPerComponent, Colors, Columns, Predictor</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'Predictor').length == 0</test>
			<error>
				<message>FilterFlateDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BitsPerComponent' &amp;&amp; elem != 'Colors' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'Predictor').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34101"/>
			<description>Entry BitsPerComponent with type Integer in FilterFlateDecode shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in FilterFlateDecode has incorrect value %2 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34102"/>
			<description>Entry BitsPerComponent in FilterFlateDecode shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in FilterFlateDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="14" testNumber="34103"/>
			<description>Entry Colors with type Integer in FilterFlateDecode shall correspond possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</description>
			<test>ColorsHasTypeInteger != true || (ColorsIntegerValue &gt;= 1) &amp;&amp; true</test>
			<error>
				<message>Entry Colors with type Integer in FilterFlateDecode doesn't correspond possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34104"/>
			<description>Entry Colors in FilterFlateDecode shall have type Integer</description>
			<test>containsColors == false || ColorsHasTypeInteger == true</test>
			<error>
				<message>Entry Colors in FilterFlateDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34105"/>
			<description>Entry Columns in FilterFlateDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterFlateDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34106"/>
			<description>Entry Predictor with type Integer in FilterFlateDecode shall have one of values: 11, 1, 12, 2, 13, 14, 15, 10</description>
			<test>PredictorHasTypeInteger != true || PredictorIntegerValue == 1 || PredictorIntegerValue == 2 || PredictorIntegerValue == 10 || PredictorIntegerValue == 11 || PredictorIntegerValue == 12 || PredictorIntegerValue == 13 || PredictorIntegerValue == 14 || PredictorIntegerValue == 15</test>
			<error>
				<message>Entry Predictor with type Integer in FilterFlateDecode has incorrect value %2 instead of 11, 1, 12, 2, 13, 14, 15, 10</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PredictorIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterFlateDecode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34107"/>
			<description>Entry Predictor in FilterFlateDecode shall have type Integer</description>
			<test>containsPredictor == false || PredictorHasTypeInteger == true</test>
			<error>
				<message>Entry Predictor in FilterFlateDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="1" testNumber="34144"/>
			<description>RenditionSelector shall not contain entries except S, N, BE, Type, MH, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'N' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'R').length == 0</test>
			<error>
				<message>RenditionSelector contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'N' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'MH' &amp;&amp; elem != 'R').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34145"/>
			<description>Entry S in RenditionSelector is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in RenditionSelector is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34146"/>
			<description>Entry S with type Name in RenditionSelector shall have value SR</description>
			<test>SHasTypeName != true || SNameValue == "SR"</test>
			<error>
				<message>Entry S with type Name in RenditionSelector has incorrect value %2 instead of SR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34147"/>
			<description>Entry S in RenditionSelector shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in RenditionSelector is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34148"/>
			<description>Entry N in RenditionSelector shall have type StringText</description>
			<test>containsN == false || NHasTypeStringText == true</test>
			<error>
				<message>Entry N in RenditionSelector is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34149"/>
			<description>Entry BE with type Dictionary in RenditionSelector shall be object RenditionBE</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in RenditionSelector is not object RenditionBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34150"/>
			<description>Entry BE in RenditionSelector shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in RenditionSelector is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34151"/>
			<description>Entry Type with type Name in RenditionSelector shall have value Rendition</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Rendition"</test>
			<error>
				<message>Entry Type with type Name in RenditionSelector has incorrect value %2 instead of Rendition</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34152"/>
			<description>Entry Type in RenditionSelector shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RenditionSelector is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34153"/>
			<description>Entry MH with type Dictionary in RenditionSelector shall be object RenditionMH</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in RenditionSelector is not object RenditionMH</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34154"/>
			<description>Entry MH in RenditionSelector shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in RenditionSelector is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34155"/>
			<description>Entry R with type Array in RenditionSelector shall be object ArrayOfRenditions</description>
			<test>RHasTypeArray != true || R_size == 1</test>
			<error>
				<message>Entry R with type Array in RenditionSelector is not object ArrayOfRenditions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34156"/>
			<description>Entry R in RenditionSelector is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in RenditionSelector is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARenditionSelector">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34157"/>
			<description>Entry R in RenditionSelector shall have type Array</description>
			<test>containsR == false || RHasTypeArray == true</test>
			<error>
				<message>Entry R in RenditionSelector is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIntegersGeneralEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34179"/>
			<description>Entry in ArrayOfIntegersGeneral shall have type Integer</description>
			<test>HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfIntegersGeneral is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AClassMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34193"/>
			<description>Entry with type Array in ClassMap shall be object ArrayOfAttributeObjects</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ClassMap is not object ArrayOfAttributeObjects</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AClassMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34194"/>
			<description>Entry with type Dictionary in ClassMap shall be object StructureAttributesDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ClassMap is not object StructureAttributesDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AClassMapEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34195"/>
			<description>Entry in ClassMap shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ClassMap is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysRBGroupsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34205"/>
			<description>Entry with type Array in ArrayOfArraysRBGroups shall be object ArrayOfOptContentGroups</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfArraysRBGroups is not object ArrayOfOptContentGroups</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysRBGroupsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34206"/>
			<description>Entry in ArrayOfArraysRBGroups shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ArrayOfArraysRBGroups is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysRBGroupsEntry">
			<id specification="ISO_32000_1_7" clause="9" testNumber="34207"/>
			<description>Entry with type Array in ArrayOfArraysRBGroups shall correspond special case: fn:Eval(fn:ArrayLength(*) &gt; 0)</description>
			<test>HasTypeArray != true || (ArraySize &gt; 0)</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfArraysRBGroups doesn't correspond special case: fn:Eval(fn:ArrayLength(*) &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="1" testNumber="34292"/>
			<description>AddActionWidgetAnnotation shall not contain entries except PV, X, Bl, PI, D, PC, PO, E, Fo, U</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PV' &amp;&amp; elem != 'X' &amp;&amp; elem != 'Bl' &amp;&amp; elem != 'PI' &amp;&amp; elem != 'D' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'E' &amp;&amp; elem != 'Fo' &amp;&amp; elem != 'U').length == 0</test>
			<error>
				<message>AddActionWidgetAnnotation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PV' &amp;&amp; elem != 'X' &amp;&amp; elem != 'Bl' &amp;&amp; elem != 'PI' &amp;&amp; elem != 'D' &amp;&amp; elem != 'PC' &amp;&amp; elem != 'PO' &amp;&amp; elem != 'E' &amp;&amp; elem != 'Fo' &amp;&amp; elem != 'U').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34293"/>
			<description>Entry PV with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PVHasTypeDictionary != true || PV_size == 1</test>
			<error>
				<message>Entry PV with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34294"/>
			<description>Entry PV in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsPV == false || PVHasTypeDictionary == true</test>
			<error>
				<message>Entry PV in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34295"/>
			<description>Entry X with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>XHasTypeDictionary != true || X_size == 1</test>
			<error>
				<message>Entry X with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34296"/>
			<description>Entry X in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsX == false || XHasTypeDictionary == true</test>
			<error>
				<message>Entry X in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34297"/>
			<description>Entry Bl with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>BlHasTypeDictionary != true || Bl_size == 1</test>
			<error>
				<message>Entry Bl with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34298"/>
			<description>Entry Bl in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsBl == false || BlHasTypeDictionary == true</test>
			<error>
				<message>Entry Bl in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34299"/>
			<description>Entry PI with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PIHasTypeDictionary != true || PI_size == 1</test>
			<error>
				<message>Entry PI with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34300"/>
			<description>Entry PI in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsPI == false || PIHasTypeDictionary == true</test>
			<error>
				<message>Entry PI in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34301"/>
			<description>Entry D with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34302"/>
			<description>Entry D in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsD == false || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34303"/>
			<description>Entry PC with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PCHasTypeDictionary != true || PC_size == 1</test>
			<error>
				<message>Entry PC with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34304"/>
			<description>Entry PC in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsPC == false || PCHasTypeDictionary == true</test>
			<error>
				<message>Entry PC in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34305"/>
			<description>Entry PO with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>POHasTypeDictionary != true || PO_size == 1</test>
			<error>
				<message>Entry PO with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34306"/>
			<description>Entry PO in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsPO == false || POHasTypeDictionary == true</test>
			<error>
				<message>Entry PO in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34307"/>
			<description>Entry E with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>EHasTypeDictionary != true || E_size == 1</test>
			<error>
				<message>Entry E with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34308"/>
			<description>Entry E in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsE == false || EHasTypeDictionary == true</test>
			<error>
				<message>Entry E in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34309"/>
			<description>Entry Fo with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>FoHasTypeDictionary != true || Fo_size == 1</test>
			<error>
				<message>Entry Fo with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34310"/>
			<description>Entry Fo in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsFo == false || FoHasTypeDictionary == true</test>
			<error>
				<message>Entry Fo in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34311"/>
			<description>Entry U with type Dictionary in AddActionWidgetAnnotation shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>UHasTypeDictionary != true || U_size == 1</test>
			<error>
				<message>Entry U with type Dictionary in AddActionWidgetAnnotation is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionWidgetAnnotation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34312"/>
			<description>Entry U in AddActionWidgetAnnotation shall have type Dictionary</description>
			<test>containsU == false || UHasTypeDictionary == true</test>
			<error>
				<message>Entry U in AddActionWidgetAnnotation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="1" testNumber="34352"/>
			<description>SigFieldLock shall not contain entries except Type, Fields, Action, P</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Action' &amp;&amp; elem != 'P').length == 0</test>
			<error>
				<message>SigFieldLock contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Action' &amp;&amp; elem != 'P').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34353"/>
			<description>Entry Type with type Name in SigFieldLock shall have value SigFieldLock</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SigFieldLock"</test>
			<error>
				<message>Entry Type with type Name in SigFieldLock has incorrect value %2 instead of SigFieldLock</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34354"/>
			<description>Entry Type in SigFieldLock shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SigFieldLock is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34355"/>
			<description>Entry Fields with type Array in SigFieldLock shall be object ArrayOfStringsText</description>
			<test>FieldsHasTypeArray != true || Fields_size == 1</test>
			<error>
				<message>Entry Fields with type Array in SigFieldLock is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="11" testNumber="34356"/>
			<description>Entry Fields in SigFieldLock is required, when fn:IsRequired((@Action == Include) || (@Action == Exclude))</description>
			<test>(containsFields == true || ((ActionNameValue == "Include") || (ActionNameValue == "Exclude")) == false)</test>
			<error>
				<message>Entry Fields in SigFieldLock is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34357"/>
			<description>Entry Fields in SigFieldLock shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in SigFieldLock is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34358"/>
			<description>Entry Action in SigFieldLock is required</description>
			<test>containsAction == true</test>
			<error>
				<message>Entry Action in SigFieldLock is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34359"/>
			<description>Entry Action with type Name in SigFieldLock shall have one of values: All, Exclude, Include</description>
			<test>ActionHasTypeName != true || ActionNameValue == "All" || ActionNameValue == "Include" || ActionNameValue == "Exclude"</test>
			<error>
				<message>Entry Action with type Name in SigFieldLock has incorrect value %2 instead of All, Exclude, Include</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ActionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34360"/>
			<description>Entry Action in SigFieldLock shall have type Name</description>
			<test>containsAction == false || ActionHasTypeName == true</test>
			<error>
				<message>Entry Action in SigFieldLock is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34361"/>
			<description>Entry P with type Number in SigFieldLock shall have one of values: 1, 2, 3</description>
			<test>PHasTypeNumber != true || PNumberValue == 1 || PNumberValue == 2 || PNumberValue == 3</test>
			<error>
				<message>Entry P with type Number in SigFieldLock has incorrect value %2 instead of 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASigFieldLock">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34362"/>
			<description>Entry P in SigFieldLock shall have type Number</description>
			<test>containsP == false || PHasTypeNumber == true</test>
			<error>
				<message>Entry P in SigFieldLock is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="1" testNumber="34374"/>
			<description>RichMediaAnimation shall not contain entries except PlayCount, Speed, Subtype, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PlayCount' &amp;&amp; elem != 'Speed' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>RichMediaAnimation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PlayCount' &amp;&amp; elem != 'Speed' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34375"/>
			<description>Entry PlayCount in RichMediaAnimation shall have type Integer</description>
			<test>containsPlayCount == false || PlayCountHasTypeInteger == true</test>
			<error>
				<message>Entry PlayCount in RichMediaAnimation is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="14" testNumber="34376"/>
			<description>Entry Speed with type Number in RichMediaAnimation shall correspond possible value predicate: fn:Eval(@Speed &gt; 0)</description>
			<test>SpeedHasTypeNumber != true || SpeedNumberValue &gt; 0</test>
			<error>
				<message>Entry Speed with type Number in RichMediaAnimation doesn't correspond possible value predicate: fn:Eval(@Speed &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34377"/>
			<description>Entry Speed in RichMediaAnimation shall have type Number</description>
			<test>containsSpeed == false || SpeedHasTypeNumber == true</test>
			<error>
				<message>Entry Speed in RichMediaAnimation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34378"/>
			<description>Entry Subtype with type Name in RichMediaAnimation shall have one of values: Oscillating, None, Linear</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "None" || SubtypeNameValue == "Linear" || SubtypeNameValue == "Oscillating"</test>
			<error>
				<message>Entry Subtype with type Name in RichMediaAnimation has incorrect value %2 instead of Oscillating, None, Linear</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34379"/>
			<description>Entry Subtype in RichMediaAnimation shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in RichMediaAnimation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34380"/>
			<description>Entry Type with type Name in RichMediaAnimation shall have value RichMediaAnimation</description>
			<test>TypeHasTypeName != true || TypeNameValue == "RichMediaAnimation"</test>
			<error>
				<message>Entry Type with type Name in RichMediaAnimation has incorrect value %2 instead of RichMediaAnimation</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ARichMediaAnimation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34381"/>
			<description>Entry Type in RichMediaAnimation shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in RichMediaAnimation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="1" testNumber="34447"/>
			<description>Movie shall not contain entries except Poster, F, Rotate, Aspect</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Poster' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Aspect').length == 0</test>
			<error>
				<message>Movie contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Poster' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'Aspect').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34448"/>
			<description>Entry Poster with type Stream in Movie shall be object XObjectImage</description>
			<test>PosterHasTypeStream != true || Poster_size == 1</test>
			<error>
				<message>Entry Poster with type Stream in Movie is not object XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="10" testNumber="34449"/>
			<description>Entry Poster with type Stream in Movie shall be indirect</description>
			<test>PosterHasTypeStream != true || isPosterIndirect == true</test>
			<error>
				<message>Entry Poster with type Stream in Movie is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34450"/>
			<description>Entry Poster in Movie shall have one of types: Boolean, Stream</description>
			<test>containsPoster == false || PosterHasTypeBoolean == true || PosterHasTypeStream == true</test>
			<error>
				<message>Entry Poster in Movie is not one of types: Boolean, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34451"/>
			<description>Entry F with type Dictionary in Movie shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Movie is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34452"/>
			<description>Entry F in Movie is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in Movie is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34453"/>
			<description>Entry F in Movie shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in Movie is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="14" testNumber="34454"/>
			<description>Entry Rotate with type Integer in Movie shall correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in Movie doesn't correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34455"/>
			<description>Entry Rotate in Movie shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in Movie is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34456"/>
			<description>Entry Aspect with type Array in Movie shall be object ArrayOf_2Numbers</description>
			<test>AspectHasTypeArray != true || Aspect_size == 1</test>
			<error>
				<message>Entry Aspect with type Array in Movie is not object ArrayOf_2Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMovie">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34457"/>
			<description>Entry Aspect in Movie shall have type Array</description>
			<test>containsAspect == false || AspectHasTypeArray == true</test>
			<error>
				<message>Entry Aspect in Movie is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="1" testNumber="34469"/>
			<description>3DMeasureRD3 shall not contain entries except TX, SC, V, UT, S, AP, TRL, Type, A1, Subtype, A4, A2, U, C, N2, R, TP, TY, EL, P, A3, TS</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'TX' &amp;&amp; elem != 'SC' &amp;&amp; elem != 'V' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'S' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'A1' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'A4' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'U' &amp;&amp; elem != 'C' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'EL' &amp;&amp; elem != 'P' &amp;&amp; elem != 'A3' &amp;&amp; elem != 'TS').length == 0</test>
			<error>
				<message>3DMeasureRD3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'TX' &amp;&amp; elem != 'SC' &amp;&amp; elem != 'V' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'S' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'A1' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'A4' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'U' &amp;&amp; elem != 'C' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'R' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'EL' &amp;&amp; elem != 'P' &amp;&amp; elem != 'A3' &amp;&amp; elem != 'TS').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34470"/>
			<description>Entry TX with type Array in 3DMeasureRD3 shall be object ArrayOf_3Numbers</description>
			<test>TXHasTypeArray != true || TX_size == 1</test>
			<error>
				<message>Entry TX with type Array in 3DMeasureRD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34471"/>
			<description>Entry TX in 3DMeasureRD3 is required</description>
			<test>containsTX == true</test>
			<error>
				<message>Entry TX in 3DMeasureRD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34472"/>
			<description>Entry TX in 3DMeasureRD3 shall have type Array</description>
			<test>containsTX == false || TXHasTypeArray == true</test>
			<error>
				<message>Entry TX in 3DMeasureRD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34473"/>
			<description>Entry SC in 3DMeasureRD3 shall have type Boolean</description>
			<test>containsSC == false || SCHasTypeBoolean == true</test>
			<error>
				<message>Entry SC in 3DMeasureRD3 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34474"/>
			<description>Entry V in 3DMeasureRD3 is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in 3DMeasureRD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34475"/>
			<description>Entry V in 3DMeasureRD3 shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in 3DMeasureRD3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34476"/>
			<description>Entry UT in 3DMeasureRD3 shall have type StringText</description>
			<test>containsUT == false || UTHasTypeStringText == true</test>
			<error>
				<message>Entry UT in 3DMeasureRD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34477"/>
			<description>Entry S with type Dictionary in 3DMeasureRD3 shall be object AnnotProjection</description>
			<test>SHasTypeDictionary != true || S_size == 1</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasureRD3 is not object AnnotProjection</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="10" testNumber="34478"/>
			<description>Entry S with type Dictionary in 3DMeasureRD3 shall be indirect</description>
			<test>SHasTypeDictionary != true || isSIndirect == true</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasureRD3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34479"/>
			<description>Entry S in 3DMeasureRD3 shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in 3DMeasureRD3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34480"/>
			<description>Entry AP with type Array in 3DMeasureRD3 shall be object ArrayOf_3Numbers</description>
			<test>APHasTypeArray != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Array in 3DMeasureRD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34481"/>
			<description>Entry AP in 3DMeasureRD3 is required</description>
			<test>containsAP == true</test>
			<error>
				<message>Entry AP in 3DMeasureRD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34482"/>
			<description>Entry AP in 3DMeasureRD3 shall have type Array</description>
			<test>containsAP == false || APHasTypeArray == true</test>
			<error>
				<message>Entry AP in 3DMeasureRD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34483"/>
			<description>Entry TRL in 3DMeasureRD3 shall have type StringText</description>
			<test>containsTRL == false || TRLHasTypeStringText == true</test>
			<error>
				<message>Entry TRL in 3DMeasureRD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34484"/>
			<description>Entry Type with type Name in 3DMeasureRD3 shall have value 3DMeasure</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DMeasure"</test>
			<error>
				<message>Entry Type with type Name in 3DMeasureRD3 has incorrect value %2 instead of 3DMeasure</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34485"/>
			<description>Entry Type in 3DMeasureRD3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DMeasureRD3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34486"/>
			<description>Entry A1 with type Array in 3DMeasureRD3 shall be object ArrayOf_3Numbers</description>
			<test>A1HasTypeArray != true || A1_size == 1</test>
			<error>
				<message>Entry A1 with type Array in 3DMeasureRD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34487"/>
			<description>Entry A1 in 3DMeasureRD3 is required</description>
			<test>containsA1 == true</test>
			<error>
				<message>Entry A1 in 3DMeasureRD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34488"/>
			<description>Entry A1 in 3DMeasureRD3 shall have type Array</description>
			<test>containsA1 == false || A1HasTypeArray == true</test>
			<error>
				<message>Entry A1 in 3DMeasureRD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34489"/>
			<description>Entry Subtype in 3DMeasureRD3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureRD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34490"/>
			<description>Entry Subtype with type Name in 3DMeasureRD3 shall have value RD3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "RD3"</test>
			<error>
				<message>Entry Subtype with type Name in 3DMeasureRD3 has incorrect value %2 instead of RD3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34491"/>
			<description>Entry Subtype in 3DMeasureRD3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureRD3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34492"/>
			<description>Entry A4 with type Array in 3DMeasureRD3 shall be object ArrayOf_3Numbers</description>
			<test>A4HasTypeArray != true || A4_size == 1</test>
			<error>
				<message>Entry A4 with type Array in 3DMeasureRD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34493"/>
			<description>Entry A4 in 3DMeasureRD3 shall have type Array</description>
			<test>containsA4 == false || A4HasTypeArray == true</test>
			<error>
				<message>Entry A4 in 3DMeasureRD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34494"/>
			<description>Entry A2 with type Array in 3DMeasureRD3 shall be object ArrayOf_3Numbers</description>
			<test>A2HasTypeArray != true || A2_size == 1</test>
			<error>
				<message>Entry A2 with type Array in 3DMeasureRD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34495"/>
			<description>Entry A2 in 3DMeasureRD3 is required</description>
			<test>containsA2 == true</test>
			<error>
				<message>Entry A2 in 3DMeasureRD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34496"/>
			<description>Entry A2 in 3DMeasureRD3 shall have type Array</description>
			<test>containsA2 == false || A2HasTypeArray == true</test>
			<error>
				<message>Entry A2 in 3DMeasureRD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34497"/>
			<description>Entry U in 3DMeasureRD3 is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in 3DMeasureRD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34498"/>
			<description>Entry U in 3DMeasureRD3 shall have type StringText</description>
			<test>containsU == false || UHasTypeStringText == true</test>
			<error>
				<message>Entry U in 3DMeasureRD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34499"/>
			<description>Entry C with type Array in 3DMeasureRD3 shall be object ArrayOf_3RGBNumbers</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in 3DMeasureRD3 is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34500"/>
			<description>Entry C in 3DMeasureRD3 shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DMeasureRD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34501"/>
			<description>Entry N2 in 3DMeasureRD3 shall have type StringText</description>
			<test>containsN2 == false || N2HasTypeStringText == true</test>
			<error>
				<message>Entry N2 in 3DMeasureRD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34502"/>
			<description>Entry R in 3DMeasureRD3 shall have type Boolean</description>
			<test>containsR == false || RHasTypeBoolean == true</test>
			<error>
				<message>Entry R in 3DMeasureRD3 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34503"/>
			<description>Entry TP with type Array in 3DMeasureRD3 shall be object ArrayOf_3Numbers</description>
			<test>TPHasTypeArray != true || TP_size == 1</test>
			<error>
				<message>Entry TP with type Array in 3DMeasureRD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34504"/>
			<description>Entry TP in 3DMeasureRD3 is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in 3DMeasureRD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34505"/>
			<description>Entry TP in 3DMeasureRD3 shall have type Array</description>
			<test>containsTP == false || TPHasTypeArray == true</test>
			<error>
				<message>Entry TP in 3DMeasureRD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34506"/>
			<description>Entry TY with type Array in 3DMeasureRD3 shall be object ArrayOf_3Numbers</description>
			<test>TYHasTypeArray != true || TY_size == 1</test>
			<error>
				<message>Entry TY with type Array in 3DMeasureRD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34507"/>
			<description>Entry TY in 3DMeasureRD3 is required</description>
			<test>containsTY == true</test>
			<error>
				<message>Entry TY in 3DMeasureRD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34508"/>
			<description>Entry TY in 3DMeasureRD3 shall have type Array</description>
			<test>containsTY == false || TYHasTypeArray == true</test>
			<error>
				<message>Entry TY in 3DMeasureRD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34509"/>
			<description>Entry EL in 3DMeasureRD3 shall have type Number</description>
			<test>containsEL == false || ELHasTypeNumber == true</test>
			<error>
				<message>Entry EL in 3DMeasureRD3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="14" testNumber="34510"/>
			<description>Entry P with type Integer in 3DMeasureRD3 shall correspond possible value predicate: fn:Eval(@P &gt;= 0)</description>
			<test>PHasTypeInteger != true || PIntegerValue &gt;= 0</test>
			<error>
				<message>Entry P with type Integer in 3DMeasureRD3 doesn't correspond possible value predicate: fn:Eval(@P &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34511"/>
			<description>Entry P in 3DMeasureRD3 shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in 3DMeasureRD3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34512"/>
			<description>Entry A3 with type Array in 3DMeasureRD3 shall be object ArrayOf_3Numbers</description>
			<test>A3HasTypeArray != true || A3_size == 1</test>
			<error>
				<message>Entry A3 with type Array in 3DMeasureRD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34513"/>
			<description>Entry A3 in 3DMeasureRD3 shall have type Array</description>
			<test>containsA3 == false || A3HasTypeArray == true</test>
			<error>
				<message>Entry A3 in 3DMeasureRD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureRD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34514"/>
			<description>Entry TS in 3DMeasureRD3 shall have type Number</description>
			<test>containsTS == false || TSHasTypeNumber == true</test>
			<error>
				<message>Entry TS in 3DMeasureRD3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysInkListEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34569"/>
			<description>Entry with type Array in ArrayOfArraysInkList shall be object ArrayOfNumbersGeneral</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfArraysInkList is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysInkListEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34570"/>
			<description>Entry in ArrayOfArraysInkList shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ArrayOfArraysInkList is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DCrossSectionEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34573"/>
			<description>Entry with type Dictionary in ArrayOf3DCrossSection shall be object 3DCrossSection</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOf3DCrossSection is not object 3DCrossSection</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DCrossSectionEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34574"/>
			<description>Entry in ArrayOf3DCrossSection shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOf3DCrossSection is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="1" testNumber="34687"/>
			<description>AnnotPolyLine shall not contain entries except IC, Rect, F, StructParent, M, Subtype, OC, NM, RT, T, Type, LE, Subj, Measure, Popup, CA, P, Contents, IRT, Border, BE, Vertices, CreationDate, AP, C, IT, BS, AS, RC, ExData</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'IC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'Vertices' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'C' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'ExData').length == 0</test>
			<error>
				<message>AnnotPolyLine contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'IC' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'Vertices' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'C' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'ExData').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34688"/>
			<description>Entry IC with type Array in AnnotPolyLine shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>ICHasTypeArray != true || IC_size == 1</test>
			<error>
				<message>Entry IC with type Array in AnnotPolyLine is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34689"/>
			<description>Entry IC in AnnotPolyLine shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotPolyLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34690"/>
			<description>Entry Rect in AnnotPolyLine is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotPolyLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34691"/>
			<description>Entry Rect in AnnotPolyLine shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotPolyLine is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34692"/>
			<description>Entry F in AnnotPolyLine shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotPolyLine is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="9" testNumber="34693"/>
			<description>Entry F with type Bitmask in AnnotPolyLine shall correspond special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotPolyLine doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34694"/>
			<description>Entry StructParent in AnnotPolyLine shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotPolyLine is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34695"/>
			<description>Entry M in AnnotPolyLine shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotPolyLine is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34696"/>
			<description>Entry Subtype in AnnotPolyLine is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotPolyLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34697"/>
			<description>Entry Subtype with type Name in AnnotPolyLine shall have value PolyLine</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PolyLine"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotPolyLine has incorrect value %2 instead of PolyLine</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34698"/>
			<description>Entry Subtype in AnnotPolyLine shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotPolyLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34699"/>
			<description>Entry OC with type Dictionary in AnnotPolyLine shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotPolyLine is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34700"/>
			<description>Entry OC in AnnotPolyLine shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34701"/>
			<description>Entry NM in AnnotPolyLine shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotPolyLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34702"/>
			<description>Entry RT with type Name in AnnotPolyLine shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotPolyLine has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34703"/>
			<description>Entry RT in AnnotPolyLine shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotPolyLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34704"/>
			<description>Entry T in AnnotPolyLine shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotPolyLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34705"/>
			<description>Entry Type with type Name in AnnotPolyLine shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotPolyLine has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34706"/>
			<description>Entry Type in AnnotPolyLine shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotPolyLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34707"/>
			<description>Entry LE with type Array in AnnotPolyLine shall be object ArrayOf_2LineEndingsNames</description>
			<test>LEHasTypeArray != true || LE_size == 1</test>
			<error>
				<message>Entry LE with type Array in AnnotPolyLine is not object ArrayOf_2LineEndingsNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34708"/>
			<description>Entry LE in AnnotPolyLine shall have type Array</description>
			<test>containsLE == false || LEHasTypeArray == true</test>
			<error>
				<message>Entry LE in AnnotPolyLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34709"/>
			<description>Entry Subj in AnnotPolyLine shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotPolyLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34710"/>
			<description>Entry Measure with type Dictionary in AnnotPolyLine shall be object MeasureRL</description>
			<test>MeasureHasTypeDictionary != true || Measure_size == 1</test>
			<error>
				<message>Entry Measure with type Dictionary in AnnotPolyLine is not object MeasureRL</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34711"/>
			<description>Entry Measure in AnnotPolyLine shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34712"/>
			<description>Entry Popup with type Dictionary in AnnotPolyLine shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotPolyLine is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="10" testNumber="34713"/>
			<description>Entry Popup with type Dictionary in AnnotPolyLine shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotPolyLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34714"/>
			<description>Entry Popup in AnnotPolyLine shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="14" testNumber="34715"/>
			<description>Entry CA with type Number in AnnotPolyLine shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotPolyLine doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34716"/>
			<description>Entry CA in AnnotPolyLine shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotPolyLine is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34717"/>
			<description>Entry P with type Dictionary in AnnotPolyLine shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPolyLine is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="10" testNumber="34718"/>
			<description>Entry P with type Dictionary in AnnotPolyLine shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPolyLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34719"/>
			<description>Entry P in AnnotPolyLine shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34720"/>
			<description>Entry Contents in AnnotPolyLine shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotPolyLine is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34721"/>
			<description>Entry IRT with type Dictionary in AnnotPolyLine shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotPolyLine is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="11" testNumber="34722"/>
			<description>Entry IRT in AnnotPolyLine is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotPolyLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34723"/>
			<description>Entry IRT in AnnotPolyLine shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34724"/>
			<description>Entry Border with type Array in AnnotPolyLine shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotPolyLine is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34725"/>
			<description>Entry Border in AnnotPolyLine shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotPolyLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34726"/>
			<description>Entry BE with type Dictionary in AnnotPolyLine shall be object BorderEffect</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in AnnotPolyLine is not object BorderEffect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34727"/>
			<description>Entry BE in AnnotPolyLine shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34728"/>
			<description>Entry Vertices with type Array in AnnotPolyLine shall be object ArrayOfNumbersGeneral</description>
			<test>VerticesHasTypeArray != true || Vertices_size == 1</test>
			<error>
				<message>Entry Vertices with type Array in AnnotPolyLine is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="11" testNumber="34729"/>
			<description>Entry Vertices in AnnotPolyLine is required, when fn:IsRequired(fn:Not(fn:IsPresent(Path)))</description>
			<test>(containsVertices == true || (((containsPath == true)) != true) == false)</test>
			<error>
				<message>Entry Vertices in AnnotPolyLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34730"/>
			<description>Entry Vertices in AnnotPolyLine shall have type Array</description>
			<test>containsVertices == false || VerticesHasTypeArray == true</test>
			<error>
				<message>Entry Vertices in AnnotPolyLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34731"/>
			<description>Entry CreationDate in AnnotPolyLine shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotPolyLine is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34732"/>
			<description>Entry AP with type Dictionary in AnnotPolyLine shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotPolyLine is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="11" testNumber="34733"/>
			<description>Entry AP in AnnotPolyLine is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotPolyLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34734"/>
			<description>Entry AP in AnnotPolyLine shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34735"/>
			<description>Entry C with type Array in AnnotPolyLine shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotPolyLine is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34736"/>
			<description>Entry C in AnnotPolyLine shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotPolyLine is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34737"/>
			<description>Entry IT with type Name in AnnotPolyLine shall have one of values: PolygonDimension, PolygonCloud, PolyLineDimension</description>
			<test>ITHasTypeName != true || ITNameValue == "PolygonCloud" || ITNameValue == "PolyLineDimension" || ITNameValue == "PolygonDimension"</test>
			<error>
				<message>Entry IT with type Name in AnnotPolyLine has incorrect value %2 instead of PolygonDimension, PolygonCloud, PolyLineDimension</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ITNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34738"/>
			<description>Entry IT in AnnotPolyLine shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotPolyLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34739"/>
			<description>Entry BS with type Dictionary in AnnotPolyLine shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotPolyLine is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34740"/>
			<description>Entry BS in AnnotPolyLine shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="11" testNumber="34741"/>
			<description>Entry AS in AnnotPolyLine is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotPolyLine is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34742"/>
			<description>Entry AS in AnnotPolyLine shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotPolyLine is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34743"/>
			<description>Entry RC with type Stream in AnnotPolyLine shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotPolyLine is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="10" testNumber="34744"/>
			<description>Entry RC with type Stream in AnnotPolyLine shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotPolyLine is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34745"/>
			<description>Entry RC in AnnotPolyLine shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotPolyLine is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34746"/>
			<description>Entry ExData with type Dictionary in AnnotPolyLine shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotPolyLine is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolyLine">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34747"/>
			<description>Entry ExData in AnnotPolyLine shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotPolyLine is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="1" testNumber="34839"/>
			<description>MediaPlayParameters shall not contain entries except BE, PL, Type, MH</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'PL' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'MH').length == 0</test>
			<error>
				<message>MediaPlayParameters contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BE' &amp;&amp; elem != 'PL' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'MH').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34840"/>
			<description>Entry BE with type Dictionary in MediaPlayParameters shall be object MediaPlayParametersBE</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in MediaPlayParameters is not object MediaPlayParametersBE</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34841"/>
			<description>Entry BE in MediaPlayParameters shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in MediaPlayParameters is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34842"/>
			<description>Entry PL with type Dictionary in MediaPlayParameters shall be object MediaPlayers</description>
			<test>PLHasTypeDictionary != true || PL_size == 1</test>
			<error>
				<message>Entry PL with type Dictionary in MediaPlayParameters is not object MediaPlayers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34843"/>
			<description>Entry PL in MediaPlayParameters shall have type Dictionary</description>
			<test>containsPL == false || PLHasTypeDictionary == true</test>
			<error>
				<message>Entry PL in MediaPlayParameters is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34844"/>
			<description>Entry Type with type Name in MediaPlayParameters shall have value MediaPlayParams</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaPlayParams"</test>
			<error>
				<message>Entry Type with type Name in MediaPlayParameters has incorrect value %2 instead of MediaPlayParams</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34845"/>
			<description>Entry Type in MediaPlayParameters shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaPlayParameters is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34846"/>
			<description>Entry MH with type Dictionary in MediaPlayParameters shall be object MediaPlayParametersMH</description>
			<test>MHHasTypeDictionary != true || MH_size == 1</test>
			<error>
				<message>Entry MH with type Dictionary in MediaPlayParameters is not object MediaPlayParametersMH</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaPlayParameters">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34847"/>
			<description>Entry MH in MediaPlayParameters shall have type Dictionary</description>
			<test>containsMH == false || MHHasTypeDictionary == true</test>
			<error>
				<message>Entry MH in MediaPlayParameters is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="1" testNumber="34884"/>
			<description>Reference shall not contain entries except Page, F, ID</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Page' &amp;&amp; elem != 'F' &amp;&amp; elem != 'ID').length == 0</test>
			<error>
				<message>Reference contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Page' &amp;&amp; elem != 'F' &amp;&amp; elem != 'ID').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34885"/>
			<description>Entry Page in Reference is required</description>
			<test>containsPage == true</test>
			<error>
				<message>Entry Page in Reference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="14" testNumber="34886"/>
			<description>Entry Page with type Integer in Reference shall correspond possible value predicate: fn:Eval(@Page &gt;= 0)</description>
			<test>PageHasTypeInteger != true || PageIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Page with type Integer in Reference doesn't correspond possible value predicate: fn:Eval(@Page &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34887"/>
			<description>Entry Page in Reference shall have one of types: StringText, Integer</description>
			<test>containsPage == false || PageHasTypeStringText == true || PageHasTypeInteger == true</test>
			<error>
				<message>Entry Page in Reference is not one of types: StringText, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34888"/>
			<description>Entry F with type Dictionary in Reference shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Reference is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34889"/>
			<description>Entry F in Reference is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in Reference is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34890"/>
			<description>Entry F in Reference shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in Reference is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34891"/>
			<description>Entry ID with type Array in Reference shall be object ArrayOf_2StringsByte</description>
			<test>entryIDHasTypeArray != true || entryID_size == 1</test>
			<error>
				<message>Entry ID with type Array in Reference is not object ArrayOf_2StringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AReference">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34892"/>
			<description>Entry ID in Reference shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in Reference is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMapEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="34916"/>
			<description>Entry with type Dictionary in FontMap shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in FontMap is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3, FontType0, FontCIDType0, FontCIDType2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMapEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34917"/>
			<description>Entry in FontMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in FontMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="1" testNumber="34922"/>
			<description>PaperMetaData shall not contain entries except Height, Symbology, Width, XSymWidth, Resolution, Caption, ECC, nCodeWordCol, nCodeWordRow, Type, Version, YSymHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Height' &amp;&amp; elem != 'Symbology' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'XSymWidth' &amp;&amp; elem != 'Resolution' &amp;&amp; elem != 'Caption' &amp;&amp; elem != 'ECC' &amp;&amp; elem != 'nCodeWordCol' &amp;&amp; elem != 'nCodeWordRow' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'YSymHeight').length == 0</test>
			<error>
				<message>PaperMetaData contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Height' &amp;&amp; elem != 'Symbology' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'XSymWidth' &amp;&amp; elem != 'Resolution' &amp;&amp; elem != 'Caption' &amp;&amp; elem != 'ECC' &amp;&amp; elem != 'nCodeWordCol' &amp;&amp; elem != 'nCodeWordRow' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'YSymHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34923"/>
			<description>Entry Height in PaperMetaData is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in PaperMetaData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34924"/>
			<description>Entry Height in PaperMetaData shall have type Number</description>
			<test>containsHeight == false || HeightHasTypeNumber == true</test>
			<error>
				<message>Entry Height in PaperMetaData is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="9" testNumber="34925"/>
			<description>Entry Height with type Number in PaperMetaData shall correspond special case: fn:Eval(@Height &gt; 0)</description>
			<test>HeightHasTypeNumber != true || (HeightNumberValue &gt; 0)</test>
			<error>
				<message>Entry Height with type Number in PaperMetaData doesn't correspond special case: fn:Eval(@Height &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34926"/>
			<description>Entry Symbology in PaperMetaData is required</description>
			<test>containsSymbology == true</test>
			<error>
				<message>Entry Symbology in PaperMetaData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34927"/>
			<description>Entry Symbology with type Name in PaperMetaData shall have one of values: QRCode, PDF417, DataMatrix</description>
			<test>SymbologyHasTypeName != true || SymbologyNameValue == "PDF417" || SymbologyNameValue == "QRCode" || SymbologyNameValue == "DataMatrix"</test>
			<error>
				<message>Entry Symbology with type Name in PaperMetaData has incorrect value %2 instead of QRCode, PDF417, DataMatrix</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SymbologyNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34928"/>
			<description>Entry Symbology in PaperMetaData shall have type Name</description>
			<test>containsSymbology == false || SymbologyHasTypeName == true</test>
			<error>
				<message>Entry Symbology in PaperMetaData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34929"/>
			<description>Entry Width in PaperMetaData is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in PaperMetaData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34930"/>
			<description>Entry Width in PaperMetaData shall have type Number</description>
			<test>containsWidth == false || WidthHasTypeNumber == true</test>
			<error>
				<message>Entry Width in PaperMetaData is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="9" testNumber="34931"/>
			<description>Entry Width with type Number in PaperMetaData shall correspond special case: fn:Eval(@Width &gt; 0)</description>
			<test>WidthHasTypeNumber != true || (WidthNumberValue &gt; 0)</test>
			<error>
				<message>Entry Width with type Number in PaperMetaData doesn't correspond special case: fn:Eval(@Width &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34932"/>
			<description>Entry XSymWidth in PaperMetaData is required</description>
			<test>containsXSymWidth == true</test>
			<error>
				<message>Entry XSymWidth in PaperMetaData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34933"/>
			<description>Entry XSymWidth in PaperMetaData shall have type Integer</description>
			<test>containsXSymWidth == false || XSymWidthHasTypeInteger == true</test>
			<error>
				<message>Entry XSymWidth in PaperMetaData is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="9" testNumber="34934"/>
			<description>Entry XSymWidth with type Integer in PaperMetaData shall correspond special case: fn:Eval(@XSymWidth &gt; 0)</description>
			<test>XSymWidthHasTypeInteger != true || (XSymWidthIntegerValue &gt; 0)</test>
			<error>
				<message>Entry XSymWidth with type Integer in PaperMetaData doesn't correspond special case: fn:Eval(@XSymWidth &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34935"/>
			<description>Entry Resolution in PaperMetaData shall have type Number</description>
			<test>containsResolution == false || ResolutionHasTypeNumber == true</test>
			<error>
				<message>Entry Resolution in PaperMetaData is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="9" testNumber="34936"/>
			<description>Entry Resolution with type Number in PaperMetaData shall correspond special case: fn:Eval(@Resolution &gt; 0)</description>
			<test>ResolutionHasTypeNumber != true || (ResolutionNumberValue &gt; 0)</test>
			<error>
				<message>Entry Resolution with type Number in PaperMetaData doesn't correspond special case: fn:Eval(@Resolution &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34937"/>
			<description>Entry Caption in PaperMetaData shall have type StringText</description>
			<test>containsCaption == false || CaptionHasTypeStringText == true</test>
			<error>
				<message>Entry Caption in PaperMetaData is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="11" testNumber="34938"/>
			<description>Entry ECC in PaperMetaData is required, when fn:IsRequired((@Symbology == PDF417) || (@Symbology == QRCode))</description>
			<test>(containsECC == true || ((SymbologyNameValue == "PDF417") || (SymbologyNameValue == "QRCode")) == false)</test>
			<error>
				<message>Entry ECC in PaperMetaData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="14" testNumber="34939"/>
			<description>Entry ECC with type Integer in PaperMetaData shall correspond possible value predicate: fn:Eval((@ECC &gt;= 0) &amp;&amp; (((@Symbology == PDF417) &amp;&amp; (@ECC &lt;= 8)) || ((@Symbology == QRCode) &amp;&amp; (@ECC &lt;= 3))))</description>
			<test>ECCHasTypeInteger != true || (ECCIntegerValue &gt;= 0) &amp;&amp; (((SymbologyNameValue == "PDF417") &amp;&amp; (ECCIntegerValue &lt;= 8)) || ((SymbologyNameValue == "QRCode") &amp;&amp; (ECCIntegerValue &lt;= 3)))</test>
			<error>
				<message>Entry ECC with type Integer in PaperMetaData doesn't correspond possible value predicate: fn:Eval((@ECC &gt;= 0) &amp;&amp; (((@Symbology == PDF417) &amp;&amp; (@ECC &lt;= 8)) || ((@Symbology == QRCode) &amp;&amp; (@ECC &lt;= 3))))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34940"/>
			<description>Entry ECC in PaperMetaData shall have type Integer</description>
			<test>containsECC == false || ECCHasTypeInteger == true</test>
			<error>
				<message>Entry ECC in PaperMetaData is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34941"/>
			<description>Entry nCodeWordCol in PaperMetaData shall have type Number</description>
			<test>containsnCodeWordCol == false || nCodeWordColHasTypeNumber == true</test>
			<error>
				<message>Entry nCodeWordCol in PaperMetaData is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34942"/>
			<description>Entry nCodeWordRow in PaperMetaData shall have type Number</description>
			<test>containsnCodeWordRow == false || nCodeWordRowHasTypeNumber == true</test>
			<error>
				<message>Entry nCodeWordRow in PaperMetaData is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34943"/>
			<description>Entry Type in PaperMetaData is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PaperMetaData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34944"/>
			<description>Entry Type with type Name in PaperMetaData shall have value PaperMetaData</description>
			<test>TypeHasTypeName != true || TypeNameValue == "PaperMetaData"</test>
			<error>
				<message>Entry Type with type Name in PaperMetaData has incorrect value %2 instead of PaperMetaData</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34945"/>
			<description>Entry Type in PaperMetaData shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PaperMetaData is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34946"/>
			<description>Entry Version in PaperMetaData is required</description>
			<test>containsVersion == true</test>
			<error>
				<message>Entry Version in PaperMetaData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="6" testNumber="34947"/>
			<description>Entry Version with type Number in PaperMetaData shall have value 1</description>
			<test>VersionHasTypeNumber != true || VersionNumberValue == 1</test>
			<error>
				<message>Entry Version with type Number in PaperMetaData has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VersionNumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34948"/>
			<description>Entry Version in PaperMetaData shall have type Number</description>
			<test>containsVersion == false || VersionHasTypeNumber == true</test>
			<error>
				<message>Entry Version in PaperMetaData is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="34949"/>
			<description>Entry YSymHeight in PaperMetaData is required</description>
			<test>containsYSymHeight == true</test>
			<error>
				<message>Entry YSymHeight in PaperMetaData is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="34950"/>
			<description>Entry YSymHeight in PaperMetaData shall have type Integer</description>
			<test>containsYSymHeight == false || YSymHeightHasTypeInteger == true</test>
			<error>
				<message>Entry YSymHeight in PaperMetaData is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APaperMetaData">
			<id specification="ISO_32000_1_7" clause="9" testNumber="34951"/>
			<description>Entry YSymHeight with type Integer in PaperMetaData shall correspond special case: fn:Eval(@YSymHeight &gt; 0)</description>
			<test>YSymHeightHasTypeInteger != true || (YSymHeightIntegerValue &gt; 0)</test>
			<error>
				<message>Entry YSymHeight with type Integer in PaperMetaData doesn't correspond special case: fn:Eval(@YSymHeight &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35004"/>
			<description>Entry with type Dictionary in HalftoneType5 shall be object HalftoneType1</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in HalftoneType5 is not object HalftoneType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35005"/>
			<description>Entry with type Stream in HalftoneType5 shall be one of objects HalftoneType6, HalftoneType10, HalftoneType16</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in HalftoneType5 is not one of objects HalftoneType6, HalftoneType10, HalftoneType16</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="35006"/>
			<description>Entry with type Stream in HalftoneType5 shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in HalftoneType5 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AHalftoneType5Entry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35007"/>
			<description>Entry in HalftoneType5 shall have one of types: Dictionary, Stream</description>
			<test>HasTypeDictionary == true || HasTypeStream == true</test>
			<error>
				<message>Entry %1 in HalftoneType5 is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="1" testNumber="35054"/>
			<description>OutputIntents shall not contain entries except Type, OutputCondition, DestOutputProfile, Info, S, RegistryName, OutputConditionIdentifier</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'OutputCondition' &amp;&amp; elem != 'DestOutputProfile' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'S' &amp;&amp; elem != 'RegistryName' &amp;&amp; elem != 'OutputConditionIdentifier').length == 0</test>
			<error>
				<message>OutputIntents contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'OutputCondition' &amp;&amp; elem != 'DestOutputProfile' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'S' &amp;&amp; elem != 'RegistryName' &amp;&amp; elem != 'OutputConditionIdentifier').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35055"/>
			<description>Entry Type with type Name in OutputIntents shall have value OutputIntent</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OutputIntent"</test>
			<error>
				<message>Entry Type with type Name in OutputIntents has incorrect value %2 instead of OutputIntent</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35056"/>
			<description>Entry Type in OutputIntents shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OutputIntents is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35057"/>
			<description>Entry OutputCondition in OutputIntents shall have type StringText</description>
			<test>containsOutputCondition == false || OutputConditionHasTypeStringText == true</test>
			<error>
				<message>Entry OutputCondition in OutputIntents is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35058"/>
			<description>Entry DestOutputProfile with type Stream in OutputIntents shall be object ICCProfileStream</description>
			<test>DestOutputProfileHasTypeStream != true || DestOutputProfile_size == 1</test>
			<error>
				<message>Entry DestOutputProfile with type Stream in OutputIntents is not object ICCProfileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="10" testNumber="35059"/>
			<description>Entry DestOutputProfile with type Stream in OutputIntents shall be indirect</description>
			<test>DestOutputProfileHasTypeStream != true || isDestOutputProfileIndirect == true</test>
			<error>
				<message>Entry DestOutputProfile with type Stream in OutputIntents is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35060"/>
			<description>Entry DestOutputProfile in OutputIntents shall have type Stream</description>
			<test>containsDestOutputProfile == false || DestOutputProfileHasTypeStream == true</test>
			<error>
				<message>Entry DestOutputProfile in OutputIntents is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35061"/>
			<description>Entry Info in OutputIntents shall have type StringText</description>
			<test>containsInfo == false || InfoHasTypeStringText == true</test>
			<error>
				<message>Entry Info in OutputIntents is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="7" testNumber="35062"/>
			<description>Entry S in OutputIntents is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in OutputIntents is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35063"/>
			<description>Entry S with type Name in OutputIntents shall have one of values: ISO_PDFE1, GTS_PDFX, GTS_PDFA1</description>
			<test>SHasTypeName != true || SNameValue == "GTS_PDFX" || SNameValue == "GTS_PDFA1" || SNameValue == "ISO_PDFE1"</test>
			<error>
				<message>Entry S with type Name in OutputIntents has incorrect value %2 instead of ISO_PDFE1, GTS_PDFX, GTS_PDFA1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35064"/>
			<description>Entry S in OutputIntents shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in OutputIntents is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35065"/>
			<description>Entry RegistryName in OutputIntents shall have type StringText</description>
			<test>containsRegistryName == false || RegistryNameHasTypeStringText == true</test>
			<error>
				<message>Entry RegistryName in OutputIntents is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="7" testNumber="35066"/>
			<description>Entry OutputConditionIdentifier in OutputIntents is required</description>
			<test>containsOutputConditionIdentifier == true</test>
			<error>
				<message>Entry OutputConditionIdentifier in OutputIntents is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutputIntents">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35067"/>
			<description>Entry OutputConditionIdentifier in OutputIntents shall have type StringText</description>
			<test>containsOutputConditionIdentifier == false || OutputConditionIdentifierHasTypeStringText == true</test>
			<error>
				<message>Entry OutputConditionIdentifier in OutputIntents is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNMixingHints">
			<id specification="ISO_32000_1_7" clause="1" testNumber="35096"/>
			<description>DeviceNMixingHints shall not contain entries except PrintingOrder, DotGain, Solidities</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PrintingOrder' &amp;&amp; elem != 'DotGain' &amp;&amp; elem != 'Solidities').length == 0</test>
			<error>
				<message>DeviceNMixingHints contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PrintingOrder' &amp;&amp; elem != 'DotGain' &amp;&amp; elem != 'Solidities').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNMixingHints">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35097"/>
			<description>Entry PrintingOrder with type Array in DeviceNMixingHints shall be object ArrayOfNamesForPrintingOrder</description>
			<test>PrintingOrderHasTypeArray != true || PrintingOrder_size == 1</test>
			<error>
				<message>Entry PrintingOrder with type Array in DeviceNMixingHints is not object ArrayOfNamesForPrintingOrder</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNMixingHints">
			<id specification="ISO_32000_1_7" clause="11" testNumber="35098"/>
			<description>Entry PrintingOrder in DeviceNMixingHints is required, when fn:IsRequired(fn:IsPresent(Solidities))</description>
			<test>(containsPrintingOrder == true || ((containsSolidities == true)) == false)</test>
			<error>
				<message>Entry PrintingOrder in DeviceNMixingHints is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNMixingHints">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35099"/>
			<description>Entry PrintingOrder in DeviceNMixingHints shall have type Array</description>
			<test>containsPrintingOrder == false || PrintingOrderHasTypeArray == true</test>
			<error>
				<message>Entry PrintingOrder in DeviceNMixingHints is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNMixingHints">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35100"/>
			<description>Entry DotGain with type Dictionary in DeviceNMixingHints shall be object DictionaryOfFunctions</description>
			<test>DotGainHasTypeDictionary != true || DotGain_size == 1</test>
			<error>
				<message>Entry DotGain with type Dictionary in DeviceNMixingHints is not object DictionaryOfFunctions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNMixingHints">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35101"/>
			<description>Entry DotGain in DeviceNMixingHints shall have type Dictionary</description>
			<test>containsDotGain == false || DotGainHasTypeDictionary == true</test>
			<error>
				<message>Entry DotGain in DeviceNMixingHints is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNMixingHints">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35102"/>
			<description>Entry Solidities with type Dictionary in DeviceNMixingHints shall be object Solidities</description>
			<test>SoliditiesHasTypeDictionary != true || Solidities_size == 1</test>
			<error>
				<message>Entry Solidities with type Dictionary in DeviceNMixingHints is not object Solidities</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNMixingHints">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35103"/>
			<description>Entry Solidities in DeviceNMixingHints shall have type Dictionary</description>
			<test>containsSolidities == false || SoliditiesHasTypeDictionary == true</test>
			<error>
				<message>Entry Solidities in DeviceNMixingHints is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="1" testNumber="35199"/>
			<description>Thread shall not contain entries except I, Type, F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'I' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'F').length == 0</test>
			<error>
				<message>Thread contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'I' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35200"/>
			<description>Entry I with type Dictionary in Thread shall be object DocInfo</description>
			<test>IHasTypeDictionary != true || I_size == 1</test>
			<error>
				<message>Entry I with type Dictionary in Thread is not object DocInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35201"/>
			<description>Entry I in Thread shall have type Dictionary</description>
			<test>containsI == false || IHasTypeDictionary == true</test>
			<error>
				<message>Entry I in Thread is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35202"/>
			<description>Entry Type with type Name in Thread shall have value Thread</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Thread"</test>
			<error>
				<message>Entry Type with type Name in Thread has incorrect value %2 instead of Thread</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35203"/>
			<description>Entry Type in Thread shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Thread is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35204"/>
			<description>Entry F with type Dictionary in Thread shall be object BeadFirst</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Thread is not object BeadFirst</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="7" testNumber="35205"/>
			<description>Entry F in Thread is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in Thread is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="10" testNumber="35206"/>
			<description>Entry F with type Dictionary in Thread shall be indirect</description>
			<test>FHasTypeDictionary != true || isFIndirect == true</test>
			<error>
				<message>Entry F with type Dictionary in Thread is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35207"/>
			<description>Entry F in Thread shall have type Dictionary</description>
			<test>containsF == false || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in Thread is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreeEmbeddedFiles">
			<id specification="ISO_32000_1_7" clause="18" testNumber="35223"/>
			<description>Entry * in NameNameTreeEmbeddedFiles shall be object NameNameTreeEmbeddedFilesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreeEmbeddedFiles is not object NameNameTreeEmbeddedFilesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="1" testNumber="35245"/>
			<description>OptContentMembership shall not contain entries except Type, P, VE, OCGs</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'P' &amp;&amp; elem != 'VE' &amp;&amp; elem != 'OCGs').length == 0</test>
			<error>
				<message>OptContentMembership contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'P' &amp;&amp; elem != 'VE' &amp;&amp; elem != 'OCGs').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="7" testNumber="35246"/>
			<description>Entry Type in OptContentMembership is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in OptContentMembership is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35247"/>
			<description>Entry Type with type Name in OptContentMembership shall have value OCMD</description>
			<test>TypeHasTypeName != true || TypeNameValue == "OCMD"</test>
			<error>
				<message>Entry Type with type Name in OptContentMembership has incorrect value %2 instead of OCMD</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35248"/>
			<description>Entry Type in OptContentMembership shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in OptContentMembership is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35249"/>
			<description>Entry P with type Name in OptContentMembership shall have one of values: AllOff, AnyOff, AllOn, AnyOn</description>
			<test>PHasTypeName != true || PNameValue == "AllOn" || PNameValue == "AnyOn" || PNameValue == "AnyOff" || PNameValue == "AllOff"</test>
			<error>
				<message>Entry P with type Name in OptContentMembership has incorrect value %2 instead of AllOff, AnyOff, AllOn, AnyOn</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35250"/>
			<description>Entry P in OptContentMembership shall have type Name</description>
			<test>containsP == false || PHasTypeName == true</test>
			<error>
				<message>Entry P in OptContentMembership is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35251"/>
			<description>Entry VE with type Array in OptContentMembership shall be object VisibilityExpressionArray</description>
			<test>VEHasTypeArray != true || VE_size == 1</test>
			<error>
				<message>Entry VE with type Array in OptContentMembership is not object VisibilityExpressionArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35252"/>
			<description>Entry VE in OptContentMembership shall have type Array</description>
			<test>containsVE == false || VEHasTypeArray == true</test>
			<error>
				<message>Entry VE in OptContentMembership is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35253"/>
			<description>Entry OCGs with type Array in OptContentMembership shall be object ArrayOfOCG</description>
			<test>OCGsHasTypeArray != true || OCGs_size == 1</test>
			<error>
				<message>Entry OCGs with type Array in OptContentMembership is not object ArrayOfOCG</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35254"/>
			<description>Entry OCGs with type Dictionary in OptContentMembership shall be object OptContentGroup</description>
			<test>OCGsHasTypeDictionary != true || OCGs_size == 1</test>
			<error>
				<message>Entry OCGs with type Dictionary in OptContentMembership is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOptContentMembership">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35255"/>
			<description>Entry OCGs in OptContentMembership shall have one of types: Null, Array, Dictionary</description>
			<test>containsOCGs == false || OCGsHasTypeNull == true || OCGsHasTypeArray == true || OCGsHasTypeDictionary == true</test>
			<error>
				<message>Entry OCGs in OptContentMembership is not one of types: Null, Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="1" testNumber="35291"/>
			<description>CertSeedValue shall not contain entries except Type, Ff, OID, Subject, URL, Issuer, KeyUsage, URLType, SubjectDN</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'OID' &amp;&amp; elem != 'Subject' &amp;&amp; elem != 'URL' &amp;&amp; elem != 'Issuer' &amp;&amp; elem != 'KeyUsage' &amp;&amp; elem != 'URLType' &amp;&amp; elem != 'SubjectDN').length == 0</test>
			<error>
				<message>CertSeedValue contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'OID' &amp;&amp; elem != 'Subject' &amp;&amp; elem != 'URL' &amp;&amp; elem != 'Issuer' &amp;&amp; elem != 'KeyUsage' &amp;&amp; elem != 'URLType' &amp;&amp; elem != 'SubjectDN').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35292"/>
			<description>Entry Type with type Name in CertSeedValue shall have value SVCert</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SVCert"</test>
			<error>
				<message>Entry Type with type Name in CertSeedValue has incorrect value %2 instead of SVCert</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35293"/>
			<description>Entry Type in CertSeedValue shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CertSeedValue is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35294"/>
			<description>Entry Ff in CertSeedValue shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in CertSeedValue is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="9" testNumber="35295"/>
			<description>Entry Ff with type Bitmask in CertSeedValue shall correspond special case: fn:Eval(fn:BitsClear(8 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in CertSeedValue doesn't correspond special case: fn:Eval(fn:BitsClear(8 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35296"/>
			<description>Entry OID with type Array in CertSeedValue shall be object ArrayOfStringsByte</description>
			<test>OIDHasTypeArray != true || OID_size == 1</test>
			<error>
				<message>Entry OID with type Array in CertSeedValue is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35297"/>
			<description>Entry OID in CertSeedValue shall have type Array</description>
			<test>containsOID == false || OIDHasTypeArray == true</test>
			<error>
				<message>Entry OID in CertSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35298"/>
			<description>Entry Subject with type Array in CertSeedValue shall be object ArrayOfStringsByte</description>
			<test>SubjectHasTypeArray != true || Subject_size == 1</test>
			<error>
				<message>Entry Subject with type Array in CertSeedValue is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35299"/>
			<description>Entry Subject in CertSeedValue shall have type Array</description>
			<test>containsSubject == false || SubjectHasTypeArray == true</test>
			<error>
				<message>Entry Subject in CertSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35300"/>
			<description>Entry URL in CertSeedValue shall have type StringAscii</description>
			<test>containsURL == false || URLHasTypeStringAscii == true</test>
			<error>
				<message>Entry URL in CertSeedValue is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35301"/>
			<description>Entry Issuer with type Array in CertSeedValue shall be object ArrayOfStringsByte</description>
			<test>IssuerHasTypeArray != true || Issuer_size == 1</test>
			<error>
				<message>Entry Issuer with type Array in CertSeedValue is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35302"/>
			<description>Entry Issuer in CertSeedValue shall have type Array</description>
			<test>containsIssuer == false || IssuerHasTypeArray == true</test>
			<error>
				<message>Entry Issuer in CertSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35303"/>
			<description>Entry KeyUsage with type Array in CertSeedValue shall be object ArrayOfStringsASCII</description>
			<test>KeyUsageHasTypeArray != true || KeyUsage_size == 1</test>
			<error>
				<message>Entry KeyUsage with type Array in CertSeedValue is not object ArrayOfStringsASCII</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35304"/>
			<description>Entry KeyUsage in CertSeedValue shall have type Array</description>
			<test>containsKeyUsage == false || KeyUsageHasTypeArray == true</test>
			<error>
				<message>Entry KeyUsage in CertSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35305"/>
			<description>Entry URLType in CertSeedValue shall have type Name</description>
			<test>containsURLType == false || URLTypeHasTypeName == true</test>
			<error>
				<message>Entry URLType in CertSeedValue is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35306"/>
			<description>Entry SubjectDN with type Array in CertSeedValue shall be object ArrayOfSubjectDN</description>
			<test>SubjectDNHasTypeArray != true || SubjectDN_size == 1</test>
			<error>
				<message>Entry SubjectDN with type Array in CertSeedValue is not object ArrayOfSubjectDN</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACertSeedValue">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35307"/>
			<description>Entry SubjectDN in CertSeedValue shall have type Array</description>
			<test>containsSubjectDN == false || SubjectDNHasTypeArray == true</test>
			<error>
				<message>Entry SubjectDN in CertSeedValue is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35352"/>
			<description>Entry with type Dictionary in ArrayOfActionHideAnnots shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfActionHideAnnots is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotPolyLine, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotTrapNetwork, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="35353"/>
			<description>Entry with type Dictionary in ArrayOfActionHideAnnots shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfActionHideAnnots is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35354"/>
			<description>Entry in ArrayOfActionHideAnnots shall have one of types: StringText, Dictionary</description>
			<test>HasTypeStringText == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfActionHideAnnots is not one of types: StringText, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfActionHideAnnotsEntry">
			<id specification="ISO_32000_1_7" clause="9" testNumber="35355"/>
			<description>Entry with type StringText in ArrayOfActionHideAnnots shall correspond special case: fn:Eval(fn:IsFieldName(@*))</description>
			<test>HasTypeStringText != true || (IsFieldName == true)</test>
			<error>
				<message>Entry %1 with type StringText in ArrayOfActionHideAnnots doesn't correspond special case: fn:Eval(fn:IsFieldName(@*))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_7" clause="2" testNumber="35390"/>
			<description>LabColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>LabColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35391"/>
			<description>Entry 0 with type Name in LabColorSpace shall have value Lab</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Lab"</test>
			<error>
				<message>Entry 0 with type Name in LabColorSpace has incorrect value %2 instead of Lab</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35392"/>
			<description>Entry 0 in LabColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in LabColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35393"/>
			<description>Entry 1 with type Dictionary in LabColorSpace shall be object LabDict</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in LabColorSpace is not object LabDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35394"/>
			<description>Entry 1 in LabColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in LabColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Numbers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="35415"/>
			<description>ArrayOf_2Numbers shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2Numbers contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35416"/>
			<description>Entry 1 in ArrayOf_2Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35417"/>
			<description>Entry 0 in ArrayOf_2Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="1" testNumber="35465"/>
			<description>ActionRendition shall not contain entries except AN, JS, Next, S, OP, Type, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AN' &amp;&amp; elem != 'JS' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'R').length == 0</test>
			<error>
				<message>ActionRendition contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AN' &amp;&amp; elem != 'JS' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S' &amp;&amp; elem != 'OP' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'R').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35466"/>
			<description>Entry AN with type Dictionary in ActionRendition shall be object AnnotScreen</description>
			<test>ANHasTypeDictionary != true || AN_size == 1</test>
			<error>
				<message>Entry AN with type Dictionary in ActionRendition is not object AnnotScreen</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="11" testNumber="35467"/>
			<description>Entry AN in ActionRendition is required, when fn:IsRequired((@OP &gt;= 0) &amp;&amp; (@OP &lt;= 4))</description>
			<test>(containsAN == true || ((OPIntegerValue &gt;= 0) &amp;&amp; (OPIntegerValue &lt;= 4)) == false)</test>
			<error>
				<message>Entry AN in ActionRendition is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="10" testNumber="35468"/>
			<description>Entry AN with type Dictionary in ActionRendition shall be indirect</description>
			<test>ANHasTypeDictionary != true || isANIndirect == true</test>
			<error>
				<message>Entry AN with type Dictionary in ActionRendition is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35469"/>
			<description>Entry AN in ActionRendition shall have type Dictionary</description>
			<test>containsAN == false || ANHasTypeDictionary == true</test>
			<error>
				<message>Entry AN in ActionRendition is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35470"/>
			<description>Entry JS with type Stream in ActionRendition shall be object Stream</description>
			<test>JSHasTypeStream != true || JS_size == 1</test>
			<error>
				<message>Entry JS with type Stream in ActionRendition is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="10" testNumber="35471"/>
			<description>Entry JS with type Stream in ActionRendition shall be indirect</description>
			<test>JSHasTypeStream != true || isJSIndirect == true</test>
			<error>
				<message>Entry JS with type Stream in ActionRendition is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35472"/>
			<description>Entry JS in ActionRendition shall have one of types: StringText, Stream</description>
			<test>containsJS == false || JSHasTypeStringText == true || JSHasTypeStream == true</test>
			<error>
				<message>Entry JS in ActionRendition is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35473"/>
			<description>Entry Next with type Array in ActionRendition shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionRendition is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35474"/>
			<description>Entry Next with type Dictionary in ActionRendition shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionRendition is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35475"/>
			<description>Entry Next in ActionRendition shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionRendition is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="7" testNumber="35476"/>
			<description>Entry S in ActionRendition is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionRendition is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35477"/>
			<description>Entry S with type Name in ActionRendition shall have value Rendition</description>
			<test>SHasTypeName != true || SNameValue == "Rendition"</test>
			<error>
				<message>Entry S with type Name in ActionRendition has incorrect value %2 instead of Rendition</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35478"/>
			<description>Entry S in ActionRendition shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionRendition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="14" testNumber="35479"/>
			<description>Entry OP with type Integer in ActionRendition shall correspond possible value predicate: fn:Eval((@OP &gt;= 0) &amp;&amp; (@OP &lt;= 4))</description>
			<test>OPHasTypeInteger != true || (OPIntegerValue &gt;= 0) &amp;&amp; (OPIntegerValue &lt;= 4)</test>
			<error>
				<message>Entry OP with type Integer in ActionRendition doesn't correspond possible value predicate: fn:Eval((@OP &gt;= 0) &amp;&amp; (@OP &lt;= 4))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35480"/>
			<description>Entry OP in ActionRendition shall have type Integer</description>
			<test>containsOP == false || OPHasTypeInteger == true</test>
			<error>
				<message>Entry OP in ActionRendition is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35481"/>
			<description>Entry Type with type Name in ActionRendition shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionRendition has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35482"/>
			<description>Entry Type in ActionRendition shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionRendition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35483"/>
			<description>Entry R with type Dictionary in ActionRendition shall be one of objects RenditionSelector, RenditionMedia</description>
			<test>RHasTypeDictionary != true || R_size == 1</test>
			<error>
				<message>Entry R with type Dictionary in ActionRendition is not one of objects RenditionSelector, RenditionMedia</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="11" testNumber="35484"/>
			<description>Entry R in ActionRendition is required, when fn:IsRequired((@OP == 0) || (@OP == 4))</description>
			<test>(containsR == true || ((OPIntegerValue == 0) || (OPIntegerValue == 4)) == false)</test>
			<error>
				<message>Entry R in ActionRendition is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionRendition">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35485"/>
			<description>Entry R in ActionRendition shall have type Dictionary</description>
			<test>containsR == false || RHasTypeDictionary == true</test>
			<error>
				<message>Entry R in ActionRendition is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="2" testNumber="35521"/>
			<description>ArrayOfXRefIndexIntegersSubArray shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOfXRefIndexIntegersSubArray contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="16" testNumber="35522"/>
			<description>If entry 1 with type Integer in ArrayOfXRefIndexIntegersSubArray corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>entry1HasTypeInteger != true || (isentry1Indirect == false)</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfXRefIndexIntegersSubArray is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35523"/>
			<description>Entry 1 in ArrayOfXRefIndexIntegersSubArray shall have type Integer</description>
			<test>size &lt;= 1 || entry1HasTypeInteger == true</test>
			<error>
				<message>Entry 1 in ArrayOfXRefIndexIntegersSubArray is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="9" testNumber="35524"/>
			<description>Entry 1 with type Integer in ArrayOfXRefIndexIntegersSubArray shall correspond special case: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeInteger != true || (entry1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry 1 with type Integer in ArrayOfXRefIndexIntegersSubArray doesn't correspond special case: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="16" testNumber="35525"/>
			<description>If entry 0 with type Integer in ArrayOfXRefIndexIntegersSubArray corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>entry0HasTypeInteger != true || (isentry0Indirect == false)</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfXRefIndexIntegersSubArray is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35526"/>
			<description>Entry 0 in ArrayOfXRefIndexIntegersSubArray shall have type Integer</description>
			<test>size &lt;= 0 || entry0HasTypeInteger == true</test>
			<error>
				<message>Entry 0 in ArrayOfXRefIndexIntegersSubArray is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfXRefIndexIntegersSubArray">
			<id specification="ISO_32000_1_7" clause="9" testNumber="35527"/>
			<description>Entry 0 with type Integer in ArrayOfXRefIndexIntegersSubArray shall correspond special case: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeInteger != true || (entry0IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry 0 with type Integer in ArrayOfXRefIndexIntegersSubArray doesn't correspond special case: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrderElementsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35541"/>
			<description>Entry with type Array in ArrayOfOptContentOrderElements shall be object ArrayOfOptContentOrders</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfOptContentOrderElements is not object ArrayOfOptContentOrders</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrderElementsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35542"/>
			<description>Entry with type Dictionary in ArrayOfOptContentOrderElements shall be object OptContentGroup</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOptContentOrderElements is not object OptContentGroup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOptContentOrderElementsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35543"/>
			<description>Entry in ArrayOfOptContentOrderElements shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOptContentOrderElements is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="1" testNumber="35715"/>
			<description>AnnotInk shall not contain entries except NM, Subj, Rect, OC, AS, F, IT, Type, Popup, M, InkList, CreationDate, RC, AP, BS, ExData, C, P, T, IRT, StructParent, Border, Contents, Subtype, RT, CA</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'NM' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'M' &amp;&amp; elem != 'InkList' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'C' &amp;&amp; elem != 'P' &amp;&amp; elem != 'T' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'CA').length == 0</test>
			<error>
				<message>AnnotInk contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'NM' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'F' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'M' &amp;&amp; elem != 'InkList' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'C' &amp;&amp; elem != 'P' &amp;&amp; elem != 'T' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'CA').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35716"/>
			<description>Entry NM in AnnotInk shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotInk is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35717"/>
			<description>Entry Subj in AnnotInk shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotInk is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="7" testNumber="35718"/>
			<description>Entry Rect in AnnotInk is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35719"/>
			<description>Entry Rect in AnnotInk shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotInk is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35720"/>
			<description>Entry OC with type Dictionary in AnnotInk shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotInk is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35721"/>
			<description>Entry OC in AnnotInk shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="11" testNumber="35722"/>
			<description>Entry AS in AnnotInk is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35723"/>
			<description>Entry AS in AnnotInk shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotInk is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35724"/>
			<description>Entry F in AnnotInk shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotInk is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="9" testNumber="35725"/>
			<description>Entry F with type Bitmask in AnnotInk shall correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotInk doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35726"/>
			<description>Entry IT in AnnotInk shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotInk is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35727"/>
			<description>Entry Type with type Name in AnnotInk shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotInk has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35728"/>
			<description>Entry Type in AnnotInk shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotInk is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35729"/>
			<description>Entry Popup with type Dictionary in AnnotInk shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotInk is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="10" testNumber="35730"/>
			<description>Entry Popup with type Dictionary in AnnotInk shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotInk is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35731"/>
			<description>Entry Popup in AnnotInk shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35732"/>
			<description>Entry M in AnnotInk shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotInk is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35733"/>
			<description>Entry InkList with type Array in AnnotInk shall be object ArrayOfArraysInkList</description>
			<test>InkListHasTypeArray != true || InkList_size == 1</test>
			<error>
				<message>Entry InkList with type Array in AnnotInk is not object ArrayOfArraysInkList</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="7" testNumber="35734"/>
			<description>Entry InkList in AnnotInk is required</description>
			<test>containsInkList == true</test>
			<error>
				<message>Entry InkList in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35735"/>
			<description>Entry InkList in AnnotInk shall have type Array</description>
			<test>containsInkList == false || InkListHasTypeArray == true</test>
			<error>
				<message>Entry InkList in AnnotInk is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35736"/>
			<description>Entry CreationDate in AnnotInk shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotInk is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35737"/>
			<description>Entry RC with type Stream in AnnotInk shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotInk is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="10" testNumber="35738"/>
			<description>Entry RC with type Stream in AnnotInk shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotInk is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35739"/>
			<description>Entry RC in AnnotInk shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotInk is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35740"/>
			<description>Entry AP with type Dictionary in AnnotInk shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotInk is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="11" testNumber="35741"/>
			<description>Entry AP in AnnotInk is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35742"/>
			<description>Entry AP in AnnotInk shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35743"/>
			<description>Entry BS with type Dictionary in AnnotInk shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotInk is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35744"/>
			<description>Entry BS in AnnotInk shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35745"/>
			<description>Entry ExData with type Dictionary in AnnotInk shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotInk is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35746"/>
			<description>Entry ExData in AnnotInk shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35747"/>
			<description>Entry C with type Array in AnnotInk shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotInk is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35748"/>
			<description>Entry C in AnnotInk shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotInk is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35749"/>
			<description>Entry P with type Dictionary in AnnotInk shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotInk is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="10" testNumber="35750"/>
			<description>Entry P with type Dictionary in AnnotInk shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotInk is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35751"/>
			<description>Entry P in AnnotInk shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35752"/>
			<description>Entry T in AnnotInk shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotInk is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35753"/>
			<description>Entry IRT with type Dictionary in AnnotInk shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotInk is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="11" testNumber="35754"/>
			<description>Entry IRT in AnnotInk is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35755"/>
			<description>Entry IRT in AnnotInk shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotInk is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35756"/>
			<description>Entry StructParent in AnnotInk shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotInk is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35757"/>
			<description>Entry Border with type Array in AnnotInk shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotInk is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35758"/>
			<description>Entry Border in AnnotInk shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotInk is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35759"/>
			<description>Entry Contents in AnnotInk shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotInk is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="7" testNumber="35760"/>
			<description>Entry Subtype in AnnotInk is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotInk is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35761"/>
			<description>Entry Subtype with type Name in AnnotInk shall have value Ink</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Ink"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotInk has incorrect value %2 instead of Ink</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35762"/>
			<description>Entry Subtype in AnnotInk shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotInk is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35763"/>
			<description>Entry RT with type Name in AnnotInk shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotInk has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35764"/>
			<description>Entry RT in AnnotInk shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotInk is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="14" testNumber="35765"/>
			<description>Entry CA with type Number in AnnotInk shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotInk doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotInk">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35766"/>
			<description>Entry CA in AnnotInk shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotInk is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="1" testNumber="35871"/>
			<description>AlternateImage shall not contain entries except DefaultForPrinting, OC, Image</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DefaultForPrinting' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Image').length == 0</test>
			<error>
				<message>AlternateImage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DefaultForPrinting' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Image').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35872"/>
			<description>Entry DefaultForPrinting in AlternateImage shall have type Boolean</description>
			<test>containsDefaultForPrinting == false || DefaultForPrintingHasTypeBoolean == true</test>
			<error>
				<message>Entry DefaultForPrinting in AlternateImage is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35873"/>
			<description>Entry OC with type Dictionary in AlternateImage shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AlternateImage is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35874"/>
			<description>Entry OC in AlternateImage shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AlternateImage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35875"/>
			<description>Entry Image with type Stream in AlternateImage shall be object XObjectImage</description>
			<test>ImageHasTypeStream != true || Image_size == 1</test>
			<error>
				<message>Entry Image with type Stream in AlternateImage is not object XObjectImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="7" testNumber="35876"/>
			<description>Entry Image in AlternateImage is required</description>
			<test>containsImage == true</test>
			<error>
				<message>Entry Image in AlternateImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="10" testNumber="35877"/>
			<description>Entry Image with type Stream in AlternateImage shall be indirect</description>
			<test>ImageHasTypeStream != true || isImageIndirect == true</test>
			<error>
				<message>Entry Image with type Stream in AlternateImage is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAlternateImage">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35878"/>
			<description>Entry Image in AlternateImage shall have type Stream</description>
			<test>containsImage == false || ImageHasTypeStream == true</test>
			<error>
				<message>Entry Image in AlternateImage is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="1" testNumber="35921"/>
			<description>CryptFilterPublicKey shall not contain entries except EncryptMetadata, AuthEvent, Length, Recipients, CFM, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'EncryptMetadata' &amp;&amp; elem != 'AuthEvent' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'CFM' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>CryptFilterPublicKey contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'EncryptMetadata' &amp;&amp; elem != 'AuthEvent' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Recipients' &amp;&amp; elem != 'CFM' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35922"/>
			<description>Entry EncryptMetadata in CryptFilterPublicKey shall have type Boolean</description>
			<test>containsEncryptMetadata == false || EncryptMetadataHasTypeBoolean == true</test>
			<error>
				<message>Entry EncryptMetadata in CryptFilterPublicKey is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35923"/>
			<description>Entry AuthEvent with type Name in CryptFilterPublicKey shall have one of values: EFOpen, DocOpen</description>
			<test>AuthEventHasTypeName != true || AuthEventNameValue == "DocOpen" || AuthEventNameValue == "EFOpen"</test>
			<error>
				<message>Entry AuthEvent with type Name in CryptFilterPublicKey has incorrect value %2 instead of EFOpen, DocOpen</message>
				<arguments>
					<argument>keyName</argument>
					<argument>AuthEventNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35924"/>
			<description>Entry AuthEvent in CryptFilterPublicKey shall have type Name</description>
			<test>containsAuthEvent == false || AuthEventHasTypeName == true</test>
			<error>
				<message>Entry AuthEvent in CryptFilterPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="7" testNumber="35925"/>
			<description>Entry Length in CryptFilterPublicKey is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in CryptFilterPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="14" testNumber="35926"/>
			<description>Entry Length with type Integer in CryptFilterPublicKey shall correspond possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; (@Length &lt;= 128) &amp;&amp; ((@Length mod 8) == 0))</description>
			<test>LengthHasTypeInteger != true || (LengthIntegerValue &gt;= 40) &amp;&amp; (LengthIntegerValue &lt;= 128) &amp;&amp; ((LengthIntegerValue % 8) == 0)</test>
			<error>
				<message>Entry Length with type Integer in CryptFilterPublicKey doesn't correspond possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; (@Length &lt;= 128) &amp;&amp; ((@Length mod 8) == 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="15" testNumber="35927"/>
			<description>Entry Length in CryptFilterPublicKey shall have Integer value 128, if this object corresponds to condition @CFM == AESV2</description>
			<test>((CFMNameValue == "AESV2") == false || LengthIntegerValue == 128)</test>
			<error>
				<message>Entry Length in CryptFilterPublicKey doesn't have value 128</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="15" testNumber="35928"/>
			<description>Entry Length in CryptFilterPublicKey shall have Integer value 256, if this object corresponds to condition @CFM == AESV3</description>
			<test>((CFMNameValue == "AESV3") == false || LengthIntegerValue == 256)</test>
			<error>
				<message>Entry Length in CryptFilterPublicKey doesn't have value 256</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="13" testNumber="35929"/>
			<description>Entry Length with type Integer in CryptFilterPublicKey shall have one of values: 256, 128</description>
			<test>LengthHasTypeInteger != true || LengthIntegerValue == 128 || LengthIntegerValue == 256</test>
			<error>
				<message>Entry Length with type Integer in CryptFilterPublicKey has incorrect value %2 instead of 256, 128</message>
				<arguments>
					<argument>keyName</argument>
					<argument>LengthIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35930"/>
			<description>Entry Length in CryptFilterPublicKey shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in CryptFilterPublicKey is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35931"/>
			<description>Entry Recipients with type Array in CryptFilterPublicKey shall be object ArrayOfStringsByte</description>
			<test>RecipientsHasTypeArray != true || Recipients_size == 1</test>
			<error>
				<message>Entry Recipients with type Array in CryptFilterPublicKey is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="7" testNumber="35932"/>
			<description>Entry Recipients in CryptFilterPublicKey is required</description>
			<test>containsRecipients == true</test>
			<error>
				<message>Entry Recipients in CryptFilterPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35933"/>
			<description>Entry Recipients in CryptFilterPublicKey shall have one of types: Array, StringByte</description>
			<test>containsRecipients == false || RecipientsHasTypeArray == true || RecipientsHasTypeStringByte == true</test>
			<error>
				<message>Entry Recipients in CryptFilterPublicKey is not one of types: Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="13" testNumber="35934"/>
			<description>Entry CFM with type Name in CryptFilterPublicKey shall have one of values: V2, None, AESV2</description>
			<test>CFMHasTypeName != true || CFMNameValue == "None" || CFMNameValue == "V2" || CFMNameValue == "AESV2"</test>
			<error>
				<message>Entry CFM with type Name in CryptFilterPublicKey has incorrect value %2 instead of V2, None, AESV2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CFMNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35935"/>
			<description>Entry CFM in CryptFilterPublicKey shall have type Name</description>
			<test>containsCFM == false || CFMHasTypeName == true</test>
			<error>
				<message>Entry CFM in CryptFilterPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="6" testNumber="35936"/>
			<description>Entry Type with type Name in CryptFilterPublicKey shall have value CryptFilter</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CryptFilter"</test>
			<error>
				<message>Entry Type with type Name in CryptFilterPublicKey has incorrect value %2 instead of CryptFilter</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterPublicKey">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35937"/>
			<description>Entry Type in CryptFilterPublicKey shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CryptFilterPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureCommandsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="35968"/>
			<description>Entry with type Dictionary in ArrayOfWebCaptureCommands shall be object WebCaptureCommand</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfWebCaptureCommands is not object WebCaptureCommand</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureCommandsEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="35969"/>
			<description>Entry with type Dictionary in ArrayOfWebCaptureCommands shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfWebCaptureCommands is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfWebCaptureCommandsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="35970"/>
			<description>Entry in ArrayOfWebCaptureCommands shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfWebCaptureCommands is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="1" testNumber="36044"/>
			<description>ActionResetForm shall not contain entries except S, Fields, Next, Flags, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionResetForm contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Fields' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="7" testNumber="36045"/>
			<description>Entry S in ActionResetForm is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionResetForm is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36046"/>
			<description>Entry S with type Name in ActionResetForm shall have value ResetForm</description>
			<test>SHasTypeName != true || SNameValue == "ResetForm"</test>
			<error>
				<message>Entry S with type Name in ActionResetForm has incorrect value %2 instead of ResetForm</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36047"/>
			<description>Entry S in ActionResetForm shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionResetForm is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36048"/>
			<description>Entry Fields with type Array in ActionResetForm shall be object ArrayOfFieldID</description>
			<test>FieldsHasTypeArray != true || Fields_size == 1</test>
			<error>
				<message>Entry Fields with type Array in ActionResetForm is not object ArrayOfFieldID</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36049"/>
			<description>Entry Fields in ActionResetForm shall have type Array</description>
			<test>containsFields == false || FieldsHasTypeArray == true</test>
			<error>
				<message>Entry Fields in ActionResetForm is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36050"/>
			<description>Entry Next with type Array in ActionResetForm shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionResetForm is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36051"/>
			<description>Entry Next with type Dictionary in ActionResetForm shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionResetForm is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36052"/>
			<description>Entry Next in ActionResetForm shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionResetForm is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36053"/>
			<description>Entry Flags with type Bitmask in ActionResetForm shall have one of values: 0, 1</description>
			<test>FlagsHasTypeBitmask != true || FlagsBitmaskValue == 0 || FlagsBitmaskValue == 1</test>
			<error>
				<message>Entry Flags with type Bitmask in ActionResetForm has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FlagsBitmaskValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36054"/>
			<description>Entry Flags in ActionResetForm shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in ActionResetForm is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="9" testNumber="36055"/>
			<description>Entry Flags with type Bitmask in ActionResetForm shall correspond special case: fn:Eval(fn:BitsClear(2 , 32))</description>
			<test>FlagsHasTypeBitmask != true || (((FlagsBitmaskValue &gt;&gt; 1 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 2 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in ActionResetForm doesn't correspond special case: fn:Eval(fn:BitsClear(2 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36056"/>
			<description>Entry Type with type Name in ActionResetForm shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionResetForm has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionResetForm">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36057"/>
			<description>Entry Type in ActionResetForm shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionResetForm is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="1" testNumber="36108"/>
			<description>AddActionFormField shall not contain entries except C, K, F, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'K' &amp;&amp; elem != 'F' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>AddActionFormField contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'K' &amp;&amp; elem != 'F' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36109"/>
			<description>Entry C with type Dictionary in AddActionFormField shall be object ActionECMAScript</description>
			<test>CHasTypeDictionary != true || C_size == 1</test>
			<error>
				<message>Entry C with type Dictionary in AddActionFormField is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36110"/>
			<description>Entry C in AddActionFormField shall have type Dictionary</description>
			<test>containsC == false || CHasTypeDictionary == true</test>
			<error>
				<message>Entry C in AddActionFormField is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36111"/>
			<description>Entry K with type Dictionary in AddActionFormField shall be object ActionECMAScript</description>
			<test>KHasTypeDictionary != true || K_size == 1</test>
			<error>
				<message>Entry K with type Dictionary in AddActionFormField is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36112"/>
			<description>Entry K in AddActionFormField shall have type Dictionary</description>
			<test>containsK == false || KHasTypeDictionary == true</test>
			<error>
				<message>Entry K in AddActionFormField is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36113"/>
			<description>Entry F with type Dictionary in AddActionFormField shall be object ActionECMAScript</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in AddActionFormField is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36114"/>
			<description>Entry F in AddActionFormField shall have type Dictionary</description>
			<test>containsF == false || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in AddActionFormField is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36115"/>
			<description>Entry V with type Dictionary in AddActionFormField shall be object ActionECMAScript</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in AddActionFormField is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionFormField">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36116"/>
			<description>Entry V in AddActionFormField shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in AddActionFormField is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoliditiesEntry">
			<id specification="ISO_32000_1_7" clause="14" testNumber="36128"/>
			<description>Entry with type Number in Solidities shall correspond possible value predicate: fn:Eval((@* &gt;= 0) &amp;&amp; (@* &lt;= 1))</description>
			<test>HasTypeNumber != true || (NumberValue &gt;= 0) &amp;&amp; (NumberValue &lt;= 1)</test>
			<error>
				<message>Entry %1 with type Number in Solidities doesn't correspond possible value predicate: fn:Eval((@* &gt;= 0) &amp;&amp; (@* &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASoliditiesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36129"/>
			<description>Entry in Solidities shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in Solidities is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DNodeEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36132"/>
			<description>Entry with type Dictionary in ArrayOf3DNode shall be object 3DNode</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOf3DNode is not object 3DNode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3DNodeEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36133"/>
			<description>Entry in ArrayOf3DNode shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOf3DNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="2" testNumber="36136"/>
			<description>ArrayOf3PDUNames shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>ArrayOf3PDUNames contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36137"/>
			<description>Entry 0 with type Name in ArrayOf3PDUNames shall have one of values: A, KM, SQKM, DEG, SQFT, USFT, M, FT, SQM, GRD, HA, MI, SQMI, NM</description>
			<test>entry0HasTypeName != true || entry0NameValue == "M" || entry0NameValue == "KM" || entry0NameValue == "FT" || entry0NameValue == "USFT" || entry0NameValue == "MI" || entry0NameValue == "NM" || entry0NameValue == "SQM" || entry0NameValue == "HA" || entry0NameValue == "SQKM" || entry0NameValue == "SQFT" || entry0NameValue == "A" || entry0NameValue == "SQMI" || entry0NameValue == "DEG" || entry0NameValue == "GRD"</test>
			<error>
				<message>Entry 0 with type Name in ArrayOf3PDUNames has incorrect value %2 instead of A, KM, SQKM, DEG, SQFT, USFT, M, FT, SQM, GRD, HA, MI, SQMI, NM</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36138"/>
			<description>Entry 0 in ArrayOf3PDUNames shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in ArrayOf3PDUNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36139"/>
			<description>Entry 1 with type Name in ArrayOf3PDUNames shall have one of values: A, KM, SQKM, DEG, SQFT, USFT, M, FT, SQM, GRD, HA, MI, SQMI, NM</description>
			<test>entry1HasTypeName != true || entry1NameValue == "M" || entry1NameValue == "KM" || entry1NameValue == "FT" || entry1NameValue == "USFT" || entry1NameValue == "MI" || entry1NameValue == "NM" || entry1NameValue == "SQM" || entry1NameValue == "HA" || entry1NameValue == "SQKM" || entry1NameValue == "SQFT" || entry1NameValue == "A" || entry1NameValue == "SQMI" || entry1NameValue == "DEG" || entry1NameValue == "GRD"</test>
			<error>
				<message>Entry 1 with type Name in ArrayOf3PDUNames has incorrect value %2 instead of A, KM, SQKM, DEG, SQFT, USFT, M, FT, SQM, GRD, HA, MI, SQMI, NM</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36140"/>
			<description>Entry 1 in ArrayOf3PDUNames shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in ArrayOf3PDUNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36141"/>
			<description>Entry 2 with type Name in ArrayOf3PDUNames shall have one of values: A, KM, SQKM, DEG, SQFT, USFT, M, FT, SQM, GRD, HA, MI, SQMI, NM</description>
			<test>entry2HasTypeName != true || entry2NameValue == "M" || entry2NameValue == "KM" || entry2NameValue == "FT" || entry2NameValue == "USFT" || entry2NameValue == "MI" || entry2NameValue == "NM" || entry2NameValue == "SQM" || entry2NameValue == "HA" || entry2NameValue == "SQKM" || entry2NameValue == "SQFT" || entry2NameValue == "A" || entry2NameValue == "SQMI" || entry2NameValue == "DEG" || entry2NameValue == "GRD"</test>
			<error>
				<message>Entry 2 with type Name in ArrayOf3PDUNames has incorrect value %2 instead of A, KM, SQKM, DEG, SQFT, USFT, M, FT, SQM, GRD, HA, MI, SQMI, NM</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf3PDUNames">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36142"/>
			<description>Entry 2 in ArrayOf3PDUNames shall have type Name</description>
			<test>size &lt;= 2 || entry2HasTypeName == true</test>
			<error>
				<message>Entry 2 in ArrayOf3PDUNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="1" testNumber="36190"/>
			<description>EmbeddedFileParameter shall not contain entries except CheckSum, ModDate, Mac, CreationDate, Size</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'CheckSum' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Size').length == 0</test>
			<error>
				<message>EmbeddedFileParameter contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'CheckSum' &amp;&amp; elem != 'ModDate' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Size').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36191"/>
			<description>Entry CheckSum in EmbeddedFileParameter shall have type String</description>
			<test>containsCheckSum == false || CheckSumHasTypeString == true</test>
			<error>
				<message>Entry CheckSum in EmbeddedFileParameter is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="9" testNumber="36192"/>
			<description>Entry CheckSum with type String in EmbeddedFileParameter shall correspond special case: fn:Eval(fn:StringLength(CheckSum) == 16)</description>
			<test>CheckSumHasTypeString != true || (CheckSumStringSize == 16)</test>
			<error>
				<message>Entry CheckSum with type String in EmbeddedFileParameter doesn't correspond special case: fn:Eval(fn:StringLength(CheckSum) == 16)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="11" testNumber="36193"/>
			<description>Entry ModDate in EmbeddedFileParameter is required, when fn:IsRequired(fn:SinceVersion(2.0 , fn:IsAssociatedFile()))</description>
			<test>(containsModDate == true || (true) == false)</test>
			<error>
				<message>Entry ModDate in EmbeddedFileParameter is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36194"/>
			<description>Entry ModDate in EmbeddedFileParameter shall have type Date</description>
			<test>containsModDate == false || ModDateHasTypeDate == true</test>
			<error>
				<message>Entry ModDate in EmbeddedFileParameter is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36195"/>
			<description>Entry Mac with type Dictionary in EmbeddedFileParameter shall be object Mac</description>
			<test>MacHasTypeDictionary != true || Mac_size == 1</test>
			<error>
				<message>Entry Mac with type Dictionary in EmbeddedFileParameter is not object Mac</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36196"/>
			<description>Entry Mac in EmbeddedFileParameter shall have type Dictionary</description>
			<test>containsMac == false || MacHasTypeDictionary == true</test>
			<error>
				<message>Entry Mac in EmbeddedFileParameter is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36197"/>
			<description>Entry CreationDate in EmbeddedFileParameter shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in EmbeddedFileParameter is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="14" testNumber="36198"/>
			<description>Entry Size with type Integer in EmbeddedFileParameter shall correspond possible value predicate: fn:Eval(@Size &gt;= 0)</description>
			<test>SizeHasTypeInteger != true || SizeIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Size with type Integer in EmbeddedFileParameter doesn't correspond possible value predicate: fn:Eval(@Size &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEmbeddedFileParameter">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36199"/>
			<description>Entry Size in EmbeddedFileParameter shall have type Integer</description>
			<test>containsSize == false || SizeHasTypeInteger == true</test>
			<error>
				<message>Entry Size in EmbeddedFileParameter is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMap">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36220"/>
			<description>Entry Identity with type Dictionary in CryptFilterMap shall be object CryptFilter</description>
			<test>IdentityHasTypeDictionary != true || Identity_size == 1</test>
			<error>
				<message>Entry Identity with type Dictionary in CryptFilterMap is not object CryptFilter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMap">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36221"/>
			<description>Entry Identity in CryptFilterMap shall have type Dictionary</description>
			<test>containsIdentity == false || IdentityHasTypeDictionary == true</test>
			<error>
				<message>Entry Identity in CryptFilterMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMap">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36222"/>
			<description>Entry StdCF with type Dictionary in CryptFilterMap shall be object CryptFilter</description>
			<test>StdCFHasTypeDictionary != true || StdCF_size == 1</test>
			<error>
				<message>Entry StdCF with type Dictionary in CryptFilterMap is not object CryptFilter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMap">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36223"/>
			<description>Entry StdCF in CryptFilterMap shall have type Dictionary</description>
			<test>containsStdCF == false || StdCFHasTypeDictionary == true</test>
			<error>
				<message>Entry StdCF in CryptFilterMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACryptFilterMap">
			<id specification="ISO_32000_1_7" clause="9" testNumber="36224"/>
			<description>Entry StdCF with type Dictionary in CryptFilterMap shall correspond special case: fn:Eval(StdCF::@AuthEvent== DocOpen)</description>
			<test>StdCFHasTypeDictionary != true || (StdCFAuthEventNameValue == "DocOpen")</test>
			<error>
				<message>Entry StdCF with type Dictionary in CryptFilterMap doesn't correspond special case: fn:Eval(StdCF::@AuthEvent== DocOpen)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNetSubDictEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36242"/>
			<description>Entry with type Stream in AppearanceTrapNetSubDict shall be object XObjectFormTrapNet</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in AppearanceTrapNetSubDict is not object XObjectFormTrapNet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNetSubDictEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="36243"/>
			<description>Entry with type Stream in AppearanceTrapNetSubDict shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in AppearanceTrapNetSubDict is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAppearanceTrapNetSubDictEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36244"/>
			<description>Entry in AppearanceTrapNetSubDict shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in AppearanceTrapNetSubDict is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="2" testNumber="36290"/>
			<description>GammaArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>GammaArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="36291"/>
			<description>Entry 1 with type Number in GammaArray shall correspond possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in GammaArray doesn't correspond possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36292"/>
			<description>Entry 1 in GammaArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in GammaArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="36293"/>
			<description>Entry 2 with type Number in GammaArray shall correspond possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in GammaArray doesn't correspond possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36294"/>
			<description>Entry 2 in GammaArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in GammaArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="14" testNumber="36295"/>
			<description>Entry 0 with type Number in GammaArray shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in GammaArray doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36296"/>
			<description>Entry 0 in GammaArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in GammaArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="1" testNumber="36320"/>
			<description>MediaOffsetMarker shall not contain entries except S, M, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>MediaOffsetMarker contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="7" testNumber="36321"/>
			<description>Entry S in MediaOffsetMarker is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in MediaOffsetMarker is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36322"/>
			<description>Entry S with type Name in MediaOffsetMarker shall have value M</description>
			<test>SHasTypeName != true || SNameValue == "M"</test>
			<error>
				<message>Entry S with type Name in MediaOffsetMarker has incorrect value %2 instead of M</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36323"/>
			<description>Entry S in MediaOffsetMarker shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in MediaOffsetMarker is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="7" testNumber="36324"/>
			<description>Entry M in MediaOffsetMarker is required</description>
			<test>containsM == true</test>
			<error>
				<message>Entry M in MediaOffsetMarker is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36325"/>
			<description>Entry M in MediaOffsetMarker shall have type StringText</description>
			<test>containsM == false || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in MediaOffsetMarker is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36326"/>
			<description>Entry Type with type Name in MediaOffsetMarker shall have value MediaOffset</description>
			<test>TypeHasTypeName != true || TypeNameValue == "MediaOffset"</test>
			<error>
				<message>Entry Type with type Name in MediaOffsetMarker has incorrect value %2 instead of MediaOffset</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMediaOffsetMarker">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36327"/>
			<description>Entry Type in MediaOffsetMarker shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in MediaOffsetMarker is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfURLStringsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36340"/>
			<description>Entry in ArrayOfURLStrings shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %1 in ArrayOfURLStrings is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANameNameTreePages">
			<id specification="ISO_32000_1_7" clause="18" testNumber="36346"/>
			<description>Entry * in NameNameTreePages shall be object NameNameTreePagesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NameNameTreePages is not object NameNameTreePagesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36472"/>
			<description>Entry FFilter with type Array in Stream shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in Stream is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36473"/>
			<description>Entry FFilter with type Name in Stream shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in Stream has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36474"/>
			<description>Entry FFilter in Stream shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in Stream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="36475"/>
			<description>Entry FFilter with type Array in Stream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in Stream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36476"/>
			<description>Entry DecodeParms with type Array in Stream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in Stream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36477"/>
			<description>Entry DecodeParms with type Dictionary in Stream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in Stream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36478"/>
			<description>Entry DecodeParms in Stream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in Stream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="36479"/>
			<description>Entry DecodeParms with type Array in Stream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in Stream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36480"/>
			<description>Entry FDecodeParms with type Array in Stream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in Stream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36481"/>
			<description>Entry FDecodeParms with type Dictionary in Stream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in Stream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36482"/>
			<description>Entry FDecodeParms in Stream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in Stream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="36483"/>
			<description>Entry FDecodeParms with type Array in Stream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in Stream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="36484"/>
			<description>Entry Length in Stream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in Stream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36485"/>
			<description>Entry Length in Stream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in Stream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36486"/>
			<description>Entry F with type Dictionary in Stream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Stream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36487"/>
			<description>Entry F in Stream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in Stream is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36488"/>
			<description>Entry Filter with type Array in Stream shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in Stream is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36489"/>
			<description>Entry Filter with type Name in Stream shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in Stream has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36490"/>
			<description>Entry Filter in Stream shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in Stream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="36491"/>
			<description>Entry Filter with type Array in Stream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in Stream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36492"/>
			<description>Entry DL in Stream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in Stream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="36493"/>
			<description>Entry DL with type Integer in Stream shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in Stream doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="1" testNumber="36644"/>
			<description>AnnotSquiggly shall not contain entries except IT, AP, Popup, StructParent, Border, Contents, RT, IRT, OC, NM, P, Type, F, Subj, C, M, AS, ExData, RC, QuadPoints, CreationDate, Rect, T, CA, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'IT' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'C' &amp;&amp; elem != 'M' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'T' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>AnnotSquiggly contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'IT' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'C' &amp;&amp; elem != 'M' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'QuadPoints' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'T' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36645"/>
			<description>Entry IT in AnnotSquiggly shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotSquiggly is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36646"/>
			<description>Entry AP with type Dictionary in AnnotSquiggly shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotSquiggly is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="11" testNumber="36647"/>
			<description>Entry AP in AnnotSquiggly is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotSquiggly is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36648"/>
			<description>Entry AP in AnnotSquiggly shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotSquiggly is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36649"/>
			<description>Entry Popup with type Dictionary in AnnotSquiggly shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSquiggly is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="10" testNumber="36650"/>
			<description>Entry Popup with type Dictionary in AnnotSquiggly shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotSquiggly is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36651"/>
			<description>Entry Popup in AnnotSquiggly shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotSquiggly is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36652"/>
			<description>Entry StructParent in AnnotSquiggly shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotSquiggly is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36653"/>
			<description>Entry Border with type Array in AnnotSquiggly shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotSquiggly is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36654"/>
			<description>Entry Border in AnnotSquiggly shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotSquiggly is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36655"/>
			<description>Entry Contents in AnnotSquiggly shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotSquiggly is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36656"/>
			<description>Entry RT with type Name in AnnotSquiggly shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotSquiggly has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36657"/>
			<description>Entry RT in AnnotSquiggly shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotSquiggly is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36658"/>
			<description>Entry IRT with type Dictionary in AnnotSquiggly shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotSquiggly is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="11" testNumber="36659"/>
			<description>Entry IRT in AnnotSquiggly is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotSquiggly is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36660"/>
			<description>Entry IRT in AnnotSquiggly shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotSquiggly is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36661"/>
			<description>Entry OC with type Dictionary in AnnotSquiggly shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotSquiggly is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36662"/>
			<description>Entry OC in AnnotSquiggly shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotSquiggly is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36663"/>
			<description>Entry NM in AnnotSquiggly shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotSquiggly is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36664"/>
			<description>Entry P with type Dictionary in AnnotSquiggly shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSquiggly is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="10" testNumber="36665"/>
			<description>Entry P with type Dictionary in AnnotSquiggly shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotSquiggly is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36666"/>
			<description>Entry P in AnnotSquiggly shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotSquiggly is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36667"/>
			<description>Entry Type with type Name in AnnotSquiggly shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotSquiggly has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36668"/>
			<description>Entry Type in AnnotSquiggly shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotSquiggly is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36669"/>
			<description>Entry F in AnnotSquiggly shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotSquiggly is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="9" testNumber="36670"/>
			<description>Entry F with type Bitmask in AnnotSquiggly shall correspond special case: fn:Eval(fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotSquiggly doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36671"/>
			<description>Entry Subj in AnnotSquiggly shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotSquiggly is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36672"/>
			<description>Entry C with type Array in AnnotSquiggly shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotSquiggly is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36673"/>
			<description>Entry C in AnnotSquiggly shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotSquiggly is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36674"/>
			<description>Entry M in AnnotSquiggly shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotSquiggly is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="11" testNumber="36675"/>
			<description>Entry AS in AnnotSquiggly is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotSquiggly is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36676"/>
			<description>Entry AS in AnnotSquiggly shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotSquiggly is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36677"/>
			<description>Entry ExData with type Dictionary in AnnotSquiggly shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotSquiggly is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36678"/>
			<description>Entry ExData in AnnotSquiggly shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotSquiggly is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36679"/>
			<description>Entry RC with type Stream in AnnotSquiggly shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotSquiggly is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="10" testNumber="36680"/>
			<description>Entry RC with type Stream in AnnotSquiggly shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotSquiggly is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36681"/>
			<description>Entry RC in AnnotSquiggly shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotSquiggly is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36682"/>
			<description>Entry QuadPoints with type Array in AnnotSquiggly shall be object ArrayOfQuadPoints</description>
			<test>QuadPointsHasTypeArray != true || QuadPoints_size == 1</test>
			<error>
				<message>Entry QuadPoints with type Array in AnnotSquiggly is not object ArrayOfQuadPoints</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="7" testNumber="36683"/>
			<description>Entry QuadPoints in AnnotSquiggly is required</description>
			<test>containsQuadPoints == true</test>
			<error>
				<message>Entry QuadPoints in AnnotSquiggly is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36684"/>
			<description>Entry QuadPoints in AnnotSquiggly shall have type Array</description>
			<test>containsQuadPoints == false || QuadPointsHasTypeArray == true</test>
			<error>
				<message>Entry QuadPoints in AnnotSquiggly is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36685"/>
			<description>Entry CreationDate in AnnotSquiggly shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotSquiggly is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="7" testNumber="36686"/>
			<description>Entry Rect in AnnotSquiggly is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotSquiggly is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36687"/>
			<description>Entry Rect in AnnotSquiggly shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotSquiggly is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36688"/>
			<description>Entry T in AnnotSquiggly shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotSquiggly is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="14" testNumber="36689"/>
			<description>Entry CA with type Number in AnnotSquiggly shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotSquiggly doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36690"/>
			<description>Entry CA in AnnotSquiggly shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotSquiggly is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="7" testNumber="36691"/>
			<description>Entry Subtype in AnnotSquiggly is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotSquiggly is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36692"/>
			<description>Entry Subtype with type Name in AnnotSquiggly shall have value Squiggly</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Squiggly"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotSquiggly has incorrect value %2 instead of Squiggly</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotSquiggly">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36693"/>
			<description>Entry Subtype in AnnotSquiggly shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotSquiggly is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="1" testNumber="36893"/>
			<description>PageTreeNode shall not contain entries except Kids, CropBox, Type, MediaBox, Parent, Count, Resources, Rotate</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Kids' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate').length == 0</test>
			<error>
				<message>PageTreeNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Kids' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Rotate').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36894"/>
			<description>Entry Kids with type Array in PageTreeNode shall be object ArrayOfPageTreeNodeKids</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in PageTreeNode is not object ArrayOfPageTreeNodeKids</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="7" testNumber="36895"/>
			<description>Entry Kids in PageTreeNode is required</description>
			<test>containsKids == true</test>
			<error>
				<message>Entry Kids in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36896"/>
			<description>Entry Kids in PageTreeNode shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in PageTreeNode is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36897"/>
			<description>Entry CropBox in PageTreeNode shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageTreeNode is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="7" testNumber="36898"/>
			<description>Entry Type in PageTreeNode is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36899"/>
			<description>Entry Type with type Name in PageTreeNode shall have value Pages</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pages"</test>
			<error>
				<message>Entry Type with type Name in PageTreeNode has incorrect value %2 instead of Pages</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36900"/>
			<description>Entry Type in PageTreeNode shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageTreeNode is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36901"/>
			<description>Entry MediaBox in PageTreeNode shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageTreeNode is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36902"/>
			<description>Entry Parent with type Dictionary in PageTreeNode shall be one of objects PageTreeNode, PageTreeNodeRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in PageTreeNode is not one of objects PageTreeNode, PageTreeNodeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="7" testNumber="36903"/>
			<description>Entry Parent in PageTreeNode is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="10" testNumber="36904"/>
			<description>Entry Parent with type Dictionary in PageTreeNode shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in PageTreeNode is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36905"/>
			<description>Entry Parent in PageTreeNode shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in PageTreeNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="7" testNumber="36906"/>
			<description>Entry Count in PageTreeNode is required</description>
			<test>containsCount == true</test>
			<error>
				<message>Entry Count in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="14" testNumber="36907"/>
			<description>Entry Count with type Integer in PageTreeNode shall correspond possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in PageTreeNode doesn't correspond possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36908"/>
			<description>Entry Count in PageTreeNode shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in PageTreeNode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36909"/>
			<description>Entry Resources with type Dictionary in PageTreeNode shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PageTreeNode is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36910"/>
			<description>Entry Resources in PageTreeNode shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageTreeNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="14" testNumber="36911"/>
			<description>Entry Rotate with type Integer in PageTreeNode shall correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageTreeNode doesn't correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36912"/>
			<description>Entry Rotate in PageTreeNode shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageTreeNode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="1" testNumber="36949"/>
			<description>Timespan shall not contain entries except V, S, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>Timespan contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="7" testNumber="36950"/>
			<description>Entry V in Timespan is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in Timespan is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36951"/>
			<description>Entry V in Timespan shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in Timespan is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="7" testNumber="36952"/>
			<description>Entry S in Timespan is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in Timespan is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36953"/>
			<description>Entry S with type Name in Timespan shall have value S</description>
			<test>SHasTypeName != true || SNameValue == "S"</test>
			<error>
				<message>Entry S with type Name in Timespan has incorrect value %2 instead of S</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36954"/>
			<description>Entry S in Timespan shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in Timespan is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="6" testNumber="36955"/>
			<description>Entry Type with type Name in Timespan shall have value Timespan</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Timespan"</test>
			<error>
				<message>Entry Type with type Name in Timespan has incorrect value %2 instead of Timespan</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATimespan">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36956"/>
			<description>Entry Type in Timespan shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Timespan is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="1" testNumber="36992"/>
			<description>BoxColorInfo shall not contain entries except BleedBox, ArtBox, CropBox, TrimBox</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BleedBox' &amp;&amp; elem != 'ArtBox' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'TrimBox').length == 0</test>
			<error>
				<message>BoxColorInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BleedBox' &amp;&amp; elem != 'ArtBox' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'TrimBox').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36993"/>
			<description>Entry BleedBox with type Dictionary in BoxColorInfo shall be object BoxStyle</description>
			<test>BleedBoxHasTypeDictionary != true || BleedBox_size == 1</test>
			<error>
				<message>Entry BleedBox with type Dictionary in BoxColorInfo is not object BoxStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36994"/>
			<description>Entry BleedBox in BoxColorInfo shall have type Dictionary</description>
			<test>containsBleedBox == false || BleedBoxHasTypeDictionary == true</test>
			<error>
				<message>Entry BleedBox in BoxColorInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36995"/>
			<description>Entry ArtBox with type Dictionary in BoxColorInfo shall be object BoxStyle</description>
			<test>ArtBoxHasTypeDictionary != true || ArtBox_size == 1</test>
			<error>
				<message>Entry ArtBox with type Dictionary in BoxColorInfo is not object BoxStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36996"/>
			<description>Entry ArtBox in BoxColorInfo shall have type Dictionary</description>
			<test>containsArtBox == false || ArtBoxHasTypeDictionary == true</test>
			<error>
				<message>Entry ArtBox in BoxColorInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36997"/>
			<description>Entry CropBox with type Dictionary in BoxColorInfo shall be object BoxStyle</description>
			<test>CropBoxHasTypeDictionary != true || CropBox_size == 1</test>
			<error>
				<message>Entry CropBox with type Dictionary in BoxColorInfo is not object BoxStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="36998"/>
			<description>Entry CropBox in BoxColorInfo shall have type Dictionary</description>
			<test>containsCropBox == false || CropBoxHasTypeDictionary == true</test>
			<error>
				<message>Entry CropBox in BoxColorInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="17" testNumber="36999"/>
			<description>Entry TrimBox with type Dictionary in BoxColorInfo shall be object BoxStyle</description>
			<test>TrimBoxHasTypeDictionary != true || TrimBox_size == 1</test>
			<error>
				<message>Entry TrimBox with type Dictionary in BoxColorInfo is not object BoxStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxColorInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37000"/>
			<description>Entry TrimBox in BoxColorInfo shall have type Dictionary</description>
			<test>containsTrimBox == false || TrimBoxHasTypeDictionary == true</test>
			<error>
				<message>Entry TrimBox in BoxColorInfo is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="1" testNumber="37020"/>
			<description>DeviceNProcess shall not contain entries except ColorSpace, Components</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'Components').length == 0</test>
			<error>
				<message>DeviceNProcess contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorSpace' &amp;&amp; elem != 'Components').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37021"/>
			<description>Entry ColorSpace with type Array in DeviceNProcess shall be one of objects CalGrayColorSpace, CalRGBColorSpace, ICCBasedColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in DeviceNProcess is not one of objects CalGrayColorSpace, CalRGBColorSpace, ICCBasedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="7" testNumber="37022"/>
			<description>Entry ColorSpace in DeviceNProcess is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in DeviceNProcess is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="6" testNumber="37023"/>
			<description>Entry ColorSpace with type Name in DeviceNProcess shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in DeviceNProcess has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37024"/>
			<description>Entry ColorSpace in DeviceNProcess shall have one of types: Name, Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in DeviceNProcess is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37025"/>
			<description>Entry Components with type Array in DeviceNProcess shall be object ArrayOfNamesGeneral</description>
			<test>ComponentsHasTypeArray != true || Components_size == 1</test>
			<error>
				<message>Entry Components with type Array in DeviceNProcess is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="7" testNumber="37026"/>
			<description>Entry Components in DeviceNProcess is required</description>
			<test>containsComponents == true</test>
			<error>
				<message>Entry Components in DeviceNProcess is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADeviceNProcess">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37027"/>
			<description>Entry Components in DeviceNProcess shall have type Array</description>
			<test>containsComponents == false || ComponentsHasTypeArray == true</test>
			<error>
				<message>Entry Components in DeviceNProcess is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="1" testNumber="37081"/>
			<description>BorderStyle shall not contain entries except W, D, Type, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'W' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>BorderStyle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'W' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="14" testNumber="37082"/>
			<description>Entry W with type Number in BorderStyle shall correspond possible value predicate: fn:Eval(@W &gt;= 0.0)</description>
			<test>WHasTypeNumber != true || WNumberValue &gt;= 0.0</test>
			<error>
				<message>Entry W with type Number in BorderStyle doesn't correspond possible value predicate: fn:Eval(@W &gt;= 0.0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37083"/>
			<description>Entry W in BorderStyle shall have type Number</description>
			<test>containsW == false || WHasTypeNumber == true</test>
			<error>
				<message>Entry W in BorderStyle is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37084"/>
			<description>Entry D with type Array in BorderStyle shall be object ArrayOfDashPatterns</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in BorderStyle is not object ArrayOfDashPatterns</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37085"/>
			<description>Entry D in BorderStyle shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in BorderStyle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="6" testNumber="37086"/>
			<description>Entry Type with type Name in BorderStyle shall have value Border</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Border"</test>
			<error>
				<message>Entry Type with type Name in BorderStyle has incorrect value %2 instead of Border</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37087"/>
			<description>Entry Type in BorderStyle shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in BorderStyle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="6" testNumber="37088"/>
			<description>Entry S with type Name in BorderStyle shall have one of values: B, S, D, U, I</description>
			<test>SHasTypeName != true || SNameValue == "S" || SNameValue == "B" || SNameValue == "D" || SNameValue == "I" || SNameValue == "U"</test>
			<error>
				<message>Entry S with type Name in BorderStyle has incorrect value %2 instead of B, S, D, U, I</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABorderStyle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37089"/>
			<description>Entry S in BorderStyle shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in BorderStyle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="1" testNumber="37200"/>
			<description>Resource shall not contain entries except Pattern, Properties, XObject, ExtGState, ColorSpace, Font, ProcSet, Shading</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Pattern' &amp;&amp; elem != 'Properties' &amp;&amp; elem != 'XObject' &amp;&amp; elem != 'ExtGState' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'ProcSet' &amp;&amp; elem != 'Shading').length == 0</test>
			<error>
				<message>Resource contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Pattern' &amp;&amp; elem != 'Properties' &amp;&amp; elem != 'XObject' &amp;&amp; elem != 'ExtGState' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'ProcSet' &amp;&amp; elem != 'Shading').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37201"/>
			<description>Entry Pattern with type Dictionary in Resource shall be object PatternMap</description>
			<test>PatternHasTypeDictionary != true || Pattern_size == 1</test>
			<error>
				<message>Entry Pattern with type Dictionary in Resource is not object PatternMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37202"/>
			<description>Entry Pattern in Resource shall have type Dictionary</description>
			<test>containsPattern == false || PatternHasTypeDictionary == true</test>
			<error>
				<message>Entry Pattern in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37203"/>
			<description>Entry Properties with type Dictionary in Resource shall be object _UniversalDictionary</description>
			<test>entryPropertiesHasTypeDictionary != true || entryProperties_size == 1</test>
			<error>
				<message>Entry Properties with type Dictionary in Resource is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37204"/>
			<description>Entry Properties in Resource shall have type Dictionary</description>
			<test>containsProperties == false || entryPropertiesHasTypeDictionary == true</test>
			<error>
				<message>Entry Properties in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37205"/>
			<description>Entry XObject with type Dictionary in Resource shall be object XObjectMap</description>
			<test>XObjectHasTypeDictionary != true || XObject_size == 1</test>
			<error>
				<message>Entry XObject with type Dictionary in Resource is not object XObjectMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37206"/>
			<description>Entry XObject in Resource shall have type Dictionary</description>
			<test>containsXObject == false || XObjectHasTypeDictionary == true</test>
			<error>
				<message>Entry XObject in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37207"/>
			<description>Entry ExtGState with type Dictionary in Resource shall be object GraphicsStateParameterMap</description>
			<test>ExtGStateHasTypeDictionary != true || ExtGState_size == 1</test>
			<error>
				<message>Entry ExtGState with type Dictionary in Resource is not object GraphicsStateParameterMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37208"/>
			<description>Entry ExtGState in Resource shall have type Dictionary</description>
			<test>containsExtGState == false || ExtGStateHasTypeDictionary == true</test>
			<error>
				<message>Entry ExtGState in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37209"/>
			<description>Entry ColorSpace with type Dictionary in Resource shall be object ColorSpaceMap</description>
			<test>ColorSpaceHasTypeDictionary != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Dictionary in Resource is not object ColorSpaceMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37210"/>
			<description>Entry ColorSpace in Resource shall have type Dictionary</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeDictionary == true</test>
			<error>
				<message>Entry ColorSpace in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37211"/>
			<description>Entry Font with type Dictionary in Resource shall be object FontMap</description>
			<test>FontHasTypeDictionary != true || Font_size == 1</test>
			<error>
				<message>Entry Font with type Dictionary in Resource is not object FontMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37212"/>
			<description>Entry Font in Resource shall have type Dictionary</description>
			<test>containsFont == false || FontHasTypeDictionary == true</test>
			<error>
				<message>Entry Font in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37213"/>
			<description>Entry ProcSet with type Array in Resource shall be object ArrayOfNamesForProcSet</description>
			<test>ProcSetHasTypeArray != true || ProcSet_size == 1</test>
			<error>
				<message>Entry ProcSet with type Array in Resource is not object ArrayOfNamesForProcSet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37214"/>
			<description>Entry ProcSet in Resource shall have type Array</description>
			<test>containsProcSet == false || ProcSetHasTypeArray == true</test>
			<error>
				<message>Entry ProcSet in Resource is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37215"/>
			<description>Entry Shading with type Dictionary in Resource shall be object ShadingMap</description>
			<test>ShadingHasTypeDictionary != true || Shading_size == 1</test>
			<error>
				<message>Entry Shading with type Dictionary in Resource is not object ShadingMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37216"/>
			<description>Entry Shading in Resource shall have type Dictionary</description>
			<test>containsShading == false || ShadingHasTypeDictionary == true</test>
			<error>
				<message>Entry Shading in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="1" testNumber="37258"/>
			<description>BoxStyle shall not contain entries except W, S, D, C</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'W' &amp;&amp; elem != 'S' &amp;&amp; elem != 'D' &amp;&amp; elem != 'C').length == 0</test>
			<error>
				<message>BoxStyle contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'W' &amp;&amp; elem != 'S' &amp;&amp; elem != 'D' &amp;&amp; elem != 'C').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37259"/>
			<description>Entry W in BoxStyle shall have type Number</description>
			<test>containsW == false || WHasTypeNumber == true</test>
			<error>
				<message>Entry W in BoxStyle is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="6" testNumber="37260"/>
			<description>Entry S with type Name in BoxStyle shall have one of values: S, D</description>
			<test>SHasTypeName != true || SNameValue == "S" || SNameValue == "D"</test>
			<error>
				<message>Entry S with type Name in BoxStyle has incorrect value %2 instead of S, D</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37261"/>
			<description>Entry S in BoxStyle shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in BoxStyle is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37262"/>
			<description>Entry D with type Array in BoxStyle shall be object ArrayOfDashPatterns</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in BoxStyle is not object ArrayOfDashPatterns</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37263"/>
			<description>Entry D in BoxStyle shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in BoxStyle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37264"/>
			<description>Entry C with type Array in BoxStyle shall be object ArrayOf_3RGBNumbers</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in BoxStyle is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABoxStyle">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37265"/>
			<description>Entry C in BoxStyle shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in BoxStyle is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysURLStringsEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37282"/>
			<description>Entry with type Array in ArrayOfArraysURLStrings shall be object ArrayOfURLStrings</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ArrayOfArraysURLStrings is not object ArrayOfURLStrings</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfArraysURLStringsEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37283"/>
			<description>Entry in ArrayOfArraysURLStrings shall have type Array</description>
			<test>HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ArrayOfArraysURLStrings is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCUsageEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37290"/>
			<description>Entry with type Dictionary in ArrayOfOCUsage shall be object OptContentUsageApplication</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfOCUsage is not object OptContentUsageApplication</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfOCUsageEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37291"/>
			<description>Entry in ArrayOfOCUsage shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfOCUsage is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="1" testNumber="37582"/>
			<description>Catalog shall not contain entries except OpenAction, Legal, PageMode, PageLayout, StructTreeRoot, Extensions, Pages, Type, Metadata, MarkInfo, Names, Threads, PageLabels, Lang, PieceInfo, Collection, Version, OCProperties, Requirements, Outlines, AA, AcroForm, SpiderInfo, URI, OutputIntents, NeedsRendering, ViewerPreferences, Perms, DPartRoot, Dests</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'OpenAction' &amp;&amp; elem != 'Legal' &amp;&amp; elem != 'PageMode' &amp;&amp; elem != 'PageLayout' &amp;&amp; elem != 'StructTreeRoot' &amp;&amp; elem != 'Extensions' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'MarkInfo' &amp;&amp; elem != 'Names' &amp;&amp; elem != 'Threads' &amp;&amp; elem != 'PageLabels' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Collection' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'OCProperties' &amp;&amp; elem != 'Requirements' &amp;&amp; elem != 'Outlines' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AcroForm' &amp;&amp; elem != 'SpiderInfo' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'OutputIntents' &amp;&amp; elem != 'NeedsRendering' &amp;&amp; elem != 'ViewerPreferences' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'DPartRoot' &amp;&amp; elem != 'Dests').length == 0</test>
			<error>
				<message>Catalog contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'OpenAction' &amp;&amp; elem != 'Legal' &amp;&amp; elem != 'PageMode' &amp;&amp; elem != 'PageLayout' &amp;&amp; elem != 'StructTreeRoot' &amp;&amp; elem != 'Extensions' &amp;&amp; elem != 'Pages' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'MarkInfo' &amp;&amp; elem != 'Names' &amp;&amp; elem != 'Threads' &amp;&amp; elem != 'PageLabels' &amp;&amp; elem != 'Lang' &amp;&amp; elem != 'PieceInfo' &amp;&amp; elem != 'Collection' &amp;&amp; elem != 'Version' &amp;&amp; elem != 'OCProperties' &amp;&amp; elem != 'Requirements' &amp;&amp; elem != 'Outlines' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'AcroForm' &amp;&amp; elem != 'SpiderInfo' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'OutputIntents' &amp;&amp; elem != 'NeedsRendering' &amp;&amp; elem != 'ViewerPreferences' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'DPartRoot' &amp;&amp; elem != 'Dests').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37583"/>
			<description>Entry OpenAction with type Array in Catalog shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>OpenActionHasTypeArray != true || OpenAction_size == 1</test>
			<error>
				<message>Entry OpenAction with type Array in Catalog is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37584"/>
			<description>Entry OpenAction with type Dictionary in Catalog shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>OpenActionHasTypeDictionary != true || OpenAction_size == 1</test>
			<error>
				<message>Entry OpenAction with type Dictionary in Catalog is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37585"/>
			<description>Entry OpenAction in Catalog shall have one of types: Array, Dictionary</description>
			<test>containsOpenAction == false || OpenActionHasTypeArray == true || OpenActionHasTypeDictionary == true</test>
			<error>
				<message>Entry OpenAction in Catalog is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37586"/>
			<description>Entry Legal with type Dictionary in Catalog shall be object LegalAttestation</description>
			<test>LegalHasTypeDictionary != true || Legal_size == 1</test>
			<error>
				<message>Entry Legal with type Dictionary in Catalog is not object LegalAttestation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37587"/>
			<description>Entry Legal in Catalog shall have type Dictionary</description>
			<test>containsLegal == false || LegalHasTypeDictionary == true</test>
			<error>
				<message>Entry Legal in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="6" testNumber="37588"/>
			<description>Entry PageMode with type Name in Catalog shall have one of values: UseOutlines, UseThumbs, UseOC, UseAttachments, UseNone, FullScreen</description>
			<test>PageModeHasTypeName != true || PageModeNameValue == "UseNone" || PageModeNameValue == "UseOutlines" || PageModeNameValue == "UseThumbs" || PageModeNameValue == "FullScreen" || PageModeNameValue == "UseOC" || PageModeNameValue == "UseAttachments"</test>
			<error>
				<message>Entry PageMode with type Name in Catalog has incorrect value %2 instead of UseOutlines, UseThumbs, UseOC, UseAttachments, UseNone, FullScreen</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PageModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37589"/>
			<description>Entry PageMode in Catalog shall have type Name</description>
			<test>containsPageMode == false || PageModeHasTypeName == true</test>
			<error>
				<message>Entry PageMode in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="6" testNumber="37590"/>
			<description>Entry PageLayout with type Name in Catalog shall have one of values: SinglePage, TwoColumnLeft, OneColumn, TwoPageRight, TwoPageLeft, TwoColumnRight</description>
			<test>PageLayoutHasTypeName != true || PageLayoutNameValue == "SinglePage" || PageLayoutNameValue == "OneColumn" || PageLayoutNameValue == "TwoColumnLeft" || PageLayoutNameValue == "TwoColumnRight" || PageLayoutNameValue == "TwoPageLeft" || PageLayoutNameValue == "TwoPageRight"</test>
			<error>
				<message>Entry PageLayout with type Name in Catalog has incorrect value %2 instead of SinglePage, TwoColumnLeft, OneColumn, TwoPageRight, TwoPageLeft, TwoColumnRight</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PageLayoutNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37591"/>
			<description>Entry PageLayout in Catalog shall have type Name</description>
			<test>containsPageLayout == false || PageLayoutHasTypeName == true</test>
			<error>
				<message>Entry PageLayout in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37592"/>
			<description>Entry StructTreeRoot with type Dictionary in Catalog shall be object StructTreeRoot</description>
			<test>StructTreeRootHasTypeDictionary != true || StructTreeRoot_size == 1</test>
			<error>
				<message>Entry StructTreeRoot with type Dictionary in Catalog is not object StructTreeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37593"/>
			<description>Entry StructTreeRoot in Catalog shall have type Dictionary</description>
			<test>containsStructTreeRoot == false || StructTreeRootHasTypeDictionary == true</test>
			<error>
				<message>Entry StructTreeRoot in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37594"/>
			<description>Entry Extensions with type Dictionary in Catalog shall be object Extensions</description>
			<test>ExtensionsHasTypeDictionary != true || Extensions_size == 1</test>
			<error>
				<message>Entry Extensions with type Dictionary in Catalog is not object Extensions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="16" testNumber="37595"/>
			<description>If entry Extensions with type Dictionary in Catalog corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>ExtensionsHasTypeDictionary != true || (isExtensionsIndirect == false)</test>
			<error>
				<message>Entry Extensions with type Dictionary in Catalog is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37596"/>
			<description>Entry Extensions in Catalog shall have type Dictionary</description>
			<test>containsExtensions == false || ExtensionsHasTypeDictionary == true</test>
			<error>
				<message>Entry Extensions in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37597"/>
			<description>Entry Pages with type Dictionary in Catalog shall be object PageTreeNodeRoot</description>
			<test>PagesHasTypeDictionary != true || Pages_size == 1</test>
			<error>
				<message>Entry Pages with type Dictionary in Catalog is not object PageTreeNodeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="7" testNumber="37598"/>
			<description>Entry Pages in Catalog is required</description>
			<test>containsPages == true</test>
			<error>
				<message>Entry Pages in Catalog is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="10" testNumber="37599"/>
			<description>Entry Pages with type Dictionary in Catalog shall be indirect</description>
			<test>PagesHasTypeDictionary != true || isPagesIndirect == true</test>
			<error>
				<message>Entry Pages with type Dictionary in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37600"/>
			<description>Entry Pages in Catalog shall have type Dictionary</description>
			<test>containsPages == false || PagesHasTypeDictionary == true</test>
			<error>
				<message>Entry Pages in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="7" testNumber="37601"/>
			<description>Entry Type in Catalog is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in Catalog is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="6" testNumber="37602"/>
			<description>Entry Type with type Name in Catalog shall have value Catalog</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Catalog"</test>
			<error>
				<message>Entry Type with type Name in Catalog has incorrect value %2 instead of Catalog</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37603"/>
			<description>Entry Type in Catalog shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37604"/>
			<description>Entry Metadata with type Stream in Catalog shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in Catalog is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="10" testNumber="37605"/>
			<description>Entry Metadata with type Stream in Catalog shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37606"/>
			<description>Entry Metadata in Catalog shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in Catalog is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37607"/>
			<description>Entry MarkInfo with type Dictionary in Catalog shall be object MarkInfo</description>
			<test>MarkInfoHasTypeDictionary != true || MarkInfo_size == 1</test>
			<error>
				<message>Entry MarkInfo with type Dictionary in Catalog is not object MarkInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37608"/>
			<description>Entry MarkInfo in Catalog shall have type Dictionary</description>
			<test>containsMarkInfo == false || MarkInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry MarkInfo in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37609"/>
			<description>Entry Names with type Dictionary in Catalog shall be object Name</description>
			<test>NamesHasTypeDictionary != true || Names_size == 1</test>
			<error>
				<message>Entry Names with type Dictionary in Catalog is not object Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37610"/>
			<description>Entry Names in Catalog shall have type Dictionary</description>
			<test>containsNames == false || NamesHasTypeDictionary == true</test>
			<error>
				<message>Entry Names in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37611"/>
			<description>Entry Threads with type Array in Catalog shall be object ArrayOfThreads</description>
			<test>ThreadsHasTypeArray != true || Threads_size == 1</test>
			<error>
				<message>Entry Threads with type Array in Catalog is not object ArrayOfThreads</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="12" testNumber="37612"/>
			<description>If entry Threads with type Array in Catalog corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>ThreadsHasTypeArray != true || (isThreadsIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Threads with type Array in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37613"/>
			<description>Entry Threads in Catalog shall have type Array</description>
			<test>containsThreads == false || ThreadsHasTypeArray == true</test>
			<error>
				<message>Entry Threads in Catalog is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37614"/>
			<description>Entry PageLabels with type NumberTree in Catalog shall be object CatalogNumberTreePageLabels</description>
			<test>PageLabelsHasTypeNumberTree != true || PageLabels_size == 1</test>
			<error>
				<message>Entry PageLabels with type NumberTree in Catalog is not object CatalogNumberTreePageLabels</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37615"/>
			<description>Entry PageLabels in Catalog shall have type NumberTree</description>
			<test>containsPageLabels == false || PageLabelsHasTypeNumberTree == true</test>
			<error>
				<message>Entry PageLabels in Catalog is not of type NumberTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37616"/>
			<description>Entry Lang in Catalog shall have type StringText</description>
			<test>containsLang == false || LangHasTypeStringText == true</test>
			<error>
				<message>Entry Lang in Catalog is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37617"/>
			<description>Entry PieceInfo with type Dictionary in Catalog shall be object PagePiece</description>
			<test>PieceInfoHasTypeDictionary != true || PieceInfo_size == 1</test>
			<error>
				<message>Entry PieceInfo with type Dictionary in Catalog is not object PagePiece</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37618"/>
			<description>Entry PieceInfo in Catalog shall have type Dictionary</description>
			<test>containsPieceInfo == false || PieceInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry PieceInfo in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37619"/>
			<description>Entry Collection with type Dictionary in Catalog shall be object Collection</description>
			<test>CollectionHasTypeDictionary != true || Collection_size == 1</test>
			<error>
				<message>Entry Collection with type Dictionary in Catalog is not object Collection</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37620"/>
			<description>Entry Collection in Catalog shall have type Dictionary</description>
			<test>containsCollection == false || CollectionHasTypeDictionary == true</test>
			<error>
				<message>Entry Collection in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="6" testNumber="37621"/>
			<description>Entry Version with type Name in Catalog shall have one of values: 1.0, 1.1, 2.0, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7</description>
			<test>VersionHasTypeName != true || VersionNameValue == "1.0" || VersionNameValue == "1.1" || VersionNameValue == "1.2" || VersionNameValue == "1.3" || VersionNameValue == "1.4" || VersionNameValue == "1.5" || VersionNameValue == "1.6" || VersionNameValue == "1.7" || VersionNameValue == "2.0"</test>
			<error>
				<message>Entry Version with type Name in Catalog has incorrect value %2 instead of 1.0, 1.1, 2.0, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VersionNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37622"/>
			<description>Entry Version in Catalog shall have type Name</description>
			<test>containsVersion == false || VersionHasTypeName == true</test>
			<error>
				<message>Entry Version in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37623"/>
			<description>Entry OCProperties with type Dictionary in Catalog shall be object OptContentProperties</description>
			<test>OCPropertiesHasTypeDictionary != true || OCProperties_size == 1</test>
			<error>
				<message>Entry OCProperties with type Dictionary in Catalog is not object OptContentProperties</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37624"/>
			<description>Entry OCProperties in Catalog shall have type Dictionary</description>
			<test>containsOCProperties == false || OCPropertiesHasTypeDictionary == true</test>
			<error>
				<message>Entry OCProperties in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37625"/>
			<description>Entry Requirements with type Array in Catalog shall be object ArrayOfRequirements</description>
			<test>RequirementsHasTypeArray != true || Requirements_size == 1</test>
			<error>
				<message>Entry Requirements with type Array in Catalog is not object ArrayOfRequirements</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37626"/>
			<description>Entry Requirements in Catalog shall have type Array</description>
			<test>containsRequirements == false || RequirementsHasTypeArray == true</test>
			<error>
				<message>Entry Requirements in Catalog is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37627"/>
			<description>Entry Outlines with type Dictionary in Catalog shall be object Outline</description>
			<test>OutlinesHasTypeDictionary != true || Outlines_size == 1</test>
			<error>
				<message>Entry Outlines with type Dictionary in Catalog is not object Outline</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="12" testNumber="37628"/>
			<description>If entry Outlines with type Dictionary in Catalog corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>OutlinesHasTypeDictionary != true || (isOutlinesIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Outlines with type Dictionary in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37629"/>
			<description>Entry Outlines in Catalog shall have type Dictionary</description>
			<test>containsOutlines == false || OutlinesHasTypeDictionary == true</test>
			<error>
				<message>Entry Outlines in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37630"/>
			<description>Entry AA with type Dictionary in Catalog shall be object AddActionCatalog</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in Catalog is not object AddActionCatalog</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37631"/>
			<description>Entry AA in Catalog shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37632"/>
			<description>Entry AcroForm with type Dictionary in Catalog shall be object InteractiveForm</description>
			<test>AcroFormHasTypeDictionary != true || AcroForm_size == 1</test>
			<error>
				<message>Entry AcroForm with type Dictionary in Catalog is not object InteractiveForm</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37633"/>
			<description>Entry AcroForm in Catalog shall have type Dictionary</description>
			<test>containsAcroForm == false || AcroFormHasTypeDictionary == true</test>
			<error>
				<message>Entry AcroForm in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37634"/>
			<description>Entry SpiderInfo with type Dictionary in Catalog shall be object WebCaptureInfo</description>
			<test>SpiderInfoHasTypeDictionary != true || SpiderInfo_size == 1</test>
			<error>
				<message>Entry SpiderInfo with type Dictionary in Catalog is not object WebCaptureInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37635"/>
			<description>Entry SpiderInfo in Catalog shall have type Dictionary</description>
			<test>containsSpiderInfo == false || SpiderInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry SpiderInfo in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37636"/>
			<description>Entry URI with type Dictionary in Catalog shall be object URI</description>
			<test>URIHasTypeDictionary != true || URI_size == 1</test>
			<error>
				<message>Entry URI with type Dictionary in Catalog is not object URI</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37637"/>
			<description>Entry URI in Catalog shall have type Dictionary</description>
			<test>containsURI == false || URIHasTypeDictionary == true</test>
			<error>
				<message>Entry URI in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37638"/>
			<description>Entry OutputIntents with type Array in Catalog shall be object ArrayOfOutputIntents</description>
			<test>OutputIntentsHasTypeArray != true || OutputIntents_size == 1</test>
			<error>
				<message>Entry OutputIntents with type Array in Catalog is not object ArrayOfOutputIntents</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37639"/>
			<description>Entry OutputIntents in Catalog shall have type Array</description>
			<test>containsOutputIntents == false || OutputIntentsHasTypeArray == true</test>
			<error>
				<message>Entry OutputIntents in Catalog is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37640"/>
			<description>Entry NeedsRendering in Catalog shall have type Boolean</description>
			<test>containsNeedsRendering == false || NeedsRenderingHasTypeBoolean == true</test>
			<error>
				<message>Entry NeedsRendering in Catalog is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37641"/>
			<description>Entry ViewerPreferences with type Dictionary in Catalog shall be object ViewerPreferences</description>
			<test>ViewerPreferencesHasTypeDictionary != true || ViewerPreferences_size == 1</test>
			<error>
				<message>Entry ViewerPreferences with type Dictionary in Catalog is not object ViewerPreferences</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37642"/>
			<description>Entry ViewerPreferences in Catalog shall have type Dictionary</description>
			<test>containsViewerPreferences == false || ViewerPreferencesHasTypeDictionary == true</test>
			<error>
				<message>Entry ViewerPreferences in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37643"/>
			<description>Entry Perms with type Dictionary in Catalog shall be object Permissions</description>
			<test>PermsHasTypeDictionary != true || Perms_size == 1</test>
			<error>
				<message>Entry Perms with type Dictionary in Catalog is not object Permissions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37644"/>
			<description>Entry Perms in Catalog shall have type Dictionary</description>
			<test>containsPerms == false || PermsHasTypeDictionary == true</test>
			<error>
				<message>Entry Perms in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37645"/>
			<description>Entry DPartRoot with type Dictionary in Catalog shall be object DPartRoot</description>
			<test>DPartRootHasTypeDictionary != true || DPartRoot_size == 1</test>
			<error>
				<message>Entry DPartRoot with type Dictionary in Catalog is not object DPartRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37646"/>
			<description>Entry DPartRoot in Catalog shall have type Dictionary</description>
			<test>containsDPartRoot == false || DPartRootHasTypeDictionary == true</test>
			<error>
				<message>Entry DPartRoot in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37647"/>
			<description>Entry Dests with type Dictionary in Catalog shall be object DestsMap</description>
			<test>DestsHasTypeDictionary != true || Dests_size == 1</test>
			<error>
				<message>Entry Dests with type Dictionary in Catalog is not object DestsMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="12" testNumber="37648"/>
			<description>If entry Dests with type Dictionary in Catalog corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>DestsHasTypeDictionary != true || (isDestsIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Dests with type Dictionary in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37649"/>
			<description>Entry Dests in Catalog shall have type Dictionary</description>
			<test>containsDests == false || DestsHasTypeDictionary == true</test>
			<error>
				<message>Entry Dests in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_7" clause="2" testNumber="37753"/>
			<description>PatternColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>PatternColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37754"/>
			<description>Entry 1 with type Array in PatternColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in PatternColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace, IndexedColorSpace, SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_7" clause="6" testNumber="37755"/>
			<description>Entry 1 with type Name in PatternColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry1HasTypeName != true || entry1NameValue == "DeviceCMYK" || entry1NameValue == "DeviceRGB" || entry1NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 1 with type Name in PatternColorSpace has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37756"/>
			<description>Entry 1 in PatternColorSpace shall have one of types: Name, Array</description>
			<test>size &lt;= 1 || entry1HasTypeName == true || entry1HasTypeArray == true</test>
			<error>
				<message>Entry 1 in PatternColorSpace is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_7" clause="6" testNumber="37757"/>
			<description>Entry 0 with type Name in PatternColorSpace shall have value Pattern</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Pattern"</test>
			<error>
				<message>Entry 0 with type Name in PatternColorSpace has incorrect value %2 instead of Pattern</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37758"/>
			<description>Entry 0 in PatternColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in PatternColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_7" clause="1" testNumber="37781"/>
			<description>FileSpecEF shall not contain entries except F, UF</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'UF').length == 0</test>
			<error>
				<message>FileSpecEF contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'UF').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37782"/>
			<description>Entry F with type Stream in FileSpecEF shall be object EmbeddedFileStream</description>
			<test>FHasTypeStream != true || F_size == 1</test>
			<error>
				<message>Entry F with type Stream in FileSpecEF is not object EmbeddedFileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_7" clause="10" testNumber="37783"/>
			<description>Entry F with type Stream in FileSpecEF shall be indirect</description>
			<test>FHasTypeStream != true || isFIndirect == true</test>
			<error>
				<message>Entry F with type Stream in FileSpecEF is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37784"/>
			<description>Entry F in FileSpecEF shall have type Stream</description>
			<test>containsF == false || FHasTypeStream == true</test>
			<error>
				<message>Entry F in FileSpecEF is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_7" clause="17" testNumber="37785"/>
			<description>Entry UF with type Stream in FileSpecEF shall be object EmbeddedFileStream</description>
			<test>UFHasTypeStream != true || UF_size == 1</test>
			<error>
				<message>Entry UF with type Stream in FileSpecEF is not object EmbeddedFileStream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_7" clause="10" testNumber="37786"/>
			<description>Entry UF with type Stream in FileSpecEF shall be indirect</description>
			<test>UFHasTypeStream != true || isUFIndirect == true</test>
			<error>
				<message>Entry UF with type Stream in FileSpecEF is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecEF">
			<id specification="ISO_32000_1_7" clause="8" testNumber="37787"/>
			<description>Entry UF in FileSpecEF shall have type Stream</description>
			<test>containsUF == false || UFHasTypeStream == true</test>
			<error>
				<message>Entry UF in FileSpecEF is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="1" testNumber="38012"/>
			<description>OutlineItem shall not contain entries except Parent, Last, SE, F, First, C, Prev, Next, Count, A, Dest, Title</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Parent' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'SE' &amp;&amp; elem != 'F' &amp;&amp; elem != 'First' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'A' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'Title').length == 0</test>
			<error>
				<message>OutlineItem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Parent' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'SE' &amp;&amp; elem != 'F' &amp;&amp; elem != 'First' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'A' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'Title').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38013"/>
			<description>Entry Parent with type Dictionary in OutlineItem shall be one of objects OutlineItem, Outline</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in OutlineItem is not one of objects OutlineItem, Outline</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38014"/>
			<description>Entry Parent in OutlineItem is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in OutlineItem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="10" testNumber="38015"/>
			<description>Entry Parent with type Dictionary in OutlineItem shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38016"/>
			<description>Entry Parent in OutlineItem shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38017"/>
			<description>Entry Last with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>LastHasTypeDictionary != true || Last_size == 1</test>
			<error>
				<message>Entry Last with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="10" testNumber="38018"/>
			<description>Entry Last with type Dictionary in OutlineItem shall be indirect</description>
			<test>LastHasTypeDictionary != true || isLastIndirect == true</test>
			<error>
				<message>Entry Last with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38019"/>
			<description>Entry Last in OutlineItem shall have type Dictionary</description>
			<test>containsLast == false || LastHasTypeDictionary == true</test>
			<error>
				<message>Entry Last in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38020"/>
			<description>Entry SE with type Dictionary in OutlineItem shall be object StructElem</description>
			<test>SEHasTypeDictionary != true || SE_size == 1</test>
			<error>
				<message>Entry SE with type Dictionary in OutlineItem is not object StructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="10" testNumber="38021"/>
			<description>Entry SE with type Dictionary in OutlineItem shall be indirect</description>
			<test>SEHasTypeDictionary != true || isSEIndirect == true</test>
			<error>
				<message>Entry SE with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38022"/>
			<description>Entry SE in OutlineItem shall have type Dictionary</description>
			<test>containsSE == false || SEHasTypeDictionary == true</test>
			<error>
				<message>Entry SE in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38023"/>
			<description>Entry F in OutlineItem shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in OutlineItem is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="9" testNumber="38024"/>
			<description>Entry F with type Bitmask in OutlineItem shall correspond special case: fn:Eval(fn:BitsClear(3 , 32))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 2 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in OutlineItem doesn't correspond special case: fn:Eval(fn:BitsClear(3 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38025"/>
			<description>Entry First with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>FirstHasTypeDictionary != true || First_size == 1</test>
			<error>
				<message>Entry First with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="10" testNumber="38026"/>
			<description>Entry First with type Dictionary in OutlineItem shall be indirect</description>
			<test>FirstHasTypeDictionary != true || isFirstIndirect == true</test>
			<error>
				<message>Entry First with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38027"/>
			<description>Entry First in OutlineItem shall have type Dictionary</description>
			<test>containsFirst == false || FirstHasTypeDictionary == true</test>
			<error>
				<message>Entry First in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38028"/>
			<description>Entry C with type Array in OutlineItem shall be object ArrayOf_3RGBNumbers</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in OutlineItem is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38029"/>
			<description>Entry C in OutlineItem shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in OutlineItem is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38030"/>
			<description>Entry Prev with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>PrevHasTypeDictionary != true || Prev_size == 1</test>
			<error>
				<message>Entry Prev with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="10" testNumber="38031"/>
			<description>Entry Prev with type Dictionary in OutlineItem shall be indirect</description>
			<test>PrevHasTypeDictionary != true || isPrevIndirect == true</test>
			<error>
				<message>Entry Prev with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38032"/>
			<description>Entry Prev in OutlineItem shall have type Dictionary</description>
			<test>containsPrev == false || PrevHasTypeDictionary == true</test>
			<error>
				<message>Entry Prev in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38033"/>
			<description>Entry Next with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="10" testNumber="38034"/>
			<description>Entry Next with type Dictionary in OutlineItem shall be indirect</description>
			<test>NextHasTypeDictionary != true || isNextIndirect == true</test>
			<error>
				<message>Entry Next with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38035"/>
			<description>Entry Next in OutlineItem shall have type Dictionary</description>
			<test>containsNext == false || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38036"/>
			<description>Entry Count in OutlineItem shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in OutlineItem is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38037"/>
			<description>Entry A with type Dictionary in OutlineItem shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in OutlineItem is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38038"/>
			<description>Entry A in OutlineItem shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="9" testNumber="38039"/>
			<description>Entry A with type Dictionary in OutlineItem shall correspond special case: fn:Not(fn:IsPresent(Dest))</description>
			<test>AHasTypeDictionary != true || (((containsDest == true)) != true)</test>
			<error>
				<message>Entry A with type Dictionary in OutlineItem doesn't correspond special case: fn:Not(fn:IsPresent(Dest))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38040"/>
			<description>Entry Dest with type Array in OutlineItem shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DestHasTypeArray != true || Dest_size == 1</test>
			<error>
				<message>Entry Dest with type Array in OutlineItem is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38041"/>
			<description>Entry Dest in OutlineItem shall have one of types: Name, Array, StringByte</description>
			<test>containsDest == false || DestHasTypeName == true || DestHasTypeArray == true || DestHasTypeStringByte == true</test>
			<error>
				<message>Entry Dest in OutlineItem is not one of types: Name, Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="9" testNumber="38042"/>
			<description>Entry Dest with type Name in OutlineItem shall correspond special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeName != true || (((containsA == true)) != true)</test>
			<error>
				<message>Entry Dest with type Name in OutlineItem doesn't correspond special case: fn:Not(fn:IsPresent(A))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="9" testNumber="38043"/>
			<description>Entry Dest with type Array in OutlineItem shall correspond special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeArray != true || (((containsA == true)) != true)</test>
			<error>
				<message>Entry Dest with type Array in OutlineItem doesn't correspond special case: fn:Not(fn:IsPresent(A))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="9" testNumber="38044"/>
			<description>Entry Dest with type StringByte in OutlineItem shall correspond special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeStringByte != true || (((containsA == true)) != true)</test>
			<error>
				<message>Entry Dest with type StringByte in OutlineItem doesn't correspond special case: fn:Not(fn:IsPresent(A))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38045"/>
			<description>Entry Title in OutlineItem is required</description>
			<test>containsTitle == true</test>
			<error>
				<message>Entry Title in OutlineItem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38046"/>
			<description>Entry Title in OutlineItem shall have type StringText</description>
			<test>containsTitle == false || TitleHasTypeStringText == true</test>
			<error>
				<message>Entry Title in OutlineItem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="2" testNumber="38100"/>
			<description>ArrayOf_4BorderColorArrays shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>ArrayOf_4BorderColorArrays contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38101"/>
			<description>Entry 1 with type Array in ArrayOf_4BorderColorArrays shall be object ArrayOf_3RGBNumbers</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in ArrayOf_4BorderColorArrays is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38102"/>
			<description>Entry 1 in ArrayOf_4BorderColorArrays shall have one of types: Null, Array</description>
			<test>size &lt;= 1 || entry1HasTypeNull == true || entry1HasTypeArray == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4BorderColorArrays is not one of types: Null, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38103"/>
			<description>Entry 3 with type Array in ArrayOf_4BorderColorArrays shall be object ArrayOf_3RGBNumbers</description>
			<test>entry3HasTypeArray != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Array in ArrayOf_4BorderColorArrays is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38104"/>
			<description>Entry 3 in ArrayOf_4BorderColorArrays shall have one of types: Null, Array</description>
			<test>size &lt;= 3 || entry3HasTypeNull == true || entry3HasTypeArray == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4BorderColorArrays is not one of types: Null, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38105"/>
			<description>Entry 0 with type Array in ArrayOf_4BorderColorArrays shall be object ArrayOf_3RGBNumbers</description>
			<test>entry0HasTypeArray != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Array in ArrayOf_4BorderColorArrays is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38106"/>
			<description>Entry 0 in ArrayOf_4BorderColorArrays shall have one of types: Null, Array</description>
			<test>size &lt;= 0 || entry0HasTypeNull == true || entry0HasTypeArray == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4BorderColorArrays is not one of types: Null, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38107"/>
			<description>Entry 2 with type Array in ArrayOf_4BorderColorArrays shall be object ArrayOf_3RGBNumbers</description>
			<test>entry2HasTypeArray != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Array in ArrayOf_4BorderColorArrays is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4BorderColorArrays">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38108"/>
			<description>Entry 2 in ArrayOf_4BorderColorArrays shall have one of types: Null, Array</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeArray == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4BorderColorArrays is not one of types: Null, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="1" testNumber="38118"/>
			<description>CollectionSort shall not contain entries except S, A, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'A' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>CollectionSort contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'A' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38119"/>
			<description>Entry S with type Array in CollectionSort shall be object ArrayOfNamesGeneral</description>
			<test>SHasTypeArray != true || S_size == 1</test>
			<error>
				<message>Entry S with type Array in CollectionSort is not object ArrayOfNamesGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38120"/>
			<description>Entry S in CollectionSort is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in CollectionSort is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38121"/>
			<description>Entry S in CollectionSort shall have one of types: Name, Array</description>
			<test>containsS == false || SHasTypeName == true || SHasTypeArray == true</test>
			<error>
				<message>Entry S in CollectionSort is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38122"/>
			<description>Entry A with type Array in CollectionSort shall be object ArrayOfBooleansGeneral</description>
			<test>AHasTypeArray != true || A_size == 1</test>
			<error>
				<message>Entry A with type Array in CollectionSort is not object ArrayOfBooleansGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38123"/>
			<description>Entry A in CollectionSort shall have one of types: Array, Boolean</description>
			<test>containsA == false || AHasTypeArray == true || AHasTypeBoolean == true</test>
			<error>
				<message>Entry A in CollectionSort is not one of types: Array, Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="6" testNumber="38124"/>
			<description>Entry Type with type Name in CollectionSort shall have value CollectionSort</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CollectionSort"</test>
			<error>
				<message>Entry Type with type Name in CollectionSort has incorrect value %2 instead of CollectionSort</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionSort">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38125"/>
			<description>Entry Type in CollectionSort shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CollectionSort is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="1" testNumber="38134"/>
			<description>3DMeasureAD3 shall not contain entries except DR, TS, N1, Subtype, TY, A2, P, S, D1, UT, A1, C, TP, TRL, N2, AP, V, Type, D2, TX</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DR' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'D1' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'A1' &amp;&amp; elem != 'C' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'D2' &amp;&amp; elem != 'TX').length == 0</test>
			<error>
				<message>3DMeasureAD3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DR' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'P' &amp;&amp; elem != 'S' &amp;&amp; elem != 'D1' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'A1' &amp;&amp; elem != 'C' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'N2' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'D2' &amp;&amp; elem != 'TX').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38135"/>
			<description>Entry DR in 3DMeasureAD3 shall have type Boolean</description>
			<test>containsDR == false || DRHasTypeBoolean == true</test>
			<error>
				<message>Entry DR in 3DMeasureAD3 is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38136"/>
			<description>Entry TS in 3DMeasureAD3 shall have type Number</description>
			<test>containsTS == false || TSHasTypeNumber == true</test>
			<error>
				<message>Entry TS in 3DMeasureAD3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38137"/>
			<description>Entry N1 in 3DMeasureAD3 shall have type StringText</description>
			<test>containsN1 == false || N1HasTypeStringText == true</test>
			<error>
				<message>Entry N1 in 3DMeasureAD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38138"/>
			<description>Entry Subtype in 3DMeasureAD3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureAD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="38139"/>
			<description>Entry Subtype with type Name in 3DMeasureAD3 shall have value AD3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "AD3"</test>
			<error>
				<message>Entry Subtype with type Name in 3DMeasureAD3 has incorrect value %2 instead of AD3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38140"/>
			<description>Entry Subtype in 3DMeasureAD3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DMeasureAD3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38141"/>
			<description>Entry TY with type Array in 3DMeasureAD3 shall be object ArrayOf_3Numbers</description>
			<test>TYHasTypeArray != true || TY_size == 1</test>
			<error>
				<message>Entry TY with type Array in 3DMeasureAD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38142"/>
			<description>Entry TY in 3DMeasureAD3 is required</description>
			<test>containsTY == true</test>
			<error>
				<message>Entry TY in 3DMeasureAD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38143"/>
			<description>Entry TY in 3DMeasureAD3 shall have type Array</description>
			<test>containsTY == false || TYHasTypeArray == true</test>
			<error>
				<message>Entry TY in 3DMeasureAD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38144"/>
			<description>Entry A2 with type Array in 3DMeasureAD3 shall be object ArrayOf_3Numbers</description>
			<test>A2HasTypeArray != true || A2_size == 1</test>
			<error>
				<message>Entry A2 with type Array in 3DMeasureAD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38145"/>
			<description>Entry A2 in 3DMeasureAD3 is required</description>
			<test>containsA2 == true</test>
			<error>
				<message>Entry A2 in 3DMeasureAD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38146"/>
			<description>Entry A2 in 3DMeasureAD3 shall have type Array</description>
			<test>containsA2 == false || A2HasTypeArray == true</test>
			<error>
				<message>Entry A2 in 3DMeasureAD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="14" testNumber="38147"/>
			<description>Entry P with type Integer in 3DMeasureAD3 shall correspond possible value predicate: fn:Eval(@P &gt;= 0)</description>
			<test>PHasTypeInteger != true || PIntegerValue &gt;= 0</test>
			<error>
				<message>Entry P with type Integer in 3DMeasureAD3 doesn't correspond possible value predicate: fn:Eval(@P &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38148"/>
			<description>Entry P in 3DMeasureAD3 shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in 3DMeasureAD3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38149"/>
			<description>Entry S with type Dictionary in 3DMeasureAD3 shall be object AnnotProjection</description>
			<test>SHasTypeDictionary != true || S_size == 1</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasureAD3 is not object AnnotProjection</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="10" testNumber="38150"/>
			<description>Entry S with type Dictionary in 3DMeasureAD3 shall be indirect</description>
			<test>SHasTypeDictionary != true || isSIndirect == true</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasureAD3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38151"/>
			<description>Entry S in 3DMeasureAD3 shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in 3DMeasureAD3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38152"/>
			<description>Entry D1 with type Array in 3DMeasureAD3 shall be object ArrayOf_3Numbers</description>
			<test>D1HasTypeArray != true || D1_size == 1</test>
			<error>
				<message>Entry D1 with type Array in 3DMeasureAD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38153"/>
			<description>Entry D1 in 3DMeasureAD3 is required</description>
			<test>containsD1 == true</test>
			<error>
				<message>Entry D1 in 3DMeasureAD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38154"/>
			<description>Entry D1 in 3DMeasureAD3 shall have type Array</description>
			<test>containsD1 == false || D1HasTypeArray == true</test>
			<error>
				<message>Entry D1 in 3DMeasureAD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38155"/>
			<description>Entry UT in 3DMeasureAD3 shall have type StringText</description>
			<test>containsUT == false || UTHasTypeStringText == true</test>
			<error>
				<message>Entry UT in 3DMeasureAD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38156"/>
			<description>Entry A1 with type Array in 3DMeasureAD3 shall be object ArrayOf_3Numbers</description>
			<test>A1HasTypeArray != true || A1_size == 1</test>
			<error>
				<message>Entry A1 with type Array in 3DMeasureAD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38157"/>
			<description>Entry A1 in 3DMeasureAD3 is required</description>
			<test>containsA1 == true</test>
			<error>
				<message>Entry A1 in 3DMeasureAD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38158"/>
			<description>Entry A1 in 3DMeasureAD3 shall have type Array</description>
			<test>containsA1 == false || A1HasTypeArray == true</test>
			<error>
				<message>Entry A1 in 3DMeasureAD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38159"/>
			<description>Entry C with type Array in 3DMeasureAD3 shall be object ArrayOf_3RGBNumbers</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in 3DMeasureAD3 is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38160"/>
			<description>Entry C in 3DMeasureAD3 shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DMeasureAD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38161"/>
			<description>Entry TP with type Array in 3DMeasureAD3 shall be object ArrayOf_3Numbers</description>
			<test>TPHasTypeArray != true || TP_size == 1</test>
			<error>
				<message>Entry TP with type Array in 3DMeasureAD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38162"/>
			<description>Entry TP in 3DMeasureAD3 is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in 3DMeasureAD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38163"/>
			<description>Entry TP in 3DMeasureAD3 shall have type Array</description>
			<test>containsTP == false || TPHasTypeArray == true</test>
			<error>
				<message>Entry TP in 3DMeasureAD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38164"/>
			<description>Entry TRL in 3DMeasureAD3 shall have type StringText</description>
			<test>containsTRL == false || TRLHasTypeStringText == true</test>
			<error>
				<message>Entry TRL in 3DMeasureAD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38165"/>
			<description>Entry N2 in 3DMeasureAD3 shall have type StringText</description>
			<test>containsN2 == false || N2HasTypeStringText == true</test>
			<error>
				<message>Entry N2 in 3DMeasureAD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38166"/>
			<description>Entry AP with type Array in 3DMeasureAD3 shall be object ArrayOf_3Numbers</description>
			<test>APHasTypeArray != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Array in 3DMeasureAD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38167"/>
			<description>Entry AP in 3DMeasureAD3 is required</description>
			<test>containsAP == true</test>
			<error>
				<message>Entry AP in 3DMeasureAD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38168"/>
			<description>Entry AP in 3DMeasureAD3 shall have type Array</description>
			<test>containsAP == false || APHasTypeArray == true</test>
			<error>
				<message>Entry AP in 3DMeasureAD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38169"/>
			<description>Entry V in 3DMeasureAD3 is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in 3DMeasureAD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38170"/>
			<description>Entry V in 3DMeasureAD3 shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in 3DMeasureAD3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="38171"/>
			<description>Entry Type with type Name in 3DMeasureAD3 shall have value 3DMeasure</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DMeasure"</test>
			<error>
				<message>Entry Type with type Name in 3DMeasureAD3 has incorrect value %2 instead of 3DMeasure</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38172"/>
			<description>Entry Type in 3DMeasureAD3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DMeasureAD3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38173"/>
			<description>Entry D2 with type Array in 3DMeasureAD3 shall be object ArrayOf_3Numbers</description>
			<test>D2HasTypeArray != true || D2_size == 1</test>
			<error>
				<message>Entry D2 with type Array in 3DMeasureAD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38174"/>
			<description>Entry D2 in 3DMeasureAD3 is required</description>
			<test>containsD2 == true</test>
			<error>
				<message>Entry D2 in 3DMeasureAD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38175"/>
			<description>Entry D2 in 3DMeasureAD3 shall have type Array</description>
			<test>containsD2 == false || D2HasTypeArray == true</test>
			<error>
				<message>Entry D2 in 3DMeasureAD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38176"/>
			<description>Entry TX with type Array in 3DMeasureAD3 shall be object ArrayOf_3Numbers</description>
			<test>TXHasTypeArray != true || TX_size == 1</test>
			<error>
				<message>Entry TX with type Array in 3DMeasureAD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38177"/>
			<description>Entry TX in 3DMeasureAD3 is required</description>
			<test>containsTX == true</test>
			<error>
				<message>Entry TX in 3DMeasureAD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasureAD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38178"/>
			<description>Entry TX in 3DMeasureAD3 shall have type Array</description>
			<test>containsTX == false || TXHasTypeArray == true</test>
			<error>
				<message>Entry TX in 3DMeasureAD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="1" testNumber="38412"/>
			<description>EncryptionStandard shall not contain entries except V, StrF, Filter, EFF, OE, Perms, P, U, UE, O, StmF, SubFilter, R, EncryptMetadata, Length, CF</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'StrF' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'EFF' &amp;&amp; elem != 'OE' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'P' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UE' &amp;&amp; elem != 'O' &amp;&amp; elem != 'StmF' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'R' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'CF').length == 0</test>
			<error>
				<message>EncryptionStandard contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'StrF' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'EFF' &amp;&amp; elem != 'OE' &amp;&amp; elem != 'Perms' &amp;&amp; elem != 'P' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UE' &amp;&amp; elem != 'O' &amp;&amp; elem != 'StmF' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'R' &amp;&amp; elem != 'EncryptMetadata' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'CF').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38413"/>
			<description>Entry V in EncryptionStandard is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="19" testNumber="38414"/>
			<description>Entry V with type Integer in EncryptionStandard shouldn't have deprecated value 0</description>
			<test>VIntegerValue != 0</test>
			<error>
				<message>Entry V with type Integer in EncryptionStandard has deprecated value 0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="13" testNumber="38415"/>
			<description>Entry V with type Integer in EncryptionStandard shall have one of values: 0, 1, 2, 3, 4, 5</description>
			<test>VHasTypeInteger != true || VIntegerValue == 0 || VIntegerValue == 1 || VIntegerValue == 2 || VIntegerValue == 3 || VIntegerValue == 4 || VIntegerValue == 5</test>
			<error>
				<message>Entry V with type Integer in EncryptionStandard has incorrect value %2 instead of 0, 1, 2, 3, 4, 5</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38416"/>
			<description>Entry V in EncryptionStandard shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in EncryptionStandard is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38417"/>
			<description>Entry StrF in EncryptionStandard shall have type Name</description>
			<test>containsStrF == false || StrFHasTypeName == true</test>
			<error>
				<message>Entry StrF in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38418"/>
			<description>Entry Filter in EncryptionStandard is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="6" testNumber="38419"/>
			<description>Entry Filter with type Name in EncryptionStandard shall have value Standard</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Standard"</test>
			<error>
				<message>Entry Filter with type Name in EncryptionStandard has incorrect value %2 instead of Standard</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38420"/>
			<description>Entry Filter in EncryptionStandard shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38421"/>
			<description>Entry EFF in EncryptionStandard shall have type Name</description>
			<test>containsEFF == false || EFFHasTypeName == true</test>
			<error>
				<message>Entry EFF in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="11" testNumber="38422"/>
			<description>Entry OE in EncryptionStandard is required, when fn:IsRequired((@R == 5) || (@R == 6))</description>
			<test>(containsOE == true || ((RIntegerValue == 5) || (RIntegerValue == 6)) == false)</test>
			<error>
				<message>Entry OE in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38423"/>
			<description>Entry OE in EncryptionStandard shall have type StringByte</description>
			<test>containsOE == false || OEHasTypeStringByte == true</test>
			<error>
				<message>Entry OE in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="11" testNumber="38424"/>
			<description>Entry Perms in EncryptionStandard is required, when fn:IsRequired((@R == 5) || (@R == 6))</description>
			<test>(containsPerms == true || ((RIntegerValue == 5) || (RIntegerValue == 6)) == false)</test>
			<error>
				<message>Entry Perms in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38425"/>
			<description>Entry Perms in EncryptionStandard shall have type StringByte</description>
			<test>containsPerms == false || PermsHasTypeStringByte == true</test>
			<error>
				<message>Entry Perms in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38426"/>
			<description>Entry P in EncryptionStandard is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38427"/>
			<description>Entry P in EncryptionStandard shall have type Bitmask</description>
			<test>containsP == false || PHasTypeBitmask == true</test>
			<error>
				<message>Entry P in EncryptionStandard is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="9" testNumber="38428"/>
			<description>Entry P with type Bitmask in EncryptionStandard shall correspond special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitsSet(7 , 8) &amp;&amp; fn:SinceVersion(2.0 , fn:BitSet(10)) &amp;&amp; (fn:SinceVersion(2.0 , fn:Extension(ISO_TS_32004 , fn:BitsSet(14 , 32))) || fn:BitsSet(13 , 32)))</description>
			<test>PHasTypeBitmask != true || (((PBitmaskValue &gt;&gt; 0 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 1 &amp; 1) == 0) &amp;&amp; ((PBitmaskValue &gt;&gt; 6 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 7 &amp; 1) == 1) &amp;&amp; true &amp;&amp; (true || ((PBitmaskValue &gt;&gt; 12 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 13 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 14 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 15 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 16 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 17 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 18 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 19 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 20 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 21 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 22 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 23 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 24 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 25 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 26 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 27 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 28 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 29 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 30 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 31 &amp; 1) == 1)))</test>
			<error>
				<message>Entry P with type Bitmask in EncryptionStandard doesn't correspond special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitsSet(7 , 8) &amp;&amp; fn:SinceVersion(2.0 , fn:BitSet(10)) &amp;&amp; (fn:SinceVersion(2.0 , fn:Extension(ISO_TS_32004 , fn:BitsSet(14 , 32))) || fn:BitsSet(13 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38429"/>
			<description>Entry U in EncryptionStandard is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38430"/>
			<description>Entry U in EncryptionStandard shall have type StringByte</description>
			<test>containsU == false || UHasTypeStringByte == true</test>
			<error>
				<message>Entry U in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="11" testNumber="38431"/>
			<description>Entry UE in EncryptionStandard is required, when fn:IsRequired((@R == 5) || (@R == 6))</description>
			<test>(containsUE == true || ((RIntegerValue == 5) || (RIntegerValue == 6)) == false)</test>
			<error>
				<message>Entry UE in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38432"/>
			<description>Entry UE in EncryptionStandard shall have type StringByte</description>
			<test>containsUE == false || UEHasTypeStringByte == true</test>
			<error>
				<message>Entry UE in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38433"/>
			<description>Entry O in EncryptionStandard is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38434"/>
			<description>Entry O in EncryptionStandard shall have type StringByte</description>
			<test>containsO == false || OHasTypeStringByte == true</test>
			<error>
				<message>Entry O in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38435"/>
			<description>Entry StmF in EncryptionStandard shall have type Name</description>
			<test>containsStmF == false || StmFHasTypeName == true</test>
			<error>
				<message>Entry StmF in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38436"/>
			<description>Entry SubFilter in EncryptionStandard shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38437"/>
			<description>Entry R in EncryptionStandard is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="15" testNumber="38438"/>
			<description>Entry R in EncryptionStandard shall have Integer value 2, if this object corresponds to condition @V &lt; 2</description>
			<test>((VIntegerValue &lt; 2) == false || RIntegerValue == 2)</test>
			<error>
				<message>Entry R in EncryptionStandard doesn't have value 2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="15" testNumber="38439"/>
			<description>Entry R in EncryptionStandard shall have Integer value 3, if this object corresponds to condition (@V == 2) || (@V == 3)</description>
			<test>(((VIntegerValue == 2) || (VIntegerValue == 3)) == false || RIntegerValue == 3)</test>
			<error>
				<message>Entry R in EncryptionStandard doesn't have value 3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="15" testNumber="38440"/>
			<description>Entry R in EncryptionStandard shall have Integer value 4, if this object corresponds to condition @V == 4</description>
			<test>((VIntegerValue == 4) == false || RIntegerValue == 4)</test>
			<error>
				<message>Entry R in EncryptionStandard doesn't have value 4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="13" testNumber="38441"/>
			<description>Entry R with type Integer in EncryptionStandard shall have one of values: 2, 3, 4</description>
			<test>RHasTypeInteger != true || RIntegerValue == 2 || RIntegerValue == 3 || RIntegerValue == 4</test>
			<error>
				<message>Entry R with type Integer in EncryptionStandard has incorrect value %2 instead of 2, 3, 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38442"/>
			<description>Entry R in EncryptionStandard shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in EncryptionStandard is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38443"/>
			<description>Entry EncryptMetadata in EncryptionStandard shall have type Boolean</description>
			<test>containsEncryptMetadata == false || EncryptMetadataHasTypeBoolean == true</test>
			<error>
				<message>Entry EncryptMetadata in EncryptionStandard is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="14" testNumber="38444"/>
			<description>Entry Length with type Integer in EncryptionStandard shall correspond possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; ((@Length &lt;= 128) || fn:Extension(ADBE_Extn3 , (@Length &lt;= 256))) &amp;&amp; ((@Length mod 8) == 0))</description>
			<test>LengthHasTypeInteger != true || (LengthIntegerValue &gt;= 40) &amp;&amp; ((LengthIntegerValue &lt;= 128) || ((hasExtensionADBE_Extn3 == true) &amp;&amp; (LengthIntegerValue &lt;= 256))) &amp;&amp; ((LengthIntegerValue % 8) == 0)</test>
			<error>
				<message>Entry Length with type Integer in EncryptionStandard doesn't correspond possible value predicate: fn:Eval((@Length &gt;= 40) &amp;&amp; ((@Length &lt;= 128) || fn:Extension(ADBE_Extn3 , (@Length &lt;= 256))) &amp;&amp; ((@Length mod 8) == 0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38445"/>
			<description>Entry Length in EncryptionStandard shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in EncryptionStandard is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38446"/>
			<description>Entry CF with type Dictionary in EncryptionStandard shall be object CryptFilterMap</description>
			<test>CFHasTypeDictionary != true || CF_size == 1</test>
			<error>
				<message>Entry CF with type Dictionary in EncryptionStandard is not object CryptFilterMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38447"/>
			<description>Entry CF in EncryptionStandard shall have type Dictionary</description>
			<test>containsCF == false || CFHasTypeDictionary == true</test>
			<error>
				<message>Entry CF in EncryptionStandard is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="1" testNumber="38518"/>
			<description>GroupAttributes shall not contain entries except S, Type, CS, K, I</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'CS' &amp;&amp; elem != 'K' &amp;&amp; elem != 'I').length == 0</test>
			<error>
				<message>GroupAttributes contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'CS' &amp;&amp; elem != 'K' &amp;&amp; elem != 'I').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38519"/>
			<description>Entry S in GroupAttributes is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in GroupAttributes is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="6" testNumber="38520"/>
			<description>Entry S with type Name in GroupAttributes shall have value Transparency</description>
			<test>SHasTypeName != true || SNameValue == "Transparency"</test>
			<error>
				<message>Entry S with type Name in GroupAttributes has incorrect value %2 instead of Transparency</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38521"/>
			<description>Entry S in GroupAttributes shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in GroupAttributes is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="6" testNumber="38522"/>
			<description>Entry Type with type Name in GroupAttributes shall have value Group</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Group"</test>
			<error>
				<message>Entry Type with type Name in GroupAttributes has incorrect value %2 instead of Group</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38523"/>
			<description>Entry Type in GroupAttributes shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in GroupAttributes is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38524"/>
			<description>Entry CS with type Array in GroupAttributes shall be one of objects CalGrayColorSpace, CalRGBColorSpace, ICCBasedColorSpace</description>
			<test>CSHasTypeArray != true || CS_size == 1</test>
			<error>
				<message>Entry CS with type Array in GroupAttributes is not one of objects CalGrayColorSpace, CalRGBColorSpace, ICCBasedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="6" testNumber="38525"/>
			<description>Entry CS with type Name in GroupAttributes shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>CSHasTypeName != true || CSNameValue == "DeviceCMYK" || CSNameValue == "DeviceRGB" || CSNameValue == "DeviceGray"</test>
			<error>
				<message>Entry CS with type Name in GroupAttributes has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>CSNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38526"/>
			<description>Entry CS in GroupAttributes shall have one of types: Name, Array</description>
			<test>containsCS == false || CSHasTypeName == true || CSHasTypeArray == true</test>
			<error>
				<message>Entry CS in GroupAttributes is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38527"/>
			<description>Entry K in GroupAttributes shall have type Boolean</description>
			<test>containsK == false || KHasTypeBoolean == true</test>
			<error>
				<message>Entry K in GroupAttributes is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGroupAttributes">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38528"/>
			<description>Entry I in GroupAttributes shall have type Boolean</description>
			<test>containsI == false || IHasTypeBoolean == true</test>
			<error>
				<message>Entry I in GroupAttributes is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkInfo">
			<id specification="ISO_32000_1_7" clause="1" testNumber="38552"/>
			<description>MarkInfo shall not contain entries except UserProperties, Marked, Suspects</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'UserProperties' &amp;&amp; elem != 'Marked' &amp;&amp; elem != 'Suspects').length == 0</test>
			<error>
				<message>MarkInfo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'UserProperties' &amp;&amp; elem != 'Marked' &amp;&amp; elem != 'Suspects').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38553"/>
			<description>Entry UserProperties in MarkInfo shall have type Boolean</description>
			<test>containsUserProperties == false || UserPropertiesHasTypeBoolean == true</test>
			<error>
				<message>Entry UserProperties in MarkInfo is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38554"/>
			<description>Entry Marked in MarkInfo shall have type Boolean</description>
			<test>containsMarked == false || MarkedHasTypeBoolean == true</test>
			<error>
				<message>Entry Marked in MarkInfo is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMarkInfo">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38555"/>
			<description>Entry Suspects in MarkInfo shall have type Boolean</description>
			<test>containsSuspects == false || SuspectsHasTypeBoolean == true</test>
			<error>
				<message>Entry Suspects in MarkInfo is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACollectionNameTreeResources">
			<id specification="ISO_32000_1_7" clause="18" testNumber="38560"/>
			<description>Entry * in CollectionNameTreeResources shall be object CollectionNameTreeResourcesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in CollectionNameTreeResources is not object CollectionNameTreeResourcesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="1" testNumber="38590"/>
			<description>MeasureGEO shall not contain entries except Bounds, GCS, DCS, GPTS, LPTS, PDU</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Bounds' &amp;&amp; elem != 'GCS' &amp;&amp; elem != 'DCS' &amp;&amp; elem != 'GPTS' &amp;&amp; elem != 'LPTS' &amp;&amp; elem != 'PDU').length == 0</test>
			<error>
				<message>MeasureGEO contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Bounds' &amp;&amp; elem != 'GCS' &amp;&amp; elem != 'DCS' &amp;&amp; elem != 'GPTS' &amp;&amp; elem != 'LPTS' &amp;&amp; elem != 'PDU').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38591"/>
			<description>Entry Bounds with type Array in MeasureGEO shall be object ArrayOfNumbersGeneral</description>
			<test>BoundsHasTypeArray != true || Bounds_size == 1</test>
			<error>
				<message>Entry Bounds with type Array in MeasureGEO is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38592"/>
			<description>Entry Bounds in MeasureGEO shall have type Array</description>
			<test>containsBounds == false || BoundsHasTypeArray == true</test>
			<error>
				<message>Entry Bounds in MeasureGEO is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38593"/>
			<description>Entry GCS with type Dictionary in MeasureGEO shall be one of objects GeographicCoordinateSystem, ProjectedCoordinateSystem</description>
			<test>GCSHasTypeDictionary != true || GCS_size == 1</test>
			<error>
				<message>Entry GCS with type Dictionary in MeasureGEO is not one of objects GeographicCoordinateSystem, ProjectedCoordinateSystem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38594"/>
			<description>Entry GCS in MeasureGEO is required</description>
			<test>containsGCS == true</test>
			<error>
				<message>Entry GCS in MeasureGEO is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38595"/>
			<description>Entry GCS in MeasureGEO shall have type Dictionary</description>
			<test>containsGCS == false || GCSHasTypeDictionary == true</test>
			<error>
				<message>Entry GCS in MeasureGEO is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38596"/>
			<description>Entry DCS with type Dictionary in MeasureGEO shall be one of objects GeographicCoordinateSystem, ProjectedCoordinateSystem</description>
			<test>DCSHasTypeDictionary != true || DCS_size == 1</test>
			<error>
				<message>Entry DCS with type Dictionary in MeasureGEO is not one of objects GeographicCoordinateSystem, ProjectedCoordinateSystem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38597"/>
			<description>Entry DCS in MeasureGEO shall have type Dictionary</description>
			<test>containsDCS == false || DCSHasTypeDictionary == true</test>
			<error>
				<message>Entry DCS in MeasureGEO is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38598"/>
			<description>Entry GPTS with type Array in MeasureGEO shall be object ArrayOfNumbersGeneral</description>
			<test>GPTSHasTypeArray != true || GPTS_size == 1</test>
			<error>
				<message>Entry GPTS with type Array in MeasureGEO is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38599"/>
			<description>Entry GPTS in MeasureGEO is required</description>
			<test>containsGPTS == true</test>
			<error>
				<message>Entry GPTS in MeasureGEO is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38600"/>
			<description>Entry GPTS in MeasureGEO shall have type Array</description>
			<test>containsGPTS == false || GPTSHasTypeArray == true</test>
			<error>
				<message>Entry GPTS in MeasureGEO is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38601"/>
			<description>Entry LPTS with type Array in MeasureGEO shall be object ArrayOfNumbersGeneral</description>
			<test>LPTSHasTypeArray != true || LPTS_size == 1</test>
			<error>
				<message>Entry LPTS with type Array in MeasureGEO is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38602"/>
			<description>Entry LPTS in MeasureGEO shall have type Array</description>
			<test>containsLPTS == false || LPTSHasTypeArray == true</test>
			<error>
				<message>Entry LPTS in MeasureGEO is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38603"/>
			<description>Entry PDU with type Array in MeasureGEO shall be object ArrayOf3PDUNames</description>
			<test>PDUHasTypeArray != true || PDU_size == 1</test>
			<error>
				<message>Entry PDU with type Array in MeasureGEO is not object ArrayOf3PDUNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMeasureGEO">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38604"/>
			<description>Entry PDU in MeasureGEO shall have type Array</description>
			<test>containsPDU == false || PDUHasTypeArray == true</test>
			<error>
				<message>Entry PDU in MeasureGEO is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="1" testNumber="38768"/>
			<description>FieldChoice shall not contain entries except I, Opt, FT, RV, TM, T, Parent, AA, Q, TI, TU, DV, Kids, DA, DS, Ff, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'I' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'TI' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>FieldChoice contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'I' &amp;&amp; elem != 'Opt' &amp;&amp; elem != 'FT' &amp;&amp; elem != 'RV' &amp;&amp; elem != 'TM' &amp;&amp; elem != 'T' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'AA' &amp;&amp; elem != 'Q' &amp;&amp; elem != 'TI' &amp;&amp; elem != 'TU' &amp;&amp; elem != 'DV' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'DA' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'Ff' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38769"/>
			<description>Entry I with type Array in FieldChoice shall be object ArrayOfNonNegativeIntegersGeneral</description>
			<test>IHasTypeArray != true || I_size == 1</test>
			<error>
				<message>Entry I with type Array in FieldChoice is not object ArrayOfNonNegativeIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38770"/>
			<description>Entry I in FieldChoice shall have type Array</description>
			<test>containsI == false || IHasTypeArray == true</test>
			<error>
				<message>Entry I in FieldChoice is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="9" testNumber="38771"/>
			<description>Entry I with type Array in FieldChoice shall correspond special case: fn:Eval(fn:ArraySortAscending(I , 1))</description>
			<test>IHasTypeArray != true || (isIArraySortAscending1 == true)</test>
			<error>
				<message>Entry I with type Array in FieldChoice doesn't correspond special case: fn:Eval(fn:ArraySortAscending(I , 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38772"/>
			<description>Entry Opt with type Array in FieldChoice shall be object ArrayOfFieldChoiceOpt</description>
			<test>OptHasTypeArray != true || Opt_size == 1</test>
			<error>
				<message>Entry Opt with type Array in FieldChoice is not object ArrayOfFieldChoiceOpt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38773"/>
			<description>Entry Opt in FieldChoice shall have type Array</description>
			<test>containsOpt == false || OptHasTypeArray == true</test>
			<error>
				<message>Entry Opt in FieldChoice is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38774"/>
			<description>Entry FT in FieldChoice is required</description>
			<test>containsFT == true</test>
			<error>
				<message>Entry FT in FieldChoice is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="6" testNumber="38775"/>
			<description>Entry FT with type Name in FieldChoice shall have value Ch</description>
			<test>FTHasTypeName != true || FTNameValue == "Ch"</test>
			<error>
				<message>Entry FT with type Name in FieldChoice has incorrect value %2 instead of Ch</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38776"/>
			<description>Entry FT in FieldChoice shall have type Name</description>
			<test>containsFT == false || FTHasTypeName == true</test>
			<error>
				<message>Entry FT in FieldChoice is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38777"/>
			<description>Entry RV with type Stream in FieldChoice shall be object Stream</description>
			<test>RVHasTypeStream != true || RV_size == 1</test>
			<error>
				<message>Entry RV with type Stream in FieldChoice is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="10" testNumber="38778"/>
			<description>Entry RV with type Stream in FieldChoice shall be indirect</description>
			<test>RVHasTypeStream != true || isRVIndirect == true</test>
			<error>
				<message>Entry RV with type Stream in FieldChoice is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38779"/>
			<description>Entry RV in FieldChoice shall have one of types: StringText, Stream</description>
			<test>containsRV == false || RVHasTypeStringText == true || RVHasTypeStream == true</test>
			<error>
				<message>Entry RV in FieldChoice is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38780"/>
			<description>Entry TM in FieldChoice shall have type StringText</description>
			<test>containsTM == false || TMHasTypeStringText == true</test>
			<error>
				<message>Entry TM in FieldChoice is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38781"/>
			<description>Entry T in FieldChoice shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in FieldChoice is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38782"/>
			<description>Entry Parent with type Dictionary in FieldChoice shall be one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in FieldChoice is not one of objects FieldTx, FieldBtnPush, FieldBtnCheckbox, FieldBtnRadio, FieldChoice, FieldSig, Field</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38783"/>
			<description>Entry Parent in FieldChoice shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in FieldChoice is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38784"/>
			<description>Entry AA with type Dictionary in FieldChoice shall be object AddActionFormField</description>
			<test>AAHasTypeDictionary != true || AA_size == 1</test>
			<error>
				<message>Entry AA with type Dictionary in FieldChoice is not object AddActionFormField</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38785"/>
			<description>Entry AA in FieldChoice shall have type Dictionary</description>
			<test>containsAA == false || AAHasTypeDictionary == true</test>
			<error>
				<message>Entry AA in FieldChoice is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="6" testNumber="38786"/>
			<description>Entry Q with type Integer in FieldChoice shall have one of values: 0, 1, 2</description>
			<test>QHasTypeInteger != true || QIntegerValue == 0 || QIntegerValue == 1 || QIntegerValue == 2</test>
			<error>
				<message>Entry Q with type Integer in FieldChoice has incorrect value %2 instead of 0, 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>QIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38787"/>
			<description>Entry Q in FieldChoice shall have type Integer</description>
			<test>containsQ == false || QHasTypeInteger == true</test>
			<error>
				<message>Entry Q in FieldChoice is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="14" testNumber="38788"/>
			<description>Entry TI with type Integer in FieldChoice shall correspond possible value predicate: fn:Eval((@TI &gt;= 0) &amp;&amp; (@TI &lt; fn:ArrayLength(Opt)))</description>
			<test>TIHasTypeInteger != true || (TIIntegerValue &gt;= 0) &amp;&amp; (TIIntegerValue &lt; OptArraySize)</test>
			<error>
				<message>Entry TI with type Integer in FieldChoice doesn't correspond possible value predicate: fn:Eval((@TI &gt;= 0) &amp;&amp; (@TI &lt; fn:ArrayLength(Opt)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38789"/>
			<description>Entry TI in FieldChoice shall have type Integer</description>
			<test>containsTI == false || TIHasTypeInteger == true</test>
			<error>
				<message>Entry TI in FieldChoice is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38790"/>
			<description>Entry TU in FieldChoice shall have type StringText</description>
			<test>containsTU == false || TUHasTypeStringText == true</test>
			<error>
				<message>Entry TU in FieldChoice is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38791"/>
			<description>Entry DV with type Array in FieldChoice shall be object ArrayOfStringsText</description>
			<test>DVHasTypeArray != true || DV_size == 1</test>
			<error>
				<message>Entry DV with type Array in FieldChoice is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38792"/>
			<description>Entry DV in FieldChoice shall have one of types: Array, StringText</description>
			<test>containsDV == false || DVHasTypeArray == true || DVHasTypeStringText == true</test>
			<error>
				<message>Entry DV in FieldChoice is not one of types: Array, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38793"/>
			<description>Entry Kids with type Array in FieldChoice shall be object ArrayOfFields</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in FieldChoice is not object ArrayOfFields</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38794"/>
			<description>Entry Kids in FieldChoice shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in FieldChoice is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38795"/>
			<description>Entry DA in FieldChoice is required</description>
			<test>containsDA == true</test>
			<error>
				<message>Entry DA in FieldChoice is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38796"/>
			<description>Entry DA in FieldChoice shall have type String</description>
			<test>containsDA == false || DAHasTypeString == true</test>
			<error>
				<message>Entry DA in FieldChoice is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38797"/>
			<description>Entry DS in FieldChoice shall have type StringText</description>
			<test>containsDS == false || DSHasTypeStringText == true</test>
			<error>
				<message>Entry DS in FieldChoice is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38798"/>
			<description>Entry Ff in FieldChoice shall have type Bitmask</description>
			<test>containsFf == false || FfHasTypeBitmask == true</test>
			<error>
				<message>Entry Ff in FieldChoice is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="9" testNumber="38799"/>
			<description>Entry Ff with type Bitmask in FieldChoice shall correspond special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitClear(21) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(22 , 23)) &amp;&amp; fn:BitsClear(24 , 26) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitClear(27)) &amp;&amp; fn:BitsClear(28 , 32))</description>
			<test>FfHasTypeBitmask != true || (((FfBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 13 &amp; 1) == 0) &amp;&amp; (FfBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; true &amp;&amp; ((FfBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 25 &amp; 1) == 0) &amp;&amp; true &amp;&amp; ((FfBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FfBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Ff with type Bitmask in FieldChoice doesn't correspond special case: fn:Eval(fn:BitsClear(4 , 14) &amp;&amp; fn:BitClear(21) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(22 , 23)) &amp;&amp; fn:BitsClear(24 , 26) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitClear(27)) &amp;&amp; fn:BitsClear(28 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38800"/>
			<description>Entry V with type Array in FieldChoice shall be object ArrayOfStringsText</description>
			<test>VHasTypeArray != true || V_size == 1</test>
			<error>
				<message>Entry V with type Array in FieldChoice is not object ArrayOfStringsText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFieldChoice">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38801"/>
			<description>Entry V in FieldChoice shall have one of types: Array, StringText</description>
			<test>containsV == false || VHasTypeArray == true || VHasTypeStringText == true</test>
			<error>
				<message>Entry V in FieldChoice is not one of types: Array, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="1" testNumber="38868"/>
			<description>Separation shall not contain entries except DeviceColorant, ColorSpace, Pages</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DeviceColorant' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Pages').length == 0</test>
			<error>
				<message>Separation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DeviceColorant' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Pages').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38869"/>
			<description>Entry DeviceColorant in Separation is required</description>
			<test>containsDeviceColorant == true</test>
			<error>
				<message>Entry DeviceColorant in Separation is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38870"/>
			<description>Entry DeviceColorant in Separation shall have one of types: Name, String</description>
			<test>containsDeviceColorant == false || DeviceColorantHasTypeName == true || DeviceColorantHasTypeString == true</test>
			<error>
				<message>Entry DeviceColorant in Separation is not one of types: Name, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38871"/>
			<description>Entry ColorSpace with type Array in Separation shall be one of objects SeparationColorSpace, DeviceNColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in Separation is not one of objects SeparationColorSpace, DeviceNColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38872"/>
			<description>Entry ColorSpace in Separation shall have type Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in Separation is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38873"/>
			<description>Entry Pages with type Array in Separation shall be object ArrayOfPages</description>
			<test>PagesHasTypeArray != true || Pages_size == 1</test>
			<error>
				<message>Entry Pages with type Array in Separation is not object ArrayOfPages</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38874"/>
			<description>Entry Pages in Separation is required</description>
			<test>containsPages == true</test>
			<error>
				<message>Entry Pages in Separation is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38875"/>
			<description>Entry Pages in Separation shall have type Array</description>
			<test>containsPages == false || PagesHasTypeArray == true</test>
			<error>
				<message>Entry Pages in Separation is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="1" testNumber="38972"/>
			<description>AnnotPrinterMark shall not contain entries except Type, AP, F, Subtype, AS, P, Border, C, Contents, StructParent, MN, M, NM, OC, Rect</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'MN' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Rect').length == 0</test>
			<error>
				<message>AnnotPrinterMark contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'MN' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'Rect').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="6" testNumber="38973"/>
			<description>Entry Type with type Name in AnnotPrinterMark shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotPrinterMark has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38974"/>
			<description>Entry Type in AnnotPrinterMark shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38975"/>
			<description>Entry AP with type Dictionary in AnnotPrinterMark shall be object AppearancePrinterMark</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotPrinterMark is not object AppearancePrinterMark</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="11" testNumber="38976"/>
			<description>Entry AP in AnnotPrinterMark is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38977"/>
			<description>Entry AP in AnnotPrinterMark shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38978"/>
			<description>Entry F in AnnotPrinterMark is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in AnnotPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38979"/>
			<description>Entry F in AnnotPrinterMark shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotPrinterMark is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="9" testNumber="38980"/>
			<description>Entry F with type Bitmask in AnnotPrinterMark shall correspond special case: fn:Eval(fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotPrinterMark doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="7" testNumber="38981"/>
			<description>Entry Subtype in AnnotPrinterMark is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="6" testNumber="38982"/>
			<description>Entry Subtype with type Name in AnnotPrinterMark shall have value PrinterMark</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PrinterMark"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotPrinterMark has incorrect value %2 instead of PrinterMark</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38983"/>
			<description>Entry Subtype in AnnotPrinterMark shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="11" testNumber="38984"/>
			<description>Entry AS in AnnotPrinterMark is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38985"/>
			<description>Entry AS in AnnotPrinterMark shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38986"/>
			<description>Entry P with type Dictionary in AnnotPrinterMark shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPrinterMark is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="10" testNumber="38987"/>
			<description>Entry P with type Dictionary in AnnotPrinterMark shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPrinterMark is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38988"/>
			<description>Entry P in AnnotPrinterMark shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38989"/>
			<description>Entry Border with type Array in AnnotPrinterMark shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotPrinterMark is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38990"/>
			<description>Entry Border in AnnotPrinterMark shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotPrinterMark is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38991"/>
			<description>Entry C with type Array in AnnotPrinterMark shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotPrinterMark is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38992"/>
			<description>Entry C in AnnotPrinterMark shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotPrinterMark is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38993"/>
			<description>Entry Contents in AnnotPrinterMark shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotPrinterMark is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38994"/>
			<description>Entry StructParent in AnnotPrinterMark shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotPrinterMark is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38995"/>
			<description>Entry MN in AnnotPrinterMark shall have type Name</description>
			<test>containsMN == false || MNHasTypeName == true</test>
			<error>
				<message>Entry MN in AnnotPrinterMark is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38996"/>
			<description>Entry M in AnnotPrinterMark shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotPrinterMark is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38997"/>
			<description>Entry NM in AnnotPrinterMark shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotPrinterMark is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="17" testNumber="38998"/>
			<description>Entry OC with type Dictionary in AnnotPrinterMark shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotPrinterMark is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="38999"/>
			<description>Entry OC in AnnotPrinterMark shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotPrinterMark is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39000"/>
			<description>Entry Rect in AnnotPrinterMark is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotPrinterMark is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPrinterMark">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39001"/>
			<description>Entry Rect in AnnotPrinterMark shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotPrinterMark is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfImageAlternatesEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39051"/>
			<description>Entry with type Dictionary in ArrayOfImageAlternates shall be object AlternateImage</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfImageAlternates is not object AlternateImage</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfImageAlternatesEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39052"/>
			<description>Entry in ArrayOfImageAlternates shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfImageAlternates is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="1" testNumber="39154"/>
			<description>AnnotCaret shall not contain entries except M, CA, NM, Subj, Contents, CreationDate, IRT, Rect, F, RT, RC, RD, AP, C, Subtype, T, P, Sy, Popup, ExData, Type, Border, StructParent, IT, AS, OC</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Sy' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'OC').length == 0</test>
			<error>
				<message>AnnotCaret contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'M' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'F' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'RD' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'T' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Sy' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'OC').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39155"/>
			<description>Entry M in AnnotCaret shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotCaret is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="14" testNumber="39156"/>
			<description>Entry CA with type Number in AnnotCaret shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotCaret doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39157"/>
			<description>Entry CA in AnnotCaret shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotCaret is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39158"/>
			<description>Entry NM in AnnotCaret shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotCaret is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39159"/>
			<description>Entry Subj in AnnotCaret shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotCaret is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39160"/>
			<description>Entry Contents in AnnotCaret shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotCaret is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39161"/>
			<description>Entry CreationDate in AnnotCaret shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotCaret is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39162"/>
			<description>Entry IRT with type Dictionary in AnnotCaret shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotCaret is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="11" testNumber="39163"/>
			<description>Entry IRT in AnnotCaret is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotCaret is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39164"/>
			<description>Entry IRT in AnnotCaret shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotCaret is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39165"/>
			<description>Entry Rect in AnnotCaret is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotCaret is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39166"/>
			<description>Entry Rect in AnnotCaret shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotCaret is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39167"/>
			<description>Entry F in AnnotCaret shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotCaret is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="9" testNumber="39168"/>
			<description>Entry F with type Bitmask in AnnotCaret shall correspond special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:BitsClear(11 , 32))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotCaret doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:BitsClear(11 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="6" testNumber="39169"/>
			<description>Entry RT with type Name in AnnotCaret shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotCaret has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39170"/>
			<description>Entry RT in AnnotCaret shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotCaret is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39171"/>
			<description>Entry RC with type Stream in AnnotCaret shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotCaret is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="10" testNumber="39172"/>
			<description>Entry RC with type Stream in AnnotCaret shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotCaret is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39173"/>
			<description>Entry RC in AnnotCaret shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotCaret is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39174"/>
			<description>Entry RD in AnnotCaret shall have type Rectangle</description>
			<test>containsRD == false || RDHasTypeRectangle == true</test>
			<error>
				<message>Entry RD in AnnotCaret is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="9" testNumber="39175"/>
			<description>Entry RD with type Rectangle in AnnotCaret shall correspond special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</description>
			<test>RDHasTypeRectangle != true || ((RD0NumberValue &gt;= 0) &amp;&amp; (RD1NumberValue &gt;= 0) &amp;&amp; (RD2NumberValue &gt;= 0) &amp;&amp; (RD3NumberValue &gt;= 0) &amp;&amp; ((RD1NumberValue + RD3NumberValue) &lt; RectRectHeight) &amp;&amp; ((RD0NumberValue + RD2NumberValue) &lt; RectRectWidth))</test>
			<error>
				<message>Entry RD with type Rectangle in AnnotCaret doesn't correspond special case: fn:Eval((RD::@0&gt;= 0) &amp;&amp; (RD::@1&gt;= 0) &amp;&amp; (RD::@2&gt;= 0) &amp;&amp; (RD::@3&gt;= 0) &amp;&amp; ((RD::@1+ RD::@3) &lt; fn:RectHeight(Rect)) &amp;&amp; ((RD::@0+ RD::@2) &lt; fn:RectWidth(Rect)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39176"/>
			<description>Entry AP with type Dictionary in AnnotCaret shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotCaret is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="11" testNumber="39177"/>
			<description>Entry AP in AnnotCaret is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotCaret is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39178"/>
			<description>Entry AP in AnnotCaret shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotCaret is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39179"/>
			<description>Entry C with type Array in AnnotCaret shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotCaret is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39180"/>
			<description>Entry C in AnnotCaret shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotCaret is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39181"/>
			<description>Entry Subtype in AnnotCaret is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotCaret is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="6" testNumber="39182"/>
			<description>Entry Subtype with type Name in AnnotCaret shall have value Caret</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Caret"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotCaret has incorrect value %2 instead of Caret</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39183"/>
			<description>Entry Subtype in AnnotCaret shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotCaret is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39184"/>
			<description>Entry T in AnnotCaret shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotCaret is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39185"/>
			<description>Entry P with type Dictionary in AnnotCaret shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotCaret is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="10" testNumber="39186"/>
			<description>Entry P with type Dictionary in AnnotCaret shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotCaret is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39187"/>
			<description>Entry P in AnnotCaret shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotCaret is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="6" testNumber="39188"/>
			<description>Entry Sy with type Name in AnnotCaret shall have one of values: P, None</description>
			<test>SyHasTypeName != true || SyNameValue == "P" || SyNameValue == "None"</test>
			<error>
				<message>Entry Sy with type Name in AnnotCaret has incorrect value %2 instead of P, None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SyNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39189"/>
			<description>Entry Sy in AnnotCaret shall have type Name</description>
			<test>containsSy == false || SyHasTypeName == true</test>
			<error>
				<message>Entry Sy in AnnotCaret is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39190"/>
			<description>Entry Popup with type Dictionary in AnnotCaret shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotCaret is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="10" testNumber="39191"/>
			<description>Entry Popup with type Dictionary in AnnotCaret shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotCaret is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39192"/>
			<description>Entry Popup in AnnotCaret shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotCaret is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39193"/>
			<description>Entry ExData with type Dictionary in AnnotCaret shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotCaret is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39194"/>
			<description>Entry ExData in AnnotCaret shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotCaret is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="6" testNumber="39195"/>
			<description>Entry Type with type Name in AnnotCaret shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotCaret has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39196"/>
			<description>Entry Type in AnnotCaret shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotCaret is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39197"/>
			<description>Entry Border with type Array in AnnotCaret shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotCaret is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39198"/>
			<description>Entry Border in AnnotCaret shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotCaret is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39199"/>
			<description>Entry StructParent in AnnotCaret shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotCaret is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39200"/>
			<description>Entry IT in AnnotCaret shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotCaret is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="11" testNumber="39201"/>
			<description>Entry AS in AnnotCaret is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotCaret is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39202"/>
			<description>Entry AS in AnnotCaret shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotCaret is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39203"/>
			<description>Entry OC with type Dictionary in AnnotCaret shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotCaret is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotCaret">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39204"/>
			<description>Entry OC in AnnotCaret shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotCaret is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="1" testNumber="39441"/>
			<description>XObjectImageSoftMask shall not contain entries except Filter, Name, Width, DecodeParms, ImageMask, Metadata, DL, Intent, Interpolate, Type, Height, Decode, Matte, Length, FFilter, FDecodeParms, ColorSpace, Subtype, BitsPerComponent, F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'Matte' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'F').length == 0</test>
			<error>
				<message>XObjectImageSoftMask contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Metadata' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'Matte' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39442"/>
			<description>Entry Filter with type Array in XObjectImageSoftMask shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectImageSoftMask is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="6" testNumber="39443"/>
			<description>Entry Filter with type Name in XObjectImageSoftMask shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "JBIG2Decode" || FilterNameValue == "DCTDecode" || FilterNameValue == "JPXDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in XObjectImageSoftMask has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39444"/>
			<description>Entry Filter in XObjectImageSoftMask shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in XObjectImageSoftMask is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="39445"/>
			<description>Entry Filter with type Array in XObjectImageSoftMask shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectImageSoftMask doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39446"/>
			<description>Entry Name in XObjectImageSoftMask shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectImageSoftMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39447"/>
			<description>Entry Width in XObjectImageSoftMask is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in XObjectImageSoftMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39448"/>
			<description>Entry Width in XObjectImageSoftMask shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in XObjectImageSoftMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="39449"/>
			<description>Entry Width with type Integer in XObjectImageSoftMask shall correspond special case: fn:Eval(fn:IsPresent(Matte , (@Width == parent::@Width)))</description>
			<test>WidthHasTypeInteger != true || ((((WidthIntegerValue == parentWidthIntegerValue)) == containsMatte))</test>
			<error>
				<message>Entry Width with type Integer in XObjectImageSoftMask doesn't correspond special case: fn:Eval(fn:IsPresent(Matte , (@Width == parent::@Width)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39450"/>
			<description>Entry DecodeParms with type Array in XObjectImageSoftMask shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImageSoftMask is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39451"/>
			<description>Entry DecodeParms with type Dictionary in XObjectImageSoftMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectImageSoftMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39452"/>
			<description>Entry DecodeParms in XObjectImageSoftMask shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectImageSoftMask is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="39453"/>
			<description>Entry DecodeParms with type Array in XObjectImageSoftMask shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImageSoftMask doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39454"/>
			<description>Entry ImageMask in XObjectImageSoftMask shall have type Boolean</description>
			<test>containsImageMask == false || ImageMaskHasTypeBoolean == true</test>
			<error>
				<message>Entry ImageMask in XObjectImageSoftMask is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="39455"/>
			<description>Entry ImageMask with type Boolean in XObjectImageSoftMask shall correspond special case: fn:Eval(@ImageMask == false)</description>
			<test>ImageMaskHasTypeBoolean != true || (ImageMaskBooleanValue == false)</test>
			<error>
				<message>Entry ImageMask with type Boolean in XObjectImageSoftMask doesn't correspond special case: fn:Eval(@ImageMask == false)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39456"/>
			<description>Entry Metadata with type Stream in XObjectImageSoftMask shall be object Metadata</description>
			<test>MetadataHasTypeStream != true || Metadata_size == 1</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImageSoftMask is not object Metadata</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="10" testNumber="39457"/>
			<description>Entry Metadata with type Stream in XObjectImageSoftMask shall be indirect</description>
			<test>MetadataHasTypeStream != true || isMetadataIndirect == true</test>
			<error>
				<message>Entry Metadata with type Stream in XObjectImageSoftMask is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39458"/>
			<description>Entry Metadata in XObjectImageSoftMask shall have type Stream</description>
			<test>containsMetadata == false || MetadataHasTypeStream == true</test>
			<error>
				<message>Entry Metadata in XObjectImageSoftMask is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39459"/>
			<description>Entry DL in XObjectImageSoftMask shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in XObjectImageSoftMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="39460"/>
			<description>Entry DL with type Integer in XObjectImageSoftMask shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in XObjectImageSoftMask doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39461"/>
			<description>Entry Intent in XObjectImageSoftMask shall have type Name</description>
			<test>containsIntent == false || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in XObjectImageSoftMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39462"/>
			<description>Entry Interpolate in XObjectImageSoftMask shall have type Boolean</description>
			<test>containsInterpolate == false || InterpolateHasTypeBoolean == true</test>
			<error>
				<message>Entry Interpolate in XObjectImageSoftMask is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="6" testNumber="39463"/>
			<description>Entry Type with type Name in XObjectImageSoftMask shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectImageSoftMask has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39464"/>
			<description>Entry Type in XObjectImageSoftMask shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectImageSoftMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39465"/>
			<description>Entry Height in XObjectImageSoftMask is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in XObjectImageSoftMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39466"/>
			<description>Entry Height in XObjectImageSoftMask shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in XObjectImageSoftMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="39467"/>
			<description>Entry Height with type Integer in XObjectImageSoftMask shall correspond special case: fn:Eval(fn:IsPresent(Matte , (@Height == parent::@Height)))</description>
			<test>HeightHasTypeInteger != true || ((((HeightIntegerValue == parentHeightIntegerValue)) == containsMatte))</test>
			<error>
				<message>Entry Height with type Integer in XObjectImageSoftMask doesn't correspond special case: fn:Eval(fn:IsPresent(Matte , (@Height == parent::@Height)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39468"/>
			<description>Entry Decode with type Array in XObjectImageSoftMask shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in XObjectImageSoftMask is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39469"/>
			<description>Entry Decode in XObjectImageSoftMask shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in XObjectImageSoftMask is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39470"/>
			<description>Entry Matte with type Array in XObjectImageSoftMask shall be object ArrayOfNumbersGeneral</description>
			<test>MatteHasTypeArray != true || Matte_size == 1</test>
			<error>
				<message>Entry Matte with type Array in XObjectImageSoftMask is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39471"/>
			<description>Entry Matte in XObjectImageSoftMask shall have type Array</description>
			<test>containsMatte == false || MatteHasTypeArray == true</test>
			<error>
				<message>Entry Matte in XObjectImageSoftMask is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="39472"/>
			<description>Entry Matte with type Array in XObjectImageSoftMask shall correspond special case: fn:Eval(fn:ArrayLength(Matte) &gt; 0)</description>
			<test>MatteHasTypeArray != true || (MatteArraySize &gt; 0)</test>
			<error>
				<message>Entry Matte with type Array in XObjectImageSoftMask doesn't correspond special case: fn:Eval(fn:ArrayLength(Matte) &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39473"/>
			<description>Entry Length in XObjectImageSoftMask is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectImageSoftMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39474"/>
			<description>Entry Length in XObjectImageSoftMask shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectImageSoftMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39475"/>
			<description>Entry FFilter with type Array in XObjectImageSoftMask shall be object ArrayOfFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImageSoftMask is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="6" testNumber="39476"/>
			<description>Entry FFilter with type Name in XObjectImageSoftMask shall have one of values: JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "CCITTFaxDecode" || FFilterNameValue == "JBIG2Decode" || FFilterNameValue == "DCTDecode" || FFilterNameValue == "JPXDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in XObjectImageSoftMask has incorrect value %2 instead of JPXDecode, ASCIIHexDecode, LZWDecode, RunLengthDecode, JBIG2Decode, Crypt, ASCII85Decode, CCITTFaxDecode, DCTDecode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39477"/>
			<description>Entry FFilter in XObjectImageSoftMask shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in XObjectImageSoftMask is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="39478"/>
			<description>Entry FFilter with type Array in XObjectImageSoftMask shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in XObjectImageSoftMask doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39479"/>
			<description>Entry FDecodeParms with type Array in XObjectImageSoftMask shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImageSoftMask is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39480"/>
			<description>Entry FDecodeParms with type Dictionary in XObjectImageSoftMask shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in XObjectImageSoftMask is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCCITTFaxDecode, FilterJBIG2Decode, FilterDCTDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39481"/>
			<description>Entry FDecodeParms in XObjectImageSoftMask shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in XObjectImageSoftMask is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="9" testNumber="39482"/>
			<description>Entry FDecodeParms with type Array in XObjectImageSoftMask shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in XObjectImageSoftMask doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39483"/>
			<description>Entry ColorSpace in XObjectImageSoftMask is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in XObjectImageSoftMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="6" testNumber="39484"/>
			<description>Entry ColorSpace with type Name in XObjectImageSoftMask shall have value DeviceGray</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImageSoftMask has incorrect value %2 instead of DeviceGray</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39485"/>
			<description>Entry ColorSpace in XObjectImageSoftMask shall have type Name</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true</test>
			<error>
				<message>Entry ColorSpace in XObjectImageSoftMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39486"/>
			<description>Entry Subtype in XObjectImageSoftMask is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectImageSoftMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="6" testNumber="39487"/>
			<description>Entry Subtype with type Name in XObjectImageSoftMask shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectImageSoftMask has incorrect value %2 instead of Image</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39488"/>
			<description>Entry Subtype in XObjectImageSoftMask shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectImageSoftMask is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="11" testNumber="39489"/>
			<description>Entry BitsPerComponent in XObjectImageSoftMask is required, when fn:IsRequired(fn:Not(fn:Contains(@Filter , JPXDecode) || (@ImageMask == true)))</description>
			<test>(containsBitsPerComponent == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageSoftMask is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="15" testNumber="39490"/>
			<description>Entry BitsPerComponent in XObjectImageSoftMask shall have Integer value 1, if this object corresponds to condition (fn:Contains(@Filter , CCITTFaxDecode) || fn:Contains(@Filter , JBIG2Decode))</description>
			<test>((((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "CCITTFaxDecode").length &gt; 0) || (FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JBIG2Decode").length &gt; 0))) == false || BitsPerComponentIntegerValue == 1)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageSoftMask doesn't have value 1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="15" testNumber="39491"/>
			<description>Entry BitsPerComponent in XObjectImageSoftMask shall have Integer value 8, if this object corresponds to condition (fn:Contains(@Filter , RunLengthDecode) || fn:Contains(@Filter , DCTDecode))</description>
			<test>((((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "RunLengthDecode").length &gt; 0) || (FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "DCTDecode").length &gt; 0))) == false || BitsPerComponentIntegerValue == 8)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageSoftMask doesn't have value 8</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="13" testNumber="39492"/>
			<description>Entry BitsPerComponent with type Integer in XObjectImageSoftMask shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in XObjectImageSoftMask has incorrect value %2 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39493"/>
			<description>Entry BitsPerComponent in XObjectImageSoftMask shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImageSoftMask is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39494"/>
			<description>Entry F with type Dictionary in XObjectImageSoftMask shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectImageSoftMask is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImageSoftMask">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39495"/>
			<description>Entry F in XObjectImageSoftMask shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectImageSoftMask is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="1" testNumber="39691"/>
			<description>CIDFontDescriptorMetrics shall not contain entries except FontName, Type, XHeight, ItalicAngle, MaxWidth, Descent, FontBBox, MissingWidth, Ascent, StemH, Flags, Leading, StemV, CharSet, CapHeight, AvgWidth</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FontName' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'AvgWidth').length == 0</test>
			<error>
				<message>CIDFontDescriptorMetrics contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FontName' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'AvgWidth').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39692"/>
			<description>Entry FontName in CIDFontDescriptorMetrics is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39693"/>
			<description>Entry FontName in CIDFontDescriptorMetrics shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in CIDFontDescriptorMetrics is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39694"/>
			<description>Entry Type in CIDFontDescriptorMetrics is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="6" testNumber="39695"/>
			<description>Entry Type with type Name in CIDFontDescriptorMetrics shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in CIDFontDescriptorMetrics has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39696"/>
			<description>Entry Type in CIDFontDescriptorMetrics shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CIDFontDescriptorMetrics is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39697"/>
			<description>Entry XHeight in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39698"/>
			<description>Entry ItalicAngle in CIDFontDescriptorMetrics is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39699"/>
			<description>Entry ItalicAngle in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39700"/>
			<description>Entry MaxWidth in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39701"/>
			<description>Entry Descent in CIDFontDescriptorMetrics is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="14" testNumber="39702"/>
			<description>Entry Descent with type Number in CIDFontDescriptorMetrics shall correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in CIDFontDescriptorMetrics doesn't correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39703"/>
			<description>Entry Descent in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39704"/>
			<description>Entry FontBBox in CIDFontDescriptorMetrics is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39705"/>
			<description>Entry FontBBox in CIDFontDescriptorMetrics shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in CIDFontDescriptorMetrics is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39706"/>
			<description>Entry MissingWidth in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39707"/>
			<description>Entry Ascent in CIDFontDescriptorMetrics is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39708"/>
			<description>Entry Ascent in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39709"/>
			<description>Entry StemH in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39710"/>
			<description>Entry Flags in CIDFontDescriptorMetrics is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39711"/>
			<description>Entry Flags in CIDFontDescriptorMetrics shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in CIDFontDescriptorMetrics is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="9" testNumber="39712"/>
			<description>Entry Flags with type Bitmask in CIDFontDescriptorMetrics shall correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in CIDFontDescriptorMetrics doesn't correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39713"/>
			<description>Entry Leading in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39714"/>
			<description>Entry StemV in CIDFontDescriptorMetrics is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in CIDFontDescriptorMetrics is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39715"/>
			<description>Entry StemV in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39716"/>
			<description>Entry CharSet in CIDFontDescriptorMetrics shall have type String</description>
			<test>containsCharSet == false || CharSetHasTypeString == true</test>
			<error>
				<message>Entry CharSet in CIDFontDescriptorMetrics is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39717"/>
			<description>Entry CapHeight in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACIDFontDescriptorMetrics">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39718"/>
			<description>Entry AvgWidth in CIDFontDescriptorMetrics shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in CIDFontDescriptorMetrics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="1" testNumber="39786"/>
			<description>SlideShow shall not contain entries except Type, StartResource, Subtype, Resources</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'StartResource' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Resources').length == 0</test>
			<error>
				<message>SlideShow contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'StartResource' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Resources').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39787"/>
			<description>Entry Type in SlideShow is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in SlideShow is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="6" testNumber="39788"/>
			<description>Entry Type with type Name in SlideShow shall have value SlideShow</description>
			<test>TypeHasTypeName != true || TypeNameValue == "SlideShow"</test>
			<error>
				<message>Entry Type with type Name in SlideShow has incorrect value %2 instead of SlideShow</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39789"/>
			<description>Entry Type in SlideShow shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in SlideShow is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39790"/>
			<description>Entry StartResource in SlideShow is required</description>
			<test>containsStartResource == true</test>
			<error>
				<message>Entry StartResource in SlideShow is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39791"/>
			<description>Entry StartResource in SlideShow shall have type StringByte</description>
			<test>containsStartResource == false || StartResourceHasTypeStringByte == true</test>
			<error>
				<message>Entry StartResource in SlideShow is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="9" testNumber="39792"/>
			<description>Entry StartResource with type StringByte in SlideShow shall correspond special case: fn:InNameTree(Resources)</description>
			<test>StartResourceHasTypeStringByte != true || ((nameTreeResourcesContainsStartResourceString == true))</test>
			<error>
				<message>Entry StartResource with type StringByte in SlideShow doesn't correspond special case: fn:InNameTree(Resources)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39793"/>
			<description>Entry Subtype in SlideShow is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in SlideShow is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="6" testNumber="39794"/>
			<description>Entry Subtype with type Name in SlideShow shall have value Embedded</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Embedded"</test>
			<error>
				<message>Entry Subtype with type Name in SlideShow has incorrect value %2 instead of Embedded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39795"/>
			<description>Entry Subtype in SlideShow shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in SlideShow is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39796"/>
			<description>Entry Resources with type NameTree in SlideShow shall be object SlideShowNameTreeResources</description>
			<test>ResourcesHasTypeNameTree != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type NameTree in SlideShow is not object SlideShowNameTreeResources</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39797"/>
			<description>Entry Resources in SlideShow is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in SlideShow is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASlideShow">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39798"/>
			<description>Entry Resources in SlideShow shall have type NameTree</description>
			<test>containsResources == false || ResourcesHasTypeNameTree == true</test>
			<error>
				<message>Entry Resources in SlideShow is not of type NameTree</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="1" testNumber="39932"/>
			<description>Bead shall not contain entries except R, T, N, Type, P, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'P' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>Bead contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'P' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39933"/>
			<description>Entry R in Bead is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39934"/>
			<description>Entry R in Bead shall have type Rectangle</description>
			<test>containsR == false || RHasTypeRectangle == true</test>
			<error>
				<message>Entry R in Bead is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39935"/>
			<description>Entry T with type Dictionary in Bead shall be object Thread</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in Bead is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="10" testNumber="39936"/>
			<description>Entry T with type Dictionary in Bead shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39937"/>
			<description>Entry T in Bead shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39938"/>
			<description>Entry N with type Dictionary in Bead shall be one of objects BeadFirst, Bead</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in Bead is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39939"/>
			<description>Entry N in Bead is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="10" testNumber="39940"/>
			<description>Entry N with type Dictionary in Bead shall be indirect</description>
			<test>NHasTypeDictionary != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39941"/>
			<description>Entry N in Bead shall have type Dictionary</description>
			<test>containsN == false || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="6" testNumber="39942"/>
			<description>Entry Type with type Name in Bead shall have value Bead</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Bead"</test>
			<error>
				<message>Entry Type with type Name in Bead has incorrect value %2 instead of Bead</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39943"/>
			<description>Entry Type in Bead shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Bead is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39944"/>
			<description>Entry P with type Dictionary in Bead shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in Bead is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39945"/>
			<description>Entry P in Bead is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="10" testNumber="39946"/>
			<description>Entry P with type Dictionary in Bead shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39947"/>
			<description>Entry P in Bead shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="17" testNumber="39948"/>
			<description>Entry V with type Dictionary in Bead shall be one of objects BeadFirst, Bead</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in Bead is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="7" testNumber="39949"/>
			<description>Entry V in Bead is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="10" testNumber="39950"/>
			<description>Entry V with type Dictionary in Bead shall be indirect</description>
			<test>VHasTypeDictionary != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_7" clause="8" testNumber="39951"/>
			<description>Entry V in Bead shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_7" clause="1" testNumber="40010"/>
			<description>ActionNOP shall not contain entries except Type, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>ActionNOP contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_7" clause="5" testNumber="40011"/>
			<description>Entry Type in ActionNOP is deprecated since PDF 1.2</description>
			<test>containsType == false</test>
			<error>
				<message>Entry Type in ActionNOP is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40012"/>
			<description>Entry Type with type Name in ActionNOP shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionNOP has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40013"/>
			<description>Entry Type in ActionNOP shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionNOP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40014"/>
			<description>Entry S in ActionNOP is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionNOP is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_7" clause="5" testNumber="40015"/>
			<description>Entry S in ActionNOP is deprecated since PDF 1.2</description>
			<test>containsS == false</test>
			<error>
				<message>Entry S in ActionNOP is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40016"/>
			<description>Entry S with type Name in ActionNOP shall have value NOP</description>
			<test>SHasTypeName != true || SNameValue == "NOP"</test>
			<error>
				<message>Entry S with type Name in ActionNOP has incorrect value %2 instead of NOP</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionNOP">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40017"/>
			<description>Entry S in ActionNOP shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionNOP is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="1" testNumber="40059"/>
			<description>AddActionCatalog shall not contain entries except WP, DC, WS, DS, DP</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'WP' &amp;&amp; elem != 'DC' &amp;&amp; elem != 'WS' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DP').length == 0</test>
			<error>
				<message>AddActionCatalog contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'WP' &amp;&amp; elem != 'DC' &amp;&amp; elem != 'WS' &amp;&amp; elem != 'DS' &amp;&amp; elem != 'DP').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40060"/>
			<description>Entry WP with type Dictionary in AddActionCatalog shall be object ActionECMAScript</description>
			<test>WPHasTypeDictionary != true || WP_size == 1</test>
			<error>
				<message>Entry WP with type Dictionary in AddActionCatalog is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40061"/>
			<description>Entry WP in AddActionCatalog shall have type Dictionary</description>
			<test>containsWP == false || WPHasTypeDictionary == true</test>
			<error>
				<message>Entry WP in AddActionCatalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40062"/>
			<description>Entry DC with type Dictionary in AddActionCatalog shall be object ActionECMAScript</description>
			<test>DCHasTypeDictionary != true || DC_size == 1</test>
			<error>
				<message>Entry DC with type Dictionary in AddActionCatalog is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40063"/>
			<description>Entry DC in AddActionCatalog shall have type Dictionary</description>
			<test>containsDC == false || DCHasTypeDictionary == true</test>
			<error>
				<message>Entry DC in AddActionCatalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40064"/>
			<description>Entry WS with type Dictionary in AddActionCatalog shall be object ActionECMAScript</description>
			<test>WSHasTypeDictionary != true || WS_size == 1</test>
			<error>
				<message>Entry WS with type Dictionary in AddActionCatalog is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40065"/>
			<description>Entry WS in AddActionCatalog shall have type Dictionary</description>
			<test>containsWS == false || WSHasTypeDictionary == true</test>
			<error>
				<message>Entry WS in AddActionCatalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40066"/>
			<description>Entry DS with type Dictionary in AddActionCatalog shall be object ActionECMAScript</description>
			<test>DSHasTypeDictionary != true || DS_size == 1</test>
			<error>
				<message>Entry DS with type Dictionary in AddActionCatalog is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40067"/>
			<description>Entry DS in AddActionCatalog shall have type Dictionary</description>
			<test>containsDS == false || DSHasTypeDictionary == true</test>
			<error>
				<message>Entry DS in AddActionCatalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40068"/>
			<description>Entry DP with type Dictionary in AddActionCatalog shall be object ActionECMAScript</description>
			<test>DPHasTypeDictionary != true || DP_size == 1</test>
			<error>
				<message>Entry DP with type Dictionary in AddActionCatalog is not object ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAddActionCatalog">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40069"/>
			<description>Entry DP in AddActionCatalog shall have type Dictionary</description>
			<test>containsDP == false || DPHasTypeDictionary == true</test>
			<error>
				<message>Entry DP in AddActionCatalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="1" testNumber="40191"/>
			<description>AnnotPolygon shall not contain entries except C, Border, BE, LE, F, CA, Contents, BS, Measure, OC, IC, Subj, Subtype, RT, Vertices, AP, IRT, Type, StructParent, CreationDate, ExData, Rect, IT, M, NM, Popup, P, RC, AS, T</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'F' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Vertices' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'P' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'T').length == 0</test>
			<error>
				<message>AnnotPolygon contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'C' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'BE' &amp;&amp; elem != 'LE' &amp;&amp; elem != 'F' &amp;&amp; elem != 'CA' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'BS' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'OC' &amp;&amp; elem != 'IC' &amp;&amp; elem != 'Subj' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'RT' &amp;&amp; elem != 'Vertices' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'IRT' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'StructParent' &amp;&amp; elem != 'CreationDate' &amp;&amp; elem != 'ExData' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'IT' &amp;&amp; elem != 'M' &amp;&amp; elem != 'NM' &amp;&amp; elem != 'Popup' &amp;&amp; elem != 'P' &amp;&amp; elem != 'RC' &amp;&amp; elem != 'AS' &amp;&amp; elem != 'T').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40192"/>
			<description>Entry C with type Array in AnnotPolygon shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotPolygon is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40193"/>
			<description>Entry C in AnnotPolygon shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotPolygon is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40194"/>
			<description>Entry Border with type Array in AnnotPolygon shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotPolygon is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40195"/>
			<description>Entry Border in AnnotPolygon shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotPolygon is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40196"/>
			<description>Entry BE with type Dictionary in AnnotPolygon shall be object BorderEffect</description>
			<test>BEHasTypeDictionary != true || BE_size == 1</test>
			<error>
				<message>Entry BE with type Dictionary in AnnotPolygon is not object BorderEffect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40197"/>
			<description>Entry BE in AnnotPolygon shall have type Dictionary</description>
			<test>containsBE == false || BEHasTypeDictionary == true</test>
			<error>
				<message>Entry BE in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40198"/>
			<description>Entry LE with type Array in AnnotPolygon shall be object ArrayOf_2LineEndingsNames</description>
			<test>LEHasTypeArray != true || LE_size == 1</test>
			<error>
				<message>Entry LE with type Array in AnnotPolygon is not object ArrayOf_2LineEndingsNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40199"/>
			<description>Entry LE in AnnotPolygon shall have type Array</description>
			<test>containsLE == false || LEHasTypeArray == true</test>
			<error>
				<message>Entry LE in AnnotPolygon is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40200"/>
			<description>Entry F in AnnotPolygon shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotPolygon is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="9" testNumber="40201"/>
			<description>Entry F with type Bitmask in AnnotPolygon shall correspond special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (true &amp;&amp; ((FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry F with type Bitmask in AnnotPolygon doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.7 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="14" testNumber="40202"/>
			<description>Entry CA with type Number in AnnotPolygon shall correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</description>
			<test>CAHasTypeNumber != true || (CANumberValue &gt;= 0.0) &amp;&amp; (CANumberValue &lt;= 1.0)</test>
			<error>
				<message>Entry CA with type Number in AnnotPolygon doesn't correspond possible value predicate: fn:Eval((@CA &gt;= 0.0) &amp;&amp; (@CA &lt;= 1.0))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40203"/>
			<description>Entry CA in AnnotPolygon shall have type Number</description>
			<test>containsCA == false || CAHasTypeNumber == true</test>
			<error>
				<message>Entry CA in AnnotPolygon is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40204"/>
			<description>Entry Contents in AnnotPolygon shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotPolygon is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40205"/>
			<description>Entry BS with type Dictionary in AnnotPolygon shall be object BorderStyle</description>
			<test>BSHasTypeDictionary != true || BS_size == 1</test>
			<error>
				<message>Entry BS with type Dictionary in AnnotPolygon is not object BorderStyle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40206"/>
			<description>Entry BS in AnnotPolygon shall have type Dictionary</description>
			<test>containsBS == false || BSHasTypeDictionary == true</test>
			<error>
				<message>Entry BS in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40207"/>
			<description>Entry Measure with type Dictionary in AnnotPolygon shall be object MeasureRL</description>
			<test>MeasureHasTypeDictionary != true || Measure_size == 1</test>
			<error>
				<message>Entry Measure with type Dictionary in AnnotPolygon is not object MeasureRL</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40208"/>
			<description>Entry Measure in AnnotPolygon shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40209"/>
			<description>Entry OC with type Dictionary in AnnotPolygon shall be one of objects OptContentGroup, OptContentMembership</description>
			<test>OCHasTypeDictionary != true || OC_size == 1</test>
			<error>
				<message>Entry OC with type Dictionary in AnnotPolygon is not one of objects OptContentGroup, OptContentMembership</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40210"/>
			<description>Entry OC in AnnotPolygon shall have type Dictionary</description>
			<test>containsOC == false || OCHasTypeDictionary == true</test>
			<error>
				<message>Entry OC in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40211"/>
			<description>Entry IC with type Array in AnnotPolygon shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>ICHasTypeArray != true || IC_size == 1</test>
			<error>
				<message>Entry IC with type Array in AnnotPolygon is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40212"/>
			<description>Entry IC in AnnotPolygon shall have type Array</description>
			<test>containsIC == false || ICHasTypeArray == true</test>
			<error>
				<message>Entry IC in AnnotPolygon is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40213"/>
			<description>Entry Subj in AnnotPolygon shall have type StringText</description>
			<test>containsSubj == false || SubjHasTypeStringText == true</test>
			<error>
				<message>Entry Subj in AnnotPolygon is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40214"/>
			<description>Entry Subtype in AnnotPolygon is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotPolygon is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40215"/>
			<description>Entry Subtype with type Name in AnnotPolygon shall have value Polygon</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Polygon"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotPolygon has incorrect value %2 instead of Polygon</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40216"/>
			<description>Entry Subtype in AnnotPolygon shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotPolygon is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40217"/>
			<description>Entry RT with type Name in AnnotPolygon shall have one of values: Group, R</description>
			<test>RTHasTypeName != true || RTNameValue == "R" || RTNameValue == "Group"</test>
			<error>
				<message>Entry RT with type Name in AnnotPolygon has incorrect value %2 instead of Group, R</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RTNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40218"/>
			<description>Entry RT in AnnotPolygon shall have type Name</description>
			<test>containsRT == false || RTHasTypeName == true</test>
			<error>
				<message>Entry RT in AnnotPolygon is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40219"/>
			<description>Entry Vertices with type Array in AnnotPolygon shall be object ArrayOfNumbersGeneral</description>
			<test>VerticesHasTypeArray != true || Vertices_size == 1</test>
			<error>
				<message>Entry Vertices with type Array in AnnotPolygon is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="11" testNumber="40220"/>
			<description>Entry Vertices in AnnotPolygon is required, when fn:IsRequired(fn:Not(fn:IsPresent(Path)))</description>
			<test>(containsVertices == true || (((containsPath == true)) != true) == false)</test>
			<error>
				<message>Entry Vertices in AnnotPolygon is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40221"/>
			<description>Entry Vertices in AnnotPolygon shall have type Array</description>
			<test>containsVertices == false || VerticesHasTypeArray == true</test>
			<error>
				<message>Entry Vertices in AnnotPolygon is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40222"/>
			<description>Entry AP with type Dictionary in AnnotPolygon shall be object Appearance</description>
			<test>APHasTypeDictionary != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Dictionary in AnnotPolygon is not object Appearance</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="11" testNumber="40223"/>
			<description>Entry AP in AnnotPolygon is required, when fn:IsRequired(fn:SinceVersion(2.0 , (fn:RectWidth(Rect) &gt; 0) || (fn:RectHeight(Rect) &gt; 0)))</description>
			<test>(containsAP == true || (true) == false)</test>
			<error>
				<message>Entry AP in AnnotPolygon is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40224"/>
			<description>Entry AP in AnnotPolygon shall have type Dictionary</description>
			<test>containsAP == false || APHasTypeDictionary == true</test>
			<error>
				<message>Entry AP in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40225"/>
			<description>Entry IRT with type Dictionary in AnnotPolygon shall be one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</description>
			<test>IRTHasTypeDictionary != true || IRT_size == 1</test>
			<error>
				<message>Entry IRT with type Dictionary in AnnotPolygon is not one of objects AnnotText, AnnotLink, AnnotFreeText, AnnotLine, AnnotSquare, AnnotCircle, AnnotPolygon, AnnotHighlight, AnnotUnderline, AnnotSquiggly, AnnotStrikeOut, AnnotCaret, AnnotStamp, AnnotInk, AnnotPopup, AnnotFileAttachment, AnnotSound, AnnotMovie, AnnotScreen, AnnotWidget, AnnotPrinterMark, AnnotWatermark, Annot3D, AnnotRedact</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="11" testNumber="40226"/>
			<description>Entry IRT in AnnotPolygon is required, when fn:IsRequired(fn:IsPresent(RT))</description>
			<test>(containsIRT == true || ((containsRT == true)) == false)</test>
			<error>
				<message>Entry IRT in AnnotPolygon is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40227"/>
			<description>Entry IRT in AnnotPolygon shall have type Dictionary</description>
			<test>containsIRT == false || IRTHasTypeDictionary == true</test>
			<error>
				<message>Entry IRT in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40228"/>
			<description>Entry Type with type Name in AnnotPolygon shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotPolygon has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40229"/>
			<description>Entry Type in AnnotPolygon shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotPolygon is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40230"/>
			<description>Entry StructParent in AnnotPolygon shall have type Integer</description>
			<test>containsStructParent == false || StructParentHasTypeInteger == true</test>
			<error>
				<message>Entry StructParent in AnnotPolygon is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40231"/>
			<description>Entry CreationDate in AnnotPolygon shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in AnnotPolygon is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40232"/>
			<description>Entry ExData with type Dictionary in AnnotPolygon shall be one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</description>
			<test>ExDataHasTypeDictionary != true || ExData_size == 1</test>
			<error>
				<message>Entry ExData with type Dictionary in AnnotPolygon is not one of objects ExData3DMarkup, fn:Extension(ADBE_Extn3 , ExDataMarkupGeo)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40233"/>
			<description>Entry ExData in AnnotPolygon shall have type Dictionary</description>
			<test>containsExData == false || ExDataHasTypeDictionary == true</test>
			<error>
				<message>Entry ExData in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40234"/>
			<description>Entry Rect in AnnotPolygon is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotPolygon is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40235"/>
			<description>Entry Rect in AnnotPolygon shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotPolygon is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40236"/>
			<description>Entry IT with type Name in AnnotPolygon shall have one of values: PolygonDimension, PolygonCloud, PolyLineDimension</description>
			<test>ITHasTypeName != true || ITNameValue == "PolygonCloud" || ITNameValue == "PolyLineDimension" || ITNameValue == "PolygonDimension"</test>
			<error>
				<message>Entry IT with type Name in AnnotPolygon has incorrect value %2 instead of PolygonDimension, PolygonCloud, PolyLineDimension</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ITNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40237"/>
			<description>Entry IT in AnnotPolygon shall have type Name</description>
			<test>containsIT == false || ITHasTypeName == true</test>
			<error>
				<message>Entry IT in AnnotPolygon is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40238"/>
			<description>Entry M in AnnotPolygon shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotPolygon is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40239"/>
			<description>Entry NM in AnnotPolygon shall have type StringText</description>
			<test>containsNM == false || NMHasTypeStringText == true</test>
			<error>
				<message>Entry NM in AnnotPolygon is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40240"/>
			<description>Entry Popup with type Dictionary in AnnotPolygon shall be object AnnotPopup</description>
			<test>PopupHasTypeDictionary != true || Popup_size == 1</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotPolygon is not object AnnotPopup</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="10" testNumber="40241"/>
			<description>Entry Popup with type Dictionary in AnnotPolygon shall be indirect</description>
			<test>PopupHasTypeDictionary != true || isPopupIndirect == true</test>
			<error>
				<message>Entry Popup with type Dictionary in AnnotPolygon is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40242"/>
			<description>Entry Popup in AnnotPolygon shall have type Dictionary</description>
			<test>containsPopup == false || PopupHasTypeDictionary == true</test>
			<error>
				<message>Entry Popup in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40243"/>
			<description>Entry P with type Dictionary in AnnotPolygon shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPolygon is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="10" testNumber="40244"/>
			<description>Entry P with type Dictionary in AnnotPolygon shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in AnnotPolygon is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40245"/>
			<description>Entry P in AnnotPolygon shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in AnnotPolygon is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40246"/>
			<description>Entry RC with type Stream in AnnotPolygon shall be object Stream</description>
			<test>RCHasTypeStream != true || RC_size == 1</test>
			<error>
				<message>Entry RC with type Stream in AnnotPolygon is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="10" testNumber="40247"/>
			<description>Entry RC with type Stream in AnnotPolygon shall be indirect</description>
			<test>RCHasTypeStream != true || isRCIndirect == true</test>
			<error>
				<message>Entry RC with type Stream in AnnotPolygon is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40248"/>
			<description>Entry RC in AnnotPolygon shall have one of types: StringText, Stream</description>
			<test>containsRC == false || RCHasTypeStringText == true || RCHasTypeStream == true</test>
			<error>
				<message>Entry RC in AnnotPolygon is not one of types: StringText, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="11" testNumber="40249"/>
			<description>Entry AS in AnnotPolygon is required, when fn:IsRequired(fn:IsPresent(AP::N::*) || fn:IsPresent(AP::R::*) || fn:IsPresent(AP::D::*))</description>
			<test>(containsAS == true || ((containsAPNAny == true) || (containsAPRAny == true) || (containsAPDAny == true)) == false)</test>
			<error>
				<message>Entry AS in AnnotPolygon is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40250"/>
			<description>Entry AS in AnnotPolygon shall have type Name</description>
			<test>containsAS == false || ASHasTypeName == true</test>
			<error>
				<message>Entry AS in AnnotPolygon is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotPolygon">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40251"/>
			<description>Entry T in AnnotPolygon shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotPolygon is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStyleDict">
			<id specification="ISO_32000_1_7" clause="1" testNumber="40340"/>
			<description>StyleDict shall not contain entries except Panose</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Panose').length == 0</test>
			<error>
				<message>StyleDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Panose').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStyleDict">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40341"/>
			<description>Entry Panose in StyleDict shall have type StringByte</description>
			<test>containsPanose == false || PanoseHasTypeStringByte == true</test>
			<error>
				<message>Entry Panose in StyleDict is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStyleDict">
			<id specification="ISO_32000_1_7" clause="9" testNumber="40342"/>
			<description>Entry Panose with type StringByte in StyleDict shall correspond special case: fn:Eval(fn:StringLength(Panose) == 12)</description>
			<test>PanoseHasTypeStringByte != true || (PanoseStringSize == 12)</test>
			<error>
				<message>Entry Panose with type StringByte in StyleDict doesn't correspond special case: fn:Eval(fn:StringLength(Panose) == 12)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40358"/>
			<description>Entry with type Dictionary in ArrayOfStructElem shall be object StructElem</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfStructElem is not object StructElem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemEntry">
			<id specification="ISO_32000_1_7" clause="10" testNumber="40359"/>
			<description>Entry with type Dictionary in ArrayOfStructElem shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfStructElem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStructElemEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40360"/>
			<description>Entry in ArrayOfStructElem shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfStructElem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_7" clause="2" testNumber="40406"/>
			<description>Dest0Array shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>Dest0Array contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40407"/>
			<description>Entry 0 with type Dictionary in Dest0Array shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in Dest0Array is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_7" clause="14" testNumber="40408"/>
			<description>Entry 0 with type Number in Dest0Array shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest0Array doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40409"/>
			<description>Entry 0 in Dest0Array shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in Dest0Array is not one of types: Dictionary, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40410"/>
			<description>Entry 1 with type Name in Dest0Array shall have one of values: Fit, FitB</description>
			<test>entry1HasTypeName != true || entry1NameValue == "Fit" || entry1NameValue == "FitB"</test>
			<error>
				<message>Entry 1 with type Name in Dest0Array has incorrect value %2 instead of Fit, FitB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40411"/>
			<description>Entry 1 in Dest0Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest0Array is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavigatorNameTreeResources">
			<id specification="ISO_32000_1_7" clause="18" testNumber="40418"/>
			<description>Entry * in NavigatorNameTreeResources shall be object NavigatorNameTreeResourcesEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in NavigatorNameTreeResources is not object NavigatorNameTreeResourcesEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStringsByteEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40424"/>
			<description>Entry in ArrayOfStringsByte shall have type StringByte</description>
			<test>HasTypeStringByte == true</test>
			<error>
				<message>Entry %1 in ArrayOfStringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="1" testNumber="40426"/>
			<description>3DMeasurePD3 shall not contain entries except D1, TP, Subtype, V, Type, U, N1, TRL, TS, C, TY, A1, AP, UT, A2, S, P, N2</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D1' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'C' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'A1' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'S' &amp;&amp; elem != 'P' &amp;&amp; elem != 'N2').length == 0</test>
			<error>
				<message>3DMeasurePD3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D1' &amp;&amp; elem != 'TP' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'U' &amp;&amp; elem != 'N1' &amp;&amp; elem != 'TRL' &amp;&amp; elem != 'TS' &amp;&amp; elem != 'C' &amp;&amp; elem != 'TY' &amp;&amp; elem != 'A1' &amp;&amp; elem != 'AP' &amp;&amp; elem != 'UT' &amp;&amp; elem != 'A2' &amp;&amp; elem != 'S' &amp;&amp; elem != 'P' &amp;&amp; elem != 'N2').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40427"/>
			<description>Entry D1 with type Array in 3DMeasurePD3 shall be object ArrayOf_3Numbers</description>
			<test>D1HasTypeArray != true || D1_size == 1</test>
			<error>
				<message>Entry D1 with type Array in 3DMeasurePD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40428"/>
			<description>Entry D1 in 3DMeasurePD3 is required</description>
			<test>containsD1 == true</test>
			<error>
				<message>Entry D1 in 3DMeasurePD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40429"/>
			<description>Entry D1 in 3DMeasurePD3 shall have type Array</description>
			<test>containsD1 == false || D1HasTypeArray == true</test>
			<error>
				<message>Entry D1 in 3DMeasurePD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40430"/>
			<description>Entry TP with type Array in 3DMeasurePD3 shall be object ArrayOf_3Numbers</description>
			<test>TPHasTypeArray != true || TP_size == 1</test>
			<error>
				<message>Entry TP with type Array in 3DMeasurePD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40431"/>
			<description>Entry TP in 3DMeasurePD3 is required</description>
			<test>containsTP == true</test>
			<error>
				<message>Entry TP in 3DMeasurePD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40432"/>
			<description>Entry TP in 3DMeasurePD3 shall have type Array</description>
			<test>containsTP == false || TPHasTypeArray == true</test>
			<error>
				<message>Entry TP in 3DMeasurePD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40433"/>
			<description>Entry Subtype in 3DMeasurePD3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in 3DMeasurePD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40434"/>
			<description>Entry Subtype with type Name in 3DMeasurePD3 shall have value PD3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PD3"</test>
			<error>
				<message>Entry Subtype with type Name in 3DMeasurePD3 has incorrect value %2 instead of PD3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40435"/>
			<description>Entry Subtype in 3DMeasurePD3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in 3DMeasurePD3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40436"/>
			<description>Entry V in 3DMeasurePD3 is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in 3DMeasurePD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40437"/>
			<description>Entry V in 3DMeasurePD3 shall have type Number</description>
			<test>containsV == false || VHasTypeNumber == true</test>
			<error>
				<message>Entry V in 3DMeasurePD3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40438"/>
			<description>Entry Type with type Name in 3DMeasurePD3 shall have value 3DMeasure</description>
			<test>TypeHasTypeName != true || TypeNameValue == "3DMeasure"</test>
			<error>
				<message>Entry Type with type Name in 3DMeasurePD3 has incorrect value %2 instead of 3DMeasure</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40439"/>
			<description>Entry Type in 3DMeasurePD3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in 3DMeasurePD3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40440"/>
			<description>Entry U in 3DMeasurePD3 is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in 3DMeasurePD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40441"/>
			<description>Entry U in 3DMeasurePD3 shall have type StringText</description>
			<test>containsU == false || UHasTypeStringText == true</test>
			<error>
				<message>Entry U in 3DMeasurePD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40442"/>
			<description>Entry N1 in 3DMeasurePD3 shall have type StringText</description>
			<test>containsN1 == false || N1HasTypeStringText == true</test>
			<error>
				<message>Entry N1 in 3DMeasurePD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40443"/>
			<description>Entry TRL in 3DMeasurePD3 shall have type StringText</description>
			<test>containsTRL == false || TRLHasTypeStringText == true</test>
			<error>
				<message>Entry TRL in 3DMeasurePD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40444"/>
			<description>Entry TS in 3DMeasurePD3 shall have type Number</description>
			<test>containsTS == false || TSHasTypeNumber == true</test>
			<error>
				<message>Entry TS in 3DMeasurePD3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40445"/>
			<description>Entry C with type Array in 3DMeasurePD3 shall be object ArrayOf_3RGBNumbers</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in 3DMeasurePD3 is not object ArrayOf_3RGBNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40446"/>
			<description>Entry C in 3DMeasurePD3 shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in 3DMeasurePD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40447"/>
			<description>Entry TY with type Array in 3DMeasurePD3 shall be object ArrayOf_3Numbers</description>
			<test>TYHasTypeArray != true || TY_size == 1</test>
			<error>
				<message>Entry TY with type Array in 3DMeasurePD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40448"/>
			<description>Entry TY in 3DMeasurePD3 is required</description>
			<test>containsTY == true</test>
			<error>
				<message>Entry TY in 3DMeasurePD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40449"/>
			<description>Entry TY in 3DMeasurePD3 shall have type Array</description>
			<test>containsTY == false || TYHasTypeArray == true</test>
			<error>
				<message>Entry TY in 3DMeasurePD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40450"/>
			<description>Entry A1 with type Array in 3DMeasurePD3 shall be object ArrayOf_3Numbers</description>
			<test>A1HasTypeArray != true || A1_size == 1</test>
			<error>
				<message>Entry A1 with type Array in 3DMeasurePD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40451"/>
			<description>Entry A1 in 3DMeasurePD3 is required</description>
			<test>containsA1 == true</test>
			<error>
				<message>Entry A1 in 3DMeasurePD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40452"/>
			<description>Entry A1 in 3DMeasurePD3 shall have type Array</description>
			<test>containsA1 == false || A1HasTypeArray == true</test>
			<error>
				<message>Entry A1 in 3DMeasurePD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40453"/>
			<description>Entry AP with type Array in 3DMeasurePD3 shall be object ArrayOf_3Numbers</description>
			<test>APHasTypeArray != true || AP_size == 1</test>
			<error>
				<message>Entry AP with type Array in 3DMeasurePD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40454"/>
			<description>Entry AP in 3DMeasurePD3 is required</description>
			<test>containsAP == true</test>
			<error>
				<message>Entry AP in 3DMeasurePD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40455"/>
			<description>Entry AP in 3DMeasurePD3 shall have type Array</description>
			<test>containsAP == false || APHasTypeArray == true</test>
			<error>
				<message>Entry AP in 3DMeasurePD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40456"/>
			<description>Entry UT in 3DMeasurePD3 shall have type StringText</description>
			<test>containsUT == false || UTHasTypeStringText == true</test>
			<error>
				<message>Entry UT in 3DMeasurePD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40457"/>
			<description>Entry A2 with type Array in 3DMeasurePD3 shall be object ArrayOf_3Numbers</description>
			<test>A2HasTypeArray != true || A2_size == 1</test>
			<error>
				<message>Entry A2 with type Array in 3DMeasurePD3 is not object ArrayOf_3Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40458"/>
			<description>Entry A2 in 3DMeasurePD3 is required</description>
			<test>containsA2 == true</test>
			<error>
				<message>Entry A2 in 3DMeasurePD3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40459"/>
			<description>Entry A2 in 3DMeasurePD3 shall have type Array</description>
			<test>containsA2 == false || A2HasTypeArray == true</test>
			<error>
				<message>Entry A2 in 3DMeasurePD3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40460"/>
			<description>Entry S with type Dictionary in 3DMeasurePD3 shall be object AnnotProjection</description>
			<test>SHasTypeDictionary != true || S_size == 1</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasurePD3 is not object AnnotProjection</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="10" testNumber="40461"/>
			<description>Entry S with type Dictionary in 3DMeasurePD3 shall be indirect</description>
			<test>SHasTypeDictionary != true || isSIndirect == true</test>
			<error>
				<message>Entry S with type Dictionary in 3DMeasurePD3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40462"/>
			<description>Entry S in 3DMeasurePD3 shall have type Dictionary</description>
			<test>containsS == false || SHasTypeDictionary == true</test>
			<error>
				<message>Entry S in 3DMeasurePD3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="14" testNumber="40463"/>
			<description>Entry P with type Integer in 3DMeasurePD3 shall correspond possible value predicate: fn:Eval(@P &gt;= 0)</description>
			<test>PHasTypeInteger != true || PIntegerValue &gt;= 0</test>
			<error>
				<message>Entry P with type Integer in 3DMeasurePD3 doesn't correspond possible value predicate: fn:Eval(@P &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40464"/>
			<description>Entry P in 3DMeasurePD3 shall have type Integer</description>
			<test>containsP == false || PHasTypeInteger == true</test>
			<error>
				<message>Entry P in 3DMeasurePD3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DMeasurePD3">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40465"/>
			<description>Entry N2 in 3DMeasurePD3 shall have type StringText</description>
			<test>containsN2 == false || N2HasTypeStringText == true</test>
			<error>
				<message>Entry N2 in 3DMeasurePD3 is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="1" testNumber="40514"/>
			<description>Viewport shall not contain entries except Name, BBox, Measure, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>Viewport contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Measure' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40515"/>
			<description>Entry Name in Viewport shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in Viewport is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40516"/>
			<description>Entry BBox in Viewport is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in Viewport is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40517"/>
			<description>Entry BBox in Viewport shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in Viewport is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40518"/>
			<description>Entry Measure with type Dictionary in Viewport shall be object MeasureRL</description>
			<test>MeasureHasTypeDictionary != true || Measure_size == 1</test>
			<error>
				<message>Entry Measure with type Dictionary in Viewport is not object MeasureRL</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40519"/>
			<description>Entry Measure in Viewport shall have type Dictionary</description>
			<test>containsMeasure == false || MeasureHasTypeDictionary == true</test>
			<error>
				<message>Entry Measure in Viewport is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40520"/>
			<description>Entry Type with type Name in Viewport shall have value Viewport</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Viewport"</test>
			<error>
				<message>Entry Type with type Name in Viewport has incorrect value %2 instead of Viewport</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AViewport">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40521"/>
			<description>Entry Type in Viewport shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Viewport is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalogNumberTreePageLabels">
			<id specification="ISO_32000_1_7" clause="18" testNumber="40536"/>
			<description>Entry * in CatalogNumberTreePageLabels shall be object CatalogNumberTreePageLabelsEntry</description>
			<test>Entries_size == size</test>
			<error>
				<message>Entry * in CatalogNumberTreePageLabels is not object CatalogNumberTreePageLabelsEntry</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40566"/>
			<description>Entry LastModified in Data is required</description>
			<test>containsLastModified == true</test>
			<error>
				<message>Entry LastModified in Data is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40567"/>
			<description>Entry LastModified in Data shall have type Date</description>
			<test>containsLastModified == false || LastModifiedHasTypeDate == true</test>
			<error>
				<message>Entry LastModified in Data is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40568"/>
			<description>Entry Private with type Array in Data shall be object _UniversalArray</description>
			<test>PrivateHasTypeArray != true || Private_size == 1</test>
			<error>
				<message>Entry Private with type Array in Data is not object _UniversalArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40569"/>
			<description>Entry Private with type Dictionary in Data shall be object _UniversalDictionary</description>
			<test>PrivateHasTypeDictionary != true || Private_size == 1</test>
			<error>
				<message>Entry Private with type Dictionary in Data is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40570"/>
			<description>Entry Private with type Stream in Data shall be object Stream</description>
			<test>PrivateHasTypeStream != true || Private_size == 1</test>
			<error>
				<message>Entry Private with type Stream in Data is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_7" clause="10" testNumber="40571"/>
			<description>Entry Private with type Stream in Data shall be indirect</description>
			<test>PrivateHasTypeStream != true || isPrivateIndirect == true</test>
			<error>
				<message>Entry Private with type Stream in Data is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AData">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40572"/>
			<description>Entry Private in Data shall have one of types: Name, Array, Boolean, Integer, Dictionary, Number, Stream, String</description>
			<test>containsPrivate == false || PrivateHasTypeName == true || PrivateHasTypeArray == true || PrivateHasTypeBoolean == true || PrivateHasTypeInteger == true || PrivateHasTypeDictionary == true || PrivateHasTypeNumber == true || PrivateHasTypeStream == true || PrivateHasTypeString == true</test>
			<error>
				<message>Entry Private in Data is not one of types: Name, Array, Boolean, Integer, Dictionary, Number, Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSourceInformationEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40588"/>
			<description>Entry with type Dictionary in ArrayOfSourceInformation shall be object SourceInformation</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfSourceInformation is not object SourceInformation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfSourceInformationEntry">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40589"/>
			<description>Entry in ArrayOfSourceInformation shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfSourceInformation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="1" testNumber="40771"/>
			<description>CMapStream shall not contain entries except DecodeParms, Type, UseCMap, FDecodeParms, Length, Filter, DL, F, CIDSystemInfo, FFilter, WMode, CMapName</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UseCMap' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'F' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'WMode' &amp;&amp; elem != 'CMapName').length == 0</test>
			<error>
				<message>CMapStream contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'UseCMap' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'F' &amp;&amp; elem != 'CIDSystemInfo' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'WMode' &amp;&amp; elem != 'CMapName').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40772"/>
			<description>Entry DecodeParms with type Array in CMapStream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in CMapStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40773"/>
			<description>Entry DecodeParms with type Dictionary in CMapStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in CMapStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40774"/>
			<description>Entry DecodeParms in CMapStream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in CMapStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="40775"/>
			<description>Entry DecodeParms with type Array in CMapStream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in CMapStream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40776"/>
			<description>Entry Type in CMapStream is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in CMapStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40777"/>
			<description>Entry Type with type Name in CMapStream shall have value CMap</description>
			<test>TypeHasTypeName != true || TypeNameValue == "CMap"</test>
			<error>
				<message>Entry Type with type Name in CMapStream has incorrect value %2 instead of CMap</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40778"/>
			<description>Entry Type in CMapStream shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in CMapStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40779"/>
			<description>Entry UseCMap with type Stream in CMapStream shall be object Stream</description>
			<test>UseCMapHasTypeStream != true || UseCMap_size == 1</test>
			<error>
				<message>Entry UseCMap with type Stream in CMapStream is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="10" testNumber="40780"/>
			<description>Entry UseCMap with type Stream in CMapStream shall be indirect</description>
			<test>UseCMapHasTypeStream != true || isUseCMapIndirect == true</test>
			<error>
				<message>Entry UseCMap with type Stream in CMapStream is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40781"/>
			<description>Entry UseCMap with type Name in CMapStream shall have one of values: GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</description>
			<test>UseCMapHasTypeName != true || UseCMapNameValue == "GB-EUC-H" || UseCMapNameValue == "GB-EUC-V" || UseCMapNameValue == "GBpc-EUC-H" || UseCMapNameValue == "GBpc-EUC-V" || UseCMapNameValue == "GBK-EUC-H" || UseCMapNameValue == "GBK-EUC-V" || UseCMapNameValue == "GBKp-EUC-H" || UseCMapNameValue == "GBKp-EUC-V" || UseCMapNameValue == "GBK2K-H" || UseCMapNameValue == "GBK2K-V" || UseCMapNameValue == "UniGB-UCS2-H" || UseCMapNameValue == "UniGB-UCS2-V" || UseCMapNameValue == "UniGB-UTF16-H" || UseCMapNameValue == "UniGB-UTF16-V" || UseCMapNameValue == "B5pc-H" || UseCMapNameValue == "B5pc-V" || UseCMapNameValue == "HKscs-B5-H" || UseCMapNameValue == "HKscs-B5-V" || UseCMapNameValue == "ETen-B5-H" || UseCMapNameValue == "ETen-B5-V" || UseCMapNameValue == "ETenms-B5-H" || UseCMapNameValue == "ETenms-B5-V" || UseCMapNameValue == "CNS-EUC-H" || UseCMapNameValue == "CNS-EUC-V" || UseCMapNameValue == "UniCNS-UCS2-H" || UseCMapNameValue == "UniCNS-UCS2-V" || UseCMapNameValue == "UniCNS-UTF16-H" || UseCMapNameValue == "UniCNS-UTF16-V" || UseCMapNameValue == "83pv-RKSJ-H" || UseCMapNameValue == "90ms-RKSJ-H" || UseCMapNameValue == "90ms-RKSJ-V" || UseCMapNameValue == "90msp-RKSJ-H" || UseCMapNameValue == "90msp-RKSJ-V" || UseCMapNameValue == "90pv-RKSJ-H" || UseCMapNameValue == "Add-RKSJ-H" || UseCMapNameValue == "Add-RKSJ-V" || UseCMapNameValue == "EUC-H" || UseCMapNameValue == "EUC-V" || UseCMapNameValue == "Ext-RKSJ-H" || UseCMapNameValue == "Ext-RKSJ-V" || UseCMapNameValue == "H" || UseCMapNameValue == "V" || UseCMapNameValue == "UniJIS-UCS2-H" || UseCMapNameValue == "UniJIS-UCS2-V" || UseCMapNameValue == "UniJIS-UCS2-HW-H" || UseCMapNameValue == "UniJIS-UCS2-HW-V" || UseCMapNameValue == "UniJIS-UTF16-H" || UseCMapNameValue == "UniJIS-UTF16-V" || UseCMapNameValue == "KSC-EUC-H" || UseCMapNameValue == "KSC-EUC-V" || UseCMapNameValue == "KSCms-UHC-H" || UseCMapNameValue == "KSCms-UHC-V" || UseCMapNameValue == "KSCms-UHC-HW-H" || UseCMapNameValue == "KSCms-UHC-HW-V" || UseCMapNameValue == "KSCpc-EUC-H" || UseCMapNameValue == "UniKS-UCS2-H" || UseCMapNameValue == "UniKS-UCS2-V" || UseCMapNameValue == "UniKS-UTF16-H" || UseCMapNameValue == "UniKS-UTF16-V" || UseCMapNameValue == "Identity-H" || UseCMapNameValue == "Identity-V"</test>
			<error>
				<message>Entry UseCMap with type Name in CMapStream has incorrect value %2 instead of GBK2K-V, ETenms-B5-H, 83pv-RKSJ-H, UniKS-UTF16-V, KSCpc-EUC-H, KSCms-UHC-HW-V, GB-EUC-H, B5pc-V, KSC-EUC-H, HKscs-B5-V, GBK2K-H, B5pc-H, KSCms-UHC-H, HKscs-B5-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H, GB-EUC-V, 90msp-RKSJ-H, UniJIS-UTF16-H, KSC-EUC-V, ETen-B5-V, CNS-EUC-H, UniCNS-UCS2-H, UniJIS-UCS2-H, UniJIS-UCS2-HW-V, ETenms-B5-V, CNS-EUC-V, 90msp-RKSJ-V, UniKS-UCS2-H, UniKS-UTF16-H, ETen-B5-H, 90ms-RKSJ-V, GBpc-EUC-H, Ext-RKSJ-H, UniKS-UCS2-V, Identity-V, H, GBpc-EUC-V, GBKp-EUC-H, KSCms-UHC-V, Add-RKSJ-H, UniCNS-UTF16-H, UniJIS-UTF16-V, V, UniCNS-UCS2-V, GBKp-EUC-V, Add-RKSJ-V, 90pv-RKSJ-H, GBK-EUC-V, UniGB-UTF16-V, UniCNS-UTF16-V, GBK-EUC-H, UniGB-UCS2-H, EUC-V, UniGB-UTF16-H, Ext-RKSJ-V, 90ms-RKSJ-H, Identity-H, UniGB-UCS2-V, EUC-H, KSCms-UHC-HW-H</message>
				<arguments>
					<argument>keyName</argument>
					<argument>UseCMapNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40782"/>
			<description>Entry UseCMap in CMapStream shall have one of types: Name, Stream</description>
			<test>containsUseCMap == false || UseCMapHasTypeName == true || UseCMapHasTypeStream == true</test>
			<error>
				<message>Entry UseCMap in CMapStream is not one of types: Name, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40783"/>
			<description>Entry FDecodeParms with type Array in CMapStream shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in CMapStream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40784"/>
			<description>Entry FDecodeParms with type Dictionary in CMapStream shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in CMapStream is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40785"/>
			<description>Entry FDecodeParms in CMapStream shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in CMapStream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="40786"/>
			<description>Entry FDecodeParms with type Array in CMapStream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in CMapStream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40787"/>
			<description>Entry Length in CMapStream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in CMapStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40788"/>
			<description>Entry Length in CMapStream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in CMapStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40789"/>
			<description>Entry Filter with type Array in CMapStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in CMapStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40790"/>
			<description>Entry Filter with type Name in CMapStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in CMapStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40791"/>
			<description>Entry Filter in CMapStream shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in CMapStream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="40792"/>
			<description>Entry Filter with type Array in CMapStream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in CMapStream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40793"/>
			<description>Entry DL in CMapStream shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in CMapStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="40794"/>
			<description>Entry DL with type Integer in CMapStream shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in CMapStream doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40795"/>
			<description>Entry F with type Dictionary in CMapStream shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in CMapStream is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40796"/>
			<description>Entry F in CMapStream shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in CMapStream is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40797"/>
			<description>Entry CIDSystemInfo with type Dictionary in CMapStream shall be object CIDSystemInfo</description>
			<test>CIDSystemInfoHasTypeDictionary != true || CIDSystemInfo_size == 1</test>
			<error>
				<message>Entry CIDSystemInfo with type Dictionary in CMapStream is not object CIDSystemInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40798"/>
			<description>Entry CIDSystemInfo in CMapStream is required</description>
			<test>containsCIDSystemInfo == true</test>
			<error>
				<message>Entry CIDSystemInfo in CMapStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40799"/>
			<description>Entry CIDSystemInfo in CMapStream shall have type Dictionary</description>
			<test>containsCIDSystemInfo == false || CIDSystemInfoHasTypeDictionary == true</test>
			<error>
				<message>Entry CIDSystemInfo in CMapStream is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40800"/>
			<description>Entry FFilter with type Array in CMapStream shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in CMapStream is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40801"/>
			<description>Entry FFilter with type Name in CMapStream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in CMapStream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40802"/>
			<description>Entry FFilter in CMapStream shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in CMapStream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="9" testNumber="40803"/>
			<description>Entry FFilter with type Array in CMapStream shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in CMapStream doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40804"/>
			<description>Entry WMode with type Integer in CMapStream shall have one of values: 0, 1</description>
			<test>WModeHasTypeInteger != true || WModeIntegerValue == 1 || WModeIntegerValue == 0</test>
			<error>
				<message>Entry WMode with type Integer in CMapStream has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>WModeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40805"/>
			<description>Entry WMode in CMapStream shall have type Integer</description>
			<test>containsWMode == false || WModeHasTypeInteger == true</test>
			<error>
				<message>Entry WMode in CMapStream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40806"/>
			<description>Entry CMapName in CMapStream is required</description>
			<test>containsCMapName == true</test>
			<error>
				<message>Entry CMapName in CMapStream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACMapStream">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40807"/>
			<description>Entry CMapName in CMapStream shall have type Name</description>
			<test>containsCMapName == false || CMapNameHasTypeName == true</test>
			<error>
				<message>Entry CMapName in CMapStream is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="2" testNumber="40899"/>
			<description>SeparationColorSpace shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>SeparationColorSpace contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40900"/>
			<description>Entry 2 with type Array in SeparationColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</description>
			<test>entry2HasTypeArray != true || entry2_size == 1</test>
			<error>
				<message>Entry 2 with type Array in SeparationColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, ICCBasedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40901"/>
			<description>Entry 2 with type Name in SeparationColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry2HasTypeName != true || entry2NameValue == "DeviceCMYK" || entry2NameValue == "DeviceRGB" || entry2NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 2 with type Name in SeparationColorSpace has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40902"/>
			<description>Entry 2 in SeparationColorSpace shall have one of types: Name, Array</description>
			<test>size &lt;= 2 || entry2HasTypeName == true || entry2HasTypeArray == true</test>
			<error>
				<message>Entry 2 in SeparationColorSpace is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40903"/>
			<description>Entry 0 with type Name in SeparationColorSpace shall have value Separation</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Separation"</test>
			<error>
				<message>Entry 0 with type Name in SeparationColorSpace has incorrect value %2 instead of Separation</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40904"/>
			<description>Entry 0 in SeparationColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in SeparationColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40905"/>
			<description>Entry 1 in SeparationColorSpace shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in SeparationColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40906"/>
			<description>Entry 3 with type Dictionary in SeparationColorSpace shall be one of objects FunctionType2, FunctionType3</description>
			<test>entry3HasTypeDictionary != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Dictionary in SeparationColorSpace is not one of objects FunctionType2, FunctionType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40907"/>
			<description>Entry 3 with type Stream in SeparationColorSpace shall be one of objects FunctionType0, FunctionType4</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in SeparationColorSpace is not one of objects FunctionType0, FunctionType4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="10" testNumber="40908"/>
			<description>Entry 3 with type Stream in SeparationColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in SeparationColorSpace is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASeparationColorSpace">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40909"/>
			<description>Entry 3 in SeparationColorSpace shall have one of types: Dictionary, Stream</description>
			<test>size &lt;= 3 || entry3HasTypeDictionary == true || entry3HasTypeStream == true</test>
			<error>
				<message>Entry 3 in SeparationColorSpace is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStructTreeRootNameTreeIDTreeEntry">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40925"/>
			<description>Entry with type Dictionary in StructTreeRootNameTreeIDTree shall be one of objects StructElem, MarkedContentReference, ObjectReference</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in StructTreeRootNameTreeIDTree is not one of objects StructElem, MarkedContentReference, ObjectReference</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="1" testNumber="40951"/>
			<description>NavNode shall not contain entries except PA, Dur, NA, Prev, Type, Next</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'PA' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'NA' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Next').length == 0</test>
			<error>
				<message>NavNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'PA' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'NA' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Next').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40952"/>
			<description>Entry PA with type Dictionary in NavNode shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>PAHasTypeDictionary != true || PA_size == 1</test>
			<error>
				<message>Entry PA with type Dictionary in NavNode is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40953"/>
			<description>Entry PA in NavNode shall have type Dictionary</description>
			<test>containsPA == false || PAHasTypeDictionary == true</test>
			<error>
				<message>Entry PA in NavNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40954"/>
			<description>Entry Dur in NavNode shall have type Number</description>
			<test>containsDur == false || DurHasTypeNumber == true</test>
			<error>
				<message>Entry Dur in NavNode is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40955"/>
			<description>Entry NA with type Dictionary in NavNode shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NAHasTypeDictionary != true || NA_size == 1</test>
			<error>
				<message>Entry NA with type Dictionary in NavNode is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40956"/>
			<description>Entry NA in NavNode shall have type Dictionary</description>
			<test>containsNA == false || NAHasTypeDictionary == true</test>
			<error>
				<message>Entry NA in NavNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40957"/>
			<description>Entry Prev with type Dictionary in NavNode shall be object NavNode</description>
			<test>PrevHasTypeDictionary != true || Prev_size == 1</test>
			<error>
				<message>Entry Prev with type Dictionary in NavNode is not object NavNode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40958"/>
			<description>Entry Prev in NavNode shall have type Dictionary</description>
			<test>containsPrev == false || PrevHasTypeDictionary == true</test>
			<error>
				<message>Entry Prev in NavNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40959"/>
			<description>Entry Type with type Name in NavNode shall have value NavNode</description>
			<test>TypeHasTypeName != true || TypeNameValue == "NavNode"</test>
			<error>
				<message>Entry Type with type Name in NavNode has incorrect value %2 instead of NavNode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40960"/>
			<description>Entry Type in NavNode shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in NavNode is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40961"/>
			<description>Entry Next with type Dictionary in NavNode shall be object NavNode</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in NavNode is not object NavNode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ANavNode">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40962"/>
			<description>Entry Next in NavNode shall have type Dictionary</description>
			<test>containsNext == false || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in NavNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="1" testNumber="40990"/>
			<description>ActionGoTo3DView shall not contain entries except Type, TA, V, Next, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'TA' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>ActionGoTo3DView contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'TA' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="6" testNumber="40991"/>
			<description>Entry Type with type Name in ActionGoTo3DView shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoTo3DView has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40992"/>
			<description>Entry Type in ActionGoTo3DView shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoTo3DView is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40993"/>
			<description>Entry TA with type Dictionary in ActionGoTo3DView shall be object Annot3D</description>
			<test>TAHasTypeDictionary != true || TA_size == 1</test>
			<error>
				<message>Entry TA with type Dictionary in ActionGoTo3DView is not object Annot3D</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40994"/>
			<description>Entry TA in ActionGoTo3DView is required</description>
			<test>containsTA == true</test>
			<error>
				<message>Entry TA in ActionGoTo3DView is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40995"/>
			<description>Entry TA in ActionGoTo3DView shall have type Dictionary</description>
			<test>containsTA == false || TAHasTypeDictionary == true</test>
			<error>
				<message>Entry TA in ActionGoTo3DView is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40996"/>
			<description>Entry V with type Dictionary in ActionGoTo3DView shall be object 3DView</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in ActionGoTo3DView is not object 3DView</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="7" testNumber="40997"/>
			<description>Entry V in ActionGoTo3DView is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in ActionGoTo3DView is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="40998"/>
			<description>Entry V in ActionGoTo3DView shall have one of types: Name, StringText, Integer, Dictionary</description>
			<test>containsV == false || VHasTypeName == true || VHasTypeStringText == true || VHasTypeInteger == true || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in ActionGoTo3DView is not one of types: Name, StringText, Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="17" testNumber="40999"/>
			<description>Entry Next with type Array in ActionGoTo3DView shall be object ArrayOfActions</description>
			<test>NextHasTypeArray != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Array in ActionGoTo3DView is not object ArrayOfActions</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41000"/>
			<description>Entry Next with type Dictionary in ActionGoTo3DView shall be one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in ActionGoTo3DView is not one of objects ActionGoTo, ActionGoToR, ActionGoToE, ActionLaunch, ActionThread, ActionURI, ActionSound, ActionMovie, ActionHide, ActionNamed, ActionSubmitForm, ActionResetForm, ActionImportData, ActionSetOCGState, ActionRendition, ActionTransition, ActionGoTo3DView, ActionECMAScript</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41001"/>
			<description>Entry Next in ActionGoTo3DView shall have one of types: Array, Dictionary</description>
			<test>containsNext == false || NextHasTypeArray == true || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in ActionGoTo3DView is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41002"/>
			<description>Entry S in ActionGoTo3DView is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoTo3DView is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41003"/>
			<description>Entry S with type Name in ActionGoTo3DView shall have value GoTo3DView</description>
			<test>SHasTypeName != true || SNameValue == "GoTo3DView"</test>
			<error>
				<message>Entry S with type Name in ActionGoTo3DView has incorrect value %2 instead of GoTo3DView</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo3DView">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41004"/>
			<description>Entry S in ActionGoTo3DView shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoTo3DView is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="2" testNumber="41065"/>
			<description>ArrayOf_8Numbers shall contain exactly 8 elements</description>
			<test>size == 8</test>
			<error>
				<message>ArrayOf_8Numbers contains %1 element(s) instead of 8</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41066"/>
			<description>Entry 3 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41067"/>
			<description>Entry 5 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41068"/>
			<description>Entry 7 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41069"/>
			<description>Entry 4 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41070"/>
			<description>Entry 0 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41071"/>
			<description>Entry 2 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41072"/>
			<description>Entry 6 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_8Numbers">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41073"/>
			<description>Entry 1 in ArrayOf_8Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_8Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="1" testNumber="41139"/>
			<description>PatternType2 shall not contain entries except ExtGState, Matrix, PatternType, Shading, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ExtGState' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PatternType2 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ExtGState' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'Shading' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41140"/>
			<description>Entry ExtGState with type Dictionary in PatternType2 shall be object GraphicsStateParameter</description>
			<test>ExtGStateHasTypeDictionary != true || ExtGState_size == 1</test>
			<error>
				<message>Entry ExtGState with type Dictionary in PatternType2 is not object GraphicsStateParameter</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41141"/>
			<description>Entry ExtGState in PatternType2 shall have type Dictionary</description>
			<test>containsExtGState == false || ExtGStateHasTypeDictionary == true</test>
			<error>
				<message>Entry ExtGState in PatternType2 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41142"/>
			<description>Entry Matrix in PatternType2 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in PatternType2 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41143"/>
			<description>Entry PatternType in PatternType2 is required</description>
			<test>containsPatternType == true</test>
			<error>
				<message>Entry PatternType in PatternType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41144"/>
			<description>Entry PatternType with type Integer in PatternType2 shall have value 2</description>
			<test>PatternTypeHasTypeInteger != true || PatternTypeIntegerValue == 2</test>
			<error>
				<message>Entry PatternType with type Integer in PatternType2 has incorrect value %2 instead of 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PatternTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41145"/>
			<description>Entry PatternType in PatternType2 shall have type Integer</description>
			<test>containsPatternType == false || PatternTypeHasTypeInteger == true</test>
			<error>
				<message>Entry PatternType in PatternType2 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41146"/>
			<description>Entry Shading with type Dictionary in PatternType2 shall be one of objects ShadingType1, ShadingType2, ShadingType3</description>
			<test>ShadingHasTypeDictionary != true || Shading_size == 1</test>
			<error>
				<message>Entry Shading with type Dictionary in PatternType2 is not one of objects ShadingType1, ShadingType2, ShadingType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41147"/>
			<description>Entry Shading with type Stream in PatternType2 shall be one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</description>
			<test>ShadingHasTypeStream != true || Shading_size == 1</test>
			<error>
				<message>Entry Shading with type Stream in PatternType2 is not one of objects ShadingType4, ShadingType5, ShadingType6, ShadingType7</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41148"/>
			<description>Entry Shading in PatternType2 is required</description>
			<test>containsShading == true</test>
			<error>
				<message>Entry Shading in PatternType2 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="10" testNumber="41149"/>
			<description>Entry Shading with type Stream in PatternType2 shall be indirect</description>
			<test>ShadingHasTypeStream != true || isShadingIndirect == true</test>
			<error>
				<message>Entry Shading with type Stream in PatternType2 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41150"/>
			<description>Entry Shading in PatternType2 shall have one of types: Dictionary, Stream</description>
			<test>containsShading == false || ShadingHasTypeDictionary == true || ShadingHasTypeStream == true</test>
			<error>
				<message>Entry Shading in PatternType2 is not one of types: Dictionary, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41151"/>
			<description>Entry Type with type Name in PatternType2 shall have value Pattern</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pattern"</test>
			<error>
				<message>Entry Type with type Name in PatternType2 has incorrect value %2 instead of Pattern</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType2">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41152"/>
			<description>Entry Type in PatternType2 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PatternType2 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="1" testNumber="41275"/>
			<description>Signature shall not contain entries except Filter, Changes, SubFilter, Prop_AuthType, Cert, M, ContactInfo, Type, Reason, ByteRange, Prop_AuthTime, Prop_Build, R, Contents, Name, V, Location, Reference</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Prop_AuthType' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'M' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'ByteRange' &amp;&amp; elem != 'Prop_AuthTime' &amp;&amp; elem != 'Prop_Build' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'Reference').length == 0</test>
			<error>
				<message>Signature contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'Changes' &amp;&amp; elem != 'SubFilter' &amp;&amp; elem != 'Prop_AuthType' &amp;&amp; elem != 'Cert' &amp;&amp; elem != 'M' &amp;&amp; elem != 'ContactInfo' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Reason' &amp;&amp; elem != 'ByteRange' &amp;&amp; elem != 'Prop_AuthTime' &amp;&amp; elem != 'Prop_Build' &amp;&amp; elem != 'R' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'V' &amp;&amp; elem != 'Location' &amp;&amp; elem != 'Reference').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41276"/>
			<description>Entry Filter in Signature is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in Signature is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41277"/>
			<description>Entry Filter with type Name in Signature shall have one of values: VeriSign.PPKVS, CICI.SignIt, Entrust.PPKEF, Adobe.PPKLite</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Adobe.PPKLite" || FilterNameValue == "Entrust.PPKEF" || FilterNameValue == "CICI.SignIt" || FilterNameValue == "VeriSign.PPKVS"</test>
			<error>
				<message>Entry Filter with type Name in Signature has incorrect value %2 instead of VeriSign.PPKVS, CICI.SignIt, Entrust.PPKEF, Adobe.PPKLite</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41278"/>
			<description>Entry Filter in Signature shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in Signature is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41279"/>
			<description>Entry Changes with type Array in Signature shall be object ArrayOf_3Integers</description>
			<test>ChangesHasTypeArray != true || Changes_size == 1</test>
			<error>
				<message>Entry Changes with type Array in Signature is not object ArrayOf_3Integers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41280"/>
			<description>Entry Changes in Signature shall have type Array</description>
			<test>containsChanges == false || ChangesHasTypeArray == true</test>
			<error>
				<message>Entry Changes in Signature is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="13" testNumber="41281"/>
			<description>Entry SubFilter with type Name in Signature shall have one of values: adbe.pkcs7.detached, adbe.x509.rsa_sha1, adbe.pkcs7.sha1</description>
			<test>SubFilterHasTypeName != true || SubFilterNameValue == "adbe.pkcs7.detached" || SubFilterNameValue == "adbe.pkcs7.sha1" || SubFilterNameValue == "adbe.x509.rsa_sha1"</test>
			<error>
				<message>Entry SubFilter with type Name in Signature has incorrect value %2 instead of adbe.pkcs7.detached, adbe.x509.rsa_sha1, adbe.pkcs7.sha1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41282"/>
			<description>Entry SubFilter in Signature shall have type Name</description>
			<test>containsSubFilter == false || SubFilterHasTypeName == true</test>
			<error>
				<message>Entry SubFilter in Signature is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41283"/>
			<description>Entry Prop_AuthType in Signature shall have type Name</description>
			<test>containsProp_AuthType == false || Prop_AuthTypeHasTypeName == true</test>
			<error>
				<message>Entry Prop_AuthType in Signature is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41284"/>
			<description>Entry Cert with type Array in Signature shall be object ArrayOfStringsByte</description>
			<test>CertHasTypeArray != true || Cert_size == 1</test>
			<error>
				<message>Entry Cert with type Array in Signature is not object ArrayOfStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="11" testNumber="41285"/>
			<description>Entry Cert in Signature is required, when fn:IsRequired(@SubFilter == adbe.x509.rsa_sha1)</description>
			<test>(containsCert == true || (SubFilterNameValue == "adbe.x509.rsa_sha1") == false)</test>
			<error>
				<message>Entry Cert in Signature is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41286"/>
			<description>Entry Cert in Signature shall have one of types: Array, StringByte</description>
			<test>containsCert == false || CertHasTypeArray == true || CertHasTypeStringByte == true</test>
			<error>
				<message>Entry Cert in Signature is not one of types: Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41287"/>
			<description>Entry M in Signature shall have type Date</description>
			<test>containsM == false || MHasTypeDate == true</test>
			<error>
				<message>Entry M in Signature is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41288"/>
			<description>Entry ContactInfo in Signature shall have type StringText</description>
			<test>containsContactInfo == false || ContactInfoHasTypeStringText == true</test>
			<error>
				<message>Entry ContactInfo in Signature is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41289"/>
			<description>Entry Type with type Name in Signature shall have value Sig</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Sig"</test>
			<error>
				<message>Entry Type with type Name in Signature has incorrect value %2 instead of Sig</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41290"/>
			<description>Entry Type in Signature shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Signature is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41291"/>
			<description>Entry Reason in Signature shall have type StringText</description>
			<test>containsReason == false || ReasonHasTypeStringText == true</test>
			<error>
				<message>Entry Reason in Signature is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41292"/>
			<description>Entry ByteRange with type Array in Signature shall be object ArrayOfIntegersGeneral</description>
			<test>ByteRangeHasTypeArray != true || ByteRange_size == 1</test>
			<error>
				<message>Entry ByteRange with type Array in Signature is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41293"/>
			<description>Entry ByteRange in Signature shall have type Array</description>
			<test>containsByteRange == false || ByteRangeHasTypeArray == true</test>
			<error>
				<message>Entry ByteRange in Signature is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="14" testNumber="41294"/>
			<description>Entry Prop_AuthTime with type Integer in Signature shall correspond possible value predicate: fn:Eval(@Prop_AuthTime &gt;= 0)</description>
			<test>Prop_AuthTimeHasTypeInteger != true || Prop_AuthTimeIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Prop_AuthTime with type Integer in Signature doesn't correspond possible value predicate: fn:Eval(@Prop_AuthTime &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41295"/>
			<description>Entry Prop_AuthTime in Signature shall have type Integer</description>
			<test>containsProp_AuthTime == false || Prop_AuthTimeHasTypeInteger == true</test>
			<error>
				<message>Entry Prop_AuthTime in Signature is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41296"/>
			<description>Entry Prop_Build with type Dictionary in Signature shall be object _UniversalDictionary</description>
			<test>Prop_BuildHasTypeDictionary != true || Prop_Build_size == 1</test>
			<error>
				<message>Entry Prop_Build with type Dictionary in Signature is not object _UniversalDictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41297"/>
			<description>Entry Prop_Build in Signature shall have type Dictionary</description>
			<test>containsProp_Build == false || Prop_BuildHasTypeDictionary == true</test>
			<error>
				<message>Entry Prop_Build in Signature is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41298"/>
			<description>Entry R in Signature shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in Signature is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41299"/>
			<description>Entry Contents in Signature is required</description>
			<test>containsContents == true</test>
			<error>
				<message>Entry Contents in Signature is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41300"/>
			<description>Entry Contents in Signature shall have type StringByte</description>
			<test>containsContents == false || ContentsHasTypeStringByte == true</test>
			<error>
				<message>Entry Contents in Signature is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41301"/>
			<description>Entry Name in Signature shall have type StringText</description>
			<test>containsName == false || NameHasTypeStringText == true</test>
			<error>
				<message>Entry Name in Signature is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41302"/>
			<description>Entry V in Signature shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in Signature is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41303"/>
			<description>Entry Location in Signature shall have type StringText</description>
			<test>containsLocation == false || LocationHasTypeStringText == true</test>
			<error>
				<message>Entry Location in Signature is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41304"/>
			<description>Entry Reference with type Array in Signature shall be object ArrayOfSignatureReferences</description>
			<test>ReferenceHasTypeArray != true || Reference_size == 1</test>
			<error>
				<message>Entry Reference with type Array in Signature is not object ArrayOfSignatureReferences</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ASignature">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41305"/>
			<description>Entry Reference in Signature shall have type Array</description>
			<test>containsReference == false || ReferenceHasTypeArray == true</test>
			<error>
				<message>Entry Reference in Signature is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="1" testNumber="41486"/>
			<description>FontFile3CIDType0 shall not contain entries except FDecodeParms, Length, Filter, Subtype, F, FFilter, Length2, DL, DecodeParms, Length1, Length3</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length3').length == 0</test>
			<error>
				<message>FontFile3CIDType0 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FDecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'F' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'Length2' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Length1' &amp;&amp; elem != 'Length3').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41487"/>
			<description>Entry FDecodeParms with type Array in FontFile3CIDType0 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3CIDType0 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41488"/>
			<description>Entry FDecodeParms with type Dictionary in FontFile3CIDType0 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in FontFile3CIDType0 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41489"/>
			<description>Entry FDecodeParms in FontFile3CIDType0 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in FontFile3CIDType0 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="41490"/>
			<description>Entry FDecodeParms with type Array in FontFile3CIDType0 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in FontFile3CIDType0 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41491"/>
			<description>Entry Length in FontFile3CIDType0 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in FontFile3CIDType0 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41492"/>
			<description>Entry Length in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41493"/>
			<description>Entry Filter with type Array in FontFile3CIDType0 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in FontFile3CIDType0 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41494"/>
			<description>Entry Filter with type Name in FontFile3CIDType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in FontFile3CIDType0 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41495"/>
			<description>Entry Filter in FontFile3CIDType0 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in FontFile3CIDType0 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="41496"/>
			<description>Entry Filter with type Array in FontFile3CIDType0 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in FontFile3CIDType0 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41497"/>
			<description>Entry Subtype with type Name in FontFile3CIDType0 shall have value CIDFontType0C</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "CIDFontType0C"</test>
			<error>
				<message>Entry Subtype with type Name in FontFile3CIDType0 has incorrect value %2 instead of CIDFontType0C</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41498"/>
			<description>Entry Subtype in FontFile3CIDType0 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFile3CIDType0 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41499"/>
			<description>Entry F with type Dictionary in FontFile3CIDType0 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in FontFile3CIDType0 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41500"/>
			<description>Entry F in FontFile3CIDType0 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in FontFile3CIDType0 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41501"/>
			<description>Entry FFilter with type Array in FontFile3CIDType0 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3CIDType0 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41502"/>
			<description>Entry FFilter with type Name in FontFile3CIDType0 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in FontFile3CIDType0 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41503"/>
			<description>Entry FFilter in FontFile3CIDType0 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in FontFile3CIDType0 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="41504"/>
			<description>Entry FFilter with type Array in FontFile3CIDType0 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in FontFile3CIDType0 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41505"/>
			<description>Entry Length2 in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="41506"/>
			<description>Entry Length2 with type Integer in FontFile3CIDType0 shall correspond special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFile3CIDType0 doesn't correspond special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41507"/>
			<description>Entry DL in FontFile3CIDType0 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="41508"/>
			<description>Entry DL with type Integer in FontFile3CIDType0 shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in FontFile3CIDType0 doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41509"/>
			<description>Entry DecodeParms with type Array in FontFile3CIDType0 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3CIDType0 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41510"/>
			<description>Entry DecodeParms with type Dictionary in FontFile3CIDType0 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in FontFile3CIDType0 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41511"/>
			<description>Entry DecodeParms in FontFile3CIDType0 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in FontFile3CIDType0 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="41512"/>
			<description>Entry DecodeParms with type Array in FontFile3CIDType0 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in FontFile3CIDType0 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41513"/>
			<description>Entry Length1 in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="41514"/>
			<description>Entry Length1 with type Integer in FontFile3CIDType0 shall correspond special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFile3CIDType0 doesn't correspond special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41515"/>
			<description>Entry Length3 in FontFile3CIDType0 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFile3CIDType0 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFile3CIDType0">
			<id specification="ISO_32000_1_7" clause="9" testNumber="41516"/>
			<description>Entry Length3 with type Integer in FontFile3CIDType0 shall correspond special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFile3CIDType0 doesn't correspond special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="1" testNumber="41775"/>
			<description>PatternType1 shall not contain entries except F, DecodeParms, Resources, Matrix, PatternType, TilingType, YStep, Type, Length, PaintType, FDecodeParms, XUID, FFilter, BBox, DL, XStep, Filter</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'TilingType' &amp;&amp; elem != 'YStep' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'PaintType' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'XUID' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'XStep' &amp;&amp; elem != 'Filter').length == 0</test>
			<error>
				<message>PatternType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PatternType' &amp;&amp; elem != 'TilingType' &amp;&amp; elem != 'YStep' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'PaintType' &amp;&amp; elem != 'FDecodeParms' &amp;&amp; elem != 'XUID' &amp;&amp; elem != 'FFilter' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'DL' &amp;&amp; elem != 'XStep' &amp;&amp; elem != 'Filter').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41776"/>
			<description>Entry F with type Dictionary in PatternType1 shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in PatternType1 is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41777"/>
			<description>Entry F in PatternType1 shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in PatternType1 is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41778"/>
			<description>Entry DecodeParms with type Array in PatternType1 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in PatternType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41779"/>
			<description>Entry DecodeParms with type Dictionary in PatternType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in PatternType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41780"/>
			<description>Entry DecodeParms in PatternType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in PatternType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="41781"/>
			<description>Entry DecodeParms with type Array in PatternType1 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in PatternType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41782"/>
			<description>Entry Resources with type Dictionary in PatternType1 shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PatternType1 is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41783"/>
			<description>Entry Resources in PatternType1 is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41784"/>
			<description>Entry Resources in PatternType1 shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PatternType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41785"/>
			<description>Entry Matrix in PatternType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in PatternType1 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41786"/>
			<description>Entry PatternType in PatternType1 is required</description>
			<test>containsPatternType == true</test>
			<error>
				<message>Entry PatternType in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41787"/>
			<description>Entry PatternType with type Integer in PatternType1 shall have value 1</description>
			<test>PatternTypeHasTypeInteger != true || PatternTypeIntegerValue == 1</test>
			<error>
				<message>Entry PatternType with type Integer in PatternType1 has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PatternTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41788"/>
			<description>Entry PatternType in PatternType1 shall have type Integer</description>
			<test>containsPatternType == false || PatternTypeHasTypeInteger == true</test>
			<error>
				<message>Entry PatternType in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41789"/>
			<description>Entry TilingType in PatternType1 is required</description>
			<test>containsTilingType == true</test>
			<error>
				<message>Entry TilingType in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41790"/>
			<description>Entry TilingType with type Integer in PatternType1 shall have one of values: 1, 2, 3</description>
			<test>TilingTypeHasTypeInteger != true || TilingTypeIntegerValue == 1 || TilingTypeIntegerValue == 2 || TilingTypeIntegerValue == 3</test>
			<error>
				<message>Entry TilingType with type Integer in PatternType1 has incorrect value %2 instead of 1, 2, 3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TilingTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41791"/>
			<description>Entry TilingType in PatternType1 shall have type Integer</description>
			<test>containsTilingType == false || TilingTypeHasTypeInteger == true</test>
			<error>
				<message>Entry TilingType in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41792"/>
			<description>Entry YStep in PatternType1 is required</description>
			<test>containsYStep == true</test>
			<error>
				<message>Entry YStep in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41793"/>
			<description>Entry YStep in PatternType1 shall have type Number</description>
			<test>containsYStep == false || YStepHasTypeNumber == true</test>
			<error>
				<message>Entry YStep in PatternType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41794"/>
			<description>Entry Type with type Name in PatternType1 shall have value Pattern</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pattern"</test>
			<error>
				<message>Entry Type with type Name in PatternType1 has incorrect value %2 instead of Pattern</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41795"/>
			<description>Entry Type in PatternType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PatternType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41796"/>
			<description>Entry Length in PatternType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41797"/>
			<description>Entry Length in PatternType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41798"/>
			<description>Entry PaintType in PatternType1 is required</description>
			<test>containsPaintType == true</test>
			<error>
				<message>Entry PaintType in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41799"/>
			<description>Entry PaintType with type Integer in PatternType1 shall have one of values: 1, 2</description>
			<test>PaintTypeHasTypeInteger != true || PaintTypeIntegerValue == 1 || PaintTypeIntegerValue == 2</test>
			<error>
				<message>Entry PaintType with type Integer in PatternType1 has incorrect value %2 instead of 1, 2</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PaintTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41800"/>
			<description>Entry PaintType in PatternType1 shall have type Integer</description>
			<test>containsPaintType == false || PaintTypeHasTypeInteger == true</test>
			<error>
				<message>Entry PaintType in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41801"/>
			<description>Entry FDecodeParms with type Array in PatternType1 shall be object ArrayOfDecodeParams</description>
			<test>FDecodeParmsHasTypeArray != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Array in PatternType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41802"/>
			<description>Entry FDecodeParms with type Dictionary in PatternType1 shall be one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</description>
			<test>FDecodeParmsHasTypeDictionary != true || FDecodeParms_size == 1</test>
			<error>
				<message>Entry FDecodeParms with type Dictionary in PatternType1 is not one of objects FilterLZWDecode, FilterFlateDecode, FilterCrypt</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41803"/>
			<description>Entry FDecodeParms in PatternType1 shall have one of types: Array, Dictionary</description>
			<test>containsFDecodeParms == false || FDecodeParmsHasTypeArray == true || FDecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry FDecodeParms in PatternType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="41804"/>
			<description>Entry FDecodeParms with type Array in PatternType1 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FDecodeParmsHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FDecodeParms with type Array in PatternType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41805"/>
			<description>Entry XUID with type Array in PatternType1 shall be object ArrayOfIntegersGeneral</description>
			<test>XUIDHasTypeArray != true || XUID_size == 1</test>
			<error>
				<message>Entry XUID with type Array in PatternType1 is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="5" testNumber="41806"/>
			<description>Entry XUID in PatternType1 is deprecated since PDF 1.3</description>
			<test>containsXUID == false</test>
			<error>
				<message>Entry XUID in PatternType1 is present</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41807"/>
			<description>Entry XUID in PatternType1 shall have type Array</description>
			<test>containsXUID == false || XUIDHasTypeArray == true</test>
			<error>
				<message>Entry XUID in PatternType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41808"/>
			<description>Entry FFilter with type Array in PatternType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FFilterHasTypeArray != true || FFilter_size == 1</test>
			<error>
				<message>Entry FFilter with type Array in PatternType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41809"/>
			<description>Entry FFilter with type Name in PatternType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FFilterHasTypeName != true || FFilterNameValue == "ASCIIHexDecode" || FFilterNameValue == "ASCII85Decode" || FFilterNameValue == "LZWDecode" || FFilterNameValue == "FlateDecode" || FFilterNameValue == "RunLengthDecode" || FFilterNameValue == "Crypt"</test>
			<error>
				<message>Entry FFilter with type Name in PatternType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FFilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41810"/>
			<description>Entry FFilter in PatternType1 shall have one of types: Name, Array</description>
			<test>containsFFilter == false || FFilterHasTypeName == true || FFilterHasTypeArray == true</test>
			<error>
				<message>Entry FFilter in PatternType1 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="41811"/>
			<description>Entry FFilter with type Array in PatternType1 shall correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</description>
			<test>FFilterHasTypeArray != true || (FDecodeParmsArraySize == FFilterArraySize)</test>
			<error>
				<message>Entry FFilter with type Array in PatternType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(FDecodeParms) == fn:ArrayLength(FFilter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41812"/>
			<description>Entry BBox in PatternType1 is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41813"/>
			<description>Entry BBox in PatternType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in PatternType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41814"/>
			<description>Entry DL in PatternType1 shall have type Integer</description>
			<test>containsDL == false || DLHasTypeInteger == true</test>
			<error>
				<message>Entry DL in PatternType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="41815"/>
			<description>Entry DL with type Integer in PatternType1 shall correspond special case: fn:Eval(@DL &gt;= 0)</description>
			<test>DLHasTypeInteger != true || (DLIntegerValue &gt;= 0)</test>
			<error>
				<message>Entry DL with type Integer in PatternType1 doesn't correspond special case: fn:Eval(@DL &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="7" testNumber="41816"/>
			<description>Entry XStep in PatternType1 is required</description>
			<test>containsXStep == true</test>
			<error>
				<message>Entry XStep in PatternType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41817"/>
			<description>Entry XStep in PatternType1 shall have type Number</description>
			<test>containsXStep == false || XStepHasTypeNumber == true</test>
			<error>
				<message>Entry XStep in PatternType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41818"/>
			<description>Entry Filter with type Array in PatternType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in PatternType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41819"/>
			<description>Entry Filter with type Name in PatternType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "FlateDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "Crypt"</test>
			<error>
				<message>Entry Filter with type Name in PatternType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, Crypt, ASCII85Decode, FlateDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41820"/>
			<description>Entry Filter in PatternType1 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in PatternType1 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APatternType1">
			<id specification="ISO_32000_1_7" clause="9" testNumber="41821"/>
			<description>Entry Filter with type Array in PatternType1 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in PatternType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="1" testNumber="41878"/>
			<description>3DActivation shall not contain entries except Transparent, Style, A, DIS, D, AIS, NP, Window, TB</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Transparent' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'A' &amp;&amp; elem != 'DIS' &amp;&amp; elem != 'D' &amp;&amp; elem != 'AIS' &amp;&amp; elem != 'NP' &amp;&amp; elem != 'Window' &amp;&amp; elem != 'TB').length == 0</test>
			<error>
				<message>3DActivation contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Transparent' &amp;&amp; elem != 'Style' &amp;&amp; elem != 'A' &amp;&amp; elem != 'DIS' &amp;&amp; elem != 'D' &amp;&amp; elem != 'AIS' &amp;&amp; elem != 'NP' &amp;&amp; elem != 'Window' &amp;&amp; elem != 'TB').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41879"/>
			<description>Entry Transparent in 3DActivation shall have type Boolean</description>
			<test>containsTransparent == false || TransparentHasTypeBoolean == true</test>
			<error>
				<message>Entry Transparent in 3DActivation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41880"/>
			<description>Entry Style with type Name in 3DActivation shall have one of values: Windowed, Embedded</description>
			<test>StyleHasTypeName != true || StyleNameValue == "Embedded" || StyleNameValue == "Windowed"</test>
			<error>
				<message>Entry Style with type Name in 3DActivation has incorrect value %2 instead of Windowed, Embedded</message>
				<arguments>
					<argument>keyName</argument>
					<argument>StyleNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41881"/>
			<description>Entry Style in 3DActivation shall have type Name</description>
			<test>containsStyle == false || StyleHasTypeName == true</test>
			<error>
				<message>Entry Style in 3DActivation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41882"/>
			<description>Entry A with type Name in 3DActivation shall have one of values: PV, XA, PO</description>
			<test>AHasTypeName != true || ANameValue == "PO" || ANameValue == "PV" || ANameValue == "XA"</test>
			<error>
				<message>Entry A with type Name in 3DActivation has incorrect value %2 instead of PV, XA, PO</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ANameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41883"/>
			<description>Entry A in 3DActivation shall have type Name</description>
			<test>containsA == false || AHasTypeName == true</test>
			<error>
				<message>Entry A in 3DActivation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41884"/>
			<description>Entry DIS with type Name in 3DActivation shall have one of values: U, I, L</description>
			<test>DISHasTypeName != true || DISNameValue == "U" || DISNameValue == "I" || DISNameValue == "L"</test>
			<error>
				<message>Entry DIS with type Name in 3DActivation has incorrect value %2 instead of U, I, L</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DISNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41885"/>
			<description>Entry DIS in 3DActivation shall have type Name</description>
			<test>containsDIS == false || DISHasTypeName == true</test>
			<error>
				<message>Entry DIS in 3DActivation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41886"/>
			<description>Entry D with type Name in 3DActivation shall have one of values: PC, PI, XD</description>
			<test>DHasTypeName != true || DNameValue == "PC" || DNameValue == "PI" || DNameValue == "XD"</test>
			<error>
				<message>Entry D with type Name in 3DActivation has incorrect value %2 instead of PC, PI, XD</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41887"/>
			<description>Entry D in 3DActivation shall have type Name</description>
			<test>containsD == false || DHasTypeName == true</test>
			<error>
				<message>Entry D in 3DActivation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="6" testNumber="41888"/>
			<description>Entry AIS with type Name in 3DActivation shall have one of values: I, L</description>
			<test>AISHasTypeName != true || AISNameValue == "I" || AISNameValue == "L"</test>
			<error>
				<message>Entry AIS with type Name in 3DActivation has incorrect value %2 instead of I, L</message>
				<arguments>
					<argument>keyName</argument>
					<argument>AISNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41889"/>
			<description>Entry AIS in 3DActivation shall have type Name</description>
			<test>containsAIS == false || AISHasTypeName == true</test>
			<error>
				<message>Entry AIS in 3DActivation is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41890"/>
			<description>Entry NP in 3DActivation shall have type Boolean</description>
			<test>containsNP == false || NPHasTypeBoolean == true</test>
			<error>
				<message>Entry NP in 3DActivation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="17" testNumber="41891"/>
			<description>Entry Window with type Dictionary in 3DActivation shall be object RichMediaWindow</description>
			<test>WindowHasTypeDictionary != true || Window_size == 1</test>
			<error>
				<message>Entry Window with type Dictionary in 3DActivation is not object RichMediaWindow</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41892"/>
			<description>Entry Window in 3DActivation shall have type Dictionary</description>
			<test>containsWindow == false || WindowHasTypeDictionary == true</test>
			<error>
				<message>Entry Window in 3DActivation is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="A3DActivation">
			<id specification="ISO_32000_1_7" clause="8" testNumber="41893"/>
			<description>Entry TB in 3DActivation shall have type Boolean</description>
			<test>containsTB == false || TBHasTypeBoolean == true</test>
			<error>
				<message>Entry TB in 3DActivation is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
	</rules>
	<variables/>
</profile>
