<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<profile xmlns="http://www.verapdf.org/ValidationProfile" flavour="ARLINGTON1_1">
	<details creator="veraPDF Consortium" created="2022-05-23T21:45:28.872+03:00">
		<name>Arlington PDF 1.1 validation profile</name>
		<description>Validation rules against PDF 1.1 Specification</description>
	</details>
	<hash></hash>
	<rules>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_1" clause="17" testNumber="4"/>
			<description>Entry with type Stream in XObjectMap shall be one of objects XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in XObjectMap is not one of objects XObjectFormType1, XObjectImage, XObjectFormPS, XObjectFormPSpassthrough</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_1" clause="10" testNumber="5"/>
			<description>Entry with type Stream in XObjectMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in XObjectMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectMapEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="6"/>
			<description>Entry in XObjectMap shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in XObjectMap is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfoEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="131"/>
			<description>Entry in DocInfo shall have type StringText</description>
			<test>HasTypeStringText == true</test>
			<error>
				<message>Entry %1 in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_1" clause="1" testNumber="1342"/>
			<description>CalGrayDict shall not contain entries except WhitePoint, BlackPoint, Gamma</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'WhitePoint' &amp;&amp; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma').length == 0</test>
			<error>
				<message>CalGrayDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'WhitePoint' &amp;&amp; elem != 'BlackPoint' &amp;&amp; elem != 'Gamma').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_1" clause="17" testNumber="1343"/>
			<description>Entry WhitePoint with type Array in CalGrayDict shall be object WhitepointArray</description>
			<test>WhitePointHasTypeArray != true || WhitePoint_size == 1</test>
			<error>
				<message>Entry WhitePoint with type Array in CalGrayDict is not object WhitepointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_1" clause="7" testNumber="1344"/>
			<description>Entry WhitePoint in CalGrayDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in CalGrayDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_1" clause="8" testNumber="1345"/>
			<description>Entry WhitePoint in CalGrayDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in CalGrayDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_1" clause="17" testNumber="1346"/>
			<description>Entry BlackPoint with type Array in CalGrayDict shall be object BlackpointArray</description>
			<test>BlackPointHasTypeArray != true || BlackPoint_size == 1</test>
			<error>
				<message>Entry BlackPoint with type Array in CalGrayDict is not object BlackpointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_1" clause="8" testNumber="1347"/>
			<description>Entry BlackPoint in CalGrayDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in CalGrayDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_1" clause="14" testNumber="1348"/>
			<description>Entry Gamma with type Number in CalGrayDict shall correspond possible value predicate: fn:Eval(@Gamma &gt; 0)</description>
			<test>GammaHasTypeNumber != true || GammaNumberValue &gt; 0</test>
			<error>
				<message>Entry Gamma with type Number in CalGrayDict doesn't correspond possible value predicate: fn:Eval(@Gamma &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayDict">
			<id specification="ISO_32000_1_1" clause="8" testNumber="1349"/>
			<description>Entry Gamma in CalGrayDict shall have type Number</description>
			<test>containsGamma == false || GammaHasTypeNumber == true</test>
			<error>
				<message>Entry Gamma in CalGrayDict is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_1" clause="1" testNumber="1406"/>
			<description>MicrosoftWindowsLaunchParam shall not contain entries except P, F, D, O</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'F' &amp;&amp; elem != 'D' &amp;&amp; elem != 'O').length == 0</test>
			<error>
				<message>MicrosoftWindowsLaunchParam contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'P' &amp;&amp; elem != 'F' &amp;&amp; elem != 'D' &amp;&amp; elem != 'O').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_1" clause="8" testNumber="1407"/>
			<description>Entry P in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsP == false || PHasTypeStringByte == true</test>
			<error>
				<message>Entry P in MicrosoftWindowsLaunchParam is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_1" clause="7" testNumber="1408"/>
			<description>Entry F in MicrosoftWindowsLaunchParam is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in MicrosoftWindowsLaunchParam is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_1" clause="8" testNumber="1409"/>
			<description>Entry F in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsF == false || FHasTypeStringByte == true</test>
			<error>
				<message>Entry F in MicrosoftWindowsLaunchParam is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_1" clause="8" testNumber="1410"/>
			<description>Entry D in MicrosoftWindowsLaunchParam shall have type StringByte</description>
			<test>containsD == false || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in MicrosoftWindowsLaunchParam is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_1" clause="6" testNumber="1411"/>
			<description>Entry O with type StringAscii in MicrosoftWindowsLaunchParam shall have one of values: print, open</description>
			<test>OHasTypeStringAscii != true || OStringAsciiValue == "open" || OStringAsciiValue == "print"</test>
			<error>
				<message>Entry O with type StringAscii in MicrosoftWindowsLaunchParam has incorrect value %2 instead of print, open</message>
				<arguments>
					<argument>keyName</argument>
					<argument>OStringAsciiValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AMicrosoftWindowsLaunchParam">
			<id specification="ISO_32000_1_1" clause="8" testNumber="1412"/>
			<description>Entry O in MicrosoftWindowsLaunchParam shall have type StringAscii</description>
			<test>containsO == false || OHasTypeStringAscii == true</test>
			<error>
				<message>Entry O in MicrosoftWindowsLaunchParam is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_1" clause="1" testNumber="1590"/>
			<description>CalRGBDict shall not contain entries except WhitePoint, Matrix, Gamma, BlackPoint</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'WhitePoint' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'BlackPoint').length == 0</test>
			<error>
				<message>CalRGBDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'WhitePoint' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Gamma' &amp;&amp; elem != 'BlackPoint').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_1" clause="17" testNumber="1591"/>
			<description>Entry WhitePoint with type Array in CalRGBDict shall be object WhitepointArray</description>
			<test>WhitePointHasTypeArray != true || WhitePoint_size == 1</test>
			<error>
				<message>Entry WhitePoint with type Array in CalRGBDict is not object WhitepointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_1" clause="7" testNumber="1592"/>
			<description>Entry WhitePoint in CalRGBDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in CalRGBDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_1" clause="8" testNumber="1593"/>
			<description>Entry WhitePoint in CalRGBDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_1" clause="17" testNumber="1594"/>
			<description>Entry Matrix with type Array in CalRGBDict shall be object ArrayOf_9Numbers</description>
			<test>MatrixHasTypeArray != true || Matrix_size == 1</test>
			<error>
				<message>Entry Matrix with type Array in CalRGBDict is not object ArrayOf_9Numbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_1" clause="8" testNumber="1595"/>
			<description>Entry Matrix in CalRGBDict shall have type Array</description>
			<test>containsMatrix == false || MatrixHasTypeArray == true</test>
			<error>
				<message>Entry Matrix in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_1" clause="17" testNumber="1596"/>
			<description>Entry Gamma with type Array in CalRGBDict shall be object GammaArray</description>
			<test>GammaHasTypeArray != true || Gamma_size == 1</test>
			<error>
				<message>Entry Gamma with type Array in CalRGBDict is not object GammaArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_1" clause="8" testNumber="1597"/>
			<description>Entry Gamma in CalRGBDict shall have type Array</description>
			<test>containsGamma == false || GammaHasTypeArray == true</test>
			<error>
				<message>Entry Gamma in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_1" clause="17" testNumber="1598"/>
			<description>Entry BlackPoint with type Array in CalRGBDict shall be object BlackpointArray</description>
			<test>BlackPointHasTypeArray != true || BlackPoint_size == 1</test>
			<error>
				<message>Entry BlackPoint with type Array in CalRGBDict is not object BlackpointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBDict">
			<id specification="ISO_32000_1_1" clause="8" testNumber="1599"/>
			<description>Entry BlackPoint in CalRGBDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in CalRGBDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCompressionFilterNamesEntry">
			<id specification="ISO_32000_1_1" clause="6" testNumber="2566"/>
			<description>Entry with type Name in ArrayOfCompressionFilterNames shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode</description>
			<test>HasTypeName != true || NameValue == "ASCIIHexDecode" || NameValue == "ASCII85Decode" || NameValue == "LZWDecode" || NameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfCompressionFilterNames has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfCompressionFilterNamesEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="2567"/>
			<description>Entry in ArrayOfCompressionFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfCompressionFilterNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_1" clause="1" testNumber="2609"/>
			<description>ActionURI shall not contain entries except Type, S, URI, IsMap</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'IsMap').length == 0</test>
			<error>
				<message>ActionURI contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'IsMap').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_1" clause="6" testNumber="2610"/>
			<description>Entry Type with type Name in ActionURI shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionURI has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_1" clause="8" testNumber="2611"/>
			<description>Entry Type in ActionURI shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionURI is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_1" clause="7" testNumber="2612"/>
			<description>Entry S in ActionURI is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionURI is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_1" clause="6" testNumber="2613"/>
			<description>Entry S with type Name in ActionURI shall have value URI</description>
			<test>SHasTypeName != true || SNameValue == "URI"</test>
			<error>
				<message>Entry S with type Name in ActionURI has incorrect value %2 instead of URI</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_1" clause="8" testNumber="2614"/>
			<description>Entry S in ActionURI shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionURI is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_1" clause="7" testNumber="2615"/>
			<description>Entry URI in ActionURI is required</description>
			<test>containsURI == true</test>
			<error>
				<message>Entry URI in ActionURI is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_1" clause="8" testNumber="2616"/>
			<description>Entry URI in ActionURI shall have type StringAscii</description>
			<test>containsURI == false || URIHasTypeStringAscii == true</test>
			<error>
				<message>Entry URI in ActionURI is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionURI">
			<id specification="ISO_32000_1_1" clause="8" testNumber="2617"/>
			<description>Entry IsMap in ActionURI shall have type Boolean</description>
			<test>containsIsMap == false || IsMapHasTypeBoolean == true</test>
			<error>
				<message>Entry IsMap in ActionURI is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_1" clause="17" testNumber="2905"/>
			<description>Entry with type Array in ColorSpaceMap shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, IndexedColorSpace</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in ColorSpaceMap is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, IndexedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_1" clause="6" testNumber="2906"/>
			<description>Entry with type Name in ColorSpaceMap shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>HasTypeName != true || NameValue == "DeviceCMYK" || NameValue == "DeviceRGB" || NameValue == "DeviceGray"</test>
			<error>
				<message>Entry %1 with type Name in ColorSpaceMap has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMapEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="2907"/>
			<description>Entry in ColorSpaceMap shall have one of types: Name, Array</description>
			<test>HasTypeName == true || HasTypeArray == true</test>
			<error>
				<message>Entry %1 in ColorSpaceMap is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_1" clause="2" testNumber="2942"/>
			<description>WhitepointArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>WhitepointArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_1" clause="14" testNumber="2943"/>
			<description>Entry 2 with type Number in WhitepointArray shall correspond possible value predicate: fn:Eval(@2 &gt; 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt; 0</test>
			<error>
				<message>Entry 2 with type Number in WhitepointArray doesn't correspond possible value predicate: fn:Eval(@2 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="2944"/>
			<description>Entry 2 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in WhitepointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_1" clause="14" testNumber="2945"/>
			<description>Entry 0 with type Number in WhitepointArray shall correspond possible value predicate: fn:Eval(@0 &gt; 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt; 0</test>
			<error>
				<message>Entry 0 with type Number in WhitepointArray doesn't correspond possible value predicate: fn:Eval(@0 &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="2946"/>
			<description>Entry 0 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in WhitepointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_1" clause="6" testNumber="2947"/>
			<description>Entry 1 with type Number in WhitepointArray shall have value 1</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue == 1</test>
			<error>
				<message>Entry 1 with type Number in WhitepointArray has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NumberValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AWhitepointArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="2948"/>
			<description>Entry 1 in WhitepointArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in WhitepointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_1" clause="1" testNumber="3660"/>
			<description>Encoding shall not contain entries except BaseEncoding, Differences, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'BaseEncoding' &amp;&amp; elem != 'Differences' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>Encoding contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'BaseEncoding' &amp;&amp; elem != 'Differences' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_1" clause="6" testNumber="3661"/>
			<description>Entry BaseEncoding with type Name in Encoding shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>BaseEncodingHasTypeName != true || BaseEncodingNameValue == "MacRomanEncoding" || BaseEncodingNameValue == "MacExpertEncoding" || BaseEncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry BaseEncoding with type Name in Encoding has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BaseEncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_1" clause="8" testNumber="3662"/>
			<description>Entry BaseEncoding in Encoding shall have type Name</description>
			<test>containsBaseEncoding == false || BaseEncodingHasTypeName == true</test>
			<error>
				<message>Entry BaseEncoding in Encoding is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_1" clause="17" testNumber="3663"/>
			<description>Entry Differences with type Array in Encoding shall be object ArrayOfDifferences</description>
			<test>DifferencesHasTypeArray != true || Differences_size == 1</test>
			<error>
				<message>Entry Differences with type Array in Encoding is not object ArrayOfDifferences</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_1" clause="8" testNumber="3664"/>
			<description>Entry Differences in Encoding shall have type Array</description>
			<test>containsDifferences == false || DifferencesHasTypeArray == true</test>
			<error>
				<message>Entry Differences in Encoding is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_1" clause="6" testNumber="3665"/>
			<description>Entry Type with type Name in Encoding shall have value Encoding</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Encoding"</test>
			<error>
				<message>Entry Type with type Name in Encoding has incorrect value %2 instead of Encoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncoding">
			<id specification="ISO_32000_1_1" clause="8" testNumber="3666"/>
			<description>Entry Type in Encoding shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Encoding is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="1" testNumber="4377"/>
			<description>ActionThread shall not contain entries except D, B, Type, F, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'B' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'F' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>ActionThread contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'B' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'F' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="17" testNumber="4378"/>
			<description>Entry D with type Dictionary in ActionThread shall be object Thread</description>
			<test>DHasTypeDictionary != true || D_size == 1</test>
			<error>
				<message>Entry D with type Dictionary in ActionThread is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="7" testNumber="4379"/>
			<description>Entry D in ActionThread is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionThread is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="10" testNumber="4380"/>
			<description>Entry D with type Dictionary in ActionThread shall be indirect</description>
			<test>DHasTypeDictionary != true || isDIndirect == true</test>
			<error>
				<message>Entry D with type Dictionary in ActionThread is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="14" testNumber="4381"/>
			<description>Entry D with type Integer in ActionThread shall correspond possible value predicate: fn:Eval((@D &gt;= 0) &amp;&amp; (@D &lt; fn:ArrayLength(trailer::Catalog::Threads)))</description>
			<test>DHasTypeInteger != true || (DIntegerValue &gt;= 0) &amp;&amp; (DIntegerValue &lt; trailerCatalogThreadsArraySize)</test>
			<error>
				<message>Entry D with type Integer in ActionThread doesn't correspond possible value predicate: fn:Eval((@D &gt;= 0) &amp;&amp; (@D &lt; fn:ArrayLength(trailer::Catalog::Threads)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="8" testNumber="4382"/>
			<description>Entry D in ActionThread shall have one of types: StringText, Integer, Dictionary</description>
			<test>containsD == false || DHasTypeStringText == true || DHasTypeInteger == true || DHasTypeDictionary == true</test>
			<error>
				<message>Entry D in ActionThread is not one of types: StringText, Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="17" testNumber="4383"/>
			<description>Entry B with type Dictionary in ActionThread shall be object Bead</description>
			<test>BHasTypeDictionary != true || B_size == 1</test>
			<error>
				<message>Entry B with type Dictionary in ActionThread is not object Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="10" testNumber="4384"/>
			<description>Entry B with type Dictionary in ActionThread shall be indirect</description>
			<test>BHasTypeDictionary != true || isBIndirect == true</test>
			<error>
				<message>Entry B with type Dictionary in ActionThread is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="14" testNumber="4385"/>
			<description>Entry B with type Integer in ActionThread shall correspond possible value predicate: fn:Eval(@B &gt;= 0)</description>
			<test>BHasTypeInteger != true || BIntegerValue &gt;= 0</test>
			<error>
				<message>Entry B with type Integer in ActionThread doesn't correspond possible value predicate: fn:Eval(@B &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="8" testNumber="4386"/>
			<description>Entry B in ActionThread shall have one of types: Integer, Dictionary</description>
			<test>containsB == false || BHasTypeInteger == true || BHasTypeDictionary == true</test>
			<error>
				<message>Entry B in ActionThread is not one of types: Integer, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="6" testNumber="4387"/>
			<description>Entry Type with type Name in ActionThread shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionThread has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="8" testNumber="4388"/>
			<description>Entry Type in ActionThread shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionThread is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="17" testNumber="4389"/>
			<description>Entry F with type Dictionary in ActionThread shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionThread is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="8" testNumber="4390"/>
			<description>Entry F in ActionThread shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionThread is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="7" testNumber="4391"/>
			<description>Entry S in ActionThread is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionThread is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="6" testNumber="4392"/>
			<description>Entry S with type Name in ActionThread shall have value Thread</description>
			<test>SHasTypeName != true || SNameValue == "Thread"</test>
			<error>
				<message>Entry S with type Name in ActionThread has incorrect value %2 instead of Thread</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionThread">
			<id specification="ISO_32000_1_1" clause="8" testNumber="4393"/>
			<description>Entry S in ActionThread shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionThread is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDifferencesEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="5542"/>
			<description>Entry in ArrayOfDifferences shall have one of types: Name, Integer</description>
			<test>HasTypeName == true || HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfDifferences is not one of types: Name, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_1" clause="2" testNumber="5550"/>
			<description>ArrayOf_2DashNumbers shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2DashNumbers contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_1" clause="8" testNumber="5551"/>
			<description>Entry 1 in ArrayOf_2DashNumbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2DashNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2DashNumbers">
			<id specification="ISO_32000_1_1" clause="8" testNumber="5552"/>
			<description>Entry 0 in ArrayOf_2DashNumbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2DashNumbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_1" clause="2" testNumber="5695"/>
			<description>CalGrayColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>CalGrayColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_1" clause="6" testNumber="5696"/>
			<description>Entry 0 with type Name in CalGrayColorSpace shall have value CalGray</description>
			<test>entry0HasTypeName != true || entry0NameValue == "CalGray"</test>
			<error>
				<message>Entry 0 with type Name in CalGrayColorSpace has incorrect value %2 instead of CalGray</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_1" clause="8" testNumber="5697"/>
			<description>Entry 0 in CalGrayColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in CalGrayColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_1" clause="17" testNumber="5698"/>
			<description>Entry 1 with type Dictionary in CalGrayColorSpace shall be object CalGrayDict</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in CalGrayColorSpace is not object CalGrayDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalGrayColorSpace">
			<id specification="ISO_32000_1_1" clause="8" testNumber="5699"/>
			<description>Entry 1 in CalGrayColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in CalGrayColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_1" clause="1" testNumber="6360"/>
			<description>DestDict shall not contain entries except D</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D').length == 0</test>
			<error>
				<message>DestDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_1" clause="17" testNumber="6361"/>
			<description>Entry D with type Array in DestDict shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in DestDict is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_1" clause="7" testNumber="6362"/>
			<description>Entry D in DestDict is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in DestDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestDict">
			<id specification="ISO_32000_1_1" clause="8" testNumber="6363"/>
			<description>Entry D in DestDict shall have type Array</description>
			<test>containsD == false || DHasTypeArray == true</test>
			<error>
				<message>Entry D in DestDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_1" clause="17" testNumber="6617"/>
			<description>Entry with type Stream in ArrayOfStreamsGeneral shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfStreamsGeneral is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_1" clause="10" testNumber="6618"/>
			<description>Entry with type Stream in ArrayOfStreamsGeneral shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in ArrayOfStreamsGeneral is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfStreamsGeneralEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="6619"/>
			<description>Entry in ArrayOfStreamsGeneral shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in ArrayOfStreamsGeneral is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_1" clause="2" testNumber="6656"/>
			<description>ArrayOf_2StringsByte shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2StringsByte contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_1" clause="8" testNumber="6657"/>
			<description>Entry 0 in ArrayOf_2StringsByte shall have type StringByte</description>
			<test>size &lt;= 0 || entry0HasTypeStringByte == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2StringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2StringsByte">
			<id specification="ISO_32000_1_1" clause="8" testNumber="6658"/>
			<description>Entry 1 in ArrayOf_2StringsByte shall have type StringByte</description>
			<test>size &lt;= 1 || entry1HasTypeStringByte == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2StringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_1" clause="1" testNumber="7059"/>
			<description>FilterLZWDecode shall not contain entries except Colors, BitsPerComponent, Columns, EarlyChange, Predictor</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Colors' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'EarlyChange' &amp;&amp; elem != 'Predictor').length == 0</test>
			<error>
				<message>FilterLZWDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Colors' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'EarlyChange' &amp;&amp; elem != 'Predictor').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_1" clause="14" testNumber="7060"/>
			<description>Entry Colors with type Integer in FilterLZWDecode shall correspond possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</description>
			<test>ColorsHasTypeInteger != true || (ColorsIntegerValue &gt;= 1) &amp;&amp; ColorsIntegerValue &lt;= 4</test>
			<error>
				<message>Entry Colors with type Integer in FilterLZWDecode doesn't correspond possible value predicate: fn:Eval((@Colors &gt;= 1) &amp;&amp; fn:BeforeVersion(1.3 , fn:Eval(@Colors &lt;= 4)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="7061"/>
			<description>Entry Colors in FilterLZWDecode shall have type Integer</description>
			<test>containsColors == false || ColorsHasTypeInteger == true</test>
			<error>
				<message>Entry Colors in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_1" clause="6" testNumber="7062"/>
			<description>Entry BitsPerComponent with type Integer in FilterLZWDecode shall have one of values: 1, 2, 4, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in FilterLZWDecode has incorrect value %2 instead of 1, 2, 4, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="7063"/>
			<description>Entry BitsPerComponent in FilterLZWDecode shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="7064"/>
			<description>Entry Columns in FilterLZWDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_1" clause="6" testNumber="7065"/>
			<description>Entry EarlyChange with type Integer in FilterLZWDecode shall have one of values: 0, 1</description>
			<test>EarlyChangeHasTypeInteger != true || EarlyChangeIntegerValue == 0 || EarlyChangeIntegerValue == 1</test>
			<error>
				<message>Entry EarlyChange with type Integer in FilterLZWDecode has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EarlyChangeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="7066"/>
			<description>Entry EarlyChange in FilterLZWDecode shall have type Integer</description>
			<test>containsEarlyChange == false || EarlyChangeHasTypeInteger == true</test>
			<error>
				<message>Entry EarlyChange in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_1" clause="6" testNumber="7067"/>
			<description>Entry Predictor with type Integer in FilterLZWDecode shall have one of values: 11, 1, 12, 2, 13, 14, 15, 10</description>
			<test>PredictorHasTypeInteger != true || PredictorIntegerValue == 1 || PredictorIntegerValue == 2 || PredictorIntegerValue == 10 || PredictorIntegerValue == 11 || PredictorIntegerValue == 12 || PredictorIntegerValue == 13 || PredictorIntegerValue == 14 || PredictorIntegerValue == 15</test>
			<error>
				<message>Entry Predictor with type Integer in FilterLZWDecode has incorrect value %2 instead of 11, 1, 12, 2, 13, 14, 15, 10</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PredictorIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterLZWDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="7068"/>
			<description>Entry Predictor in FilterLZWDecode shall have type Integer</description>
			<test>containsPredictor == false || PredictorHasTypeInteger == true</test>
			<error>
				<message>Entry Predictor in FilterLZWDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_1" clause="2" testNumber="7834"/>
			<description>DestXYZArray shall contain exactly 5 elements</description>
			<test>size == 5</test>
			<error>
				<message>DestXYZArray contains %1 element(s) instead of 5</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_1" clause="17" testNumber="7835"/>
			<description>Entry 0 with type Dictionary in DestXYZArray shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in DestXYZArray is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_1" clause="14" testNumber="7836"/>
			<description>Entry 0 with type Number in DestXYZArray shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in DestXYZArray doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="7837"/>
			<description>Entry 0 in DestXYZArray shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in DestXYZArray is not one of types: Dictionary, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="7838"/>
			<description>Entry 3 in DestXYZArray shall have one of types: Null, Number</description>
			<test>size &lt;= 3 || entry3HasTypeNull == true || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in DestXYZArray is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_1" clause="6" testNumber="7839"/>
			<description>Entry 1 with type Name in DestXYZArray shall have value XYZ</description>
			<test>entry1HasTypeName != true || entry1NameValue == "XYZ"</test>
			<error>
				<message>Entry 1 with type Name in DestXYZArray has incorrect value %2 instead of XYZ</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="7840"/>
			<description>Entry 1 in DestXYZArray shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in DestXYZArray is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="7841"/>
			<description>Entry 2 in DestXYZArray shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in DestXYZArray is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestXYZArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="7842"/>
			<description>Entry 4 in DestXYZArray shall have one of types: Null, Number</description>
			<test>size &lt;= 4 || entry4HasTypeNull == true || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in DestXYZArray is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNumbersGeneralEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="8083"/>
			<description>Entry in ArrayOfNumbersGeneral shall have type Number</description>
			<test>HasTypeNumber == true</test>
			<error>
				<message>Entry %1 in ArrayOfNumbersGeneral is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="ISO_32000_1_1" clause="17" testNumber="8426"/>
			<description>Entry with type Dictionary in ArrayOfPageTreeNodeKids shall be one of objects PageTreeNode, PageObject</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfPageTreeNodeKids is not one of objects PageTreeNode, PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfPageTreeNodeKidsEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="8427"/>
			<description>Entry in ArrayOfPageTreeNodeKids shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfPageTreeNodeKids is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_1" clause="2" testNumber="8809"/>
			<description>IndexedColorSpace shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>IndexedColorSpace contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_1" clause="14" testNumber="8810"/>
			<description>Entry 2 with type Integer in IndexedColorSpace shall correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 255))</description>
			<test>entry2HasTypeInteger != true || (entry2IntegerValue &gt;= 0) &amp;&amp; (entry2IntegerValue &lt;= 255)</test>
			<error>
				<message>Entry 2 with type Integer in IndexedColorSpace doesn't correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 255))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_1" clause="8" testNumber="8811"/>
			<description>Entry 2 in IndexedColorSpace shall have type Integer</description>
			<test>size &lt;= 2 || entry2HasTypeInteger == true</test>
			<error>
				<message>Entry 2 in IndexedColorSpace is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_1" clause="6" testNumber="8812"/>
			<description>Entry 0 with type Name in IndexedColorSpace shall have value Indexed</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Indexed"</test>
			<error>
				<message>Entry 0 with type Name in IndexedColorSpace has incorrect value %2 instead of Indexed</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_1" clause="8" testNumber="8813"/>
			<description>Entry 0 in IndexedColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in IndexedColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_1" clause="17" testNumber="8814"/>
			<description>Entry 3 with type Stream in IndexedColorSpace shall be object Stream</description>
			<test>entry3HasTypeStream != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Stream in IndexedColorSpace is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_1" clause="10" testNumber="8815"/>
			<description>Entry 3 with type Stream in IndexedColorSpace shall be indirect</description>
			<test>entry3HasTypeStream != true || isentry3Indirect == true</test>
			<error>
				<message>Entry 3 with type Stream in IndexedColorSpace is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_1" clause="8" testNumber="8816"/>
			<description>Entry 3 in IndexedColorSpace shall have one of types: Stream, String</description>
			<test>size &lt;= 3 || entry3HasTypeStream == true || entry3HasTypeString == true</test>
			<error>
				<message>Entry 3 in IndexedColorSpace is not one of types: Stream, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_1" clause="17" testNumber="8817"/>
			<description>Entry 1 with type Array in IndexedColorSpace shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace</description>
			<test>entry1HasTypeArray != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Array in IndexedColorSpace is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_1" clause="6" testNumber="8818"/>
			<description>Entry 1 with type Name in IndexedColorSpace shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>entry1HasTypeName != true || entry1NameValue == "DeviceCMYK" || entry1NameValue == "DeviceRGB" || entry1NameValue == "DeviceGray"</test>
			<error>
				<message>Entry 1 with type Name in IndexedColorSpace has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AIndexedColorSpace">
			<id specification="ISO_32000_1_1" clause="8" testNumber="8819"/>
			<description>Entry 1 in IndexedColorSpace shall have one of types: Name, Array</description>
			<test>size &lt;= 1 || entry1HasTypeName == true || entry1HasTypeArray == true</test>
			<error>
				<message>Entry 1 in IndexedColorSpace is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_1" clause="1" testNumber="8897"/>
			<description>FileSpecification shall not contain entries except F, Type, ID, FS, DOS, Mac, Unix</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'DOS' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'Unix').length == 0</test>
			<error>
				<message>FileSpecification contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'FS' &amp;&amp; elem != 'DOS' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'Unix').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_1" clause="11" testNumber="8898"/>
			<description>Entry F in FileSpecification is required, when fn:IsRequired(fn:Not(fn:IsPresent(DOS)) &amp;&amp; fn:Not(fn:IsPresent(Mac)) &amp;&amp; fn:Not(fn:IsPresent(Unix)))</description>
			<test>(containsF == true || (((containsDOS == true)) != true &amp;&amp; ((containsMac == true)) != true &amp;&amp; ((containsUnix == true)) != true) == false)</test>
			<error>
				<message>Entry F in FileSpecification is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_1" clause="8" testNumber="8899"/>
			<description>Entry F in FileSpecification shall have type String</description>
			<test>containsF == false || FHasTypeString == true</test>
			<error>
				<message>Entry F in FileSpecification is not of type String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_1" clause="11" testNumber="8900"/>
			<description>Entry Type in FileSpecification is required, when fn:IsRequired(fn:IsPresent(EF) || fn:IsPresent(EP) || fn:IsPresent(RF))</description>
			<test>(containsType == true || ((containsEF == true) || (containsEP == true) || (containsRF == true)) == false)</test>
			<error>
				<message>Entry Type in FileSpecification is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_1" clause="6" testNumber="8901"/>
			<description>Entry Type with type Name in FileSpecification shall have value Filespec</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Filespec"</test>
			<error>
				<message>Entry Type with type Name in FileSpecification has incorrect value %2 instead of Filespec</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_1" clause="8" testNumber="8902"/>
			<description>Entry Type in FileSpecification shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FileSpecification is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_1" clause="17" testNumber="8903"/>
			<description>Entry ID with type Array in FileSpecification shall be object ArrayOf_2StringsByte</description>
			<test>entryIDHasTypeArray != true || entryID_size == 1</test>
			<error>
				<message>Entry ID with type Array in FileSpecification is not object ArrayOf_2StringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_1" clause="8" testNumber="8904"/>
			<description>Entry ID in FileSpecification shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in FileSpecification is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_1" clause="8" testNumber="8905"/>
			<description>Entry FS in FileSpecification shall have type Name</description>
			<test>containsFS == false || FSHasTypeName == true</test>
			<error>
				<message>Entry FS in FileSpecification is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_1" clause="8" testNumber="8906"/>
			<description>Entry DOS in FileSpecification shall have type StringByte</description>
			<test>containsDOS == false || DOSHasTypeStringByte == true</test>
			<error>
				<message>Entry DOS in FileSpecification is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_1" clause="8" testNumber="8907"/>
			<description>Entry Mac in FileSpecification shall have type StringByte</description>
			<test>containsMac == false || MacHasTypeStringByte == true</test>
			<error>
				<message>Entry Mac in FileSpecification is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileSpecification">
			<id specification="ISO_32000_1_1" clause="8" testNumber="8908"/>
			<description>Entry Unix in FileSpecification shall have type StringByte</description>
			<test>containsUnix == false || UnixHasTypeStringByte == true</test>
			<error>
				<message>Entry Unix in FileSpecification is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_1" clause="2" testNumber="9049"/>
			<description>BlackpointArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>BlackpointArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_1" clause="14" testNumber="9050"/>
			<description>Entry 2 with type Number in BlackpointArray shall correspond possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in BlackpointArray doesn't correspond possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="9051"/>
			<description>Entry 2 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in BlackpointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_1" clause="14" testNumber="9052"/>
			<description>Entry 0 with type Number in BlackpointArray shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in BlackpointArray doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="9053"/>
			<description>Entry 0 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in BlackpointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_1" clause="14" testNumber="9054"/>
			<description>Entry 1 with type Number in BlackpointArray shall correspond possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in BlackpointArray doesn't correspond possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABlackpointArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="9055"/>
			<description>Entry 1 in BlackpointArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in BlackpointArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_1" clause="4" testNumber="9437"/>
			<description>ArrayOf_4AnnotBorderCharacteristics shall contain at least 3 elements</description>
			<test>size &gt;= 3</test>
			<error>
				<message>ArrayOf_4AnnotBorderCharacteristics contains %1 element(s)</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_1" clause="17" testNumber="9438"/>
			<description>Entry 3 with type Array in ArrayOf_4AnnotBorderCharacteristics shall be object ArrayOf_2DashNumbers</description>
			<test>entry3HasTypeArray != true || entry3_size == 1</test>
			<error>
				<message>Entry 3 with type Array in ArrayOf_4AnnotBorderCharacteristics is not object ArrayOf_2DashNumbers</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_1" clause="8" testNumber="9439"/>
			<description>Entry 3 in ArrayOf_4AnnotBorderCharacteristics shall have type Array</description>
			<test>size &lt;= 3 || entry3HasTypeArray == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4AnnotBorderCharacteristics is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_1" clause="14" testNumber="9440"/>
			<description>Entry 2 with type Number in ArrayOf_4AnnotBorderCharacteristics shall correspond possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4AnnotBorderCharacteristics doesn't correspond possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_1" clause="8" testNumber="9441"/>
			<description>Entry 2 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4AnnotBorderCharacteristics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_1" clause="14" testNumber="9442"/>
			<description>Entry 0 with type Number in ArrayOf_4AnnotBorderCharacteristics shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4AnnotBorderCharacteristics doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_1" clause="8" testNumber="9443"/>
			<description>Entry 0 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4AnnotBorderCharacteristics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_1" clause="14" testNumber="9444"/>
			<description>Entry 1 with type Number in ArrayOf_4AnnotBorderCharacteristics shall correspond possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4AnnotBorderCharacteristics doesn't correspond possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4AnnotBorderCharacteristics">
			<id specification="ISO_32000_1_1" clause="8" testNumber="9445"/>
			<description>Entry 1 in ArrayOf_4AnnotBorderCharacteristics shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4AnnotBorderCharacteristics is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURI">
			<id specification="ISO_32000_1_1" clause="1" testNumber="9720"/>
			<description>URI shall not contain entries except Base</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Base').length == 0</test>
			<error>
				<message>URI contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Base').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AURI">
			<id specification="ISO_32000_1_1" clause="8" testNumber="9721"/>
			<description>Entry Base in URI shall have type StringAscii</description>
			<test>containsBase == false || BaseHasTypeStringAscii == true</test>
			<error>
				<message>Entry Base in URI is not of type StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="1" testNumber="10148"/>
			<description>FontTrueType shall not contain entries except Encoding, Type, Name, FontDescriptor, FirstChar, Widths, LastChar, BaseFont, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Encoding' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>FontTrueType contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Encoding' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="17" testNumber="10149"/>
			<description>Entry Encoding with type Dictionary in FontTrueType shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontTrueType is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="6" testNumber="10150"/>
			<description>Entry Encoding with type Name in FontTrueType shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontTrueType has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="10151"/>
			<description>Entry Encoding in FontTrueType shall have one of types: Name, Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontTrueType is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="7" testNumber="10152"/>
			<description>Entry Type in FontTrueType is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="6" testNumber="10153"/>
			<description>Entry Type with type Name in FontTrueType shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontTrueType has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="10154"/>
			<description>Entry Type in FontTrueType shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="11" testNumber="10155"/>
			<description>Entry Name in FontTrueType is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="10156"/>
			<description>Entry Name in FontTrueType shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="17" testNumber="10157"/>
			<description>Entry FontDescriptor with type Dictionary in FontTrueType shall be object FontDescriptorTrueType</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontTrueType is not object FontDescriptorTrueType</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="11" testNumber="10158"/>
			<description>Entry FontDescriptor in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFontDescriptor == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="10" testNumber="10159"/>
			<description>Entry FontDescriptor with type Dictionary in FontTrueType shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="10160"/>
			<description>Entry FontDescriptor in FontTrueType shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontTrueType is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="11" testNumber="10161"/>
			<description>Entry FirstChar in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFirstChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FirstChar in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="10162"/>
			<description>Entry FirstChar in FontTrueType shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontTrueType is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="17" testNumber="10163"/>
			<description>Entry Widths with type Array in FontTrueType shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontTrueType is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="11" testNumber="10164"/>
			<description>Entry Widths in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsWidths == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry Widths in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="10165"/>
			<description>Entry Widths in FontTrueType shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontTrueType is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="11" testNumber="10166"/>
			<description>Entry LastChar in FontTrueType is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsLastChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry LastChar in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="10167"/>
			<description>Entry LastChar in FontTrueType shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontTrueType is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="7" testNumber="10168"/>
			<description>Entry BaseFont in FontTrueType is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="10169"/>
			<description>Entry BaseFont in FontTrueType shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="7" testNumber="10170"/>
			<description>Entry Subtype in FontTrueType is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="6" testNumber="10171"/>
			<description>Entry Subtype with type Name in FontTrueType shall have value TrueType</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "TrueType"</test>
			<error>
				<message>Entry Subtype with type Name in FontTrueType has incorrect value %2 instead of TrueType</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="10172"/>
			<description>Entry Subtype in FontTrueType shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_1" clause="1" testNumber="10845"/>
			<description>Outline shall not contain entries except Type, Last, Count, First</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'First').length == 0</test>
			<error>
				<message>Outline contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'First').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_1" clause="6" testNumber="10846"/>
			<description>Entry Type with type Name in Outline shall have value Outlines</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Outlines"</test>
			<error>
				<message>Entry Type with type Name in Outline has incorrect value %2 instead of Outlines</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_1" clause="8" testNumber="10847"/>
			<description>Entry Type in Outline shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Outline is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_1" clause="17" testNumber="10848"/>
			<description>Entry Last with type Dictionary in Outline shall be object OutlineItem</description>
			<test>LastHasTypeDictionary != true || Last_size == 1</test>
			<error>
				<message>Entry Last with type Dictionary in Outline is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_1" clause="10" testNumber="10849"/>
			<description>Entry Last with type Dictionary in Outline shall be indirect</description>
			<test>LastHasTypeDictionary != true || isLastIndirect == true</test>
			<error>
				<message>Entry Last with type Dictionary in Outline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_1" clause="8" testNumber="10850"/>
			<description>Entry Last in Outline shall have type Dictionary</description>
			<test>containsLast == false || LastHasTypeDictionary == true</test>
			<error>
				<message>Entry Last in Outline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_1" clause="14" testNumber="10851"/>
			<description>Entry Count with type Integer in Outline shall correspond possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in Outline doesn't correspond possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_1" clause="8" testNumber="10852"/>
			<description>Entry Count in Outline shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in Outline is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_1" clause="17" testNumber="10853"/>
			<description>Entry First with type Dictionary in Outline shall be object OutlineItem</description>
			<test>FirstHasTypeDictionary != true || First_size == 1</test>
			<error>
				<message>Entry First with type Dictionary in Outline is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_1" clause="10" testNumber="10854"/>
			<description>Entry First with type Dictionary in Outline shall be indirect</description>
			<test>FirstHasTypeDictionary != true || isFirstIndirect == true</test>
			<error>
				<message>Entry First with type Dictionary in Outline is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutline">
			<id specification="ISO_32000_1_1" clause="8" testNumber="10855"/>
			<description>Entry First in Outline shall have type Dictionary</description>
			<test>containsFirst == false || FirstHasTypeDictionary == true</test>
			<error>
				<message>Entry First in Outline is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_1" clause="1" testNumber="11363"/>
			<description>FilterDCTDecode shall not contain entries except ColorTransform</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ColorTransform').length == 0</test>
			<error>
				<message>FilterDCTDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ColorTransform').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_1" clause="6" testNumber="11364"/>
			<description>Entry ColorTransform with type Integer in FilterDCTDecode shall have one of values: 0, 1</description>
			<test>ColorTransformHasTypeInteger != true || ColorTransformIntegerValue == 0 || ColorTransformIntegerValue == 1</test>
			<error>
				<message>Entry ColorTransform with type Integer in FilterDCTDecode has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorTransformIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterDCTDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11365"/>
			<description>Entry ColorTransform in FilterDCTDecode shall have type Integer</description>
			<test>containsColorTransform == false || ColorTransformHasTypeInteger == true</test>
			<error>
				<message>Entry ColorTransform in FilterDCTDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_1" clause="1" testNumber="11387"/>
			<description>EncryptionPublicKey shall not contain entries except V, Filter</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'Filter').length == 0</test>
			<error>
				<message>EncryptionPublicKey contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'V' &amp;&amp; elem != 'Filter').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_1" clause="7" testNumber="11388"/>
			<description>Entry V in EncryptionPublicKey is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in EncryptionPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_1" clause="19" testNumber="11389"/>
			<description>Entry V with type Integer in EncryptionPublicKey shouldn't have deprecated value 0</description>
			<test>VIntegerValue != 0</test>
			<error>
				<message>Entry V with type Integer in EncryptionPublicKey has deprecated value 0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_1" clause="13" testNumber="11390"/>
			<description>Entry V with type Integer in EncryptionPublicKey shall have one of values: 0, 1</description>
			<test>VHasTypeInteger != true || VIntegerValue == 0 || VIntegerValue == 1</test>
			<error>
				<message>Entry V with type Integer in EncryptionPublicKey has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11391"/>
			<description>Entry V in EncryptionPublicKey shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in EncryptionPublicKey is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_1" clause="7" testNumber="11392"/>
			<description>Entry Filter in EncryptionPublicKey is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in EncryptionPublicKey is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_1" clause="6" testNumber="11393"/>
			<description>Entry Filter with type Name in EncryptionPublicKey shall have one of values: Adobe.PubSec, AdobePPKLite</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Adobe.PubSec" || FilterNameValue == "AdobePPKLite"</test>
			<error>
				<message>Entry Filter with type Name in EncryptionPublicKey has incorrect value %2 instead of Adobe.PubSec, AdobePPKLite</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionPublicKey">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11394"/>
			<description>Entry Filter in EncryptionPublicKey shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in EncryptionPublicKey is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="1" testNumber="11791"/>
			<description>Transition shall not contain entries except S, Type, M, Di, Dm, D</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Di' &amp;&amp; elem != 'Dm' &amp;&amp; elem != 'D').length == 0</test>
			<error>
				<message>Transition contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'S' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Di' &amp;&amp; elem != 'Dm' &amp;&amp; elem != 'D').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="6" testNumber="11792"/>
			<description>Entry S with type Name in Transition shall have one of values: Uncover, Glitter, R, Fly, Cover, Dissolve, Box, Split, Push, Blinds, Fade, Wipe</description>
			<test>SHasTypeName != true || SNameValue == "Split" || SNameValue == "Blinds" || SNameValue == "Box" || SNameValue == "Wipe" || SNameValue == "Dissolve" || SNameValue == "Glitter" || SNameValue == "R" || SNameValue == "Fly" || SNameValue == "Push" || SNameValue == "Cover" || SNameValue == "Uncover" || SNameValue == "Fade"</test>
			<error>
				<message>Entry S with type Name in Transition has incorrect value %2 instead of Uncover, Glitter, R, Fly, Cover, Dissolve, Box, Split, Push, Blinds, Fade, Wipe</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11793"/>
			<description>Entry S in Transition shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="6" testNumber="11794"/>
			<description>Entry Type with type Name in Transition shall have value Trans</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Trans"</test>
			<error>
				<message>Entry Type with type Name in Transition has incorrect value %2 instead of Trans</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11795"/>
			<description>Entry Type in Transition shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="6" testNumber="11796"/>
			<description>Entry M with type Name in Transition shall have one of values: I, O</description>
			<test>MHasTypeName != true || MNameValue == "I" || MNameValue == "O"</test>
			<error>
				<message>Entry M with type Name in Transition has incorrect value %2 instead of I, O</message>
				<arguments>
					<argument>keyName</argument>
					<argument>MNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11797"/>
			<description>Entry M in Transition shall have type Name</description>
			<test>containsM == false || MHasTypeName == true</test>
			<error>
				<message>Entry M in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="6" testNumber="11798"/>
			<description>Entry Di with type Name in Transition shall have value None</description>
			<test>DiHasTypeName != true || DiNameValue == "None"</test>
			<error>
				<message>Entry Di with type Name in Transition has incorrect value %2 instead of None</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DiNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="6" testNumber="11799"/>
			<description>Entry Di with type Integer in Transition shall have one of values: 0, 90, 315, 180, 270</description>
			<test>DiHasTypeInteger != true || DiIntegerValue == 0 || DiIntegerValue == 90 || DiIntegerValue == 180 || DiIntegerValue == 270 || DiIntegerValue == 315</test>
			<error>
				<message>Entry Di with type Integer in Transition has incorrect value %2 instead of 0, 90, 315, 180, 270</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DiIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11800"/>
			<description>Entry Di in Transition shall have one of types: Name, Integer</description>
			<test>containsDi == false || DiHasTypeName == true || DiHasTypeInteger == true</test>
			<error>
				<message>Entry Di in Transition is not one of types: Name, Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="9" testNumber="11801"/>
			<description>Entry Di with type Integer in Transition shall correspond special case: fn:Eval((((@Di == 90) || (@Di == 180)) &amp;&amp; (@S == Wipe)) || ((@Di == 315) &amp;&amp; (@S == Glitter)))</description>
			<test>DiHasTypeInteger != true || ((((DiIntegerValue == 90) || (DiIntegerValue == 180)) &amp;&amp; (SNameValue == "Wipe")) || ((DiIntegerValue == 315) &amp;&amp; (SNameValue == "Glitter")))</test>
			<error>
				<message>Entry Di with type Integer in Transition doesn't correspond special case: fn:Eval((((@Di == 90) || (@Di == 180)) &amp;&amp; (@S == Wipe)) || ((@Di == 315) &amp;&amp; (@S == Glitter)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="6" testNumber="11802"/>
			<description>Entry Dm with type Name in Transition shall have one of values: V, H</description>
			<test>DmHasTypeName != true || DmNameValue == "H" || DmNameValue == "V"</test>
			<error>
				<message>Entry Dm with type Name in Transition has incorrect value %2 instead of V, H</message>
				<arguments>
					<argument>keyName</argument>
					<argument>DmNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11803"/>
			<description>Entry Dm in Transition shall have type Name</description>
			<test>containsDm == false || DmHasTypeName == true</test>
			<error>
				<message>Entry Dm in Transition is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="14" testNumber="11804"/>
			<description>Entry D with type Number in Transition shall correspond possible value predicate: fn:Eval(@D &gt;= 0)</description>
			<test>DHasTypeNumber != true || DNumberValue &gt;= 0</test>
			<error>
				<message>Entry D with type Number in Transition doesn't correspond possible value predicate: fn:Eval(@D &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ATransition">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11805"/>
			<description>Entry D in Transition shall have type Number</description>
			<test>containsD == false || DHasTypeNumber == true</test>
			<error>
				<message>Entry D in Transition is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="1" testNumber="11955"/>
			<description>PageObject shall not contain entries except B, Thumb, Hid, Trans, Resources, Annots, Contents, Parent, Dur, CropBox, Rotate, MediaBox, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Hid' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>PageObject contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'B' &amp;&amp; elem != 'Thumb' &amp;&amp; elem != 'Hid' &amp;&amp; elem != 'Trans' &amp;&amp; elem != 'Resources' &amp;&amp; elem != 'Annots' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Dur' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="17" testNumber="11956"/>
			<description>Entry B with type Array in PageObject shall be object ArrayOfBeads</description>
			<test>BHasTypeArray != true || B_size == 1</test>
			<error>
				<message>Entry B with type Array in PageObject is not object ArrayOfBeads</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11957"/>
			<description>Entry B in PageObject shall have type Array</description>
			<test>containsB == false || BHasTypeArray == true</test>
			<error>
				<message>Entry B in PageObject is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="9" testNumber="11958"/>
			<description>Entry B with type Array in PageObject shall correspond special case: fn:Not(fn:IsPresent(@Type == Template))</description>
			<test>BHasTypeArray != true || ((((TypeNameValue == "Template") == true &amp;&amp; containsB == true)) != true)</test>
			<error>
				<message>Entry B with type Array in PageObject doesn't correspond special case: fn:Not(fn:IsPresent(@Type == Template))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="17" testNumber="11959"/>
			<description>Entry Thumb with type Stream in PageObject shall be object Thumbnail</description>
			<test>ThumbHasTypeStream != true || Thumb_size == 1</test>
			<error>
				<message>Entry Thumb with type Stream in PageObject is not object Thumbnail</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="10" testNumber="11960"/>
			<description>Entry Thumb with type Stream in PageObject shall be indirect</description>
			<test>ThumbHasTypeStream != true || isThumbIndirect == true</test>
			<error>
				<message>Entry Thumb with type Stream in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11961"/>
			<description>Entry Thumb in PageObject shall have type Stream</description>
			<test>containsThumb == false || ThumbHasTypeStream == true</test>
			<error>
				<message>Entry Thumb in PageObject is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11962"/>
			<description>Entry Hid in PageObject shall have type Boolean</description>
			<test>containsHid == false || HidHasTypeBoolean == true</test>
			<error>
				<message>Entry Hid in PageObject is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="17" testNumber="11963"/>
			<description>Entry Trans with type Dictionary in PageObject shall be object Transition</description>
			<test>TransHasTypeDictionary != true || Trans_size == 1</test>
			<error>
				<message>Entry Trans with type Dictionary in PageObject is not object Transition</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11964"/>
			<description>Entry Trans in PageObject shall have type Dictionary</description>
			<test>containsTrans == false || TransHasTypeDictionary == true</test>
			<error>
				<message>Entry Trans in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="17" testNumber="11965"/>
			<description>Entry Resources with type Dictionary in PageObject shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PageObject is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="7" testNumber="11966"/>
			<description>Entry Resources in PageObject is required</description>
			<test>containsResources == true</test>
			<error>
				<message>Entry Resources in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11967"/>
			<description>Entry Resources in PageObject shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="17" testNumber="11968"/>
			<description>Entry Annots with type Array in PageObject shall be object ArrayOfAnnots</description>
			<test>AnnotsHasTypeArray != true || Annots_size == 1</test>
			<error>
				<message>Entry Annots with type Array in PageObject is not object ArrayOfAnnots</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11969"/>
			<description>Entry Annots in PageObject shall have type Array</description>
			<test>containsAnnots == false || AnnotsHasTypeArray == true</test>
			<error>
				<message>Entry Annots in PageObject is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="17" testNumber="11970"/>
			<description>Entry Contents with type Array in PageObject shall be object ArrayOfStreamsGeneral</description>
			<test>ContentsHasTypeArray != true || Contents_size == 1</test>
			<error>
				<message>Entry Contents with type Array in PageObject is not object ArrayOfStreamsGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="17" testNumber="11971"/>
			<description>Entry Contents with type Stream in PageObject shall be object Stream</description>
			<test>ContentsHasTypeStream != true || Contents_size == 1</test>
			<error>
				<message>Entry Contents with type Stream in PageObject is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="10" testNumber="11972"/>
			<description>Entry Contents with type Stream in PageObject shall be indirect</description>
			<test>ContentsHasTypeStream != true || isContentsIndirect == true</test>
			<error>
				<message>Entry Contents with type Stream in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11973"/>
			<description>Entry Contents in PageObject shall have one of types: Array, Stream</description>
			<test>containsContents == false || ContentsHasTypeArray == true || ContentsHasTypeStream == true</test>
			<error>
				<message>Entry Contents in PageObject is not one of types: Array, Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="17" testNumber="11974"/>
			<description>Entry Parent with type Dictionary in PageObject shall be one of objects PageTreeNode, PageTreeNodeRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject is not one of objects PageTreeNode, PageTreeNodeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="11" testNumber="11975"/>
			<description>Entry Parent in PageObject is required, when fn:IsRequired(@Type != Template)</description>
			<test>(containsParent == true || (TypeNameValue != "Template") == false)</test>
			<error>
				<message>Entry Parent in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="10" testNumber="11976"/>
			<description>Entry Parent with type Dictionary in PageObject shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11977"/>
			<description>Entry Parent in PageObject shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in PageObject is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="9" testNumber="11978"/>
			<description>Entry Parent with type Dictionary in PageObject shall correspond special case: fn:Not(fn:IsPresent(@Type == Template))</description>
			<test>ParentHasTypeDictionary != true || ((((TypeNameValue == "Template") == true &amp;&amp; containsParent == true)) != true)</test>
			<error>
				<message>Entry Parent with type Dictionary in PageObject doesn't correspond special case: fn:Not(fn:IsPresent(@Type == Template))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11979"/>
			<description>Entry Dur in PageObject shall have type Number</description>
			<test>containsDur == false || DurHasTypeNumber == true</test>
			<error>
				<message>Entry Dur in PageObject is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11980"/>
			<description>Entry CropBox in PageObject shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="14" testNumber="11981"/>
			<description>Entry Rotate with type Integer in PageObject shall correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageObject doesn't correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11982"/>
			<description>Entry Rotate in PageObject shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageObject is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="7" testNumber="11983"/>
			<description>Entry MediaBox in PageObject is required</description>
			<test>containsMediaBox == true</test>
			<error>
				<message>Entry MediaBox in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11984"/>
			<description>Entry MediaBox in PageObject shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageObject is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="7" testNumber="11985"/>
			<description>Entry Type in PageObject is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageObject is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="6" testNumber="11986"/>
			<description>Entry Type with type Name in PageObject shall have one of values: Page, Template</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Page" || TypeNameValue == "Template"</test>
			<error>
				<message>Entry Type with type Name in PageObject has incorrect value %2 instead of Page, Template</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageObject">
			<id specification="ISO_32000_1_1" clause="8" testNumber="11987"/>
			<description>Entry Type in PageObject shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageObject is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_1" clause="2" testNumber="12661"/>
			<description>Dest1Array shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>Dest1Array contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_1" clause="8" testNumber="12662"/>
			<description>Entry 2 in Dest1Array shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in Dest1Array is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_1" clause="17" testNumber="12663"/>
			<description>Entry 0 with type Dictionary in Dest1Array shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in Dest1Array is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_1" clause="14" testNumber="12664"/>
			<description>Entry 0 with type Number in Dest1Array shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest1Array doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_1" clause="8" testNumber="12665"/>
			<description>Entry 0 in Dest1Array shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in Dest1Array is not one of types: Dictionary, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_1" clause="6" testNumber="12666"/>
			<description>Entry 1 with type Name in Dest1Array shall have one of values: FitV, FitH, FitBH, FitBV</description>
			<test>entry1HasTypeName != true || entry1NameValue == "FitH" || entry1NameValue == "FitV" || entry1NameValue == "FitBH" || entry1NameValue == "FitBV"</test>
			<error>
				<message>Entry 1 with type Name in Dest1Array has incorrect value %2 instead of FitV, FitH, FitBH, FitBV</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest1Array">
			<id specification="ISO_32000_1_1" clause="8" testNumber="12667"/>
			<description>Entry 1 in Dest1Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest1Array is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="1" testNumber="13467"/>
			<description>XObjectFormPS shall not contain entries except Filter, Subtype, DecodeParms, Length, Type, Level1, F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'F').length == 0</test>
			<error>
				<message>XObjectFormPS contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="17" testNumber="13468"/>
			<description>Entry Filter with type Array in XObjectFormPS shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPS is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="6" testNumber="13469"/>
			<description>Entry Filter with type Name in XObjectFormPS shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormPS has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13470"/>
			<description>Entry Filter in XObjectFormPS shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in XObjectFormPS is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="9" testNumber="13471"/>
			<description>Entry Filter with type Array in XObjectFormPS shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPS doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="7" testNumber="13472"/>
			<description>Entry Subtype in XObjectFormPS is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPS is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="6" testNumber="13473"/>
			<description>Entry Subtype with type Name in XObjectFormPS shall have value PS</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PS"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormPS has incorrect value %2 instead of PS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13474"/>
			<description>Entry Subtype in XObjectFormPS shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPS is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="17" testNumber="13475"/>
			<description>Entry DecodeParms with type Array in XObjectFormPS shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPS is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="17" testNumber="13476"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormPS shall be object FilterLZWDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormPS is not object FilterLZWDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13477"/>
			<description>Entry DecodeParms in XObjectFormPS shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPS is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="9" testNumber="13478"/>
			<description>Entry DecodeParms with type Array in XObjectFormPS shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPS doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="7" testNumber="13479"/>
			<description>Entry Length in XObjectFormPS is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormPS is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13480"/>
			<description>Entry Length in XObjectFormPS shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormPS is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="6" testNumber="13481"/>
			<description>Entry Type with type Name in XObjectFormPS shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormPS has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13482"/>
			<description>Entry Type in XObjectFormPS shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormPS is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="17" testNumber="13483"/>
			<description>Entry Level1 with type Stream in XObjectFormPS shall be object Stream</description>
			<test>Level1HasTypeStream != true || Level1_size == 1</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPS is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="10" testNumber="13484"/>
			<description>Entry Level1 with type Stream in XObjectFormPS shall be indirect</description>
			<test>Level1HasTypeStream != true || isLevel1Indirect == true</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPS is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13485"/>
			<description>Entry Level1 in XObjectFormPS shall have type Stream</description>
			<test>containsLevel1 == false || Level1HasTypeStream == true</test>
			<error>
				<message>Entry Level1 in XObjectFormPS is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="17" testNumber="13486"/>
			<description>Entry F with type Dictionary in XObjectFormPS shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormPS is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPS">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13487"/>
			<description>Entry F in XObjectFormPS shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectFormPS is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_1" clause="1" testNumber="13747"/>
			<description>LabDict shall not contain entries except WhitePoint, BlackPoint, Range</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'WhitePoint' &amp;&amp; elem != 'BlackPoint' &amp;&amp; elem != 'Range').length == 0</test>
			<error>
				<message>LabDict contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'WhitePoint' &amp;&amp; elem != 'BlackPoint' &amp;&amp; elem != 'Range').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_1" clause="17" testNumber="13748"/>
			<description>Entry WhitePoint with type Array in LabDict shall be object WhitepointArray</description>
			<test>WhitePointHasTypeArray != true || WhitePoint_size == 1</test>
			<error>
				<message>Entry WhitePoint with type Array in LabDict is not object WhitepointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_1" clause="7" testNumber="13749"/>
			<description>Entry WhitePoint in LabDict is required</description>
			<test>containsWhitePoint == true</test>
			<error>
				<message>Entry WhitePoint in LabDict is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13750"/>
			<description>Entry WhitePoint in LabDict shall have type Array</description>
			<test>containsWhitePoint == false || WhitePointHasTypeArray == true</test>
			<error>
				<message>Entry WhitePoint in LabDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_1" clause="17" testNumber="13751"/>
			<description>Entry BlackPoint with type Array in LabDict shall be object BlackpointArray</description>
			<test>BlackPointHasTypeArray != true || BlackPoint_size == 1</test>
			<error>
				<message>Entry BlackPoint with type Array in LabDict is not object BlackpointArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13752"/>
			<description>Entry BlackPoint in LabDict shall have type Array</description>
			<test>containsBlackPoint == false || BlackPointHasTypeArray == true</test>
			<error>
				<message>Entry BlackPoint in LabDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_1" clause="17" testNumber="13753"/>
			<description>Entry Range with type Array in LabDict shall be object LabRangeArray</description>
			<test>RangeHasTypeArray != true || Range_size == 1</test>
			<error>
				<message>Entry Range with type Array in LabDict is not object LabRangeArray</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabDict">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13754"/>
			<description>Entry Range in LabDict shall have type Array</description>
			<test>containsRange == false || RangeHasTypeArray == true</test>
			<error>
				<message>Entry Range in LabDict is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_1" clause="1" testNumber="13827"/>
			<description>FontFileType1 shall not contain entries except Length2, Subtype, Length3, Length1</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Length2' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Length1').length == 0</test>
			<error>
				<message>FontFileType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Length2' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'Length3' &amp;&amp; elem != 'Length1').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="13828"/>
			<description>Entry Length2 in FontFileType1 is required</description>
			<test>containsLength2 == true</test>
			<error>
				<message>Entry Length2 in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13829"/>
			<description>Entry Length2 in FontFileType1 shall have type Integer</description>
			<test>containsLength2 == false || Length2HasTypeInteger == true</test>
			<error>
				<message>Entry Length2 in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_1" clause="9" testNumber="13830"/>
			<description>Entry Length2 with type Integer in FontFileType1 shall correspond special case: fn:Eval(@Length2 &gt;= 0)</description>
			<test>Length2HasTypeInteger != true || (Length2IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length2 with type Integer in FontFileType1 doesn't correspond special case: fn:Eval(@Length2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13831"/>
			<description>Entry Subtype in FontFileType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontFileType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="13832"/>
			<description>Entry Length3 in FontFileType1 is required</description>
			<test>containsLength3 == true</test>
			<error>
				<message>Entry Length3 in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13833"/>
			<description>Entry Length3 in FontFileType1 shall have type Integer</description>
			<test>containsLength3 == false || Length3HasTypeInteger == true</test>
			<error>
				<message>Entry Length3 in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_1" clause="9" testNumber="13834"/>
			<description>Entry Length3 with type Integer in FontFileType1 shall correspond special case: fn:Eval(@Length3 &gt;= 0)</description>
			<test>Length3HasTypeInteger != true || (Length3IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length3 with type Integer in FontFileType1 doesn't correspond special case: fn:Eval(@Length3 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="13835"/>
			<description>Entry Length1 in FontFileType1 is required</description>
			<test>containsLength1 == true</test>
			<error>
				<message>Entry Length1 in FontFileType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="13836"/>
			<description>Entry Length1 in FontFileType1 shall have type Integer</description>
			<test>containsLength1 == false || Length1HasTypeInteger == true</test>
			<error>
				<message>Entry Length1 in FontFileType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontFileType1">
			<id specification="ISO_32000_1_1" clause="9" testNumber="13837"/>
			<description>Entry Length1 with type Integer in FontFileType1 shall correspond special case: fn:Eval(@Length1 &gt;= 0)</description>
			<test>Length1HasTypeInteger != true || (Length1IntegerValue &gt;= 0)</test>
			<error>
				<message>Entry Length1 with type Integer in FontFileType1 doesn't correspond special case: fn:Eval(@Length1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotsEntry">
			<id specification="ISO_32000_1_1" clause="17" testNumber="14611"/>
			<description>Entry with type Dictionary in ArrayOfAnnots shall be one of objects AnnotText, AnnotLink</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfAnnots is not one of objects AnnotText, AnnotLink</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfAnnotsEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="14612"/>
			<description>Entry in ArrayOfAnnots shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfAnnots is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_1" clause="8" testNumber="14662"/>
			<description>Entry Producer in DocInfo shall have type StringText</description>
			<test>containsProducer == false || ProducerHasTypeStringText == true</test>
			<error>
				<message>Entry Producer in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_1" clause="8" testNumber="14663"/>
			<description>Entry Creator in DocInfo shall have type StringText</description>
			<test>containsCreator == false || CreatorHasTypeStringText == true</test>
			<error>
				<message>Entry Creator in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_1" clause="8" testNumber="14664"/>
			<description>Entry CreationDate in DocInfo shall have type Date</description>
			<test>containsCreationDate == false || CreationDateHasTypeDate == true</test>
			<error>
				<message>Entry CreationDate in DocInfo is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_1" clause="8" testNumber="14665"/>
			<description>Entry Keywords in DocInfo shall have type StringText</description>
			<test>containsKeywords == false || KeywordsHasTypeStringText == true</test>
			<error>
				<message>Entry Keywords in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_1" clause="8" testNumber="14666"/>
			<description>Entry ModDate in DocInfo shall have type Date</description>
			<test>containsModDate == false || ModDateHasTypeDate == true</test>
			<error>
				<message>Entry ModDate in DocInfo is not of type Date</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_1" clause="8" testNumber="14667"/>
			<description>Entry Subject in DocInfo shall have type StringText</description>
			<test>containsSubject == false || SubjectHasTypeStringText == true</test>
			<error>
				<message>Entry Subject in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_1" clause="8" testNumber="14668"/>
			<description>Entry Author in DocInfo shall have type StringText</description>
			<test>containsAuthor == false || AuthorHasTypeStringText == true</test>
			<error>
				<message>Entry Author in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADocInfo">
			<id specification="ISO_32000_1_1" clause="8" testNumber="14669"/>
			<description>Entry Title in DocInfo shall have type StringText</description>
			<test>containsTitle == false || TitleHasTypeStringText == true</test>
			<error>
				<message>Entry Title in DocInfo is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_1" clause="1" testNumber="15170"/>
			<description>ActionGoTo shall not contain entries except D, Type, S</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S').length == 0</test>
			<error>
				<message>ActionGoTo contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'D' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'S').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_1" clause="17" testNumber="15171"/>
			<description>Entry D with type Array in ActionGoTo shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in ActionGoTo is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_1" clause="7" testNumber="15172"/>
			<description>Entry D in ActionGoTo is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionGoTo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15173"/>
			<description>Entry D in ActionGoTo shall have one of types: Name, Array, StringByte</description>
			<test>containsD == false || DHasTypeName == true || DHasTypeArray == true || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in ActionGoTo is not one of types: Name, Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_1" clause="6" testNumber="15174"/>
			<description>Entry Type with type Name in ActionGoTo shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoTo has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15175"/>
			<description>Entry Type in ActionGoTo shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoTo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_1" clause="7" testNumber="15176"/>
			<description>Entry S in ActionGoTo is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoTo is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_1" clause="6" testNumber="15177"/>
			<description>Entry S with type Name in ActionGoTo shall have value GoTo</description>
			<test>SHasTypeName != true || SNameValue == "GoTo"</test>
			<error>
				<message>Entry S with type Name in ActionGoTo has incorrect value %2 instead of GoTo</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoTo">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15178"/>
			<description>Entry S in ActionGoTo shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoTo is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_1" clause="2" testNumber="15265"/>
			<description>LabRangeArray shall contain exactly 4 elements</description>
			<test>size == 4</test>
			<error>
				<message>LabRangeArray contains %1 element(s) instead of 4</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_1" clause="14" testNumber="15266"/>
			<description>Entry 1 with type Number in LabRangeArray shall correspond possible value predicate: fn:Eval(@1 &gt;= @0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= entry0NumberValue</test>
			<error>
				<message>Entry 1 with type Number in LabRangeArray doesn't correspond possible value predicate: fn:Eval(@1 &gt;= @0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15267"/>
			<description>Entry 1 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_1" clause="14" testNumber="15268"/>
			<description>Entry 2 with type Number in LabRangeArray shall correspond possible value predicate: fn:Eval(@2 &lt;= @3)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &lt;= entry3NumberValue</test>
			<error>
				<message>Entry 2 with type Number in LabRangeArray doesn't correspond possible value predicate: fn:Eval(@2 &lt;= @3)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15269"/>
			<description>Entry 2 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_1" clause="14" testNumber="15270"/>
			<description>Entry 3 with type Number in LabRangeArray shall correspond possible value predicate: fn:Eval(@3 &gt;= @2)</description>
			<test>entry3HasTypeNumber != true || entry3NumberValue &gt;= entry2NumberValue</test>
			<error>
				<message>Entry 3 with type Number in LabRangeArray doesn't correspond possible value predicate: fn:Eval(@3 &gt;= @2)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15271"/>
			<description>Entry 3 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_1" clause="14" testNumber="15272"/>
			<description>Entry 0 with type Number in LabRangeArray shall correspond possible value predicate: fn:Eval(@0 &lt;= @1)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &lt;= entry1NumberValue</test>
			<error>
				<message>Entry 0 with type Number in LabRangeArray doesn't correspond possible value predicate: fn:Eval(@0 &lt;= @1)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabRangeArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15273"/>
			<description>Entry 0 in LabRangeArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in LabRangeArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_1" clause="17" testNumber="15535"/>
			<description>Entry DefaultGray with type Array in ColorSpaceMap shall be object CalGrayColorSpace</description>
			<test>DefaultGrayHasTypeArray != true || DefaultGray_size == 1</test>
			<error>
				<message>Entry DefaultGray with type Array in ColorSpaceMap is not object CalGrayColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15536"/>
			<description>Entry DefaultGray in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultGray == false || DefaultGrayHasTypeArray == true</test>
			<error>
				<message>Entry DefaultGray in ColorSpaceMap is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_1" clause="17" testNumber="15537"/>
			<description>Entry DefaultRGB with type Array in ColorSpaceMap shall be object CalRGBColorSpace</description>
			<test>DefaultRGBHasTypeArray != true || DefaultRGB_size == 1</test>
			<error>
				<message>Entry DefaultRGB with type Array in ColorSpaceMap is not object CalRGBColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AColorSpaceMap">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15538"/>
			<description>Entry DefaultRGB in ColorSpaceMap shall have type Array</description>
			<test>containsDefaultRGB == false || DefaultRGBHasTypeArray == true</test>
			<error>
				<message>Entry DefaultRGB in ColorSpaceMap is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="1" testNumber="15926"/>
			<description>BeadFirst shall not contain entries except N, P, Type, R, T, V</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'V').length == 0</test>
			<error>
				<message>BeadFirst contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'N' &amp;&amp; elem != 'P' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'R' &amp;&amp; elem != 'T' &amp;&amp; elem != 'V').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="17" testNumber="15927"/>
			<description>Entry N with type Dictionary in BeadFirst shall be one of objects BeadFirst, Bead</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in BeadFirst is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="7" testNumber="15928"/>
			<description>Entry N in BeadFirst is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="10" testNumber="15929"/>
			<description>Entry N with type Dictionary in BeadFirst shall be indirect</description>
			<test>NHasTypeDictionary != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15930"/>
			<description>Entry N in BeadFirst shall have type Dictionary</description>
			<test>containsN == false || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="17" testNumber="15931"/>
			<description>Entry P with type Dictionary in BeadFirst shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in BeadFirst is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="7" testNumber="15932"/>
			<description>Entry P in BeadFirst is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="10" testNumber="15933"/>
			<description>Entry P with type Dictionary in BeadFirst shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15934"/>
			<description>Entry P in BeadFirst shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="6" testNumber="15935"/>
			<description>Entry Type with type Name in BeadFirst shall have value Bead</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Bead"</test>
			<error>
				<message>Entry Type with type Name in BeadFirst has incorrect value %2 instead of Bead</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15936"/>
			<description>Entry Type in BeadFirst shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in BeadFirst is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="7" testNumber="15937"/>
			<description>Entry R in BeadFirst is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15938"/>
			<description>Entry R in BeadFirst shall have type Rectangle</description>
			<test>containsR == false || RHasTypeRectangle == true</test>
			<error>
				<message>Entry R in BeadFirst is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="17" testNumber="15939"/>
			<description>Entry T with type Dictionary in BeadFirst shall be object Thread</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in BeadFirst is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="7" testNumber="15940"/>
			<description>Entry T in BeadFirst is required</description>
			<test>containsT == true</test>
			<error>
				<message>Entry T in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="10" testNumber="15941"/>
			<description>Entry T with type Dictionary in BeadFirst shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15942"/>
			<description>Entry T in BeadFirst shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="17" testNumber="15943"/>
			<description>Entry V with type Dictionary in BeadFirst shall be one of objects BeadFirst, Bead</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in BeadFirst is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="7" testNumber="15944"/>
			<description>Entry V in BeadFirst is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in BeadFirst is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="10" testNumber="15945"/>
			<description>Entry V with type Dictionary in BeadFirst shall be indirect</description>
			<test>VHasTypeDictionary != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Dictionary in BeadFirst is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABeadFirst">
			<id specification="ISO_32000_1_1" clause="8" testNumber="15946"/>
			<description>Entry V in BeadFirst shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in BeadFirst is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_1" clause="1" testNumber="16435"/>
			<description>ActionGoToR shall not contain entries except F, S, D, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'S' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>ActionGoToR contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'F' &amp;&amp; elem != 'S' &amp;&amp; elem != 'D' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_1" clause="17" testNumber="16436"/>
			<description>Entry F with type Dictionary in ActionGoToR shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionGoToR is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_1" clause="7" testNumber="16437"/>
			<description>Entry F in ActionGoToR is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in ActionGoToR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_1" clause="8" testNumber="16438"/>
			<description>Entry F in ActionGoToR shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionGoToR is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_1" clause="7" testNumber="16439"/>
			<description>Entry S in ActionGoToR is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionGoToR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_1" clause="6" testNumber="16440"/>
			<description>Entry S with type Name in ActionGoToR shall have value GoToR</description>
			<test>SHasTypeName != true || SNameValue == "GoToR"</test>
			<error>
				<message>Entry S with type Name in ActionGoToR has incorrect value %2 instead of GoToR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_1" clause="8" testNumber="16441"/>
			<description>Entry S in ActionGoToR shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionGoToR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_1" clause="17" testNumber="16442"/>
			<description>Entry D with type Array in ActionGoToR shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DHasTypeArray != true || D_size == 1</test>
			<error>
				<message>Entry D with type Array in ActionGoToR is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_1" clause="7" testNumber="16443"/>
			<description>Entry D in ActionGoToR is required</description>
			<test>containsD == true</test>
			<error>
				<message>Entry D in ActionGoToR is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_1" clause="8" testNumber="16444"/>
			<description>Entry D in ActionGoToR shall have one of types: Name, Array, StringByte</description>
			<test>containsD == false || DHasTypeName == true || DHasTypeArray == true || DHasTypeStringByte == true</test>
			<error>
				<message>Entry D in ActionGoToR is not one of types: Name, Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_1" clause="6" testNumber="16445"/>
			<description>Entry Type with type Name in ActionGoToR shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionGoToR has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionGoToR">
			<id specification="ISO_32000_1_1" clause="8" testNumber="16446"/>
			<description>Entry Type in ActionGoToR shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionGoToR is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="1" testNumber="16976"/>
			<description>Thumbnail shall not contain entries except Height, Width, BitsPerComponent, Decode, Type, ColorSpace, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Height' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>Thumbnail contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Height' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="7" testNumber="16977"/>
			<description>Entry Height in Thumbnail is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="8" testNumber="16978"/>
			<description>Entry Height in Thumbnail shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="7" testNumber="16979"/>
			<description>Entry Width in Thumbnail is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="8" testNumber="16980"/>
			<description>Entry Width in Thumbnail shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="7" testNumber="16981"/>
			<description>Entry BitsPerComponent in Thumbnail is required</description>
			<test>containsBitsPerComponent == true</test>
			<error>
				<message>Entry BitsPerComponent in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="6" testNumber="16982"/>
			<description>Entry BitsPerComponent with type Integer in Thumbnail shall have one of values: 1, 2, 4, 16, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8 || BitsPerComponentIntegerValue == 16</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in Thumbnail has incorrect value %2 instead of 1, 2, 4, 16, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="8" testNumber="16983"/>
			<description>Entry BitsPerComponent in Thumbnail shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in Thumbnail is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="17" testNumber="16984"/>
			<description>Entry Decode with type Array in Thumbnail shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in Thumbnail is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="8" testNumber="16985"/>
			<description>Entry Decode in Thumbnail shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in Thumbnail is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="6" testNumber="16986"/>
			<description>Entry Type with type Name in Thumbnail shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in Thumbnail has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="8" testNumber="16987"/>
			<description>Entry Type in Thumbnail shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Thumbnail is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="17" testNumber="16988"/>
			<description>Entry ColorSpace with type Array in Thumbnail shall be object IndexedColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in Thumbnail is not object IndexedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="7" testNumber="16989"/>
			<description>Entry ColorSpace in Thumbnail is required</description>
			<test>containsColorSpace == true</test>
			<error>
				<message>Entry ColorSpace in Thumbnail is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="6" testNumber="16990"/>
			<description>Entry ColorSpace with type Name in Thumbnail shall have one of values: DeviceGray, DeviceRGB</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in Thumbnail has incorrect value %2 instead of DeviceGray, DeviceRGB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="8" testNumber="16991"/>
			<description>Entry ColorSpace in Thumbnail shall have one of types: Name, Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in Thumbnail is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="6" testNumber="16992"/>
			<description>Entry Subtype with type Name in Thumbnail shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in Thumbnail has incorrect value %2 instead of Image</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThumbnail">
			<id specification="ISO_32000_1_1" clause="8" testNumber="16993"/>
			<description>Entry Subtype in Thumbnail shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in Thumbnail is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="1" testNumber="17715"/>
			<description>FontType1 shall not contain entries except FirstChar, FontDescriptor, Name, BaseFont, Subtype, LastChar, Type, Encoding, Widths</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'Widths').length == 0</test>
			<error>
				<message>FontType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FirstChar' &amp;&amp; elem != 'FontDescriptor' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'Widths').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="11" testNumber="17716"/>
			<description>Entry FirstChar in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFirstChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FirstChar in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="17717"/>
			<description>Entry FirstChar in FontType1 shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="17" testNumber="17718"/>
			<description>Entry FontDescriptor with type Dictionary in FontType1 shall be object FontDescriptorType1</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType1 is not object FontDescriptorType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="11" testNumber="17719"/>
			<description>Entry FontDescriptor in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFontDescriptor == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="12" testNumber="17720"/>
			<description>If entry FontDescriptor with type Dictionary in FontType1 corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="17721"/>
			<description>Entry FontDescriptor in FontType1 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontType1 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="11" testNumber="17722"/>
			<description>Entry Name in FontType1 is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="17723"/>
			<description>Entry Name in FontType1 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="17724"/>
			<description>Entry BaseFont in FontType1 is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="17725"/>
			<description>Entry BaseFont in FontType1 shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="17726"/>
			<description>Entry Subtype in FontType1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="6" testNumber="17727"/>
			<description>Entry Subtype with type Name in FontType1 shall have value Type1</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type1"</test>
			<error>
				<message>Entry Subtype with type Name in FontType1 has incorrect value %2 instead of Type1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="17728"/>
			<description>Entry Subtype in FontType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="11" testNumber="17729"/>
			<description>Entry LastChar in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsLastChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry LastChar in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="17730"/>
			<description>Entry LastChar in FontType1 shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="17731"/>
			<description>Entry Type in FontType1 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="6" testNumber="17732"/>
			<description>Entry Type with type Name in FontType1 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType1 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="17733"/>
			<description>Entry Type in FontType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="17" testNumber="17734"/>
			<description>Entry Encoding with type Dictionary in FontType1 shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontType1 is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="6" testNumber="17735"/>
			<description>Entry Encoding with type Name in FontType1 shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontType1 has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="17736"/>
			<description>Entry Encoding in FontType1 shall have one of types: Name, Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontType1 is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="17" testNumber="17737"/>
			<description>Entry Widths with type Array in FontType1 shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontType1 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="11" testNumber="17738"/>
			<description>Entry Widths in FontType1 is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsWidths == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry Widths in FontType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="17739"/>
			<description>Entry Widths in FontType1 shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType1">
			<id specification="ISO_32000_1_1" clause="9" testNumber="17740"/>
			<description>Entry Widths with type Array in FontType1 shall correspond special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</description>
			<test>WidthsHasTypeArray != true || (WidthsArraySize == (1 + (LastCharIntegerValue - FirstCharIntegerValue)))</test>
			<error>
				<message>Entry Widths with type Array in FontType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_1" clause="2" testNumber="17944"/>
			<description>CalRGBColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>CalRGBColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_1" clause="17" testNumber="17945"/>
			<description>Entry 1 with type Dictionary in CalRGBColorSpace shall be object CalRGBDict</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in CalRGBColorSpace is not object CalRGBDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_1" clause="8" testNumber="17946"/>
			<description>Entry 1 in CalRGBColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in CalRGBColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_1" clause="6" testNumber="17947"/>
			<description>Entry 0 with type Name in CalRGBColorSpace shall have value CalRGB</description>
			<test>entry0HasTypeName != true || entry0NameValue == "CalRGB"</test>
			<error>
				<message>Entry 0 with type Name in CalRGBColorSpace has incorrect value %2 instead of CalRGB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACalRGBColorSpace">
			<id specification="ISO_32000_1_1" clause="8" testNumber="17948"/>
			<description>Entry 0 in CalRGBColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in CalRGBColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="1" testNumber="18021"/>
			<description>FontType3 shall not contain entries except FontDescriptor, CharProcs, LastChar, Type, Encoding, FontBBox, Name, FirstChar, FontMatrix, Widths, Subtype</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FontDescriptor' &amp;&amp; elem != 'CharProcs' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontMatrix' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'Subtype').length == 0</test>
			<error>
				<message>FontType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FontDescriptor' &amp;&amp; elem != 'CharProcs' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'FontMatrix' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'Subtype').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="17" testNumber="18022"/>
			<description>Entry FontDescriptor with type Dictionary in FontType3 shall be object FontDescriptorType3</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType3 is not object FontDescriptorType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="11" testNumber="18023"/>
			<description>Entry FontDescriptor in FontType3 is required, when fn:IsRequired(fn:IsPDFTagged())</description>
			<test>(containsFontDescriptor == true || (isPDFTagged) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="12" testNumber="18024"/>
			<description>If entry FontDescriptor with type Dictionary in FontType3 corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || (isFontDescriptorIndirect == true || (true) == false)</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontType3 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18025"/>
			<description>Entry FontDescriptor in FontType3 shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="17" testNumber="18026"/>
			<description>Entry CharProcs with type Dictionary in FontType3 shall be object CharProcMap</description>
			<test>CharProcsHasTypeDictionary != true || CharProcs_size == 1</test>
			<error>
				<message>Entry CharProcs with type Dictionary in FontType3 is not object CharProcMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="7" testNumber="18027"/>
			<description>Entry CharProcs in FontType3 is required</description>
			<test>containsCharProcs == true</test>
			<error>
				<message>Entry CharProcs in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18028"/>
			<description>Entry CharProcs in FontType3 shall have type Dictionary</description>
			<test>containsCharProcs == false || CharProcsHasTypeDictionary == true</test>
			<error>
				<message>Entry CharProcs in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="7" testNumber="18029"/>
			<description>Entry LastChar in FontType3 is required</description>
			<test>containsLastChar == true</test>
			<error>
				<message>Entry LastChar in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18030"/>
			<description>Entry LastChar in FontType3 shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="7" testNumber="18031"/>
			<description>Entry Type in FontType3 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="6" testNumber="18032"/>
			<description>Entry Type with type Name in FontType3 shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontType3 has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18033"/>
			<description>Entry Type in FontType3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="17" testNumber="18034"/>
			<description>Entry Encoding with type Dictionary in FontType3 shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontType3 is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="7" testNumber="18035"/>
			<description>Entry Encoding in FontType3 is required</description>
			<test>containsEncoding == true</test>
			<error>
				<message>Entry Encoding in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18036"/>
			<description>Entry Encoding in FontType3 shall have type Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontType3 is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="7" testNumber="18037"/>
			<description>Entry FontBBox in FontType3 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18038"/>
			<description>Entry FontBBox in FontType3 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontType3 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="11" testNumber="18039"/>
			<description>Entry Name in FontType3 is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18040"/>
			<description>Entry Name in FontType3 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="7" testNumber="18041"/>
			<description>Entry FirstChar in FontType3 is required</description>
			<test>containsFirstChar == true</test>
			<error>
				<message>Entry FirstChar in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18042"/>
			<description>Entry FirstChar in FontType3 shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontType3 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="7" testNumber="18043"/>
			<description>Entry FontMatrix in FontType3 is required</description>
			<test>containsFontMatrix == true</test>
			<error>
				<message>Entry FontMatrix in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18044"/>
			<description>Entry FontMatrix in FontType3 shall have type Matrix</description>
			<test>containsFontMatrix == false || FontMatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry FontMatrix in FontType3 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="17" testNumber="18045"/>
			<description>Entry Widths with type Array in FontType3 shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontType3 is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="7" testNumber="18046"/>
			<description>Entry Widths in FontType3 is required</description>
			<test>containsWidths == true</test>
			<error>
				<message>Entry Widths in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18047"/>
			<description>Entry Widths in FontType3 shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontType3 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="9" testNumber="18048"/>
			<description>Entry Widths with type Array in FontType3 shall correspond special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</description>
			<test>WidthsHasTypeArray != true || (WidthsArraySize == (1 + (LastCharIntegerValue - FirstCharIntegerValue)))</test>
			<error>
				<message>Entry Widths with type Array in FontType3 doesn't correspond special case: fn:Eval(fn:ArrayLength(Widths) == (1 + (@LastChar - @FirstChar)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="7" testNumber="18049"/>
			<description>Entry Subtype in FontType3 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="6" testNumber="18050"/>
			<description>Entry Subtype with type Name in FontType3 shall have value Type3</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Type3"</test>
			<error>
				<message>Entry Subtype with type Name in FontType3 has incorrect value %2 instead of Type3</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18051"/>
			<description>Entry Subtype in FontType3 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_1" clause="1" testNumber="18317"/>
			<description>FilterCCITTFaxDecode shall not contain entries except K, Blackls1, EncodedByteAlign, BlackIs1, EndOfLine, DamagedRowsBeforeError, Columns, Rows, EndOfBlock</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'K' &amp;&amp; elem != 'Blackls1' &amp;&amp; elem != 'EncodedByteAlign' &amp;&amp; elem != 'BlackIs1' &amp;&amp; elem != 'EndOfLine' &amp;&amp; elem != 'DamagedRowsBeforeError' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'Rows' &amp;&amp; elem != 'EndOfBlock').length == 0</test>
			<error>
				<message>FilterCCITTFaxDecode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'K' &amp;&amp; elem != 'Blackls1' &amp;&amp; elem != 'EncodedByteAlign' &amp;&amp; elem != 'BlackIs1' &amp;&amp; elem != 'EndOfLine' &amp;&amp; elem != 'DamagedRowsBeforeError' &amp;&amp; elem != 'Columns' &amp;&amp; elem != 'Rows' &amp;&amp; elem != 'EndOfBlock').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18318"/>
			<description>Entry K in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsK == false || KHasTypeInteger == true</test>
			<error>
				<message>Entry K in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18319"/>
			<description>Entry Blackls1 in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsBlackls1 == false || Blackls1HasTypeBoolean == true</test>
			<error>
				<message>Entry Blackls1 in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18320"/>
			<description>Entry EncodedByteAlign in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEncodedByteAlign == false || EncodedByteAlignHasTypeBoolean == true</test>
			<error>
				<message>Entry EncodedByteAlign in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18321"/>
			<description>Entry BlackIs1 in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsBlackIs1 == false || BlackIs1HasTypeBoolean == true</test>
			<error>
				<message>Entry BlackIs1 in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18322"/>
			<description>Entry EndOfLine in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEndOfLine == false || EndOfLineHasTypeBoolean == true</test>
			<error>
				<message>Entry EndOfLine in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_1" clause="14" testNumber="18323"/>
			<description>Entry DamagedRowsBeforeError with type Integer in FilterCCITTFaxDecode shall correspond possible value predicate: fn:Eval(@DamagedRowsBeforeError &gt;= 0)</description>
			<test>DamagedRowsBeforeErrorHasTypeInteger != true || DamagedRowsBeforeErrorIntegerValue &gt;= 0</test>
			<error>
				<message>Entry DamagedRowsBeforeError with type Integer in FilterCCITTFaxDecode doesn't correspond possible value predicate: fn:Eval(@DamagedRowsBeforeError &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18324"/>
			<description>Entry DamagedRowsBeforeError in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsDamagedRowsBeforeError == false || DamagedRowsBeforeErrorHasTypeInteger == true</test>
			<error>
				<message>Entry DamagedRowsBeforeError in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_1" clause="14" testNumber="18325"/>
			<description>Entry Columns with type Integer in FilterCCITTFaxDecode shall correspond possible value predicate: fn:Eval(@Columns &gt;= 0)</description>
			<test>ColumnsHasTypeInteger != true || ColumnsIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Columns with type Integer in FilterCCITTFaxDecode doesn't correspond possible value predicate: fn:Eval(@Columns &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18326"/>
			<description>Entry Columns in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsColumns == false || ColumnsHasTypeInteger == true</test>
			<error>
				<message>Entry Columns in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_1" clause="14" testNumber="18327"/>
			<description>Entry Rows with type Integer in FilterCCITTFaxDecode shall correspond possible value predicate: fn:Eval(@Rows &gt;= 0)</description>
			<test>RowsHasTypeInteger != true || RowsIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Rows with type Integer in FilterCCITTFaxDecode doesn't correspond possible value predicate: fn:Eval(@Rows &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18328"/>
			<description>Entry Rows in FilterCCITTFaxDecode shall have type Integer</description>
			<test>containsRows == false || RowsHasTypeInteger == true</test>
			<error>
				<message>Entry Rows in FilterCCITTFaxDecode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFilterCCITTFaxDecode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="18329"/>
			<description>Entry EndOfBlock in FilterCCITTFaxDecode shall have type Boolean</description>
			<test>containsEndOfBlock == false || EndOfBlockHasTypeBoolean == true</test>
			<error>
				<message>Entry EndOfBlock in FilterCCITTFaxDecode is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2UnencryptedStringsByte">
			<id specification="ISO_32000_1_1" clause="2" testNumber="20365"/>
			<description>ArrayOf_2UnencryptedStringsByte shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>ArrayOf_2UnencryptedStringsByte contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2UnencryptedStringsByte">
			<id specification="ISO_32000_1_1" clause="8" testNumber="20366"/>
			<description>Entry 0 in ArrayOf_2UnencryptedStringsByte shall have type StringByte</description>
			<test>size &lt;= 0 || entry0HasTypeStringByte == true</test>
			<error>
				<message>Entry 0 in ArrayOf_2UnencryptedStringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_2UnencryptedStringsByte">
			<id specification="ISO_32000_1_1" clause="8" testNumber="20367"/>
			<description>Entry 1 in ArrayOf_2UnencryptedStringsByte shall have type StringByte</description>
			<test>size &lt;= 1 || entry1HasTypeStringByte == true</test>
			<error>
				<message>Entry 1 in ArrayOf_2UnencryptedStringsByte is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_1" clause="2" testNumber="20850"/>
			<description>ArrayOf_9Numbers shall contain exactly 9 elements</description>
			<test>size == 9</test>
			<error>
				<message>ArrayOf_9Numbers contains %1 element(s) instead of 9</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_1" clause="8" testNumber="20851"/>
			<description>Entry 0 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_1" clause="8" testNumber="20852"/>
			<description>Entry 7 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 7 || entry7HasTypeNumber == true</test>
			<error>
				<message>Entry 7 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_1" clause="8" testNumber="20853"/>
			<description>Entry 4 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 4 || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_1" clause="8" testNumber="20854"/>
			<description>Entry 5 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 5 || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_1" clause="8" testNumber="20855"/>
			<description>Entry 2 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_1" clause="8" testNumber="20856"/>
			<description>Entry 8 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 8 || entry8HasTypeNumber == true</test>
			<error>
				<message>Entry 8 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_1" clause="8" testNumber="20857"/>
			<description>Entry 3 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_1" clause="8" testNumber="20858"/>
			<description>Entry 6 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 6 || entry6HasTypeNumber == true</test>
			<error>
				<message>Entry 6 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_9Numbers">
			<id specification="ISO_32000_1_1" clause="8" testNumber="20859"/>
			<description>Entry 1 in ArrayOf_9Numbers shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_9Numbers is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_1" clause="17" testNumber="21404"/>
			<description>Entry with type Array in DestsMap shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>HasTypeArray != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Array in DestsMap is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_1" clause="17" testNumber="21405"/>
			<description>Entry with type Dictionary in DestsMap shall be object DestDict</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in DestsMap is not object DestDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADestsMapEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="21406"/>
			<description>Entry in DestsMap shall have one of types: Array, Dictionary</description>
			<test>HasTypeArray == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in DestsMap is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="1" testNumber="21866"/>
			<description>FontMultipleMaster shall not contain entries except FontDescriptor, LastChar, Widths, Type, Encoding, FirstChar, Subtype, BaseFont, Name</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'Name').length == 0</test>
			<error>
				<message>FontMultipleMaster contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'FontDescriptor' &amp;&amp; elem != 'LastChar' &amp;&amp; elem != 'Widths' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Encoding' &amp;&amp; elem != 'FirstChar' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'BaseFont' &amp;&amp; elem != 'Name').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="17" testNumber="21867"/>
			<description>Entry FontDescriptor with type Dictionary in FontMultipleMaster shall be object FontDescriptorType1</description>
			<test>FontDescriptorHasTypeDictionary != true || FontDescriptor_size == 1</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontMultipleMaster is not object FontDescriptorType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="11" testNumber="21868"/>
			<description>Entry FontDescriptor in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFontDescriptor == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FontDescriptor in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="10" testNumber="21869"/>
			<description>Entry FontDescriptor with type Dictionary in FontMultipleMaster shall be indirect</description>
			<test>FontDescriptorHasTypeDictionary != true || isFontDescriptorIndirect == true</test>
			<error>
				<message>Entry FontDescriptor with type Dictionary in FontMultipleMaster is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="8" testNumber="21870"/>
			<description>Entry FontDescriptor in FontMultipleMaster shall have type Dictionary</description>
			<test>containsFontDescriptor == false || FontDescriptorHasTypeDictionary == true</test>
			<error>
				<message>Entry FontDescriptor in FontMultipleMaster is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="11" testNumber="21871"/>
			<description>Entry LastChar in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsLastChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry LastChar in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="8" testNumber="21872"/>
			<description>Entry LastChar in FontMultipleMaster shall have type Integer</description>
			<test>containsLastChar == false || LastCharHasTypeInteger == true</test>
			<error>
				<message>Entry LastChar in FontMultipleMaster is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="17" testNumber="21873"/>
			<description>Entry Widths with type Array in FontMultipleMaster shall be object ArrayOfNumbersGeneral</description>
			<test>WidthsHasTypeArray != true || Widths_size == 1</test>
			<error>
				<message>Entry Widths with type Array in FontMultipleMaster is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="11" testNumber="21874"/>
			<description>Entry Widths in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsWidths == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry Widths in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="8" testNumber="21875"/>
			<description>Entry Widths in FontMultipleMaster shall have type Array</description>
			<test>containsWidths == false || WidthsHasTypeArray == true</test>
			<error>
				<message>Entry Widths in FontMultipleMaster is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="7" testNumber="21876"/>
			<description>Entry Type in FontMultipleMaster is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="6" testNumber="21877"/>
			<description>Entry Type with type Name in FontMultipleMaster shall have value Font</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Font"</test>
			<error>
				<message>Entry Type with type Name in FontMultipleMaster has incorrect value %2 instead of Font</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="8" testNumber="21878"/>
			<description>Entry Type in FontMultipleMaster shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="17" testNumber="21879"/>
			<description>Entry Encoding with type Dictionary in FontMultipleMaster shall be object Encoding</description>
			<test>EncodingHasTypeDictionary != true || Encoding_size == 1</test>
			<error>
				<message>Entry Encoding with type Dictionary in FontMultipleMaster is not object Encoding</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="6" testNumber="21880"/>
			<description>Entry Encoding with type Name in FontMultipleMaster shall have one of values: MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</description>
			<test>EncodingHasTypeName != true || EncodingNameValue == "MacRomanEncoding" || EncodingNameValue == "MacExpertEncoding" || EncodingNameValue == "WinAnsiEncoding"</test>
			<error>
				<message>Entry Encoding with type Name in FontMultipleMaster has incorrect value %2 instead of MacExpertEncoding, MacRomanEncoding, WinAnsiEncoding</message>
				<arguments>
					<argument>keyName</argument>
					<argument>EncodingNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="8" testNumber="21881"/>
			<description>Entry Encoding in FontMultipleMaster shall have one of types: Name, Dictionary</description>
			<test>containsEncoding == false || EncodingHasTypeName == true || EncodingHasTypeDictionary == true</test>
			<error>
				<message>Entry Encoding in FontMultipleMaster is not one of types: Name, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="11" testNumber="21882"/>
			<description>Entry FirstChar in FontMultipleMaster is required, when fn:IsRequired(fn:NotStandard14Font())</description>
			<test>(containsFirstChar == true || (notStandard14Font) == false)</test>
			<error>
				<message>Entry FirstChar in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="8" testNumber="21883"/>
			<description>Entry FirstChar in FontMultipleMaster shall have type Integer</description>
			<test>containsFirstChar == false || FirstCharHasTypeInteger == true</test>
			<error>
				<message>Entry FirstChar in FontMultipleMaster is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="7" testNumber="21884"/>
			<description>Entry Subtype in FontMultipleMaster is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="6" testNumber="21885"/>
			<description>Entry Subtype with type Name in FontMultipleMaster shall have value MMType1</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "MMType1"</test>
			<error>
				<message>Entry Subtype with type Name in FontMultipleMaster has incorrect value %2 instead of MMType1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="8" testNumber="21886"/>
			<description>Entry Subtype in FontMultipleMaster shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="7" testNumber="21887"/>
			<description>Entry BaseFont in FontMultipleMaster is required</description>
			<test>containsBaseFont == true</test>
			<error>
				<message>Entry BaseFont in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="8" testNumber="21888"/>
			<description>Entry BaseFont in FontMultipleMaster shall have type Name</description>
			<test>containsBaseFont == false || BaseFontHasTypeName == true</test>
			<error>
				<message>Entry BaseFont in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="11" testNumber="21889"/>
			<description>Entry Name in FontMultipleMaster is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in FontMultipleMaster is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMultipleMaster">
			<id specification="ISO_32000_1_1" clause="8" testNumber="21890"/>
			<description>Entry Name in FontMultipleMaster shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in FontMultipleMaster is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_1" clause="2" testNumber="22099"/>
			<description>Dest4Array shall contain exactly 6 elements</description>
			<test>size == 6</test>
			<error>
				<message>Dest4Array contains %1 element(s) instead of 6</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_1" clause="6" testNumber="22100"/>
			<description>Entry 1 with type Name in Dest4Array shall have value FitR</description>
			<test>entry1HasTypeName != true || entry1NameValue == "FitR"</test>
			<error>
				<message>Entry 1 with type Name in Dest4Array has incorrect value %2 instead of FitR</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22101"/>
			<description>Entry 1 in Dest4Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest4Array is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_1" clause="17" testNumber="22102"/>
			<description>Entry 0 with type Dictionary in Dest4Array shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in Dest4Array is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_1" clause="14" testNumber="22103"/>
			<description>Entry 0 with type Number in Dest4Array shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest4Array doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22104"/>
			<description>Entry 0 in Dest4Array shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in Dest4Array is not one of types: Dictionary, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22105"/>
			<description>Entry 2 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 2 || entry2HasTypeNull == true || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in Dest4Array is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22106"/>
			<description>Entry 5 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 5 || entry5HasTypeNull == true || entry5HasTypeNumber == true</test>
			<error>
				<message>Entry 5 in Dest4Array is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22107"/>
			<description>Entry 3 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 3 || entry3HasTypeNull == true || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in Dest4Array is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest4Array">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22108"/>
			<description>Entry 4 in Dest4Array shall have one of types: Null, Number</description>
			<test>size &lt;= 4 || entry4HasTypeNull == true || entry4HasTypeNumber == true</test>
			<error>
				<message>Entry 4 in Dest4Array is not one of types: Null, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="1" testNumber="22831"/>
			<description>XObjectFormType1 shall not contain entries except Name, XUID, Filter, Type, Length, BBox, Matrix, Subtype, DecodeParms, FormType</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'XUID' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FormType').length == 0</test>
			<error>
				<message>XObjectFormType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Name' &amp;&amp; elem != 'XUID' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'FormType').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="22832"/>
			<description>Entry Name in XObjectFormType1 is required</description>
			<test>containsName == true</test>
			<error>
				<message>Entry Name in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22833"/>
			<description>Entry Name in XObjectFormType1 shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectFormType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="17" testNumber="22834"/>
			<description>Entry XUID with type Array in XObjectFormType1 shall be object ArrayOfIntegersGeneral</description>
			<test>XUIDHasTypeArray != true || XUID_size == 1</test>
			<error>
				<message>Entry XUID with type Array in XObjectFormType1 is not object ArrayOfIntegersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22835"/>
			<description>Entry XUID in XObjectFormType1 shall have type Array</description>
			<test>containsXUID == false || XUIDHasTypeArray == true</test>
			<error>
				<message>Entry XUID in XObjectFormType1 is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="17" testNumber="22836"/>
			<description>Entry Filter with type Array in XObjectFormType1 shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormType1 is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="6" testNumber="22837"/>
			<description>Entry Filter with type Name in XObjectFormType1 shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormType1 has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22838"/>
			<description>Entry Filter in XObjectFormType1 shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in XObjectFormType1 is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="9" testNumber="22839"/>
			<description>Entry Filter with type Array in XObjectFormType1 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="6" testNumber="22840"/>
			<description>Entry Type with type Name in XObjectFormType1 shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormType1 has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22841"/>
			<description>Entry Type in XObjectFormType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="22842"/>
			<description>Entry Length in XObjectFormType1 is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22843"/>
			<description>Entry Length in XObjectFormType1 shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="22844"/>
			<description>Entry BBox in XObjectFormType1 is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22845"/>
			<description>Entry BBox in XObjectFormType1 shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="22846"/>
			<description>Entry Matrix in XObjectFormType1 is required</description>
			<test>containsMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22847"/>
			<description>Entry Matrix in XObjectFormType1 shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormType1 is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="22848"/>
			<description>Entry Subtype in XObjectFormType1 is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="6" testNumber="22849"/>
			<description>Entry Subtype with type Name in XObjectFormType1 shall have value Form</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Form"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormType1 has incorrect value %2 instead of Form</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22850"/>
			<description>Entry Subtype in XObjectFormType1 shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="17" testNumber="22851"/>
			<description>Entry DecodeParms with type Array in XObjectFormType1 shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormType1 is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="17" testNumber="22852"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormType1 shall be object FilterLZWDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormType1 is not object FilterLZWDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22853"/>
			<description>Entry DecodeParms in XObjectFormType1 shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormType1 is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="9" testNumber="22854"/>
			<description>Entry DecodeParms with type Array in XObjectFormType1 shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormType1 doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="22855"/>
			<description>Entry FormType in XObjectFormType1 is required</description>
			<test>containsFormType == true</test>
			<error>
				<message>Entry FormType in XObjectFormType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="6" testNumber="22856"/>
			<description>Entry FormType with type Integer in XObjectFormType1 shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormType1 has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="22857"/>
			<description>Entry FormType in XObjectFormType1 shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormType1 is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFilterNamesEntry">
			<id specification="ISO_32000_1_1" clause="6" testNumber="23754"/>
			<description>Entry with type Name in ArrayOfFilterNames shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode</description>
			<test>HasTypeName != true || NameValue == "ASCIIHexDecode" || NameValue == "ASCII85Decode" || NameValue == "LZWDecode" || NameValue == "RunLengthDecode" || NameValue == "CCITTFaxDecode" || NameValue == "DCTDecode"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfFilterNames has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfFilterNamesEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="23755"/>
			<description>Entry in ArrayOfFilterNames shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfFilterNames is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="1" testNumber="24705"/>
			<description>AnnotLink shall not contain entries except Contents, Dest, Type, M, Subtype, F, A, Border, C, Rect</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Contents' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'F' &amp;&amp; elem != 'A' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Rect').length == 0</test>
			<error>
				<message>AnnotLink contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Contents' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'F' &amp;&amp; elem != 'A' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'C' &amp;&amp; elem != 'Rect').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="8" testNumber="24706"/>
			<description>Entry Contents in AnnotLink shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotLink is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="17" testNumber="24707"/>
			<description>Entry Dest with type Array in AnnotLink shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DestHasTypeArray != true || Dest_size == 1</test>
			<error>
				<message>Entry Dest with type Array in AnnotLink is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="8" testNumber="24708"/>
			<description>Entry Dest in AnnotLink shall have one of types: Name, Array, StringByte</description>
			<test>containsDest == false || DestHasTypeName == true || DestHasTypeArray == true || DestHasTypeStringByte == true</test>
			<error>
				<message>Entry Dest in AnnotLink is not one of types: Name, Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="6" testNumber="24709"/>
			<description>Entry Type with type Name in AnnotLink shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotLink has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="8" testNumber="24710"/>
			<description>Entry Type in AnnotLink shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="8" testNumber="24711"/>
			<description>Entry M in AnnotLink shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotLink is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="7" testNumber="24712"/>
			<description>Entry Subtype in AnnotLink is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotLink is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="6" testNumber="24713"/>
			<description>Entry Subtype with type Name in AnnotLink shall have value Link</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Link"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotLink has incorrect value %2 instead of Link</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="8" testNumber="24714"/>
			<description>Entry Subtype in AnnotLink shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotLink is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="8" testNumber="24715"/>
			<description>Entry F in AnnotLink shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotLink is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="9" testNumber="24716"/>
			<description>Entry F with type Bitmask in AnnotLink shall correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(2.0 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotLink doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(2.0 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="17" testNumber="24717"/>
			<description>Entry A with type Dictionary in AnnotLink shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in AnnotLink is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="8" testNumber="24718"/>
			<description>Entry A in AnnotLink shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in AnnotLink is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="17" testNumber="24719"/>
			<description>Entry Border with type Array in AnnotLink shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotLink is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="8" testNumber="24720"/>
			<description>Entry Border in AnnotLink shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotLink is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="17" testNumber="24721"/>
			<description>Entry C with type Array in AnnotLink shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotLink is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="8" testNumber="24722"/>
			<description>Entry C in AnnotLink shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotLink is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="7" testNumber="24723"/>
			<description>Entry Rect in AnnotLink is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotLink is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotLink">
			<id specification="ISO_32000_1_1" clause="8" testNumber="24724"/>
			<description>Entry Rect in AnnotLink shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotLink is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="1" testNumber="26148"/>
			<description>PageTreeNodeRoot shall not contain entries except Resources, Count, Type, Kids, MediaBox, CropBox, Rotate</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Resources' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Rotate').length == 0</test>
			<error>
				<message>PageTreeNodeRoot contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Resources' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'Kids' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Rotate').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="17" testNumber="26149"/>
			<description>Entry Resources with type Dictionary in PageTreeNodeRoot shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PageTreeNodeRoot is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="8" testNumber="26150"/>
			<description>Entry Resources in PageTreeNodeRoot shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageTreeNodeRoot is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="7" testNumber="26151"/>
			<description>Entry Count in PageTreeNodeRoot is required</description>
			<test>containsCount == true</test>
			<error>
				<message>Entry Count in PageTreeNodeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="14" testNumber="26152"/>
			<description>Entry Count with type Integer in PageTreeNodeRoot shall correspond possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in PageTreeNodeRoot doesn't correspond possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="8" testNumber="26153"/>
			<description>Entry Count in PageTreeNodeRoot shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in PageTreeNodeRoot is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="7" testNumber="26154"/>
			<description>Entry Type in PageTreeNodeRoot is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageTreeNodeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="6" testNumber="26155"/>
			<description>Entry Type with type Name in PageTreeNodeRoot shall have value Pages</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pages"</test>
			<error>
				<message>Entry Type with type Name in PageTreeNodeRoot has incorrect value %2 instead of Pages</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="8" testNumber="26156"/>
			<description>Entry Type in PageTreeNodeRoot shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageTreeNodeRoot is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="17" testNumber="26157"/>
			<description>Entry Kids with type Array in PageTreeNodeRoot shall be object ArrayOfPageTreeNodeKids</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in PageTreeNodeRoot is not object ArrayOfPageTreeNodeKids</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="7" testNumber="26158"/>
			<description>Entry Kids in PageTreeNodeRoot is required</description>
			<test>containsKids == true</test>
			<error>
				<message>Entry Kids in PageTreeNodeRoot is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="8" testNumber="26159"/>
			<description>Entry Kids in PageTreeNodeRoot shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in PageTreeNodeRoot is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="8" testNumber="26160"/>
			<description>Entry MediaBox in PageTreeNodeRoot shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageTreeNodeRoot is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="8" testNumber="26161"/>
			<description>Entry CropBox in PageTreeNodeRoot shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageTreeNodeRoot is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="14" testNumber="26162"/>
			<description>Entry Rotate with type Integer in PageTreeNodeRoot shall correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageTreeNodeRoot doesn't correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNodeRoot">
			<id specification="ISO_32000_1_1" clause="8" testNumber="26163"/>
			<description>Entry Rotate in PageTreeNodeRoot shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageTreeNodeRoot is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="1" testNumber="27575"/>
			<description>AnnotText shall not contain entries except T, Border, Name, Open, Subtype, M, Contents, Rect, Type, C, F</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'T' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'C' &amp;&amp; elem != 'F').length == 0</test>
			<error>
				<message>AnnotText contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'T' &amp;&amp; elem != 'Border' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Open' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'M' &amp;&amp; elem != 'Contents' &amp;&amp; elem != 'Rect' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'C' &amp;&amp; elem != 'F').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="8" testNumber="27576"/>
			<description>Entry T in AnnotText shall have type StringText</description>
			<test>containsT == false || THasTypeStringText == true</test>
			<error>
				<message>Entry T in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="17" testNumber="27577"/>
			<description>Entry Border with type Array in AnnotText shall be object ArrayOf_4AnnotBorderCharacteristics</description>
			<test>BorderHasTypeArray != true || Border_size == 1</test>
			<error>
				<message>Entry Border with type Array in AnnotText is not object ArrayOf_4AnnotBorderCharacteristics</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="8" testNumber="27578"/>
			<description>Entry Border in AnnotText shall have type Array</description>
			<test>containsBorder == false || BorderHasTypeArray == true</test>
			<error>
				<message>Entry Border in AnnotText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="6" testNumber="27579"/>
			<description>Entry Name with type Name in AnnotText shall have one of values: Comment, Help, Note, Insert, Key, NewParagraph, Paragraph</description>
			<test>NameHasTypeName != true || NameNameValue == "Comment" || NameNameValue == "Key" || NameNameValue == "Note" || NameNameValue == "Help" || NameNameValue == "NewParagraph" || NameNameValue == "Paragraph" || NameNameValue == "Insert"</test>
			<error>
				<message>Entry Name with type Name in AnnotText has incorrect value %2 instead of Comment, Help, Note, Insert, Key, NewParagraph, Paragraph</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="8" testNumber="27580"/>
			<description>Entry Name in AnnotText shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="8" testNumber="27581"/>
			<description>Entry Open in AnnotText shall have type Boolean</description>
			<test>containsOpen == false || OpenHasTypeBoolean == true</test>
			<error>
				<message>Entry Open in AnnotText is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="7" testNumber="27582"/>
			<description>Entry Subtype in AnnotText is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="6" testNumber="27583"/>
			<description>Entry Subtype with type Name in AnnotText shall have value Text</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Text"</test>
			<error>
				<message>Entry Subtype with type Name in AnnotText has incorrect value %2 instead of Text</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="8" testNumber="27584"/>
			<description>Entry Subtype in AnnotText shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="8" testNumber="27585"/>
			<description>Entry M in AnnotText shall have one of types: Date, StringText</description>
			<test>containsM == false || MHasTypeDate == true || MHasTypeStringText == true</test>
			<error>
				<message>Entry M in AnnotText is not one of types: Date, StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="8" testNumber="27586"/>
			<description>Entry Contents in AnnotText shall have type StringText</description>
			<test>containsContents == false || ContentsHasTypeStringText == true</test>
			<error>
				<message>Entry Contents in AnnotText is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="7" testNumber="27587"/>
			<description>Entry Rect in AnnotText is required</description>
			<test>containsRect == true</test>
			<error>
				<message>Entry Rect in AnnotText is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="8" testNumber="27588"/>
			<description>Entry Rect in AnnotText shall have type Rectangle</description>
			<test>containsRect == false || RectHasTypeRectangle == true</test>
			<error>
				<message>Entry Rect in AnnotText is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="6" testNumber="27589"/>
			<description>Entry Type with type Name in AnnotText shall have value Annot</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Annot"</test>
			<error>
				<message>Entry Type with type Name in AnnotText has incorrect value %2 instead of Annot</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="8" testNumber="27590"/>
			<description>Entry Type in AnnotText shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in AnnotText is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="17" testNumber="27591"/>
			<description>Entry C with type Array in AnnotText shall be object ArrayOf_4NumbersColorAnnotation</description>
			<test>CHasTypeArray != true || C_size == 1</test>
			<error>
				<message>Entry C with type Array in AnnotText is not object ArrayOf_4NumbersColorAnnotation</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="8" testNumber="27592"/>
			<description>Entry C in AnnotText shall have type Array</description>
			<test>containsC == false || CHasTypeArray == true</test>
			<error>
				<message>Entry C in AnnotText is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="8" testNumber="27593"/>
			<description>Entry F in AnnotText shall have type Bitmask</description>
			<test>containsF == false || FHasTypeBitmask == true</test>
			<error>
				<message>Entry F in AnnotText is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AAnnotText">
			<id specification="ISO_32000_1_1" clause="9" testNumber="27594"/>
			<description>Entry F with type Bitmask in AnnotText shall correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</description>
			<test>FHasTypeBitmask != true || (((FBitmaskValue &gt;&gt; 3 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 5 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 6 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; ((FBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 15 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 16 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 17 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 18 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FBitmaskValue &gt;&gt; 31 &amp; 1) == 0) &amp;&amp; true)</test>
			<error>
				<message>Entry F with type Bitmask in AnnotText doesn't correspond special case: fn:Eval(fn:BeforeVersion(1.3 , fn:BitsClear(4 , 32)) &amp;&amp; fn:BeforeVersion(1.4 , fn:BitsClear(8 , 32)) &amp;&amp; fn:BeforeVersion(1.5 , fn:BitsClear(9 , 32)) &amp;&amp; fn:BeforeVersion(1.6 , fn:BitsClear(10 , 32)) &amp;&amp; fn:SinceVersion(1.7 , fn:BitsClear(11 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfThreadsEntry">
			<id specification="ISO_32000_1_1" clause="17" testNumber="28164"/>
			<description>Entry with type Dictionary in ArrayOfThreads shall be object Thread</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfThreads is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfThreadsEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28165"/>
			<description>Entry in ArrayOfThreads shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfThreads is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="1" testNumber="28249"/>
			<description>XObjectImage shall not contain entries except Subtype, Height, Width, BitsPerComponent, Interpolate, F, DecodeParms, Intent, Length, Decode, Name, Filter, ColorSpace, ImageMask, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>XObjectImage contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Subtype' &amp;&amp; elem != 'Height' &amp;&amp; elem != 'Width' &amp;&amp; elem != 'BitsPerComponent' &amp;&amp; elem != 'Interpolate' &amp;&amp; elem != 'F' &amp;&amp; elem != 'DecodeParms' &amp;&amp; elem != 'Intent' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Decode' &amp;&amp; elem != 'Name' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'ColorSpace' &amp;&amp; elem != 'ImageMask' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="7" testNumber="28250"/>
			<description>Entry Subtype in XObjectImage is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="6" testNumber="28251"/>
			<description>Entry Subtype with type Name in XObjectImage shall have value Image</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "Image"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectImage has incorrect value %2 instead of Image</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28252"/>
			<description>Entry Subtype in XObjectImage shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="7" testNumber="28253"/>
			<description>Entry Height in XObjectImage is required</description>
			<test>containsHeight == true</test>
			<error>
				<message>Entry Height in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28254"/>
			<description>Entry Height in XObjectImage shall have type Integer</description>
			<test>containsHeight == false || HeightHasTypeInteger == true</test>
			<error>
				<message>Entry Height in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="7" testNumber="28255"/>
			<description>Entry Width in XObjectImage is required</description>
			<test>containsWidth == true</test>
			<error>
				<message>Entry Width in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28256"/>
			<description>Entry Width in XObjectImage shall have type Integer</description>
			<test>containsWidth == false || WidthHasTypeInteger == true</test>
			<error>
				<message>Entry Width in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="11" testNumber="28257"/>
			<description>Entry BitsPerComponent in XObjectImage is required, when fn:IsRequired(fn:Not(fn:Contains(@Filter , JPXDecode) || (@ImageMask == true)))</description>
			<test>(containsBitsPerComponent == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="15" testNumber="28258"/>
			<description>Entry BitsPerComponent in XObjectImage shall have Integer value 1, if this object corresponds to condition (@Filter == CCITTFaxDecode) || (@Filter == JBIG2Decode) || (@ImageMask == true)</description>
			<test>(((FilterNameValue == "CCITTFaxDecode") || (FilterNameValue == "JBIG2Decode") || (ImageMaskBooleanValue == true)) == false || BitsPerComponentIntegerValue == 1)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage doesn't have value 1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="15" testNumber="28259"/>
			<description>Entry BitsPerComponent in XObjectImage shall have Integer value 8, if this object corresponds to condition (@Filter == RunLengthDecode) || (@Filter == DCTDecode)</description>
			<test>(((FilterNameValue == "RunLengthDecode") || (FilterNameValue == "DCTDecode")) == false || BitsPerComponentIntegerValue == 8)</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage doesn't have value 8</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="13" testNumber="28260"/>
			<description>Entry BitsPerComponent with type Integer in XObjectImage shall have one of values: 1, 2, 4, 8</description>
			<test>BitsPerComponentHasTypeInteger != true || BitsPerComponentIntegerValue == 1 || BitsPerComponentIntegerValue == 2 || BitsPerComponentIntegerValue == 4 || BitsPerComponentIntegerValue == 8</test>
			<error>
				<message>Entry BitsPerComponent with type Integer in XObjectImage has incorrect value %2 instead of 1, 2, 4, 8</message>
				<arguments>
					<argument>keyName</argument>
					<argument>BitsPerComponentIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28261"/>
			<description>Entry BitsPerComponent in XObjectImage shall have type Integer</description>
			<test>containsBitsPerComponent == false || BitsPerComponentHasTypeInteger == true</test>
			<error>
				<message>Entry BitsPerComponent in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28262"/>
			<description>Entry Interpolate in XObjectImage shall have type Boolean</description>
			<test>containsInterpolate == false || InterpolateHasTypeBoolean == true</test>
			<error>
				<message>Entry Interpolate in XObjectImage is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="17" testNumber="28263"/>
			<description>Entry F with type Dictionary in XObjectImage shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectImage is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28264"/>
			<description>Entry F in XObjectImage shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectImage is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="17" testNumber="28265"/>
			<description>Entry DecodeParms with type Array in XObjectImage shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImage is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="17" testNumber="28266"/>
			<description>Entry DecodeParms with type Dictionary in XObjectImage shall be one of objects FilterLZWDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectImage is not one of objects FilterLZWDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28267"/>
			<description>Entry DecodeParms in XObjectImage shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectImage is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="9" testNumber="28268"/>
			<description>Entry DecodeParms with type Array in XObjectImage shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectImage doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28269"/>
			<description>Entry Intent in XObjectImage shall have type Name</description>
			<test>containsIntent == false || IntentHasTypeName == true</test>
			<error>
				<message>Entry Intent in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="7" testNumber="28270"/>
			<description>Entry Length in XObjectImage is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28271"/>
			<description>Entry Length in XObjectImage shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectImage is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="17" testNumber="28272"/>
			<description>Entry Decode with type Array in XObjectImage shall be object ArrayOfNumbersGeneral</description>
			<test>DecodeHasTypeArray != true || Decode_size == 1</test>
			<error>
				<message>Entry Decode with type Array in XObjectImage is not object ArrayOfNumbersGeneral</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28273"/>
			<description>Entry Decode in XObjectImage shall have type Array</description>
			<test>containsDecode == false || DecodeHasTypeArray == true</test>
			<error>
				<message>Entry Decode in XObjectImage is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="11" testNumber="28274"/>
			<description>Entry Name in XObjectImage is required, when fn:IsRequired(fn:IsPDFVersion(1.0))</description>
			<test>(containsName == true || (false) == false)</test>
			<error>
				<message>Entry Name in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28275"/>
			<description>Entry Name in XObjectImage shall have type Name</description>
			<test>containsName == false || NameHasTypeName == true</test>
			<error>
				<message>Entry Name in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="17" testNumber="28276"/>
			<description>Entry Filter with type Array in XObjectImage shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectImage is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="6" testNumber="28277"/>
			<description>Entry Filter with type Name in XObjectImage shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectImage has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28278"/>
			<description>Entry Filter in XObjectImage shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in XObjectImage is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="9" testNumber="28279"/>
			<description>Entry Filter with type Array in XObjectImage shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectImage doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="17" testNumber="28280"/>
			<description>Entry ColorSpace with type Array in XObjectImage shall be one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, IndexedColorSpace</description>
			<test>ColorSpaceHasTypeArray != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Array in XObjectImage is not one of objects CalGrayColorSpace, CalRGBColorSpace, LabColorSpace, IndexedColorSpace</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="11" testNumber="28281"/>
			<description>Entry ColorSpace in XObjectImage is required, when fn:IsRequired(fn:Not(fn:Contains(@Filter , JPXDecode) || (@ImageMask == true)))</description>
			<test>(containsColorSpace == true || (((FilterEntriesString != null &amp;&amp; FilterEntriesString.split('&amp;').filter(elem =&gt; elem == "JPXDecode").length &gt; 0) || (ImageMaskBooleanValue == true)) != true) == false)</test>
			<error>
				<message>Entry ColorSpace in XObjectImage is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="6" testNumber="28282"/>
			<description>Entry ColorSpace with type Name in XObjectImage shall have one of values: DeviceGray, DeviceRGB, DeviceCMYK</description>
			<test>ColorSpaceHasTypeName != true || ColorSpaceNameValue == "DeviceCMYK" || ColorSpaceNameValue == "DeviceRGB" || ColorSpaceNameValue == "DeviceGray"</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImage has incorrect value %2 instead of DeviceGray, DeviceRGB, DeviceCMYK</message>
				<arguments>
					<argument>keyName</argument>
					<argument>ColorSpaceNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28283"/>
			<description>Entry ColorSpace in XObjectImage shall have one of types: Name, Array</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeName == true || ColorSpaceHasTypeArray == true</test>
			<error>
				<message>Entry ColorSpace in XObjectImage is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="9" testNumber="28284"/>
			<description>Entry ColorSpace with type Name in XObjectImage shall correspond special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>ColorSpaceHasTypeName != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsColorSpace == true)) != true)</test>
			<error>
				<message>Entry ColorSpace with type Name in XObjectImage doesn't correspond special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="9" testNumber="28285"/>
			<description>Entry ColorSpace with type Array in XObjectImage shall correspond special case: fn:Not(fn:IsPresent(@ImageMask == true))</description>
			<test>ColorSpaceHasTypeArray != true || ((((ImageMaskBooleanValue == true) == true &amp;&amp; containsColorSpace == true)) != true)</test>
			<error>
				<message>Entry ColorSpace with type Array in XObjectImage doesn't correspond special case: fn:Not(fn:IsPresent(@ImageMask == true))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28286"/>
			<description>Entry ImageMask in XObjectImage shall have type Boolean</description>
			<test>containsImageMask == false || ImageMaskHasTypeBoolean == true</test>
			<error>
				<message>Entry ImageMask in XObjectImage is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="9" testNumber="28287"/>
			<description>Entry ImageMask with type Boolean in XObjectImage shall correspond special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</description>
			<test>ImageMaskHasTypeBoolean != true || (((ImageMaskBooleanValue == true) &amp;&amp; (BitsPerComponentIntegerValue == 1) &amp;&amp; ((containsColorSpace == true)) != true &amp;&amp; ((containsMask == true)) != true) || (ImageMaskBooleanValue == false))</test>
			<error>
				<message>Entry ImageMask with type Boolean in XObjectImage doesn't correspond special case: fn:Eval(((@ImageMask == true) &amp;&amp; (@BitsPerComponent == 1) &amp;&amp; fn:Not(fn:IsPresent(ColorSpace)) &amp;&amp; fn:Not(fn:IsPresent(Mask))) || (@ImageMask == false))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="6" testNumber="28288"/>
			<description>Entry Type with type Name in XObjectImage shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectImage has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectImage">
			<id specification="ISO_32000_1_1" clause="8" testNumber="28289"/>
			<description>Entry Type in XObjectImage shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectImage is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_1" clause="17" testNumber="29259"/>
			<description>Entry with type Dictionary in ArrayOfBeads shall be one of objects BeadFirst, Bead</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfBeads is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_1" clause="10" testNumber="29260"/>
			<description>Entry with type Dictionary in ArrayOfBeads shall be indirect</description>
			<test>HasTypeDictionary != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfBeads is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfBeadsEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="29261"/>
			<description>Entry in ArrayOfBeads shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfBeads is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="1" testNumber="29283"/>
			<description>XObjectFormPSpassthrough shall not contain entries except DecodeParms, Filter, Matrix, PS, FormType, Level1, Subtype2, BBox, Subtype, F, Length, Type</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Subtype2' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type').length == 0</test>
			<error>
				<message>XObjectFormPSpassthrough contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'DecodeParms' &amp;&amp; elem != 'Filter' &amp;&amp; elem != 'Matrix' &amp;&amp; elem != 'PS' &amp;&amp; elem != 'FormType' &amp;&amp; elem != 'Level1' &amp;&amp; elem != 'Subtype2' &amp;&amp; elem != 'BBox' &amp;&amp; elem != 'Subtype' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Length' &amp;&amp; elem != 'Type').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="17" testNumber="29284"/>
			<description>Entry DecodeParms with type Array in XObjectFormPSpassthrough shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPSpassthrough is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="17" testNumber="29285"/>
			<description>Entry DecodeParms with type Dictionary in XObjectFormPSpassthrough shall be object FilterLZWDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in XObjectFormPSpassthrough is not object FilterLZWDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="8" testNumber="29286"/>
			<description>Entry DecodeParms in XObjectFormPSpassthrough shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in XObjectFormPSpassthrough is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="9" testNumber="29287"/>
			<description>Entry DecodeParms with type Array in XObjectFormPSpassthrough shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in XObjectFormPSpassthrough doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="17" testNumber="29288"/>
			<description>Entry Filter with type Array in XObjectFormPSpassthrough shall be object ArrayOfCompressionFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPSpassthrough is not object ArrayOfCompressionFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="6" testNumber="29289"/>
			<description>Entry Filter with type Name in XObjectFormPSpassthrough shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "RunLengthDecode"</test>
			<error>
				<message>Entry Filter with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="8" testNumber="29290"/>
			<description>Entry Filter in XObjectFormPSpassthrough shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in XObjectFormPSpassthrough is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="9" testNumber="29291"/>
			<description>Entry Filter with type Array in XObjectFormPSpassthrough shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in XObjectFormPSpassthrough doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="7" testNumber="29292"/>
			<description>Entry Matrix in XObjectFormPSpassthrough is required</description>
			<test>containsMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="8" testNumber="29293"/>
			<description>Entry Matrix in XObjectFormPSpassthrough shall have type Matrix</description>
			<test>containsMatrix == false || MatrixHasTypeMatrix == true</test>
			<error>
				<message>Entry Matrix in XObjectFormPSpassthrough is not of type Matrix</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="17" testNumber="29294"/>
			<description>Entry PS with type Stream in XObjectFormPSpassthrough shall be object Stream</description>
			<test>PSHasTypeStream != true || PS_size == 1</test>
			<error>
				<message>Entry PS with type Stream in XObjectFormPSpassthrough is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="7" testNumber="29295"/>
			<description>Entry PS in XObjectFormPSpassthrough is required</description>
			<test>containsPS == true</test>
			<error>
				<message>Entry PS in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="10" testNumber="29296"/>
			<description>Entry PS with type Stream in XObjectFormPSpassthrough shall be indirect</description>
			<test>PSHasTypeStream != true || isPSIndirect == true</test>
			<error>
				<message>Entry PS with type Stream in XObjectFormPSpassthrough is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="8" testNumber="29297"/>
			<description>Entry PS in XObjectFormPSpassthrough shall have type Stream</description>
			<test>containsPS == false || PSHasTypeStream == true</test>
			<error>
				<message>Entry PS in XObjectFormPSpassthrough is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="7" testNumber="29298"/>
			<description>Entry FormType in XObjectFormPSpassthrough is required</description>
			<test>containsFormType == true</test>
			<error>
				<message>Entry FormType in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="6" testNumber="29299"/>
			<description>Entry FormType with type Integer in XObjectFormPSpassthrough shall have value 1</description>
			<test>FormTypeHasTypeInteger != true || FormTypeIntegerValue == 1</test>
			<error>
				<message>Entry FormType with type Integer in XObjectFormPSpassthrough has incorrect value %2 instead of 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FormTypeIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="8" testNumber="29300"/>
			<description>Entry FormType in XObjectFormPSpassthrough shall have type Integer</description>
			<test>containsFormType == false || FormTypeHasTypeInteger == true</test>
			<error>
				<message>Entry FormType in XObjectFormPSpassthrough is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="17" testNumber="29301"/>
			<description>Entry Level1 with type Stream in XObjectFormPSpassthrough shall be object Stream</description>
			<test>Level1HasTypeStream != true || Level1_size == 1</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPSpassthrough is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="10" testNumber="29302"/>
			<description>Entry Level1 with type Stream in XObjectFormPSpassthrough shall be indirect</description>
			<test>Level1HasTypeStream != true || isLevel1Indirect == true</test>
			<error>
				<message>Entry Level1 with type Stream in XObjectFormPSpassthrough is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="8" testNumber="29303"/>
			<description>Entry Level1 in XObjectFormPSpassthrough shall have type Stream</description>
			<test>containsLevel1 == false || Level1HasTypeStream == true</test>
			<error>
				<message>Entry Level1 in XObjectFormPSpassthrough is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="7" testNumber="29304"/>
			<description>Entry Subtype2 in XObjectFormPSpassthrough is required</description>
			<test>containsSubtype2 == true</test>
			<error>
				<message>Entry Subtype2 in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="6" testNumber="29305"/>
			<description>Entry Subtype2 with type Name in XObjectFormPSpassthrough shall have value PS</description>
			<test>Subtype2HasTypeName != true || Subtype2NameValue == "PS"</test>
			<error>
				<message>Entry Subtype2 with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of PS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>Subtype2NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="8" testNumber="29306"/>
			<description>Entry Subtype2 in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsSubtype2 == false || Subtype2HasTypeName == true</test>
			<error>
				<message>Entry Subtype2 in XObjectFormPSpassthrough is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="7" testNumber="29307"/>
			<description>Entry BBox in XObjectFormPSpassthrough is required</description>
			<test>containsBBox == true</test>
			<error>
				<message>Entry BBox in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="8" testNumber="29308"/>
			<description>Entry BBox in XObjectFormPSpassthrough shall have type Rectangle</description>
			<test>containsBBox == false || BBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry BBox in XObjectFormPSpassthrough is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="7" testNumber="29309"/>
			<description>Entry Subtype in XObjectFormPSpassthrough is required</description>
			<test>containsSubtype == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="6" testNumber="29310"/>
			<description>Entry Subtype with type Name in XObjectFormPSpassthrough shall have value PS</description>
			<test>SubtypeHasTypeName != true || SubtypeNameValue == "PS"</test>
			<error>
				<message>Entry Subtype with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of PS</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SubtypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="8" testNumber="29311"/>
			<description>Entry Subtype in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsSubtype == false || SubtypeHasTypeName == true</test>
			<error>
				<message>Entry Subtype in XObjectFormPSpassthrough is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="17" testNumber="29312"/>
			<description>Entry F with type Dictionary in XObjectFormPSpassthrough shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in XObjectFormPSpassthrough is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="8" testNumber="29313"/>
			<description>Entry F in XObjectFormPSpassthrough shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in XObjectFormPSpassthrough is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="7" testNumber="29314"/>
			<description>Entry Length in XObjectFormPSpassthrough is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in XObjectFormPSpassthrough is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="8" testNumber="29315"/>
			<description>Entry Length in XObjectFormPSpassthrough shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in XObjectFormPSpassthrough is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="6" testNumber="29316"/>
			<description>Entry Type with type Name in XObjectFormPSpassthrough shall have value XObject</description>
			<test>TypeHasTypeName != true || TypeNameValue == "XObject"</test>
			<error>
				<message>Entry Type with type Name in XObjectFormPSpassthrough has incorrect value %2 instead of XObject</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AXObjectFormPSpassthrough">
			<id specification="ISO_32000_1_1" clause="8" testNumber="29317"/>
			<description>Entry Type in XObjectFormPSpassthrough shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in XObjectFormPSpassthrough is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="1" testNumber="30273"/>
			<description>FontDescriptorType1 shall not contain entries except MaxWidth, StemV, Ascent, FontFile, Leading, StemH, Descent, AvgWidth, FontBBox, Type, CapHeight, Flags, CharSet, MissingWidth, ItalicAngle, FontName, XHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'MaxWidth' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'XHeight').length == 0</test>
			<error>
				<message>FontDescriptorType1 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'MaxWidth' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'AvgWidth' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'CharSet' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'XHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30274"/>
			<description>Entry MaxWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="30275"/>
			<description>Entry StemV in FontDescriptorType1 is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30276"/>
			<description>Entry StemV in FontDescriptorType1 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="30277"/>
			<description>Entry Ascent in FontDescriptorType1 is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30278"/>
			<description>Entry Ascent in FontDescriptorType1 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="17" testNumber="30279"/>
			<description>Entry FontFile with type Stream in FontDescriptorType1 shall be object FontFileType1</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorType1 is not object FontFileType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="10" testNumber="30280"/>
			<description>Entry FontFile with type Stream in FontDescriptorType1 shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorType1 is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30281"/>
			<description>Entry FontFile in FontDescriptorType1 shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorType1 is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30282"/>
			<description>Entry Leading in FontDescriptorType1 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30283"/>
			<description>Entry StemH in FontDescriptorType1 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="30284"/>
			<description>Entry Descent in FontDescriptorType1 is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="14" testNumber="30285"/>
			<description>Entry Descent with type Number in FontDescriptorType1 shall correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorType1 doesn't correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30286"/>
			<description>Entry Descent in FontDescriptorType1 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30287"/>
			<description>Entry AvgWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="30288"/>
			<description>Entry FontBBox in FontDescriptorType1 is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30289"/>
			<description>Entry FontBBox in FontDescriptorType1 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType1 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="30290"/>
			<description>Entry Type in FontDescriptorType1 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="6" testNumber="30291"/>
			<description>Entry Type with type Name in FontDescriptorType1 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorType1 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30292"/>
			<description>Entry Type in FontDescriptorType1 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30293"/>
			<description>Entry CapHeight in FontDescriptorType1 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="30294"/>
			<description>Entry Flags in FontDescriptorType1 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30295"/>
			<description>Entry Flags in FontDescriptorType1 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType1 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="9" testNumber="30296"/>
			<description>Entry Flags with type Bitmask in FontDescriptorType1 shall correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorType1 doesn't correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30297"/>
			<description>Entry CharSet in FontDescriptorType1 shall have one of types: StringByte, StringAscii</description>
			<test>containsCharSet == false || CharSetHasTypeStringByte == true || CharSetHasTypeStringAscii == true</test>
			<error>
				<message>Entry CharSet in FontDescriptorType1 is not one of types: StringByte, StringAscii</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30298"/>
			<description>Entry MissingWidth in FontDescriptorType1 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="30299"/>
			<description>Entry ItalicAngle in FontDescriptorType1 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30300"/>
			<description>Entry ItalicAngle in FontDescriptorType1 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="7" testNumber="30301"/>
			<description>Entry FontName in FontDescriptorType1 is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType1 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30302"/>
			<description>Entry FontName in FontDescriptorType1 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType1 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="9" testNumber="30303"/>
			<description>Entry FontName with type Name in FontDescriptorType1 shall correspond special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorType1 doesn't correspond special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType1">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30304"/>
			<description>Entry XHeight in FontDescriptorType1 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorType1 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_1" clause="17" testNumber="30573"/>
			<description>Entry with type Stream in CharProcMap shall be object Stream</description>
			<test>HasTypeStream != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Stream in CharProcMap is not object Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_1" clause="10" testNumber="30574"/>
			<description>Entry with type Stream in CharProcMap shall be indirect</description>
			<test>HasTypeStream != true || isIndirect == true</test>
			<error>
				<message>Entry %1 with type Stream in CharProcMap is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACharProcMapEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30575"/>
			<description>Entry in CharProcMap shall have type Stream</description>
			<test>HasTypeStream == true</test>
			<error>
				<message>Entry %1 in CharProcMap is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="1" testNumber="30620"/>
			<description>FontDescriptorType3 shall not contain entries except AvgWidth, StemH, Ascent, XHeight, Type, ItalicAngle, MissingWidth, CapHeight, MaxWidth, FontName, Flags, StemV, Leading, Descent, FontBBox</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AvgWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FontBBox').length == 0</test>
			<error>
				<message>FontDescriptorType3 contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AvgWidth' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'CapHeight' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'FontBBox').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30621"/>
			<description>Entry AvgWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30622"/>
			<description>Entry StemH in FontDescriptorType3 shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30623"/>
			<description>Entry Ascent in FontDescriptorType3 shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30624"/>
			<description>Entry XHeight in FontDescriptorType3 shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="7" testNumber="30625"/>
			<description>Entry Type in FontDescriptorType3 is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="6" testNumber="30626"/>
			<description>Entry Type with type Name in FontDescriptorType3 shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorType3 has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30627"/>
			<description>Entry Type in FontDescriptorType3 shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="7" testNumber="30628"/>
			<description>Entry ItalicAngle in FontDescriptorType3 is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30629"/>
			<description>Entry ItalicAngle in FontDescriptorType3 shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30630"/>
			<description>Entry MissingWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30631"/>
			<description>Entry CapHeight in FontDescriptorType3 shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30632"/>
			<description>Entry MaxWidth in FontDescriptorType3 shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30633"/>
			<description>Entry FontName in FontDescriptorType3 shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorType3 is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="9" testNumber="30634"/>
			<description>Entry FontName with type Name in FontDescriptorType3 shall correspond special case: fn:Eval(@FontName == parent::@Name)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentNameNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorType3 doesn't correspond special case: fn:Eval(@FontName == parent::@Name)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="7" testNumber="30635"/>
			<description>Entry Flags in FontDescriptorType3 is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType3 is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30636"/>
			<description>Entry Flags in FontDescriptorType3 shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorType3 is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="9" testNumber="30637"/>
			<description>Entry Flags with type Bitmask in FontDescriptorType3 shall correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorType3 doesn't correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30638"/>
			<description>Entry StemV in FontDescriptorType3 shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30639"/>
			<description>Entry Leading in FontDescriptorType3 shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="14" testNumber="30640"/>
			<description>Entry Descent with type Number in FontDescriptorType3 shall correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorType3 doesn't correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30641"/>
			<description>Entry Descent in FontDescriptorType3 shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorType3 is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorType3">
			<id specification="ISO_32000_1_1" clause="8" testNumber="30642"/>
			<description>Entry FontBBox in FontDescriptorType3 shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorType3 is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="1" testNumber="31001"/>
			<description>FontDescriptorTrueType shall not contain entries except AvgWidth, MissingWidth, Descent, StemV, XHeight, ItalicAngle, Leading, Type, StemH, FontBBox, FontFile, FontName, MaxWidth, Flags, Ascent, CapHeight</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'AvgWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'CapHeight').length == 0</test>
			<error>
				<message>FontDescriptorTrueType contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'AvgWidth' &amp;&amp; elem != 'MissingWidth' &amp;&amp; elem != 'Descent' &amp;&amp; elem != 'StemV' &amp;&amp; elem != 'XHeight' &amp;&amp; elem != 'ItalicAngle' &amp;&amp; elem != 'Leading' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'StemH' &amp;&amp; elem != 'FontBBox' &amp;&amp; elem != 'FontFile' &amp;&amp; elem != 'FontName' &amp;&amp; elem != 'MaxWidth' &amp;&amp; elem != 'Flags' &amp;&amp; elem != 'Ascent' &amp;&amp; elem != 'CapHeight').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31002"/>
			<description>Entry AvgWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsAvgWidth == false || AvgWidthHasTypeNumber == true</test>
			<error>
				<message>Entry AvgWidth in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31003"/>
			<description>Entry MissingWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsMissingWidth == false || MissingWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MissingWidth in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="7" testNumber="31004"/>
			<description>Entry Descent in FontDescriptorTrueType is required</description>
			<test>containsDescent == true</test>
			<error>
				<message>Entry Descent in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="14" testNumber="31005"/>
			<description>Entry Descent with type Number in FontDescriptorTrueType shall correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</description>
			<test>DescentHasTypeNumber != true || DescentNumberValue &lt;= 0</test>
			<error>
				<message>Entry Descent with type Number in FontDescriptorTrueType doesn't correspond possible value predicate: fn:Eval(@Descent &lt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31006"/>
			<description>Entry Descent in FontDescriptorTrueType shall have type Number</description>
			<test>containsDescent == false || DescentHasTypeNumber == true</test>
			<error>
				<message>Entry Descent in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="7" testNumber="31007"/>
			<description>Entry StemV in FontDescriptorTrueType is required</description>
			<test>containsStemV == true</test>
			<error>
				<message>Entry StemV in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31008"/>
			<description>Entry StemV in FontDescriptorTrueType shall have type Number</description>
			<test>containsStemV == false || StemVHasTypeNumber == true</test>
			<error>
				<message>Entry StemV in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31009"/>
			<description>Entry XHeight in FontDescriptorTrueType shall have type Number</description>
			<test>containsXHeight == false || XHeightHasTypeNumber == true</test>
			<error>
				<message>Entry XHeight in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="7" testNumber="31010"/>
			<description>Entry ItalicAngle in FontDescriptorTrueType is required</description>
			<test>containsItalicAngle == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31011"/>
			<description>Entry ItalicAngle in FontDescriptorTrueType shall have type Number</description>
			<test>containsItalicAngle == false || ItalicAngleHasTypeNumber == true</test>
			<error>
				<message>Entry ItalicAngle in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31012"/>
			<description>Entry Leading in FontDescriptorTrueType shall have type Number</description>
			<test>containsLeading == false || LeadingHasTypeNumber == true</test>
			<error>
				<message>Entry Leading in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="7" testNumber="31013"/>
			<description>Entry Type in FontDescriptorTrueType is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="6" testNumber="31014"/>
			<description>Entry Type with type Name in FontDescriptorTrueType shall have value FontDescriptor</description>
			<test>TypeHasTypeName != true || TypeNameValue == "FontDescriptor"</test>
			<error>
				<message>Entry Type with type Name in FontDescriptorTrueType has incorrect value %2 instead of FontDescriptor</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31015"/>
			<description>Entry Type in FontDescriptorTrueType shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in FontDescriptorTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31016"/>
			<description>Entry StemH in FontDescriptorTrueType shall have type Number</description>
			<test>containsStemH == false || StemHHasTypeNumber == true</test>
			<error>
				<message>Entry StemH in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="7" testNumber="31017"/>
			<description>Entry FontBBox in FontDescriptorTrueType is required</description>
			<test>containsFontBBox == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31018"/>
			<description>Entry FontBBox in FontDescriptorTrueType shall have type Rectangle</description>
			<test>containsFontBBox == false || FontBBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry FontBBox in FontDescriptorTrueType is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="17" testNumber="31019"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall be object FontFileType1</description>
			<test>FontFileHasTypeStream != true || FontFile_size == 1</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType is not object FontFileType1</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="10" testNumber="31020"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall be indirect</description>
			<test>FontFileHasTypeStream != true || isFontFileIndirect == true</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31021"/>
			<description>Entry FontFile in FontDescriptorTrueType shall have type Stream</description>
			<test>containsFontFile == false || FontFileHasTypeStream == true</test>
			<error>
				<message>Entry FontFile in FontDescriptorTrueType is not of type Stream</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="9" testNumber="31022"/>
			<description>Entry FontFile with type Stream in FontDescriptorTrueType shall correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)) &amp;&amp; fn:Not(fn:IsPresent(FontFile3)))</description>
			<test>FontFileHasTypeStream != true || (((containsFontFile2 == true)) != true &amp;&amp; ((containsFontFile3 == true)) != true)</test>
			<error>
				<message>Entry FontFile with type Stream in FontDescriptorTrueType doesn't correspond special case: fn:Eval(fn:Not(fn:IsPresent(FontFile2)) &amp;&amp; fn:Not(fn:IsPresent(FontFile3)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="7" testNumber="31023"/>
			<description>Entry FontName in FontDescriptorTrueType is required</description>
			<test>containsFontName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31024"/>
			<description>Entry FontName in FontDescriptorTrueType shall have type Name</description>
			<test>containsFontName == false || FontNameHasTypeName == true</test>
			<error>
				<message>Entry FontName in FontDescriptorTrueType is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="9" testNumber="31025"/>
			<description>Entry FontName with type Name in FontDescriptorTrueType shall correspond special case: fn:Eval(@FontName == parent::@BaseFont)</description>
			<test>FontNameHasTypeName != true || (FontNameNameValue == parentBaseFontNameValue)</test>
			<error>
				<message>Entry FontName with type Name in FontDescriptorTrueType doesn't correspond special case: fn:Eval(@FontName == parent::@BaseFont)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31026"/>
			<description>Entry MaxWidth in FontDescriptorTrueType shall have type Number</description>
			<test>containsMaxWidth == false || MaxWidthHasTypeNumber == true</test>
			<error>
				<message>Entry MaxWidth in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="7" testNumber="31027"/>
			<description>Entry Flags in FontDescriptorTrueType is required</description>
			<test>containsFlags == true</test>
			<error>
				<message>Entry Flags in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31028"/>
			<description>Entry Flags in FontDescriptorTrueType shall have type Bitmask</description>
			<test>containsFlags == false || FlagsHasTypeBitmask == true</test>
			<error>
				<message>Entry Flags in FontDescriptorTrueType is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="9" testNumber="31029"/>
			<description>Entry Flags with type Bitmask in FontDescriptorTrueType shall correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</description>
			<test>FlagsHasTypeBitmask != true || ((FlagsBitmaskValue &gt;&gt; 4 &amp; 1) == 0 &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 7 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 8 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 9 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 10 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 11 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 12 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 13 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 14 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 15 &amp; 1) == 0) &amp;&amp; ((FlagsBitmaskValue &gt;&gt; 19 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 20 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 21 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 22 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 23 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 24 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 25 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 26 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 27 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 28 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 29 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 30 &amp; 1) == 0 &amp;&amp; (FlagsBitmaskValue &gt;&gt; 31 &amp; 1) == 0))</test>
			<error>
				<message>Entry Flags with type Bitmask in FontDescriptorTrueType doesn't correspond special case: fn:Eval(fn:BitClear(5) &amp;&amp; fn:BitsClear(8 , 16) &amp;&amp; fn:BitsClear(20 , 32))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="7" testNumber="31030"/>
			<description>Entry Ascent in FontDescriptorTrueType is required</description>
			<test>containsAscent == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorTrueType is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31031"/>
			<description>Entry Ascent in FontDescriptorTrueType shall have type Number</description>
			<test>containsAscent == false || AscentHasTypeNumber == true</test>
			<error>
				<message>Entry Ascent in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontDescriptorTrueType">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31032"/>
			<description>Entry CapHeight in FontDescriptorTrueType shall have type Number</description>
			<test>containsCapHeight == false || CapHeightHasTypeNumber == true</test>
			<error>
				<message>Entry CapHeight in FontDescriptorTrueType is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="1" testNumber="31752"/>
			<description>FileTrailer shall not contain entries except Root, Encrypt, Info, Size, ID, Prev</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Root' &amp;&amp; elem != 'Encrypt' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Prev').length == 0</test>
			<error>
				<message>FileTrailer contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Root' &amp;&amp; elem != 'Encrypt' &amp;&amp; elem != 'Info' &amp;&amp; elem != 'Size' &amp;&amp; elem != 'ID' &amp;&amp; elem != 'Prev').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="17" testNumber="31753"/>
			<description>Entry Root with type Dictionary in FileTrailer shall be object Catalog</description>
			<test>RootHasTypeDictionary != true || Root_size == 1</test>
			<error>
				<message>Entry Root with type Dictionary in FileTrailer is not object Catalog</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="7" testNumber="31754"/>
			<description>Entry Root in FileTrailer is required</description>
			<test>containsRoot == true</test>
			<error>
				<message>Entry Root in FileTrailer is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="10" testNumber="31755"/>
			<description>Entry Root with type Dictionary in FileTrailer shall be indirect</description>
			<test>RootHasTypeDictionary != true || isRootIndirect == true</test>
			<error>
				<message>Entry Root with type Dictionary in FileTrailer is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31756"/>
			<description>Entry Root in FileTrailer shall have type Dictionary</description>
			<test>containsRoot == false || RootHasTypeDictionary == true</test>
			<error>
				<message>Entry Root in FileTrailer is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="17" testNumber="31757"/>
			<description>Entry Encrypt with type Dictionary in FileTrailer shall be one of objects EncryptionStandard, EncryptionPublicKey</description>
			<test>EncryptHasTypeDictionary != true || Encrypt_size == 1</test>
			<error>
				<message>Entry Encrypt with type Dictionary in FileTrailer is not one of objects EncryptionStandard, EncryptionPublicKey</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31758"/>
			<description>Entry Encrypt in FileTrailer shall have type Dictionary</description>
			<test>containsEncrypt == false || EncryptHasTypeDictionary == true</test>
			<error>
				<message>Entry Encrypt in FileTrailer is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="17" testNumber="31759"/>
			<description>Entry Info with type Dictionary in FileTrailer shall be object DocInfo</description>
			<test>InfoHasTypeDictionary != true || Info_size == 1</test>
			<error>
				<message>Entry Info with type Dictionary in FileTrailer is not object DocInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="12" testNumber="31760"/>
			<description>If entry Info with type Dictionary in FileTrailer corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>InfoHasTypeDictionary != true || (isInfoIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Info with type Dictionary in FileTrailer is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31761"/>
			<description>Entry Info in FileTrailer shall have type Dictionary</description>
			<test>containsInfo == false || InfoHasTypeDictionary == true</test>
			<error>
				<message>Entry Info in FileTrailer is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="7" testNumber="31762"/>
			<description>Entry Size in FileTrailer is required</description>
			<test>containsSize == true</test>
			<error>
				<message>Entry Size in FileTrailer is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="16" testNumber="31763"/>
			<description>If entry Size with type Integer in FileTrailer corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>SizeHasTypeInteger != true || (isSizeIndirect == false)</test>
			<error>
				<message>Entry Size with type Integer in FileTrailer is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="14" testNumber="31764"/>
			<description>Entry Size with type Integer in FileTrailer shall correspond possible value predicate: fn:Eval(@Size &gt; 0)</description>
			<test>SizeHasTypeInteger != true || SizeIntegerValue &gt; 0</test>
			<error>
				<message>Entry Size with type Integer in FileTrailer doesn't correspond possible value predicate: fn:Eval(@Size &gt; 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31765"/>
			<description>Entry Size in FileTrailer shall have type Integer</description>
			<test>containsSize == false || SizeHasTypeInteger == true</test>
			<error>
				<message>Entry Size in FileTrailer is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="17" testNumber="31766"/>
			<description>Entry ID with type Array in FileTrailer shall be object ArrayOf_2UnencryptedStringsByte</description>
			<test>entryIDHasTypeArray != true || entryID_size == 1</test>
			<error>
				<message>Entry ID with type Array in FileTrailer is not object ArrayOf_2UnencryptedStringsByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="11" testNumber="31767"/>
			<description>Entry ID in FileTrailer is required, when fn:IsRequired(fn:IsPresent(Encrypt))</description>
			<test>(containsID == true || ((containsEncrypt == true)) == false)</test>
			<error>
				<message>Entry ID in FileTrailer is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="16" testNumber="31768"/>
			<description>If entry ID with type Array in FileTrailer corresponds to condition fn:MustBeDirect(fn:IsPresent(Encrypt)), it shall be direct</description>
			<test>entryIDHasTypeArray != true || (isentryIDIndirect == false || ((containsEncrypt == true)) == false)</test>
			<error>
				<message>Entry ID with type Array in FileTrailer is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31769"/>
			<description>Entry ID in FileTrailer shall have type Array</description>
			<test>containsID == false || entryIDHasTypeArray == true</test>
			<error>
				<message>Entry ID in FileTrailer is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="16" testNumber="31770"/>
			<description>If entry Prev with type Integer in FileTrailer corresponds to condition fn:MustBeDirect(), it shall be direct</description>
			<test>PrevHasTypeInteger != true || (isPrevIndirect == false)</test>
			<error>
				<message>Entry Prev with type Integer in FileTrailer is indirect</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="14" testNumber="31771"/>
			<description>Entry Prev with type Integer in FileTrailer shall correspond possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</description>
			<test>PrevHasTypeInteger != true || (PrevIntegerValue &gt;= 0) &amp;&amp; (PrevIntegerValue &lt;= fileSize)</test>
			<error>
				<message>Entry Prev with type Integer in FileTrailer doesn't correspond possible value predicate: fn:Eval((@Prev &gt;= 0) &amp;&amp; (@Prev &lt;= fn:FileSize()))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFileTrailer">
			<id specification="ISO_32000_1_1" clause="8" testNumber="31772"/>
			<description>Entry Prev in FileTrailer shall have type Integer</description>
			<test>containsPrev == false || PrevHasTypeInteger == true</test>
			<error>
				<message>Entry Prev in FileTrailer is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_1" clause="1" testNumber="32178"/>
			<description>ActionLaunch shall not contain entries except Type, S, Mac, F, Win, Unix</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Win' &amp;&amp; elem != 'Unix').length == 0</test>
			<error>
				<message>ActionLaunch contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'S' &amp;&amp; elem != 'Mac' &amp;&amp; elem != 'F' &amp;&amp; elem != 'Win' &amp;&amp; elem != 'Unix').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_1" clause="6" testNumber="32179"/>
			<description>Entry Type with type Name in ActionLaunch shall have value Action</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Action"</test>
			<error>
				<message>Entry Type with type Name in ActionLaunch has incorrect value %2 instead of Action</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_1" clause="8" testNumber="32180"/>
			<description>Entry Type in ActionLaunch shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in ActionLaunch is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_1" clause="7" testNumber="32181"/>
			<description>Entry S in ActionLaunch is required</description>
			<test>containsS == true</test>
			<error>
				<message>Entry S in ActionLaunch is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_1" clause="6" testNumber="32182"/>
			<description>Entry S with type Name in ActionLaunch shall have value Launch</description>
			<test>SHasTypeName != true || SNameValue == "Launch"</test>
			<error>
				<message>Entry S with type Name in ActionLaunch has incorrect value %2 instead of Launch</message>
				<arguments>
					<argument>keyName</argument>
					<argument>SNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_1" clause="8" testNumber="32183"/>
			<description>Entry S in ActionLaunch shall have type Name</description>
			<test>containsS == false || SHasTypeName == true</test>
			<error>
				<message>Entry S in ActionLaunch is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_1" clause="8" testNumber="32184"/>
			<description>Entry Mac in ActionLaunch shall have type Null</description>
			<test>containsMac == false || MacHasTypeNull == true</test>
			<error>
				<message>Entry Mac in ActionLaunch is not of type Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_1" clause="17" testNumber="32185"/>
			<description>Entry F with type Dictionary in ActionLaunch shall be object FileSpecification</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in ActionLaunch is not object FileSpecification</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_1" clause="11" testNumber="32186"/>
			<description>Entry F in ActionLaunch is required, when fn:IsRequired(fn:Not(fn:IsPresent(Win) || fn:IsPresent(Mac) || fn:IsPresent(Unix)))</description>
			<test>(containsF == true || (((containsWin == true) || (containsMac == true) || (containsUnix == true)) != true) == false)</test>
			<error>
				<message>Entry F in ActionLaunch is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_1" clause="8" testNumber="32187"/>
			<description>Entry F in ActionLaunch shall have one of types: Dictionary, String</description>
			<test>containsF == false || FHasTypeDictionary == true || FHasTypeString == true</test>
			<error>
				<message>Entry F in ActionLaunch is not one of types: Dictionary, String</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_1" clause="17" testNumber="32188"/>
			<description>Entry Win with type Dictionary in ActionLaunch shall be object MicrosoftWindowsLaunchParam</description>
			<test>WinHasTypeDictionary != true || Win_size == 1</test>
			<error>
				<message>Entry Win with type Dictionary in ActionLaunch is not object MicrosoftWindowsLaunchParam</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_1" clause="8" testNumber="32189"/>
			<description>Entry Win in ActionLaunch shall have type Dictionary</description>
			<test>containsWin == false || WinHasTypeDictionary == true</test>
			<error>
				<message>Entry Win in ActionLaunch is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AActionLaunch">
			<id specification="ISO_32000_1_1" clause="8" testNumber="32190"/>
			<description>Entry Unix in ActionLaunch shall have type Null</description>
			<test>containsUnix == false || UnixHasTypeNull == true</test>
			<error>
				<message>Entry Unix in ActionLaunch is not of type Null</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_1" clause="14" testNumber="32636"/>
			<description>Entry 3 with type Number in ArrayOf_4NumbersColorAnnotation shall correspond possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</description>
			<test>entry3HasTypeNumber != true || (entry3NumberValue &gt;= 0) &amp;&amp; (entry3NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 3 with type Number in ArrayOf_4NumbersColorAnnotation doesn't correspond possible value predicate: fn:Eval((@3 &gt;= 0) &amp;&amp; (@3 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_1" clause="8" testNumber="32637"/>
			<description>Entry 3 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 3 || entry3HasTypeNumber == true</test>
			<error>
				<message>Entry 3 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_1" clause="14" testNumber="32638"/>
			<description>Entry 0 with type Number in ArrayOf_4NumbersColorAnnotation shall correspond possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</description>
			<test>entry0HasTypeNumber != true || (entry0NumberValue &gt;= 0) &amp;&amp; (entry0NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 0 with type Number in ArrayOf_4NumbersColorAnnotation doesn't correspond possible value predicate: fn:Eval((@0 &gt;= 0) &amp;&amp; (@0 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_1" clause="8" testNumber="32639"/>
			<description>Entry 0 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_1" clause="14" testNumber="32640"/>
			<description>Entry 2 with type Number in ArrayOf_4NumbersColorAnnotation shall correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</description>
			<test>entry2HasTypeNumber != true || (entry2NumberValue &gt;= 0) &amp;&amp; (entry2NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 2 with type Number in ArrayOf_4NumbersColorAnnotation doesn't correspond possible value predicate: fn:Eval((@2 &gt;= 0) &amp;&amp; (@2 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_1" clause="8" testNumber="32641"/>
			<description>Entry 2 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_1" clause="14" testNumber="32642"/>
			<description>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation shall correspond possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</description>
			<test>entry1HasTypeNumber != true || (entry1NumberValue &gt;= 0) &amp;&amp; (entry1NumberValue &lt;= 1)</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation doesn't correspond possible value predicate: fn:Eval((@1 &gt;= 0) &amp;&amp; (@1 &lt;= 1))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_1" clause="8" testNumber="32643"/>
			<description>Entry 1 in ArrayOf_4NumbersColorAnnotation shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in ArrayOf_4NumbersColorAnnotation is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOf_4NumbersColorAnnotation">
			<id specification="ISO_32000_1_1" clause="9" testNumber="32644"/>
			<description>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation shall correspond special case: fn:Eval(fn:IsPresent(2))</description>
			<test>entry1HasTypeNumber != true || ((contains2 == true))</test>
			<error>
				<message>Entry 1 with type Number in ArrayOf_4NumbersColorAnnotation doesn't correspond special case: fn:Eval(fn:IsPresent(2))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="ISO_32000_1_1" clause="6" testNumber="32846"/>
			<description>Entry with type Name in ArrayOfNamesForProcSet shall have one of values: ImageI, PDF, ImageC, ImageB, Text</description>
			<test>HasTypeName != true || NameValue == "PDF" || NameValue == "Text" || NameValue == "ImageB" || NameValue == "ImageC" || NameValue == "ImageI"</test>
			<error>
				<message>Entry %1 with type Name in ArrayOfNamesForProcSet has incorrect value %2 instead of ImageI, PDF, ImageC, ImageB, Text</message>
				<arguments>
					<argument>keyName</argument>
					<argument>NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfNamesForProcSetEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="32847"/>
			<description>Entry in ArrayOfNamesForProcSet shall have type Name</description>
			<test>HasTypeName == true</test>
			<error>
				<message>Entry %1 in ArrayOfNamesForProcSet is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDecodeParamsEntry">
			<id specification="ISO_32000_1_1" clause="17" testNumber="32877"/>
			<description>Entry with type Dictionary in ArrayOfDecodeParams shall be one of objects FilterLZWDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in ArrayOfDecodeParams is not one of objects FilterLZWDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfDecodeParamsEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="32878"/>
			<description>Entry in ArrayOfDecodeParams shall have one of types: Null, Dictionary</description>
			<test>HasTypeNull == true || HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in ArrayOfDecodeParams is not one of types: Null, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AArrayOfIntegersGeneralEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="34173"/>
			<description>Entry in ArrayOfIntegersGeneral shall have type Integer</description>
			<test>HasTypeInteger == true</test>
			<error>
				<message>Entry %1 in ArrayOfIntegersGeneral is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMapEntry">
			<id specification="ISO_32000_1_1" clause="17" testNumber="34904"/>
			<description>Entry with type Dictionary in FontMap shall be one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3</description>
			<test>HasTypeDictionary != true || Entry_size == 1</test>
			<error>
				<message>Entry %1 with type Dictionary in FontMap is not one of objects FontType1, FontTrueType, FontMultipleMaster, FontType3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AFontMapEntry">
			<id specification="ISO_32000_1_1" clause="8" testNumber="34905"/>
			<description>Entry in FontMap shall have type Dictionary</description>
			<test>HasTypeDictionary == true</test>
			<error>
				<message>Entry %1 in FontMap is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_1" clause="1" testNumber="35145"/>
			<description>Thread shall not contain entries except Type, F, I</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'F' &amp;&amp; elem != 'I').length == 0</test>
			<error>
				<message>Thread contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Type' &amp;&amp; elem != 'F' &amp;&amp; elem != 'I').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_1" clause="6" testNumber="35146"/>
			<description>Entry Type with type Name in Thread shall have value Thread</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Thread"</test>
			<error>
				<message>Entry Type with type Name in Thread has incorrect value %2 instead of Thread</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_1" clause="8" testNumber="35147"/>
			<description>Entry Type in Thread shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Thread is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_1" clause="17" testNumber="35148"/>
			<description>Entry F with type Dictionary in Thread shall be object BeadFirst</description>
			<test>FHasTypeDictionary != true || F_size == 1</test>
			<error>
				<message>Entry F with type Dictionary in Thread is not object BeadFirst</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_1" clause="7" testNumber="35149"/>
			<description>Entry F in Thread is required</description>
			<test>containsF == true</test>
			<error>
				<message>Entry F in Thread is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_1" clause="10" testNumber="35150"/>
			<description>Entry F with type Dictionary in Thread shall be indirect</description>
			<test>FHasTypeDictionary != true || isFIndirect == true</test>
			<error>
				<message>Entry F with type Dictionary in Thread is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_1" clause="8" testNumber="35151"/>
			<description>Entry F in Thread shall have type Dictionary</description>
			<test>containsF == false || FHasTypeDictionary == true</test>
			<error>
				<message>Entry F in Thread is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_1" clause="17" testNumber="35152"/>
			<description>Entry I with type Dictionary in Thread shall be object DocInfo</description>
			<test>IHasTypeDictionary != true || I_size == 1</test>
			<error>
				<message>Entry I with type Dictionary in Thread is not object DocInfo</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AThread">
			<id specification="ISO_32000_1_1" clause="8" testNumber="35153"/>
			<description>Entry I in Thread shall have type Dictionary</description>
			<test>containsI == false || IHasTypeDictionary == true</test>
			<error>
				<message>Entry I in Thread is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_1" clause="2" testNumber="35360"/>
			<description>LabColorSpace shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>LabColorSpace contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_1" clause="17" testNumber="35361"/>
			<description>Entry 1 with type Dictionary in LabColorSpace shall be object LabDict</description>
			<test>entry1HasTypeDictionary != true || entry1_size == 1</test>
			<error>
				<message>Entry 1 with type Dictionary in LabColorSpace is not object LabDict</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_1" clause="8" testNumber="35362"/>
			<description>Entry 1 in LabColorSpace shall have type Dictionary</description>
			<test>size &lt;= 1 || entry1HasTypeDictionary == true</test>
			<error>
				<message>Entry 1 in LabColorSpace is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_1" clause="6" testNumber="35363"/>
			<description>Entry 0 with type Name in LabColorSpace shall have value Lab</description>
			<test>entry0HasTypeName != true || entry0NameValue == "Lab"</test>
			<error>
				<message>Entry 0 with type Name in LabColorSpace has incorrect value %2 instead of Lab</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry0NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ALabColorSpace">
			<id specification="ISO_32000_1_1" clause="8" testNumber="35364"/>
			<description>Entry 0 in LabColorSpace shall have type Name</description>
			<test>size &lt;= 0 || entry0HasTypeName == true</test>
			<error>
				<message>Entry 0 in LabColorSpace is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_1" clause="2" testNumber="36248"/>
			<description>GammaArray shall contain exactly 3 elements</description>
			<test>size == 3</test>
			<error>
				<message>GammaArray contains %1 element(s) instead of 3</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_1" clause="14" testNumber="36249"/>
			<description>Entry 1 with type Number in GammaArray shall correspond possible value predicate: fn:Eval(@1 &gt;= 0)</description>
			<test>entry1HasTypeNumber != true || entry1NumberValue &gt;= 0</test>
			<error>
				<message>Entry 1 with type Number in GammaArray doesn't correspond possible value predicate: fn:Eval(@1 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36250"/>
			<description>Entry 1 in GammaArray shall have type Number</description>
			<test>size &lt;= 1 || entry1HasTypeNumber == true</test>
			<error>
				<message>Entry 1 in GammaArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_1" clause="14" testNumber="36251"/>
			<description>Entry 0 with type Number in GammaArray shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in GammaArray doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36252"/>
			<description>Entry 0 in GammaArray shall have type Number</description>
			<test>size &lt;= 0 || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in GammaArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_1" clause="14" testNumber="36253"/>
			<description>Entry 2 with type Number in GammaArray shall correspond possible value predicate: fn:Eval(@2 &gt;= 0)</description>
			<test>entry2HasTypeNumber != true || entry2NumberValue &gt;= 0</test>
			<error>
				<message>Entry 2 with type Number in GammaArray doesn't correspond possible value predicate: fn:Eval(@2 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AGammaArray">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36254"/>
			<description>Entry 2 in GammaArray shall have type Number</description>
			<test>size &lt;= 2 || entry2HasTypeNumber == true</test>
			<error>
				<message>Entry 2 in GammaArray is not of type Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_1" clause="7" testNumber="36358"/>
			<description>Entry Length in Stream is required</description>
			<test>containsLength == true</test>
			<error>
				<message>Entry Length in Stream is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36359"/>
			<description>Entry Length in Stream shall have type Integer</description>
			<test>containsLength == false || LengthHasTypeInteger == true</test>
			<error>
				<message>Entry Length in Stream is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_1" clause="17" testNumber="36360"/>
			<description>Entry DecodeParms with type Array in Stream shall be object ArrayOfDecodeParams</description>
			<test>DecodeParmsHasTypeArray != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Array in Stream is not object ArrayOfDecodeParams</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_1" clause="17" testNumber="36361"/>
			<description>Entry DecodeParms with type Dictionary in Stream shall be one of objects FilterLZWDecode, FilterCCITTFaxDecode, FilterDCTDecode</description>
			<test>DecodeParmsHasTypeDictionary != true || DecodeParms_size == 1</test>
			<error>
				<message>Entry DecodeParms with type Dictionary in Stream is not one of objects FilterLZWDecode, FilterCCITTFaxDecode, FilterDCTDecode</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36362"/>
			<description>Entry DecodeParms in Stream shall have one of types: Array, Dictionary</description>
			<test>containsDecodeParms == false || DecodeParmsHasTypeArray == true || DecodeParmsHasTypeDictionary == true</test>
			<error>
				<message>Entry DecodeParms in Stream is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_1" clause="9" testNumber="36363"/>
			<description>Entry DecodeParms with type Array in Stream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>DecodeParmsHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry DecodeParms with type Array in Stream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_1" clause="17" testNumber="36364"/>
			<description>Entry Filter with type Array in Stream shall be object ArrayOfFilterNames</description>
			<test>FilterHasTypeArray != true || Filter_size == 1</test>
			<error>
				<message>Entry Filter with type Array in Stream is not object ArrayOfFilterNames</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_1" clause="6" testNumber="36365"/>
			<description>Entry Filter with type Name in Stream shall have one of values: ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode</description>
			<test>FilterHasTypeName != true || FilterNameValue == "ASCIIHexDecode" || FilterNameValue == "ASCII85Decode" || FilterNameValue == "LZWDecode" || FilterNameValue == "RunLengthDecode" || FilterNameValue == "CCITTFaxDecode" || FilterNameValue == "DCTDecode"</test>
			<error>
				<message>Entry Filter with type Name in Stream has incorrect value %2 instead of ASCIIHexDecode, LZWDecode, RunLengthDecode, ASCII85Decode, CCITTFaxDecode, DCTDecode</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36366"/>
			<description>Entry Filter in Stream shall have one of types: Name, Array</description>
			<test>containsFilter == false || FilterHasTypeName == true || FilterHasTypeArray == true</test>
			<error>
				<message>Entry Filter in Stream is not one of types: Name, Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AStream">
			<id specification="ISO_32000_1_1" clause="9" testNumber="36367"/>
			<description>Entry Filter with type Array in Stream shall correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</description>
			<test>FilterHasTypeArray != true || (DecodeParmsArraySize == FilterArraySize)</test>
			<error>
				<message>Entry Filter with type Array in Stream doesn't correspond special case: fn:Eval(fn:ArrayLength(DecodeParms) == fn:ArrayLength(Filter))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="1" testNumber="36773"/>
			<description>PageTreeNode shall not contain entries except Resources, Type, MediaBox, Rotate, CropBox, Parent, Count, Kids</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Resources' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Kids').length == 0</test>
			<error>
				<message>PageTreeNode contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Resources' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'MediaBox' &amp;&amp; elem != 'Rotate' &amp;&amp; elem != 'CropBox' &amp;&amp; elem != 'Parent' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Kids').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="17" testNumber="36774"/>
			<description>Entry Resources with type Dictionary in PageTreeNode shall be object Resource</description>
			<test>ResourcesHasTypeDictionary != true || Resources_size == 1</test>
			<error>
				<message>Entry Resources with type Dictionary in PageTreeNode is not object Resource</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36775"/>
			<description>Entry Resources in PageTreeNode shall have type Dictionary</description>
			<test>containsResources == false || ResourcesHasTypeDictionary == true</test>
			<error>
				<message>Entry Resources in PageTreeNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="7" testNumber="36776"/>
			<description>Entry Type in PageTreeNode is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="6" testNumber="36777"/>
			<description>Entry Type with type Name in PageTreeNode shall have value Pages</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Pages"</test>
			<error>
				<message>Entry Type with type Name in PageTreeNode has incorrect value %2 instead of Pages</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36778"/>
			<description>Entry Type in PageTreeNode shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in PageTreeNode is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36779"/>
			<description>Entry MediaBox in PageTreeNode shall have type Rectangle</description>
			<test>containsMediaBox == false || MediaBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry MediaBox in PageTreeNode is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="14" testNumber="36780"/>
			<description>Entry Rotate with type Integer in PageTreeNode shall correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</description>
			<test>RotateHasTypeInteger != true || (RotateIntegerValue % 90) == 0</test>
			<error>
				<message>Entry Rotate with type Integer in PageTreeNode doesn't correspond possible value predicate: fn:Eval((@Rotate mod 90) == 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36781"/>
			<description>Entry Rotate in PageTreeNode shall have type Integer</description>
			<test>containsRotate == false || RotateHasTypeInteger == true</test>
			<error>
				<message>Entry Rotate in PageTreeNode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36782"/>
			<description>Entry CropBox in PageTreeNode shall have type Rectangle</description>
			<test>containsCropBox == false || CropBoxHasTypeRectangle == true</test>
			<error>
				<message>Entry CropBox in PageTreeNode is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="17" testNumber="36783"/>
			<description>Entry Parent with type Dictionary in PageTreeNode shall be one of objects PageTreeNode, PageTreeNodeRoot</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in PageTreeNode is not one of objects PageTreeNode, PageTreeNodeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="7" testNumber="36784"/>
			<description>Entry Parent in PageTreeNode is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="10" testNumber="36785"/>
			<description>Entry Parent with type Dictionary in PageTreeNode shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in PageTreeNode is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36786"/>
			<description>Entry Parent in PageTreeNode shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in PageTreeNode is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="7" testNumber="36787"/>
			<description>Entry Count in PageTreeNode is required</description>
			<test>containsCount == true</test>
			<error>
				<message>Entry Count in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="14" testNumber="36788"/>
			<description>Entry Count with type Integer in PageTreeNode shall correspond possible value predicate: fn:Eval(@Count &gt;= 0)</description>
			<test>CountHasTypeInteger != true || CountIntegerValue &gt;= 0</test>
			<error>
				<message>Entry Count with type Integer in PageTreeNode doesn't correspond possible value predicate: fn:Eval(@Count &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36789"/>
			<description>Entry Count in PageTreeNode shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in PageTreeNode is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="17" testNumber="36790"/>
			<description>Entry Kids with type Array in PageTreeNode shall be object ArrayOfPageTreeNodeKids</description>
			<test>KidsHasTypeArray != true || Kids_size == 1</test>
			<error>
				<message>Entry Kids with type Array in PageTreeNode is not object ArrayOfPageTreeNodeKids</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="7" testNumber="36791"/>
			<description>Entry Kids in PageTreeNode is required</description>
			<test>containsKids == true</test>
			<error>
				<message>Entry Kids in PageTreeNode is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="APageTreeNode">
			<id specification="ISO_32000_1_1" clause="8" testNumber="36792"/>
			<description>Entry Kids in PageTreeNode shall have type Array</description>
			<test>containsKids == false || KidsHasTypeArray == true</test>
			<error>
				<message>Entry Kids in PageTreeNode is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_1" clause="1" testNumber="37108"/>
			<description>Resource shall not contain entries except ProcSet, XObject, Font, ColorSpace</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'ProcSet' &amp;&amp; elem != 'XObject' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'ColorSpace').length == 0</test>
			<error>
				<message>Resource contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'ProcSet' &amp;&amp; elem != 'XObject' &amp;&amp; elem != 'Font' &amp;&amp; elem != 'ColorSpace').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37109"/>
			<description>Entry ProcSet with type Array in Resource shall be object ArrayOfNamesForProcSet</description>
			<test>ProcSetHasTypeArray != true || ProcSet_size == 1</test>
			<error>
				<message>Entry ProcSet with type Array in Resource is not object ArrayOfNamesForProcSet</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37110"/>
			<description>Entry ProcSet in Resource shall have type Array</description>
			<test>containsProcSet == false || ProcSetHasTypeArray == true</test>
			<error>
				<message>Entry ProcSet in Resource is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37111"/>
			<description>Entry XObject with type Dictionary in Resource shall be object XObjectMap</description>
			<test>XObjectHasTypeDictionary != true || XObject_size == 1</test>
			<error>
				<message>Entry XObject with type Dictionary in Resource is not object XObjectMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37112"/>
			<description>Entry XObject in Resource shall have type Dictionary</description>
			<test>containsXObject == false || XObjectHasTypeDictionary == true</test>
			<error>
				<message>Entry XObject in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37113"/>
			<description>Entry Font with type Dictionary in Resource shall be object FontMap</description>
			<test>FontHasTypeDictionary != true || Font_size == 1</test>
			<error>
				<message>Entry Font with type Dictionary in Resource is not object FontMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37114"/>
			<description>Entry Font in Resource shall have type Dictionary</description>
			<test>containsFont == false || FontHasTypeDictionary == true</test>
			<error>
				<message>Entry Font in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37115"/>
			<description>Entry ColorSpace with type Dictionary in Resource shall be object ColorSpaceMap</description>
			<test>ColorSpaceHasTypeDictionary != true || ColorSpace_size == 1</test>
			<error>
				<message>Entry ColorSpace with type Dictionary in Resource is not object ColorSpaceMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AResource">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37116"/>
			<description>Entry ColorSpace in Resource shall have type Dictionary</description>
			<test>containsColorSpace == false || ColorSpaceHasTypeDictionary == true</test>
			<error>
				<message>Entry ColorSpace in Resource is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="1" testNumber="37310"/>
			<description>Catalog shall not contain entries except OpenAction, PageMode, Threads, Outlines, PageLayout, Type, URI, Dests, NeedsRendering, Pages</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'OpenAction' &amp;&amp; elem != 'PageMode' &amp;&amp; elem != 'Threads' &amp;&amp; elem != 'Outlines' &amp;&amp; elem != 'PageLayout' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'NeedsRendering' &amp;&amp; elem != 'Pages').length == 0</test>
			<error>
				<message>Catalog contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'OpenAction' &amp;&amp; elem != 'PageMode' &amp;&amp; elem != 'Threads' &amp;&amp; elem != 'Outlines' &amp;&amp; elem != 'PageLayout' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'URI' &amp;&amp; elem != 'Dests' &amp;&amp; elem != 'NeedsRendering' &amp;&amp; elem != 'Pages').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37311"/>
			<description>Entry OpenAction with type Array in Catalog shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>OpenActionHasTypeArray != true || OpenAction_size == 1</test>
			<error>
				<message>Entry OpenAction with type Array in Catalog is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37312"/>
			<description>Entry OpenAction with type Dictionary in Catalog shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI</description>
			<test>OpenActionHasTypeDictionary != true || OpenAction_size == 1</test>
			<error>
				<message>Entry OpenAction with type Dictionary in Catalog is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37313"/>
			<description>Entry OpenAction in Catalog shall have one of types: Array, Dictionary</description>
			<test>containsOpenAction == false || OpenActionHasTypeArray == true || OpenActionHasTypeDictionary == true</test>
			<error>
				<message>Entry OpenAction in Catalog is not one of types: Array, Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="6" testNumber="37314"/>
			<description>Entry PageMode with type Name in Catalog shall have one of values: UseOutlines, UseThumbs, UseOC, UseAttachments, UseNone, FullScreen</description>
			<test>PageModeHasTypeName != true || PageModeNameValue == "UseNone" || PageModeNameValue == "UseOutlines" || PageModeNameValue == "UseThumbs" || PageModeNameValue == "FullScreen" || PageModeNameValue == "UseOC" || PageModeNameValue == "UseAttachments"</test>
			<error>
				<message>Entry PageMode with type Name in Catalog has incorrect value %2 instead of UseOutlines, UseThumbs, UseOC, UseAttachments, UseNone, FullScreen</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PageModeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37315"/>
			<description>Entry PageMode in Catalog shall have type Name</description>
			<test>containsPageMode == false || PageModeHasTypeName == true</test>
			<error>
				<message>Entry PageMode in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37316"/>
			<description>Entry Threads with type Array in Catalog shall be object ArrayOfThreads</description>
			<test>ThreadsHasTypeArray != true || Threads_size == 1</test>
			<error>
				<message>Entry Threads with type Array in Catalog is not object ArrayOfThreads</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="12" testNumber="37317"/>
			<description>If entry Threads with type Array in Catalog corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>ThreadsHasTypeArray != true || (isThreadsIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Threads with type Array in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37318"/>
			<description>Entry Threads in Catalog shall have type Array</description>
			<test>containsThreads == false || ThreadsHasTypeArray == true</test>
			<error>
				<message>Entry Threads in Catalog is not of type Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37319"/>
			<description>Entry Outlines with type Dictionary in Catalog shall be object Outline</description>
			<test>OutlinesHasTypeDictionary != true || Outlines_size == 1</test>
			<error>
				<message>Entry Outlines with type Dictionary in Catalog is not object Outline</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="12" testNumber="37320"/>
			<description>If entry Outlines with type Dictionary in Catalog corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>OutlinesHasTypeDictionary != true || (isOutlinesIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Outlines with type Dictionary in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37321"/>
			<description>Entry Outlines in Catalog shall have type Dictionary</description>
			<test>containsOutlines == false || OutlinesHasTypeDictionary == true</test>
			<error>
				<message>Entry Outlines in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="6" testNumber="37322"/>
			<description>Entry PageLayout with type Name in Catalog shall have one of values: SinglePage, TwoColumnLeft, OneColumn, TwoPageRight, TwoPageLeft, TwoColumnRight</description>
			<test>PageLayoutHasTypeName != true || PageLayoutNameValue == "SinglePage" || PageLayoutNameValue == "OneColumn" || PageLayoutNameValue == "TwoColumnLeft" || PageLayoutNameValue == "TwoColumnRight" || PageLayoutNameValue == "TwoPageLeft" || PageLayoutNameValue == "TwoPageRight"</test>
			<error>
				<message>Entry PageLayout with type Name in Catalog has incorrect value %2 instead of SinglePage, TwoColumnLeft, OneColumn, TwoPageRight, TwoPageLeft, TwoColumnRight</message>
				<arguments>
					<argument>keyName</argument>
					<argument>PageLayoutNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37323"/>
			<description>Entry PageLayout in Catalog shall have type Name</description>
			<test>containsPageLayout == false || PageLayoutHasTypeName == true</test>
			<error>
				<message>Entry PageLayout in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="7" testNumber="37324"/>
			<description>Entry Type in Catalog is required</description>
			<test>containsType == true</test>
			<error>
				<message>Entry Type in Catalog is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="6" testNumber="37325"/>
			<description>Entry Type with type Name in Catalog shall have value Catalog</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Catalog"</test>
			<error>
				<message>Entry Type with type Name in Catalog has incorrect value %2 instead of Catalog</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37326"/>
			<description>Entry Type in Catalog shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Catalog is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37327"/>
			<description>Entry URI with type Dictionary in Catalog shall be object URI</description>
			<test>URIHasTypeDictionary != true || URI_size == 1</test>
			<error>
				<message>Entry URI with type Dictionary in Catalog is not object URI</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37328"/>
			<description>Entry URI in Catalog shall have type Dictionary</description>
			<test>containsURI == false || URIHasTypeDictionary == true</test>
			<error>
				<message>Entry URI in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37329"/>
			<description>Entry Dests with type Dictionary in Catalog shall be object DestsMap</description>
			<test>DestsHasTypeDictionary != true || Dests_size == 1</test>
			<error>
				<message>Entry Dests with type Dictionary in Catalog is not object DestsMap</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="12" testNumber="37330"/>
			<description>If entry Dests with type Dictionary in Catalog corresponds to condition fn:MustBeIndirect(fn:BeforeVersion(2.0)), it shall be indirect</description>
			<test>DestsHasTypeDictionary != true || (isDestsIndirect == true || (true) == false)</test>
			<error>
				<message>Entry Dests with type Dictionary in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37331"/>
			<description>Entry Dests in Catalog shall have type Dictionary</description>
			<test>containsDests == false || DestsHasTypeDictionary == true</test>
			<error>
				<message>Entry Dests in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37332"/>
			<description>Entry NeedsRendering in Catalog shall have type Boolean</description>
			<test>containsNeedsRendering == false || NeedsRenderingHasTypeBoolean == true</test>
			<error>
				<message>Entry NeedsRendering in Catalog is not of type Boolean</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37333"/>
			<description>Entry Pages with type Dictionary in Catalog shall be object PageTreeNodeRoot</description>
			<test>PagesHasTypeDictionary != true || Pages_size == 1</test>
			<error>
				<message>Entry Pages with type Dictionary in Catalog is not object PageTreeNodeRoot</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="7" testNumber="37334"/>
			<description>Entry Pages in Catalog is required</description>
			<test>containsPages == true</test>
			<error>
				<message>Entry Pages in Catalog is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="10" testNumber="37335"/>
			<description>Entry Pages with type Dictionary in Catalog shall be indirect</description>
			<test>PagesHasTypeDictionary != true || isPagesIndirect == true</test>
			<error>
				<message>Entry Pages with type Dictionary in Catalog is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ACatalog">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37336"/>
			<description>Entry Pages in Catalog shall have type Dictionary</description>
			<test>containsPages == false || PagesHasTypeDictionary == true</test>
			<error>
				<message>Entry Pages in Catalog is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="1" testNumber="37820"/>
			<description>OutlineItem shall not contain entries except Parent, Dest, Next, A, Count, Last, Prev, Title, First</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Parent' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'A' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Title' &amp;&amp; elem != 'First').length == 0</test>
			<error>
				<message>OutlineItem contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Parent' &amp;&amp; elem != 'Dest' &amp;&amp; elem != 'Next' &amp;&amp; elem != 'A' &amp;&amp; elem != 'Count' &amp;&amp; elem != 'Last' &amp;&amp; elem != 'Prev' &amp;&amp; elem != 'Title' &amp;&amp; elem != 'First').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37821"/>
			<description>Entry Parent with type Dictionary in OutlineItem shall be one of objects OutlineItem, Outline</description>
			<test>ParentHasTypeDictionary != true || Parent_size == 1</test>
			<error>
				<message>Entry Parent with type Dictionary in OutlineItem is not one of objects OutlineItem, Outline</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="7" testNumber="37822"/>
			<description>Entry Parent in OutlineItem is required</description>
			<test>containsParent == true</test>
			<error>
				<message>Entry Parent in OutlineItem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="10" testNumber="37823"/>
			<description>Entry Parent with type Dictionary in OutlineItem shall be indirect</description>
			<test>ParentHasTypeDictionary != true || isParentIndirect == true</test>
			<error>
				<message>Entry Parent with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37824"/>
			<description>Entry Parent in OutlineItem shall have type Dictionary</description>
			<test>containsParent == false || ParentHasTypeDictionary == true</test>
			<error>
				<message>Entry Parent in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37825"/>
			<description>Entry Dest with type Array in OutlineItem shall be one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</description>
			<test>DestHasTypeArray != true || Dest_size == 1</test>
			<error>
				<message>Entry Dest with type Array in OutlineItem is not one of objects DestXYZArray, Dest0Array, Dest1Array, Dest4Array</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37826"/>
			<description>Entry Dest in OutlineItem shall have one of types: Name, Array, StringByte</description>
			<test>containsDest == false || DestHasTypeName == true || DestHasTypeArray == true || DestHasTypeStringByte == true</test>
			<error>
				<message>Entry Dest in OutlineItem is not one of types: Name, Array, StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="9" testNumber="37827"/>
			<description>Entry Dest with type Name in OutlineItem shall correspond special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeName != true || (((containsA == true)) != true)</test>
			<error>
				<message>Entry Dest with type Name in OutlineItem doesn't correspond special case: fn:Not(fn:IsPresent(A))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="9" testNumber="37828"/>
			<description>Entry Dest with type Array in OutlineItem shall correspond special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeArray != true || (((containsA == true)) != true)</test>
			<error>
				<message>Entry Dest with type Array in OutlineItem doesn't correspond special case: fn:Not(fn:IsPresent(A))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="9" testNumber="37829"/>
			<description>Entry Dest with type StringByte in OutlineItem shall correspond special case: fn:Not(fn:IsPresent(A))</description>
			<test>DestHasTypeStringByte != true || (((containsA == true)) != true)</test>
			<error>
				<message>Entry Dest with type StringByte in OutlineItem doesn't correspond special case: fn:Not(fn:IsPresent(A))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37830"/>
			<description>Entry Next with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>NextHasTypeDictionary != true || Next_size == 1</test>
			<error>
				<message>Entry Next with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="10" testNumber="37831"/>
			<description>Entry Next with type Dictionary in OutlineItem shall be indirect</description>
			<test>NextHasTypeDictionary != true || isNextIndirect == true</test>
			<error>
				<message>Entry Next with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37832"/>
			<description>Entry Next in OutlineItem shall have type Dictionary</description>
			<test>containsNext == false || NextHasTypeDictionary == true</test>
			<error>
				<message>Entry Next in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37833"/>
			<description>Entry A with type Dictionary in OutlineItem shall be one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI</description>
			<test>AHasTypeDictionary != true || A_size == 1</test>
			<error>
				<message>Entry A with type Dictionary in OutlineItem is not one of objects ActionGoTo, ActionGoToR, ActionLaunch, ActionThread, ActionURI</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37834"/>
			<description>Entry A in OutlineItem shall have type Dictionary</description>
			<test>containsA == false || AHasTypeDictionary == true</test>
			<error>
				<message>Entry A in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="9" testNumber="37835"/>
			<description>Entry A with type Dictionary in OutlineItem shall correspond special case: fn:Not(fn:IsPresent(Dest))</description>
			<test>AHasTypeDictionary != true || (((containsDest == true)) != true)</test>
			<error>
				<message>Entry A with type Dictionary in OutlineItem doesn't correspond special case: fn:Not(fn:IsPresent(Dest))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37836"/>
			<description>Entry Count in OutlineItem shall have type Integer</description>
			<test>containsCount == false || CountHasTypeInteger == true</test>
			<error>
				<message>Entry Count in OutlineItem is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37837"/>
			<description>Entry Last with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>LastHasTypeDictionary != true || Last_size == 1</test>
			<error>
				<message>Entry Last with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="10" testNumber="37838"/>
			<description>Entry Last with type Dictionary in OutlineItem shall be indirect</description>
			<test>LastHasTypeDictionary != true || isLastIndirect == true</test>
			<error>
				<message>Entry Last with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37839"/>
			<description>Entry Last in OutlineItem shall have type Dictionary</description>
			<test>containsLast == false || LastHasTypeDictionary == true</test>
			<error>
				<message>Entry Last in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37840"/>
			<description>Entry Prev with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>PrevHasTypeDictionary != true || Prev_size == 1</test>
			<error>
				<message>Entry Prev with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="10" testNumber="37841"/>
			<description>Entry Prev with type Dictionary in OutlineItem shall be indirect</description>
			<test>PrevHasTypeDictionary != true || isPrevIndirect == true</test>
			<error>
				<message>Entry Prev with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37842"/>
			<description>Entry Prev in OutlineItem shall have type Dictionary</description>
			<test>containsPrev == false || PrevHasTypeDictionary == true</test>
			<error>
				<message>Entry Prev in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="7" testNumber="37843"/>
			<description>Entry Title in OutlineItem is required</description>
			<test>containsTitle == true</test>
			<error>
				<message>Entry Title in OutlineItem is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37844"/>
			<description>Entry Title in OutlineItem shall have type StringText</description>
			<test>containsTitle == false || TitleHasTypeStringText == true</test>
			<error>
				<message>Entry Title in OutlineItem is not of type StringText</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="17" testNumber="37845"/>
			<description>Entry First with type Dictionary in OutlineItem shall be object OutlineItem</description>
			<test>FirstHasTypeDictionary != true || First_size == 1</test>
			<error>
				<message>Entry First with type Dictionary in OutlineItem is not object OutlineItem</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="10" testNumber="37846"/>
			<description>Entry First with type Dictionary in OutlineItem shall be indirect</description>
			<test>FirstHasTypeDictionary != true || isFirstIndirect == true</test>
			<error>
				<message>Entry First with type Dictionary in OutlineItem is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AOutlineItem">
			<id specification="ISO_32000_1_1" clause="8" testNumber="37847"/>
			<description>Entry First in OutlineItem shall have type Dictionary</description>
			<test>containsFirst == false || FirstHasTypeDictionary == true</test>
			<error>
				<message>Entry First in OutlineItem is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="1" testNumber="38224"/>
			<description>EncryptionStandard shall not contain entries except Filter, EFF, V, P, OE, R, U, UE, O, Perms</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'EFF' &amp;&amp; elem != 'V' &amp;&amp; elem != 'P' &amp;&amp; elem != 'OE' &amp;&amp; elem != 'R' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UE' &amp;&amp; elem != 'O' &amp;&amp; elem != 'Perms').length == 0</test>
			<error>
				<message>EncryptionStandard contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'Filter' &amp;&amp; elem != 'EFF' &amp;&amp; elem != 'V' &amp;&amp; elem != 'P' &amp;&amp; elem != 'OE' &amp;&amp; elem != 'R' &amp;&amp; elem != 'U' &amp;&amp; elem != 'UE' &amp;&amp; elem != 'O' &amp;&amp; elem != 'Perms').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="7" testNumber="38225"/>
			<description>Entry Filter in EncryptionStandard is required</description>
			<test>containsFilter == true</test>
			<error>
				<message>Entry Filter in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="6" testNumber="38226"/>
			<description>Entry Filter with type Name in EncryptionStandard shall have value Standard</description>
			<test>FilterHasTypeName != true || FilterNameValue == "Standard"</test>
			<error>
				<message>Entry Filter with type Name in EncryptionStandard has incorrect value %2 instead of Standard</message>
				<arguments>
					<argument>keyName</argument>
					<argument>FilterNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="8" testNumber="38227"/>
			<description>Entry Filter in EncryptionStandard shall have type Name</description>
			<test>containsFilter == false || FilterHasTypeName == true</test>
			<error>
				<message>Entry Filter in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="8" testNumber="38228"/>
			<description>Entry EFF in EncryptionStandard shall have type Name</description>
			<test>containsEFF == false || EFFHasTypeName == true</test>
			<error>
				<message>Entry EFF in EncryptionStandard is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="7" testNumber="38229"/>
			<description>Entry V in EncryptionStandard is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="19" testNumber="38230"/>
			<description>Entry V with type Integer in EncryptionStandard shouldn't have deprecated value 0</description>
			<test>VIntegerValue != 0</test>
			<error>
				<message>Entry V with type Integer in EncryptionStandard has deprecated value 0</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="13" testNumber="38231"/>
			<description>Entry V with type Integer in EncryptionStandard shall have one of values: 0, 1</description>
			<test>VHasTypeInteger != true || VIntegerValue == 0 || VIntegerValue == 1</test>
			<error>
				<message>Entry V with type Integer in EncryptionStandard has incorrect value %2 instead of 0, 1</message>
				<arguments>
					<argument>keyName</argument>
					<argument>VIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="8" testNumber="38232"/>
			<description>Entry V in EncryptionStandard shall have type Integer</description>
			<test>containsV == false || VHasTypeInteger == true</test>
			<error>
				<message>Entry V in EncryptionStandard is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="7" testNumber="38233"/>
			<description>Entry P in EncryptionStandard is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="8" testNumber="38234"/>
			<description>Entry P in EncryptionStandard shall have type Bitmask</description>
			<test>containsP == false || PHasTypeBitmask == true</test>
			<error>
				<message>Entry P in EncryptionStandard is not of type Bitmask</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="9" testNumber="38235"/>
			<description>Entry P with type Bitmask in EncryptionStandard shall correspond special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitsSet(7 , 8) &amp;&amp; fn:SinceVersion(2.0 , fn:BitSet(10)) &amp;&amp; (fn:SinceVersion(2.0 , fn:Extension(ISO_TS_32004 , fn:BitsSet(14 , 32))) || fn:BitsSet(13 , 32)))</description>
			<test>PHasTypeBitmask != true || (((PBitmaskValue &gt;&gt; 0 &amp; 1) == 0 &amp;&amp; (PBitmaskValue &gt;&gt; 1 &amp; 1) == 0) &amp;&amp; ((PBitmaskValue &gt;&gt; 6 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 7 &amp; 1) == 1) &amp;&amp; true &amp;&amp; (true || ((PBitmaskValue &gt;&gt; 12 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 13 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 14 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 15 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 16 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 17 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 18 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 19 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 20 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 21 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 22 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 23 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 24 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 25 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 26 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 27 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 28 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 29 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 30 &amp; 1) == 1 &amp;&amp; (PBitmaskValue &gt;&gt; 31 &amp; 1) == 1)))</test>
			<error>
				<message>Entry P with type Bitmask in EncryptionStandard doesn't correspond special case: fn:Eval(fn:BitsClear(1 , 2) &amp;&amp; fn:BitsSet(7 , 8) &amp;&amp; fn:SinceVersion(2.0 , fn:BitSet(10)) &amp;&amp; (fn:SinceVersion(2.0 , fn:Extension(ISO_TS_32004 , fn:BitsSet(14 , 32))) || fn:BitsSet(13 , 32)))</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="11" testNumber="38236"/>
			<description>Entry OE in EncryptionStandard is required, when fn:IsRequired((@R == 5) || (@R == 6))</description>
			<test>(containsOE == true || ((RIntegerValue == 5) || (RIntegerValue == 6)) == false)</test>
			<error>
				<message>Entry OE in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="8" testNumber="38237"/>
			<description>Entry OE in EncryptionStandard shall have type StringByte</description>
			<test>containsOE == false || OEHasTypeStringByte == true</test>
			<error>
				<message>Entry OE in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="7" testNumber="38238"/>
			<description>Entry R in EncryptionStandard is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="15" testNumber="38239"/>
			<description>Entry R in EncryptionStandard shall have Integer value 2, if this object corresponds to condition @V &lt; 2</description>
			<test>((VIntegerValue &lt; 2) == false || RIntegerValue == 2)</test>
			<error>
				<message>Entry R in EncryptionStandard doesn't have value 2</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="15" testNumber="38240"/>
			<description>Entry R in EncryptionStandard shall have Integer value 3, if this object corresponds to condition (@V == 2) || (@V == 3)</description>
			<test>(((VIntegerValue == 2) || (VIntegerValue == 3)) == false || RIntegerValue == 3)</test>
			<error>
				<message>Entry R in EncryptionStandard doesn't have value 3</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="15" testNumber="38241"/>
			<description>Entry R in EncryptionStandard shall have Integer value 4, if this object corresponds to condition @V == 4</description>
			<test>((VIntegerValue == 4) == false || RIntegerValue == 4)</test>
			<error>
				<message>Entry R in EncryptionStandard doesn't have value 4</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="13" testNumber="38242"/>
			<description>Entry R with type Integer in EncryptionStandard shall have one of values: 2, 3, 4</description>
			<test>RHasTypeInteger != true || RIntegerValue == 2 || RIntegerValue == 3 || RIntegerValue == 4</test>
			<error>
				<message>Entry R with type Integer in EncryptionStandard has incorrect value %2 instead of 2, 3, 4</message>
				<arguments>
					<argument>keyName</argument>
					<argument>RIntegerValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="8" testNumber="38243"/>
			<description>Entry R in EncryptionStandard shall have type Integer</description>
			<test>containsR == false || RHasTypeInteger == true</test>
			<error>
				<message>Entry R in EncryptionStandard is not of type Integer</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="7" testNumber="38244"/>
			<description>Entry U in EncryptionStandard is required</description>
			<test>containsU == true</test>
			<error>
				<message>Entry U in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="8" testNumber="38245"/>
			<description>Entry U in EncryptionStandard shall have type StringByte</description>
			<test>containsU == false || UHasTypeStringByte == true</test>
			<error>
				<message>Entry U in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="11" testNumber="38246"/>
			<description>Entry UE in EncryptionStandard is required, when fn:IsRequired((@R == 5) || (@R == 6))</description>
			<test>(containsUE == true || ((RIntegerValue == 5) || (RIntegerValue == 6)) == false)</test>
			<error>
				<message>Entry UE in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="8" testNumber="38247"/>
			<description>Entry UE in EncryptionStandard shall have type StringByte</description>
			<test>containsUE == false || UEHasTypeStringByte == true</test>
			<error>
				<message>Entry UE in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="7" testNumber="38248"/>
			<description>Entry O in EncryptionStandard is required</description>
			<test>containsO == true</test>
			<error>
				<message>Entry O in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="8" testNumber="38249"/>
			<description>Entry O in EncryptionStandard shall have type StringByte</description>
			<test>containsO == false || OHasTypeStringByte == true</test>
			<error>
				<message>Entry O in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="11" testNumber="38250"/>
			<description>Entry Perms in EncryptionStandard is required, when fn:IsRequired((@R == 5) || (@R == 6))</description>
			<test>(containsPerms == true || ((RIntegerValue == 5) || (RIntegerValue == 6)) == false)</test>
			<error>
				<message>Entry Perms in EncryptionStandard is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="AEncryptionStandard">
			<id specification="ISO_32000_1_1" clause="8" testNumber="38251"/>
			<description>Entry Perms in EncryptionStandard shall have type StringByte</description>
			<test>containsPerms == false || PermsHasTypeStringByte == true</test>
			<error>
				<message>Entry Perms in EncryptionStandard is not of type StringByte</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="1" testNumber="39812"/>
			<description>Bead shall not contain entries except T, V, P, N, Type, R</description>
			<test>keysString == '' || keysString.split('&amp;').filter(elem =&gt; elem != 'T' &amp;&amp; elem != 'V' &amp;&amp; elem != 'P' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'R').length == 0</test>
			<error>
				<message>Bead contains entry(ies) %1</message>
				<arguments>
					<argument>keysString.split('&amp;').filter(elem =&gt; elem != 'T' &amp;&amp; elem != 'V' &amp;&amp; elem != 'P' &amp;&amp; elem != 'N' &amp;&amp; elem != 'Type' &amp;&amp; elem != 'R').toString()</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="17" testNumber="39813"/>
			<description>Entry T with type Dictionary in Bead shall be object Thread</description>
			<test>THasTypeDictionary != true || T_size == 1</test>
			<error>
				<message>Entry T with type Dictionary in Bead is not object Thread</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="10" testNumber="39814"/>
			<description>Entry T with type Dictionary in Bead shall be indirect</description>
			<test>THasTypeDictionary != true || isTIndirect == true</test>
			<error>
				<message>Entry T with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="8" testNumber="39815"/>
			<description>Entry T in Bead shall have type Dictionary</description>
			<test>containsT == false || THasTypeDictionary == true</test>
			<error>
				<message>Entry T in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="17" testNumber="39816"/>
			<description>Entry V with type Dictionary in Bead shall be one of objects BeadFirst, Bead</description>
			<test>VHasTypeDictionary != true || V_size == 1</test>
			<error>
				<message>Entry V with type Dictionary in Bead is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="7" testNumber="39817"/>
			<description>Entry V in Bead is required</description>
			<test>containsV == true</test>
			<error>
				<message>Entry V in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="10" testNumber="39818"/>
			<description>Entry V with type Dictionary in Bead shall be indirect</description>
			<test>VHasTypeDictionary != true || isVIndirect == true</test>
			<error>
				<message>Entry V with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="8" testNumber="39819"/>
			<description>Entry V in Bead shall have type Dictionary</description>
			<test>containsV == false || VHasTypeDictionary == true</test>
			<error>
				<message>Entry V in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="17" testNumber="39820"/>
			<description>Entry P with type Dictionary in Bead shall be object PageObject</description>
			<test>PHasTypeDictionary != true || P_size == 1</test>
			<error>
				<message>Entry P with type Dictionary in Bead is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="7" testNumber="39821"/>
			<description>Entry P in Bead is required</description>
			<test>containsP == true</test>
			<error>
				<message>Entry P in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="10" testNumber="39822"/>
			<description>Entry P with type Dictionary in Bead shall be indirect</description>
			<test>PHasTypeDictionary != true || isPIndirect == true</test>
			<error>
				<message>Entry P with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="8" testNumber="39823"/>
			<description>Entry P in Bead shall have type Dictionary</description>
			<test>containsP == false || PHasTypeDictionary == true</test>
			<error>
				<message>Entry P in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="17" testNumber="39824"/>
			<description>Entry N with type Dictionary in Bead shall be one of objects BeadFirst, Bead</description>
			<test>NHasTypeDictionary != true || N_size == 1</test>
			<error>
				<message>Entry N with type Dictionary in Bead is not one of objects BeadFirst, Bead</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="7" testNumber="39825"/>
			<description>Entry N in Bead is required</description>
			<test>containsN == true</test>
			<error>
				<message>Entry N in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="10" testNumber="39826"/>
			<description>Entry N with type Dictionary in Bead shall be indirect</description>
			<test>NHasTypeDictionary != true || isNIndirect == true</test>
			<error>
				<message>Entry N with type Dictionary in Bead is direct</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="8" testNumber="39827"/>
			<description>Entry N in Bead shall have type Dictionary</description>
			<test>containsN == false || NHasTypeDictionary == true</test>
			<error>
				<message>Entry N in Bead is not of type Dictionary</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="6" testNumber="39828"/>
			<description>Entry Type with type Name in Bead shall have value Bead</description>
			<test>TypeHasTypeName != true || TypeNameValue == "Bead"</test>
			<error>
				<message>Entry Type with type Name in Bead has incorrect value %2 instead of Bead</message>
				<arguments>
					<argument>keyName</argument>
					<argument>TypeNameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="8" testNumber="39829"/>
			<description>Entry Type in Bead shall have type Name</description>
			<test>containsType == false || TypeHasTypeName == true</test>
			<error>
				<message>Entry Type in Bead is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="7" testNumber="39830"/>
			<description>Entry R in Bead is required</description>
			<test>containsR == true</test>
			<error>
				<message>Entry R in Bead is missing</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ABead">
			<id specification="ISO_32000_1_1" clause="8" testNumber="39831"/>
			<description>Entry R in Bead shall have type Rectangle</description>
			<test>containsR == false || RHasTypeRectangle == true</test>
			<error>
				<message>Entry R in Bead is not of type Rectangle</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_1" clause="2" testNumber="40370"/>
			<description>Dest0Array shall contain exactly 2 elements</description>
			<test>size == 2</test>
			<error>
				<message>Dest0Array contains %1 element(s) instead of 2</message>
				<arguments>
					<argument>size</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_1" clause="17" testNumber="40371"/>
			<description>Entry 0 with type Dictionary in Dest0Array shall be object PageObject</description>
			<test>entry0HasTypeDictionary != true || entry0_size == 1</test>
			<error>
				<message>Entry 0 with type Dictionary in Dest0Array is not object PageObject</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_1" clause="14" testNumber="40372"/>
			<description>Entry 0 with type Number in Dest0Array shall correspond possible value predicate: fn:Eval(@0 &gt;= 0)</description>
			<test>entry0HasTypeNumber != true || entry0NumberValue &gt;= 0</test>
			<error>
				<message>Entry 0 with type Number in Dest0Array doesn't correspond possible value predicate: fn:Eval(@0 &gt;= 0)</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_1" clause="8" testNumber="40373"/>
			<description>Entry 0 in Dest0Array shall have one of types: Dictionary, Number</description>
			<test>size &lt;= 0 || entry0HasTypeDictionary == true || entry0HasTypeNumber == true</test>
			<error>
				<message>Entry 0 in Dest0Array is not one of types: Dictionary, Number</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_1" clause="6" testNumber="40374"/>
			<description>Entry 1 with type Name in Dest0Array shall have one of values: Fit, FitB</description>
			<test>entry1HasTypeName != true || entry1NameValue == "Fit" || entry1NameValue == "FitB"</test>
			<error>
				<message>Entry 1 with type Name in Dest0Array has incorrect value %2 instead of Fit, FitB</message>
				<arguments>
					<argument>keyName</argument>
					<argument>entry1NameValue</argument>
				</arguments>
			</error>
			<references/>
		</rule>
		<rule object="ADest0Array">
			<id specification="ISO_32000_1_1" clause="8" testNumber="40375"/>
			<description>Entry 1 in Dest0Array shall have type Name</description>
			<test>size &lt;= 1 || entry1HasTypeName == true</test>
			<error>
				<message>Entry 1 in Dest0Array is not of type Name</message>
				<arguments>
					<argument>keyName</argument>
				</arguments>
			</error>
			<references/>
		</rule>
	</rules>
	<variables/>
</profile>
